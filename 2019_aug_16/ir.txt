fn intersecting a0 -> bool
    {7 BBs, 62 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000001
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 2
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C add s32 >|0| 0x00000008<, s32 >|0| 0x0000000B<
    0x0000000D slt s32 >|0| 0x00000005<, s32 >|0| 0x0000000C<
    0x0000000E cbr s32 >|0| 0x0000000D<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 0
    0x00000003 load *s32 >|1| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|1| 0x00000004<
    0x00000006 memb *__unk_type_kind >|1| 0x00000005<, 2
    0x00000007 load *s32 >|1| 0x00000006<
    0x00000008 add s32 >|1| 0x00000003<, s32 >|1| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|1| 0x00000009<, 0
    0x0000000B load *s32 >|1| 0x0000000A<
    0x0000000C sgt s32 >|1| 0x00000008<, s32 >|1| 0x0000000B<
    0x0000000D br |2|
  BASICBLOCK |2|
    0x00000000 phi2 |0| -> bool false, |1| -> s32 >|1| 0x0000000C<
    0x00000001 cbr bool >|2| 0x00000000<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *s32 >|3| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 memb *__unk_type_kind >|3| 0x00000004<, 1
    0x00000006 load *s32 >|3| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000001
    0x00000008 memb *__unk_type_kind >|3| 0x00000007<, 3
    0x00000009 load *s32 >|3| 0x00000008<
    0x0000000A add s32 >|3| 0x00000006<, s32 >|3| 0x00000009<
    0x0000000B slt s32 >|3| 0x00000003<, s32 >|3| 0x0000000A<
    0x0000000C br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool false, |3| -> s32 >|3| 0x0000000B<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|5| 0x00000000<
    0x00000002 memb *__unk_type_kind >|5| 0x00000001<, 1
    0x00000003 load *s32 >|5| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|5| 0x00000004<
    0x00000006 memb *__unk_type_kind >|5| 0x00000005<, 3
    0x00000007 load *s32 >|5| 0x00000006<
    0x00000008 add s32 >|5| 0x00000003<, s32 >|5| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|5| 0x00000009<, 1
    0x0000000B load *s32 >|5| 0x0000000A<
    0x0000000C sgt s32 >|5| 0x00000008<, s32 >|5| 0x0000000B<
    0x0000000D br |6|
  BASICBLOCK |6|
    0x00000000 phi2 |4| -> bool false, |5| -> s32 >|5| 0x0000000C<
    0x00000001 ret bool >|6| 0x00000000<
fn AABB a1 -> __unk_type_kind
    {1 BBs, 25 INSTRs, 5 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000004
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *s32 0x00000002
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000004
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *s32 >|0| 0x0000000D<, s32 >|0| 0x0000000B<
    0x0000000F var *s32 0x00000003
    0x00000010 load *s32 >|0| 0x0000000F<
    0x00000011 var *__unk_type_kind 0x00000004
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 store *s32 >|0| 0x00000012<, s32 >|0| 0x00000010<
    0x00000014 var *__unk_type_kind 0x00000004
    0x00000015 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000014<) void
    0x00000016 var *__unk_type_kind 0x00000004
    0x00000017 load *__unk_type_kind >|0| 0x00000016<
    0x00000018 ret __unk_type_kind >|0| 0x00000017<
fn getAABB a2 -> __unk_type_kind
    {1 BBs, 10 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000003<, s32 >|0| 0x00000007<, s32 8, s32 8) __unk_type_kind
    0x00000009 ret __unk_type_kind >|0| 0x00000008<
fn bullet a3 -> __unk_type_kind
    {1 BBs, 20 INSTRs, 4 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *s32 0x00000002
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000003
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *s32 >|0| 0x0000000D<, s32 >|0| 0x0000000B<
    0x0000000F var *__unk_type_kind 0x00000003
    0x00000010 call aFE "__defer__" (*__unk_type_kind >|0| 0x0000000F<) void
    0x00000011 var *__unk_type_kind 0x00000003
    0x00000012 load *__unk_type_kind >|0| 0x00000011<
    0x00000013 ret __unk_type_kind >|0| 0x00000012<
fn getAABB a4 -> __unk_type_kind
    {1 BBs, 12 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 add s32 >|0| 0x00000003<, s32 32
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 1
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 sub s32 152, s32 64
    0x0000000A call a1 "AABB" (s32 >|0| 0x00000004<, s32 >|0| 0x00000008<, s32 >|0| 0x00000009<, s32 72) __unk_type_kind
    0x0000000B ret __unk_type_kind >|0| 0x0000000A<
fn getAABB a5 -> __unk_type_kind
    {1 BBs, 18 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 add s32 >|0| 0x00000003<, s32 >|0| 0x00000005<
    0x00000007 add s32 >|0| 0x00000006<, s32 32
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *s32 0x00000002
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E add s32 >|0| 0x0000000B<, s32 >|0| 0x0000000D<
    0x0000000F sub s32 152, s32 64
    0x00000010 call a1 "AABB" (s32 >|0| 0x00000007<, s32 >|0| 0x0000000E<, s32 >|0| 0x0000000F<, s32 72) __unk_type_kind
    0x00000011 ret __unk_type_kind >|0| 0x00000010<
fn cannon a6 -> __unk_type_kind
    {1 BBs, 23 INSTRs, 4 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *__unk_type_kind 0x00000003
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 2
    0x0000000C store *s32 >|0| 0x0000000B<, s32 0
    0x0000000D var *s32 0x00000002
    0x0000000E load *s32 >|0| 0x0000000D<
    0x0000000F var *__unk_type_kind 0x00000003
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 3
    0x00000011 store *s32 >|0| 0x00000010<, s32 >|0| 0x0000000E<
    0x00000012 var *__unk_type_kind 0x00000003
    0x00000013 call alE "__defer__" (*__unk_type_kind >|0| 0x00000012<) void
    0x00000014 var *__unk_type_kind 0x00000003
    0x00000015 load *__unk_type_kind >|0| 0x00000014<
    0x00000016 ret __unk_type_kind >|0| 0x00000015<
fn getAABB a7 -> __unk_type_kind
    {1 BBs, 10 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000003<, s32 >|0| 0x00000007<, s32 32, s32 32) __unk_type_kind
    0x00000009 ret __unk_type_kind >|0| 0x00000008<
fn cannonBall a8 -> __unk_type_kind
    {1 BBs, 20 INSTRs, 4 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *s32 0x00000002
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000003
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *s32 >|0| 0x0000000D<, s32 >|0| 0x0000000B<
    0x0000000F var *__unk_type_kind 0x00000003
    0x00000010 call amE "__defer__" (*__unk_type_kind >|0| 0x0000000F<) void
    0x00000011 var *__unk_type_kind 0x00000003
    0x00000012 load *__unk_type_kind >|0| 0x00000011<
    0x00000013 ret __unk_type_kind >|0| 0x00000012<
fn controlScheme a9 -> __unk_type_kind
    {1 BBs, 45 INSTRs, 9 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 s32]
    [0x00000006 s32]
    [0x00000007 s32]
    [0x00000008 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000008
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000008
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *s32 0x00000002
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000008
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *s32 >|0| 0x0000000D<, s32 >|0| 0x0000000B<
    0x0000000F var *s32 0x00000003
    0x00000010 load *s32 >|0| 0x0000000F<
    0x00000011 var *__unk_type_kind 0x00000008
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 store *s32 >|0| 0x00000012<, s32 >|0| 0x00000010<
    0x00000014 var *s32 0x00000004
    0x00000015 load *s32 >|0| 0x00000014<
    0x00000016 var *__unk_type_kind 0x00000008
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 4
    0x00000018 store *s32 >|0| 0x00000017<, s32 >|0| 0x00000015<
    0x00000019 var *s32 0x00000005
    0x0000001A load *s32 >|0| 0x00000019<
    0x0000001B var *__unk_type_kind 0x00000008
    0x0000001C memb *__unk_type_kind >|0| 0x0000001B<, 5
    0x0000001D store *s32 >|0| 0x0000001C<, s32 >|0| 0x0000001A<
    0x0000001E var *s32 0x00000006
    0x0000001F load *s32 >|0| 0x0000001E<
    0x00000020 var *__unk_type_kind 0x00000008
    0x00000021 memb *__unk_type_kind >|0| 0x00000020<, 6
    0x00000022 store *s32 >|0| 0x00000021<, s32 >|0| 0x0000001F<
    0x00000023 var *s32 0x00000007
    0x00000024 load *s32 >|0| 0x00000023<
    0x00000025 var *__unk_type_kind 0x00000008
    0x00000026 memb *__unk_type_kind >|0| 0x00000025<, 7
    0x00000027 store *s32 >|0| 0x00000026<, s32 >|0| 0x00000024<
    0x00000028 var *__unk_type_kind 0x00000008
    0x00000029 call aqG "__defer__" (*__unk_type_kind >|0| 0x00000028<) void
    0x0000002A var *__unk_type_kind 0x00000008
    0x0000002B load *__unk_type_kind >|0| 0x0000002A<
    0x0000002C ret __unk_type_kind >|0| 0x0000002B<
fn __equals__ aA -> bool
    {17 BBs, 73 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *s32 >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 neq s32 >|0| 0x00000002<, s32 >|0| 0x00000005<
    0x00000007 cbr s32 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret bool false
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 1
    0x00000002 load *s32 >|2| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|2| 0x00000003<, 1
    0x00000005 load *s32 >|2| 0x00000004<
    0x00000006 neq s32 >|2| 0x00000002<, s32 >|2| 0x00000005<
    0x00000007 cbr s32 >|2| 0x00000006<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 ret bool false
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 2
    0x00000002 load *s32 >|4| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|4| 0x00000003<, 2
    0x00000005 load *s32 >|4| 0x00000004<
    0x00000006 neq s32 >|4| 0x00000002<, s32 >|4| 0x00000005<
    0x00000007 cbr s32 >|4| 0x00000006<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 ret bool false
  BASICBLOCK |6|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|6| 0x00000000<, 3
    0x00000002 load *s32 >|6| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|6| 0x00000003<, 3
    0x00000005 load *s32 >|6| 0x00000004<
    0x00000006 neq s32 >|6| 0x00000002<, s32 >|6| 0x00000005<
    0x00000007 cbr s32 >|6| 0x00000006<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 ret bool false
  BASICBLOCK |8|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|8| 0x00000000<, 4
    0x00000002 load *s32 >|8| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|8| 0x00000003<, 4
    0x00000005 load *s32 >|8| 0x00000004<
    0x00000006 neq s32 >|8| 0x00000002<, s32 >|8| 0x00000005<
    0x00000007 cbr s32 >|8| 0x00000006<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 ret bool false
  BASICBLOCK |10|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|10| 0x00000000<, 5
    0x00000002 load *s32 >|10| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|10| 0x00000003<, 5
    0x00000005 load *s32 >|10| 0x00000004<
    0x00000006 neq s32 >|10| 0x00000002<, s32 >|10| 0x00000005<
    0x00000007 cbr s32 >|10| 0x00000006<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 ret bool false
  BASICBLOCK |12|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|12| 0x00000000<, 6
    0x00000002 load *s32 >|12| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|12| 0x00000003<, 6
    0x00000005 load *s32 >|12| 0x00000004<
    0x00000006 neq s32 >|12| 0x00000002<, s32 >|12| 0x00000005<
    0x00000007 cbr s32 >|12| 0x00000006<, |13|, |14|
  BASICBLOCK |13|
    0x00000000 ret bool false
  BASICBLOCK |14|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|14| 0x00000000<, 7
    0x00000002 load *s32 >|14| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|14| 0x00000003<, 7
    0x00000005 load *s32 >|14| 0x00000004<
    0x00000006 neq s32 >|14| 0x00000002<, s32 >|14| 0x00000005<
    0x00000007 cbr s32 >|14| 0x00000006<, |15|, |16|
  BASICBLOCK |15|
    0x00000000 ret bool false
  BASICBLOCK |16|
    0x00000000 ret bool true
fn dladdr aB -> s32
fn dlclose aC -> s32
fn dlerror aD -> *u8
fn dlopen aE -> *s8
fn dlsym aF -> *s8
fn glAccum aG -> void
fn glAlphaFunc aH -> void
fn glAreTexturesResident aI -> bool
fn glArrayElement aJ -> void
fn glBegin aK -> void
fn glBindTexture aL -> void
fn glBitmap aM -> void
fn glBlendFunc aN -> void
fn glCallList aO -> void
fn glCallLists aP -> void
fn glClear aQ -> void
fn glClearAccum aR -> void
fn glClearColor aS -> void
fn glClearDepth aT -> void
fn glClearIndex aU -> void
fn glClearStencil aV -> void
fn glClipPlane aW -> void
fn glColor3b aX -> void
fn glColor3bv aY -> void
fn glColor3d aZ -> void
fn glColor3dv aa -> void
fn glColor3f ab -> void
fn glColor3fv ac -> void
fn glColor3i ad -> void
fn glColor3iv ae -> void
fn glColor3s af -> void
fn glColor3sv ag -> void
fn glColor3ub ah -> void
fn glColor3ubv ai -> void
fn glColor3ui aj -> void
fn glColor3uiv ak -> void
fn glColor3us al -> void
fn glColor3usv am -> void
fn glColor4b an -> void
fn glColor4bv ao -> void
fn glColor4d ap -> void
fn glColor4dv aq -> void
fn glColor4f ar -> void
fn glColor4fv as -> void
fn glColor4i at -> void
fn glColor4iv au -> void
fn glColor4s av -> void
fn glColor4sv aw -> void
fn glColor4ub ax -> void
fn glColor4ubv ay -> void
fn glColor4ui az -> void
fn glColor4uiv a01 -> void
fn glColor4us a11 -> void
fn glColor4usv a21 -> void
fn glColorMask a31 -> void
fn glColorMaterial a41 -> void
fn glColorPointer a51 -> void
fn glCopyPixels a61 -> void
fn glCopyTexImage1D a71 -> void
fn glCopyTexImage2D a81 -> void
fn glCopyTexSubImage1D a91 -> void
fn glCopyTexSubImage2D aA1 -> void
fn glCullFace aB1 -> void
fn glDeleteLists aC1 -> void
fn glDeleteTextures aD1 -> void
fn glDepthFunc aE1 -> void
fn glDepthMask aF1 -> void
fn glDepthRange aG1 -> void
fn glDisable aH1 -> void
fn glDisableClientState aI1 -> void
fn glDrawArrays aJ1 -> void
fn glDrawBuffer aK1 -> void
fn glDrawElements aL1 -> void
fn glDrawPixels aM1 -> void
fn glEdgeFlag aN1 -> void
fn glEdgeFlagPointer aO1 -> void
fn glEdgeFlagv aP1 -> void
fn glEnable aQ1 -> void
fn glEnableClientState aR1 -> void
fn glEnd aS1 -> void
fn glEndList aT1 -> void
fn glEvalCoord1d aU1 -> void
fn glEvalCoord1dv aV1 -> void
fn glEvalCoord1f aW1 -> void
fn glEvalCoord1fv aX1 -> void
fn glEvalCoord2d aY1 -> void
fn glEvalCoord2dv aZ1 -> void
fn glEvalCoord2f aa1 -> void
fn glEvalCoord2fv ab1 -> void
fn glEvalMesh1 ac1 -> void
fn glEvalMesh2 ad1 -> void
fn glEvalPoint1 ae1 -> void
fn glEvalPoint2 af1 -> void
fn glFeedbackBuffer ag1 -> void
fn glFinish ah1 -> void
fn glFlush ai1 -> void
fn glFogf aj1 -> void
fn glFogfv ak1 -> void
fn glFogi al1 -> void
fn glFogiv am1 -> void
fn glFrontFace an1 -> void
fn glFrustum ao1 -> void
fn glGenLists ap1 -> u32
fn glGenTextures aq1 -> void
fn glGetBooleanv ar1 -> void
fn glGetClipPlane as1 -> void
fn glGetDoublev at1 -> void
fn glGetError au1 -> u32
fn glGetFloatv av1 -> void
fn glGetIntegerv aw1 -> void
fn glGetLightfv ax1 -> void
fn glGetLightiv ay1 -> void
fn glGetMapdv az1 -> void
fn glGetMapfv a02 -> void
fn glGetMapiv a12 -> void
fn glGetMaterialfv a22 -> void
fn glGetMaterialiv a32 -> void
fn glGetPixelMapfv a42 -> void
fn glGetPixelMapuiv a52 -> void
fn glGetPixelMapusv a62 -> void
fn glGetPointerv a72 -> void
fn glGetPolygonStipple a82 -> void
fn glGetString a92 -> *u8
fn glGetTexEnvfv aA2 -> void
fn glGetTexEnviv aB2 -> void
fn glGetTexGendv aC2 -> void
fn glGetTexGenfv aD2 -> void
fn glGetTexGeniv aE2 -> void
fn glGetTexImage aF2 -> void
fn glGetTexLevelParameterfv aG2 -> void
fn glGetTexLevelParameteriv aH2 -> void
fn glGetTexParameterfv aI2 -> void
fn glGetTexParameteriv aJ2 -> void
fn glHint aK2 -> void
fn glIndexMask aL2 -> void
fn glIndexPointer aM2 -> void
fn glIndexd aN2 -> void
fn glIndexdv aO2 -> void
fn glIndexf aP2 -> void
fn glIndexfv aQ2 -> void
fn glIndexi aR2 -> void
fn glIndexiv aS2 -> void
fn glIndexs aT2 -> void
fn glIndexsv aU2 -> void
fn glIndexub aV2 -> void
fn glIndexubv aW2 -> void
fn glInitNames aX2 -> void
fn glInterleavedArrays aY2 -> void
fn glIsEnabled aZ2 -> bool
fn glIsList aa2 -> bool
fn glIsTexture ab2 -> bool
fn glLightModelf ac2 -> void
fn glLightModelfv ad2 -> void
fn glLightModeli ae2 -> void
fn glLightModeliv af2 -> void
fn glLightf ag2 -> void
fn glLightfv ah2 -> void
fn glLighti ai2 -> void
fn glLightiv aj2 -> void
fn glLineStipple ak2 -> void
fn glLineWidth al2 -> void
fn glListBase am2 -> void
fn glLoadIdentity an2 -> void
fn glLoadMatrixd ao2 -> void
fn glLoadMatrixf ap2 -> void
fn glLoadName aq2 -> void
fn glLogicOp ar2 -> void
fn glMap1d as2 -> void
fn glMap1f at2 -> void
fn glMap2d au2 -> void
fn glMap2f av2 -> void
fn glMapGrid1d aw2 -> void
fn glMapGrid1f ax2 -> void
fn glMapGrid2d ay2 -> void
fn glMapGrid2f az2 -> void
fn glMaterialf a03 -> void
fn glMaterialfv a13 -> void
fn glMateriali a23 -> void
fn glMaterialiv a33 -> void
fn glMatrixMode a43 -> void
fn glMultMatrixd a53 -> void
fn glMultMatrixf a63 -> void
fn glNewList a73 -> void
fn glNormal3b a83 -> void
fn glNormal3bv a93 -> void
fn glNormal3d aA3 -> void
fn glNormal3dv aB3 -> void
fn glNormal3f aC3 -> void
fn glNormal3fv aD3 -> void
fn glNormal3i aE3 -> void
fn glNormal3iv aF3 -> void
fn glNormal3s aG3 -> void
fn glNormal3sv aH3 -> void
fn glNormalPointer aI3 -> void
fn glOrtho aJ3 -> void
fn glPassThrough aK3 -> void
fn glPixelMapfv aL3 -> void
fn glPixelMapuiv aM3 -> void
fn glPixelMapusv aN3 -> void
fn glPixelStoref aO3 -> void
fn glPixelStorei aP3 -> void
fn glPixelTransferf aQ3 -> void
fn glPixelTransferi aR3 -> void
fn glPixelZoom aS3 -> void
fn glPointSize aT3 -> void
fn glPolygonMode aU3 -> void
fn glPolygonOffset aV3 -> void
fn glPolygonStipple aW3 -> void
fn glPopAttrib aX3 -> void
fn glPopClientAttrib aY3 -> void
fn glPopMatrix aZ3 -> void
fn glPopName aa3 -> void
fn glPrioritizeTextures ab3 -> void
fn glPushAttrib ac3 -> void
fn glPushClientAttrib ad3 -> void
fn glPushMatrix ae3 -> void
fn glPushName af3 -> void
fn glRasterPos2d ag3 -> void
fn glRasterPos2dv ah3 -> void
fn glRasterPos2f ai3 -> void
fn glRasterPos2fv aj3 -> void
fn glRasterPos2i ak3 -> void
fn glRasterPos2iv al3 -> void
fn glRasterPos2s am3 -> void
fn glRasterPos2sv an3 -> void
fn glRasterPos3d ao3 -> void
fn glRasterPos3dv ap3 -> void
fn glRasterPos3f aq3 -> void
fn glRasterPos3fv ar3 -> void
fn glRasterPos3i as3 -> void
fn glRasterPos3iv at3 -> void
fn glRasterPos3s au3 -> void
fn glRasterPos3sv av3 -> void
fn glRasterPos4d aw3 -> void
fn glRasterPos4dv ax3 -> void
fn glRasterPos4f ay3 -> void
fn glRasterPos4fv az3 -> void
fn glRasterPos4i a04 -> void
fn glRasterPos4iv a14 -> void
fn glRasterPos4s a24 -> void
fn glRasterPos4sv a34 -> void
fn glReadBuffer a44 -> void
fn glReadPixels a54 -> void
fn glRectd a64 -> void
fn glRectdv a74 -> void
fn glRectf a84 -> void
fn glRectfv a94 -> void
fn glRecti aA4 -> void
fn glRectiv aB4 -> void
fn glRects aC4 -> void
fn glRectsv aD4 -> void
fn glRenderMode aE4 -> s32
fn glRotated aF4 -> void
fn glRotatef aG4 -> void
fn glScaled aH4 -> void
fn glScalef aI4 -> void
fn glScissor aJ4 -> void
fn glSelectBuffer aK4 -> void
fn glShadeModel aL4 -> void
fn glStencilFunc aM4 -> void
fn glStencilMask aN4 -> void
fn glStencilOp aO4 -> void
fn glTexCoord1d aP4 -> void
fn glTexCoord1dv aQ4 -> void
fn glTexCoord1f aR4 -> void
fn glTexCoord1fv aS4 -> void
fn glTexCoord1i aT4 -> void
fn glTexCoord1iv aU4 -> void
fn glTexCoord1s aV4 -> void
fn glTexCoord1sv aW4 -> void
fn glTexCoord2d aX4 -> void
fn glTexCoord2dv aY4 -> void
fn glTexCoord2f aZ4 -> void
fn glTexCoord2fv aa4 -> void
fn glTexCoord2i ab4 -> void
fn glTexCoord2iv ac4 -> void
fn glTexCoord2s ad4 -> void
fn glTexCoord2sv ae4 -> void
fn glTexCoord3d af4 -> void
fn glTexCoord3dv ag4 -> void
fn glTexCoord3f ah4 -> void
fn glTexCoord3fv ai4 -> void
fn glTexCoord3i aj4 -> void
fn glTexCoord3iv ak4 -> void
fn glTexCoord3s al4 -> void
fn glTexCoord3sv am4 -> void
fn glTexCoord4d an4 -> void
fn glTexCoord4dv ao4 -> void
fn glTexCoord4f ap4 -> void
fn glTexCoord4fv aq4 -> void
fn glTexCoord4i ar4 -> void
fn glTexCoord4iv as4 -> void
fn glTexCoord4s at4 -> void
fn glTexCoord4sv au4 -> void
fn glTexCoordPointer av4 -> void
fn glTexEnvf aw4 -> void
fn glTexEnvfv ax4 -> void
fn glTexEnvi ay4 -> void
fn glTexEnviv az4 -> void
fn glTexGend a05 -> void
fn glTexGendv a15 -> void
fn glTexGenf a25 -> void
fn glTexGenfv a35 -> void
fn glTexGeni a45 -> void
fn glTexGeniv a55 -> void
fn glTexImage1D a65 -> void
fn glTexImage2D a75 -> void
fn glTexParameterf a85 -> void
fn glTexParameterfv a95 -> void
fn glTexParameteri aA5 -> void
fn glTexParameteriv aB5 -> void
fn glTexSubImage1D aC5 -> void
fn glTexSubImage2D aD5 -> void
fn glTranslated aE5 -> void
fn glTranslatef aF5 -> void
fn glVertex2d aG5 -> void
fn glVertex2dv aH5 -> void
fn glVertex2f aI5 -> void
fn glVertex2fv aJ5 -> void
fn glVertex2i aK5 -> void
fn glVertex2iv aL5 -> void
fn glVertex2s aM5 -> void
fn glVertex2sv aN5 -> void
fn glVertex3d aO5 -> void
fn glVertex3dv aP5 -> void
fn glVertex3f aQ5 -> void
fn glVertex3fv aR5 -> void
fn glVertex3i aS5 -> void
fn glVertex3iv aT5 -> void
fn glVertex3s aU5 -> void
fn glVertex3sv aV5 -> void
fn glVertex4d aW5 -> void
fn glVertex4dv aX5 -> void
fn glVertex4f aY5 -> void
fn glVertex4fv aZ5 -> void
fn glVertex4i aa5 -> void
fn glVertex4iv ab5 -> void
fn glVertex4s ac5 -> void
fn glVertex4sv ad5 -> void
fn glVertexPointer ae5 -> void
fn glViewport af5 -> void
fn openglGetProcAddress ag5 -> *s8
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *u8]
  BASICBLOCK |0|
    0x00000000 gvar **s8 0x000008C1
    0x00000001 load **s8 >|0| 0x00000000<
    0x00000002 var **u8 0x00000000
    0x00000003 load **u8 >|0| 0x00000002<
    0x00000004 call aF "dlsym" (*s8 >|0| 0x00000001<, *u8 >|0| 0x00000003<) *s8
    0x00000005 ret *s8 >|0| 0x00000004<
fn openglInit ah5 -> void
    {3 BBs, 8956 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aE "dlopen" (cstroflen 68 "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", s32 1) *s8
    0x00000001 gvar **s8 0x000008C1
    0x00000002 store **s8 >|0| 0x00000001<, *s8 >|0| 0x00000000<
    0x00000003 gvar **s8 0x000008C1
    0x00000004 load **s8 >|0| 0x00000003<
    0x00000005 inz *s8 >|0| 0x00000004<
    0x00000006 cbr bool >|0| 0x00000005<, |2|, |1|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 call ag5 "openglGetProcAddress" (cstroflen 19 "glActiveProgramEXT") *s8
    0x00000001 gvar *__funcptr_type_kind 0x00000005
    0x00000002 bc *s8 >|2| 0x00000000< to __funcptr_type_kind
    0x00000003 store *__funcptr_type_kind >|2| 0x00000001<, __funcptr_type_kind >|2| 0x00000002<
    0x00000004 call ag5 "openglGetProcAddress" (cstroflen 22 "glActiveShaderProgram") *s8
    0x00000005 gvar *__funcptr_type_kind 0x00000006
    0x00000006 bc *s8 >|2| 0x00000004< to __funcptr_type_kind
    0x00000007 store *__funcptr_type_kind >|2| 0x00000005<, __funcptr_type_kind >|2| 0x00000006<
    0x00000008 call ag5 "openglGetProcAddress" (cstroflen 23 "glActiveStencilFaceEXT") *s8
    0x00000009 gvar *__funcptr_type_kind 0x00000007
    0x0000000A bc *s8 >|2| 0x00000008< to __funcptr_type_kind
    0x0000000B store *__funcptr_type_kind >|2| 0x00000009<, __funcptr_type_kind >|2| 0x0000000A<
    0x0000000C call ag5 "openglGetProcAddress" (cstroflen 19 "glActiveTextureARB") *s8
    0x0000000D gvar *__funcptr_type_kind 0x00000008
    0x0000000E bc *s8 >|2| 0x0000000C< to __funcptr_type_kind
    0x0000000F store *__funcptr_type_kind >|2| 0x0000000D<, __funcptr_type_kind >|2| 0x0000000E<
    0x00000010 call ag5 "openglGetProcAddress" (cstroflen 16 "glActiveTexture") *s8
    0x00000011 gvar *__funcptr_type_kind 0x00000009
    0x00000012 bc *s8 >|2| 0x00000010< to __funcptr_type_kind
    0x00000013 store *__funcptr_type_kind >|2| 0x00000011<, __funcptr_type_kind >|2| 0x00000012<
    0x00000014 call ag5 "openglGetProcAddress" (cstroflen 18 "glActiveVaryingNV") *s8
    0x00000015 gvar *__funcptr_type_kind 0x0000000A
    0x00000016 bc *s8 >|2| 0x00000014< to __funcptr_type_kind
    0x00000017 store *__funcptr_type_kind >|2| 0x00000015<, __funcptr_type_kind >|2| 0x00000016<
    0x00000018 call ag5 "openglGetProcAddress" (cstroflen 21 "glAddSwapHintRectWIN") *s8
    0x00000019 gvar *__funcptr_type_kind 0x0000000B
    0x0000001A bc *s8 >|2| 0x00000018< to __funcptr_type_kind
    0x0000001B store *__funcptr_type_kind >|2| 0x00000019<, __funcptr_type_kind >|2| 0x0000001A<
    0x0000001C call ag5 "openglGetProcAddress" (cstroflen 22 "glAlphaFragmentOp1ATI") *s8
    0x0000001D gvar *__funcptr_type_kind 0x0000000C
    0x0000001E bc *s8 >|2| 0x0000001C< to __funcptr_type_kind
    0x0000001F store *__funcptr_type_kind >|2| 0x0000001D<, __funcptr_type_kind >|2| 0x0000001E<
    0x00000020 call ag5 "openglGetProcAddress" (cstroflen 22 "glAlphaFragmentOp2ATI") *s8
    0x00000021 gvar *__funcptr_type_kind 0x0000000D
    0x00000022 bc *s8 >|2| 0x00000020< to __funcptr_type_kind
    0x00000023 store *__funcptr_type_kind >|2| 0x00000021<, __funcptr_type_kind >|2| 0x00000022<
    0x00000024 call ag5 "openglGetProcAddress" (cstroflen 22 "glAlphaFragmentOp3ATI") *s8
    0x00000025 gvar *__funcptr_type_kind 0x0000000E
    0x00000026 bc *s8 >|2| 0x00000024< to __funcptr_type_kind
    0x00000027 store *__funcptr_type_kind >|2| 0x00000025<, __funcptr_type_kind >|2| 0x00000026<
    0x00000028 call ag5 "openglGetProcAddress" (cstroflen 13 "glAlphaFuncx") *s8
    0x00000029 gvar *__funcptr_type_kind 0x0000000F
    0x0000002A bc *s8 >|2| 0x00000028< to __funcptr_type_kind
    0x0000002B store *__funcptr_type_kind >|2| 0x00000029<, __funcptr_type_kind >|2| 0x0000002A<
    0x0000002C call ag5 "openglGetProcAddress" (cstroflen 18 "glApplyTextureEXT") *s8
    0x0000002D gvar *__funcptr_type_kind 0x00000010
    0x0000002E bc *s8 >|2| 0x0000002C< to __funcptr_type_kind
    0x0000002F store *__funcptr_type_kind >|2| 0x0000002D<, __funcptr_type_kind >|2| 0x0000002E<
    0x00000030 call ag5 "openglGetProcAddress" (cstroflen 18 "glArrayElementEXT") *s8
    0x00000031 gvar *__funcptr_type_kind 0x00000011
    0x00000032 bc *s8 >|2| 0x00000030< to __funcptr_type_kind
    0x00000033 store *__funcptr_type_kind >|2| 0x00000031<, __funcptr_type_kind >|2| 0x00000032<
    0x00000034 call ag5 "openglGetProcAddress" (cstroflen 17 "glArrayObjectATI") *s8
    0x00000035 gvar *__funcptr_type_kind 0x00000012
    0x00000036 bc *s8 >|2| 0x00000034< to __funcptr_type_kind
    0x00000037 store *__funcptr_type_kind >|2| 0x00000035<, __funcptr_type_kind >|2| 0x00000036<
    0x00000038 call ag5 "openglGetProcAddress" (cstroflen 18 "glAsyncMarkerSGIX") *s8
    0x00000039 gvar *__funcptr_type_kind 0x00000013
    0x0000003A bc *s8 >|2| 0x00000038< to __funcptr_type_kind
    0x0000003B store *__funcptr_type_kind >|2| 0x00000039<, __funcptr_type_kind >|2| 0x0000003A<
    0x0000003C call ag5 "openglGetProcAddress" (cstroflen 18 "glAttachObjectARB") *s8
    0x0000003D gvar *__funcptr_type_kind 0x00000014
    0x0000003E bc *s8 >|2| 0x0000003C< to __funcptr_type_kind
    0x0000003F store *__funcptr_type_kind >|2| 0x0000003D<, __funcptr_type_kind >|2| 0x0000003E<
    0x00000040 call ag5 "openglGetProcAddress" (cstroflen 15 "glAttachShader") *s8
    0x00000041 gvar *__funcptr_type_kind 0x00000015
    0x00000042 bc *s8 >|2| 0x00000040< to __funcptr_type_kind
    0x00000043 store *__funcptr_type_kind >|2| 0x00000041<, __funcptr_type_kind >|2| 0x00000042<
    0x00000044 call ag5 "openglGetProcAddress" (cstroflen 27 "glBeginConditionalRenderNV") *s8
    0x00000045 gvar *__funcptr_type_kind 0x00000016
    0x00000046 bc *s8 >|2| 0x00000044< to __funcptr_type_kind
    0x00000047 store *__funcptr_type_kind >|2| 0x00000045<, __funcptr_type_kind >|2| 0x00000046<
    0x00000048 call ag5 "openglGetProcAddress" (cstroflen 28 "glBeginConditionalRenderNVX") *s8
    0x00000049 gvar *__funcptr_type_kind 0x00000017
    0x0000004A bc *s8 >|2| 0x00000048< to __funcptr_type_kind
    0x0000004B store *__funcptr_type_kind >|2| 0x00000049<, __funcptr_type_kind >|2| 0x0000004A<
    0x0000004C call ag5 "openglGetProcAddress" (cstroflen 25 "glBeginConditionalRender") *s8
    0x0000004D gvar *__funcptr_type_kind 0x00000018
    0x0000004E bc *s8 >|2| 0x0000004C< to __funcptr_type_kind
    0x0000004F store *__funcptr_type_kind >|2| 0x0000004D<, __funcptr_type_kind >|2| 0x0000004E<
    0x00000050 call ag5 "openglGetProcAddress" (cstroflen 25 "glBeginFragmentShaderATI") *s8
    0x00000051 gvar *__funcptr_type_kind 0x00000019
    0x00000052 bc *s8 >|2| 0x00000050< to __funcptr_type_kind
    0x00000053 store *__funcptr_type_kind >|2| 0x00000051<, __funcptr_type_kind >|2| 0x00000052<
    0x00000054 call ag5 "openglGetProcAddress" (cstroflen 24 "glBeginOcclusionQueryNV") *s8
    0x00000055 gvar *__funcptr_type_kind 0x0000001A
    0x00000056 bc *s8 >|2| 0x00000054< to __funcptr_type_kind
    0x00000057 store *__funcptr_type_kind >|2| 0x00000055<, __funcptr_type_kind >|2| 0x00000056<
    0x00000058 call ag5 "openglGetProcAddress" (cstroflen 22 "glBeginPerfMonitorAMD") *s8
    0x00000059 gvar *__funcptr_type_kind 0x0000001B
    0x0000005A bc *s8 >|2| 0x00000058< to __funcptr_type_kind
    0x0000005B store *__funcptr_type_kind >|2| 0x00000059<, __funcptr_type_kind >|2| 0x0000005A<
    0x0000005C call ag5 "openglGetProcAddress" (cstroflen 22 "glBeginPerfQueryINTEL") *s8
    0x0000005D gvar *__funcptr_type_kind 0x0000001C
    0x0000005E bc *s8 >|2| 0x0000005C< to __funcptr_type_kind
    0x0000005F store *__funcptr_type_kind >|2| 0x0000005D<, __funcptr_type_kind >|2| 0x0000005E<
    0x00000060 call ag5 "openglGetProcAddress" (cstroflen 18 "glBeginQueryANGLE") *s8
    0x00000061 gvar *__funcptr_type_kind 0x0000001D
    0x00000062 bc *s8 >|2| 0x00000060< to __funcptr_type_kind
    0x00000063 store *__funcptr_type_kind >|2| 0x00000061<, __funcptr_type_kind >|2| 0x00000062<
    0x00000064 call ag5 "openglGetProcAddress" (cstroflen 16 "glBeginQueryARB") *s8
    0x00000065 gvar *__funcptr_type_kind 0x0000001E
    0x00000066 bc *s8 >|2| 0x00000064< to __funcptr_type_kind
    0x00000067 store *__funcptr_type_kind >|2| 0x00000065<, __funcptr_type_kind >|2| 0x00000066<
    0x00000068 call ag5 "openglGetProcAddress" (cstroflen 20 "glBeginQueryIndexed") *s8
    0x00000069 gvar *__funcptr_type_kind 0x0000001F
    0x0000006A bc *s8 >|2| 0x00000068< to __funcptr_type_kind
    0x0000006B store *__funcptr_type_kind >|2| 0x00000069<, __funcptr_type_kind >|2| 0x0000006A<
    0x0000006C call ag5 "openglGetProcAddress" (cstroflen 13 "glBeginQuery") *s8
    0x0000006D gvar *__funcptr_type_kind 0x00000020
    0x0000006E bc *s8 >|2| 0x0000006C< to __funcptr_type_kind
    0x0000006F store *__funcptr_type_kind >|2| 0x0000006D<, __funcptr_type_kind >|2| 0x0000006E<
    0x00000070 call ag5 "openglGetProcAddress" (cstroflen 16 "glBeginSceneEXT") *s8
    0x00000071 gvar *__funcptr_type_kind 0x00000021
    0x00000072 bc *s8 >|2| 0x00000070< to __funcptr_type_kind
    0x00000073 store *__funcptr_type_kind >|2| 0x00000071<, __funcptr_type_kind >|2| 0x00000072<
    0x00000074 call ag5 "openglGetProcAddress" (cstroflen 28 "glBeginTransformFeedbackEXT") *s8
    0x00000075 gvar *__funcptr_type_kind 0x00000022
    0x00000076 bc *s8 >|2| 0x00000074< to __funcptr_type_kind
    0x00000077 store *__funcptr_type_kind >|2| 0x00000075<, __funcptr_type_kind >|2| 0x00000076<
    0x00000078 call ag5 "openglGetProcAddress" (cstroflen 27 "glBeginTransformFeedbackNV") *s8
    0x00000079 gvar *__funcptr_type_kind 0x00000023
    0x0000007A bc *s8 >|2| 0x00000078< to __funcptr_type_kind
    0x0000007B store *__funcptr_type_kind >|2| 0x00000079<, __funcptr_type_kind >|2| 0x0000007A<
    0x0000007C call ag5 "openglGetProcAddress" (cstroflen 25 "glBeginTransformFeedback") *s8
    0x0000007D gvar *__funcptr_type_kind 0x00000024
    0x0000007E bc *s8 >|2| 0x0000007C< to __funcptr_type_kind
    0x0000007F store *__funcptr_type_kind >|2| 0x0000007D<, __funcptr_type_kind >|2| 0x0000007E<
    0x00000080 call ag5 "openglGetProcAddress" (cstroflen 23 "glBeginVertexShaderEXT") *s8
    0x00000081 gvar *__funcptr_type_kind 0x00000025
    0x00000082 bc *s8 >|2| 0x00000080< to __funcptr_type_kind
    0x00000083 store *__funcptr_type_kind >|2| 0x00000081<, __funcptr_type_kind >|2| 0x00000082<
    0x00000084 call ag5 "openglGetProcAddress" (cstroflen 22 "glBeginVideoCaptureNV") *s8
    0x00000085 gvar *__funcptr_type_kind 0x00000026
    0x00000086 bc *s8 >|2| 0x00000084< to __funcptr_type_kind
    0x00000087 store *__funcptr_type_kind >|2| 0x00000085<, __funcptr_type_kind >|2| 0x00000086<
    0x00000088 call ag5 "openglGetProcAddress" (cstroflen 24 "glBindAttribLocationARB") *s8
    0x00000089 gvar *__funcptr_type_kind 0x00000027
    0x0000008A bc *s8 >|2| 0x00000088< to __funcptr_type_kind
    0x0000008B store *__funcptr_type_kind >|2| 0x00000089<, __funcptr_type_kind >|2| 0x0000008A<
    0x0000008C call ag5 "openglGetProcAddress" (cstroflen 21 "glBindAttribLocation") *s8
    0x0000008D gvar *__funcptr_type_kind 0x00000028
    0x0000008E bc *s8 >|2| 0x0000008C< to __funcptr_type_kind
    0x0000008F store *__funcptr_type_kind >|2| 0x0000008D<, __funcptr_type_kind >|2| 0x0000008E<
    0x00000090 call ag5 "openglGetProcAddress" (cstroflen 16 "glBindBufferARB") *s8
    0x00000091 gvar *__funcptr_type_kind 0x00000029
    0x00000092 bc *s8 >|2| 0x00000090< to __funcptr_type_kind
    0x00000093 store *__funcptr_type_kind >|2| 0x00000091<, __funcptr_type_kind >|2| 0x00000092<
    0x00000094 call ag5 "openglGetProcAddress" (cstroflen 20 "glBindBufferBaseEXT") *s8
    0x00000095 gvar *__funcptr_type_kind 0x0000002A
    0x00000096 bc *s8 >|2| 0x00000094< to __funcptr_type_kind
    0x00000097 store *__funcptr_type_kind >|2| 0x00000095<, __funcptr_type_kind >|2| 0x00000096<
    0x00000098 call ag5 "openglGetProcAddress" (cstroflen 19 "glBindBufferBaseNV") *s8
    0x00000099 gvar *__funcptr_type_kind 0x0000002B
    0x0000009A bc *s8 >|2| 0x00000098< to __funcptr_type_kind
    0x0000009B store *__funcptr_type_kind >|2| 0x00000099<, __funcptr_type_kind >|2| 0x0000009A<
    0x0000009C call ag5 "openglGetProcAddress" (cstroflen 17 "glBindBufferBase") *s8
    0x0000009D gvar *__funcptr_type_kind 0x0000002C
    0x0000009E bc *s8 >|2| 0x0000009C< to __funcptr_type_kind
    0x0000009F store *__funcptr_type_kind >|2| 0x0000009D<, __funcptr_type_kind >|2| 0x0000009E<
    0x000000A0 call ag5 "openglGetProcAddress" (cstroflen 22 "glBindBufferOffsetEXT") *s8
    0x000000A1 gvar *__funcptr_type_kind 0x0000002D
    0x000000A2 bc *s8 >|2| 0x000000A0< to __funcptr_type_kind
    0x000000A3 store *__funcptr_type_kind >|2| 0x000000A1<, __funcptr_type_kind >|2| 0x000000A2<
    0x000000A4 call ag5 "openglGetProcAddress" (cstroflen 21 "glBindBufferOffsetNV") *s8
    0x000000A5 gvar *__funcptr_type_kind 0x0000002E
    0x000000A6 bc *s8 >|2| 0x000000A4< to __funcptr_type_kind
    0x000000A7 store *__funcptr_type_kind >|2| 0x000000A5<, __funcptr_type_kind >|2| 0x000000A6<
    0x000000A8 call ag5 "openglGetProcAddress" (cstroflen 13 "glBindBuffer") *s8
    0x000000A9 gvar *__funcptr_type_kind 0x0000002F
    0x000000AA bc *s8 >|2| 0x000000A8< to __funcptr_type_kind
    0x000000AB store *__funcptr_type_kind >|2| 0x000000A9<, __funcptr_type_kind >|2| 0x000000AA<
    0x000000AC call ag5 "openglGetProcAddress" (cstroflen 21 "glBindBufferRangeEXT") *s8
    0x000000AD gvar *__funcptr_type_kind 0x00000030
    0x000000AE bc *s8 >|2| 0x000000AC< to __funcptr_type_kind
    0x000000AF store *__funcptr_type_kind >|2| 0x000000AD<, __funcptr_type_kind >|2| 0x000000AE<
    0x000000B0 call ag5 "openglGetProcAddress" (cstroflen 20 "glBindBufferRangeNV") *s8
    0x000000B1 gvar *__funcptr_type_kind 0x00000031
    0x000000B2 bc *s8 >|2| 0x000000B0< to __funcptr_type_kind
    0x000000B3 store *__funcptr_type_kind >|2| 0x000000B1<, __funcptr_type_kind >|2| 0x000000B2<
    0x000000B4 call ag5 "openglGetProcAddress" (cstroflen 18 "glBindBufferRange") *s8
    0x000000B5 gvar *__funcptr_type_kind 0x00000032
    0x000000B6 bc *s8 >|2| 0x000000B4< to __funcptr_type_kind
    0x000000B7 store *__funcptr_type_kind >|2| 0x000000B5<, __funcptr_type_kind >|2| 0x000000B6<
    0x000000B8 call ag5 "openglGetProcAddress" (cstroflen 18 "glBindBuffersBase") *s8
    0x000000B9 gvar *__funcptr_type_kind 0x00000033
    0x000000BA bc *s8 >|2| 0x000000B8< to __funcptr_type_kind
    0x000000BB store *__funcptr_type_kind >|2| 0x000000B9<, __funcptr_type_kind >|2| 0x000000BA<
    0x000000BC call ag5 "openglGetProcAddress" (cstroflen 19 "glBindBuffersRange") *s8
    0x000000BD gvar *__funcptr_type_kind 0x00000034
    0x000000BE bc *s8 >|2| 0x000000BC< to __funcptr_type_kind
    0x000000BF store *__funcptr_type_kind >|2| 0x000000BD<, __funcptr_type_kind >|2| 0x000000BE<
    0x000000C0 call ag5 "openglGetProcAddress" (cstroflen 26 "glBindFragDataLocationEXT") *s8
    0x000000C1 gvar *__funcptr_type_kind 0x00000035
    0x000000C2 bc *s8 >|2| 0x000000C0< to __funcptr_type_kind
    0x000000C3 store *__funcptr_type_kind >|2| 0x000000C1<, __funcptr_type_kind >|2| 0x000000C2<
    0x000000C4 call ag5 "openglGetProcAddress" (cstroflen 30 "glBindFragDataLocationIndexed") *s8
    0x000000C5 gvar *__funcptr_type_kind 0x00000036
    0x000000C6 bc *s8 >|2| 0x000000C4< to __funcptr_type_kind
    0x000000C7 store *__funcptr_type_kind >|2| 0x000000C5<, __funcptr_type_kind >|2| 0x000000C6<
    0x000000C8 call ag5 "openglGetProcAddress" (cstroflen 23 "glBindFragDataLocation") *s8
    0x000000C9 gvar *__funcptr_type_kind 0x00000037
    0x000000CA bc *s8 >|2| 0x000000C8< to __funcptr_type_kind
    0x000000CB store *__funcptr_type_kind >|2| 0x000000C9<, __funcptr_type_kind >|2| 0x000000CA<
    0x000000CC call ag5 "openglGetProcAddress" (cstroflen 24 "glBindFragmentShaderATI") *s8
    0x000000CD gvar *__funcptr_type_kind 0x00000038
    0x000000CE bc *s8 >|2| 0x000000CC< to __funcptr_type_kind
    0x000000CF store *__funcptr_type_kind >|2| 0x000000CD<, __funcptr_type_kind >|2| 0x000000CE<
    0x000000D0 call ag5 "openglGetProcAddress" (cstroflen 21 "glBindFramebufferEXT") *s8
    0x000000D1 gvar *__funcptr_type_kind 0x00000039
    0x000000D2 bc *s8 >|2| 0x000000D0< to __funcptr_type_kind
    0x000000D3 store *__funcptr_type_kind >|2| 0x000000D1<, __funcptr_type_kind >|2| 0x000000D2<
    0x000000D4 call ag5 "openglGetProcAddress" (cstroflen 18 "glBindFramebuffer") *s8
    0x000000D5 gvar *__funcptr_type_kind 0x0000003A
    0x000000D6 bc *s8 >|2| 0x000000D4< to __funcptr_type_kind
    0x000000D7 store *__funcptr_type_kind >|2| 0x000000D5<, __funcptr_type_kind >|2| 0x000000D6<
    0x000000D8 call ag5 "openglGetProcAddress" (cstroflen 22 "glBindImageTextureEXT") *s8
    0x000000D9 gvar *__funcptr_type_kind 0x0000003B
    0x000000DA bc *s8 >|2| 0x000000D8< to __funcptr_type_kind
    0x000000DB store *__funcptr_type_kind >|2| 0x000000D9<, __funcptr_type_kind >|2| 0x000000DA<
    0x000000DC call ag5 "openglGetProcAddress" (cstroflen 19 "glBindImageTexture") *s8
    0x000000DD gvar *__funcptr_type_kind 0x0000003C
    0x000000DE bc *s8 >|2| 0x000000DC< to __funcptr_type_kind
    0x000000DF store *__funcptr_type_kind >|2| 0x000000DD<, __funcptr_type_kind >|2| 0x000000DE<
    0x000000E0 call ag5 "openglGetProcAddress" (cstroflen 20 "glBindImageTextures") *s8
    0x000000E1 gvar *__funcptr_type_kind 0x0000003D
    0x000000E2 bc *s8 >|2| 0x000000E0< to __funcptr_type_kind
    0x000000E3 store *__funcptr_type_kind >|2| 0x000000E1<, __funcptr_type_kind >|2| 0x000000E2<
    0x000000E4 call ag5 "openglGetProcAddress" (cstroflen 22 "glBindMultiTextureEXT") *s8
    0x000000E5 gvar *__funcptr_type_kind 0x0000003E
    0x000000E6 bc *s8 >|2| 0x000000E4< to __funcptr_type_kind
    0x000000E7 store *__funcptr_type_kind >|2| 0x000000E5<, __funcptr_type_kind >|2| 0x000000E6<
    0x000000E8 call ag5 "openglGetProcAddress" (cstroflen 17 "glBindProgramARB") *s8
    0x000000E9 gvar *__funcptr_type_kind 0x0000003F
    0x000000EA bc *s8 >|2| 0x000000E8< to __funcptr_type_kind
    0x000000EB store *__funcptr_type_kind >|2| 0x000000E9<, __funcptr_type_kind >|2| 0x000000EA<
    0x000000EC call ag5 "openglGetProcAddress" (cstroflen 16 "glBindProgramNV") *s8
    0x000000ED gvar *__funcptr_type_kind 0x00000040
    0x000000EE bc *s8 >|2| 0x000000EC< to __funcptr_type_kind
    0x000000EF store *__funcptr_type_kind >|2| 0x000000ED<, __funcptr_type_kind >|2| 0x000000EE<
    0x000000F0 call ag5 "openglGetProcAddress" (cstroflen 22 "glBindProgramPipeline") *s8
    0x000000F1 gvar *__funcptr_type_kind 0x00000041
    0x000000F2 bc *s8 >|2| 0x000000F0< to __funcptr_type_kind
    0x000000F3 store *__funcptr_type_kind >|2| 0x000000F1<, __funcptr_type_kind >|2| 0x000000F2<
    0x000000F4 call ag5 "openglGetProcAddress" (cstroflen 22 "glBindRenderbufferEXT") *s8
    0x000000F5 gvar *__funcptr_type_kind 0x00000042
    0x000000F6 bc *s8 >|2| 0x000000F4< to __funcptr_type_kind
    0x000000F7 store *__funcptr_type_kind >|2| 0x000000F5<, __funcptr_type_kind >|2| 0x000000F6<
    0x000000F8 call ag5 "openglGetProcAddress" (cstroflen 19 "glBindRenderbuffer") *s8
    0x000000F9 gvar *__funcptr_type_kind 0x00000043
    0x000000FA bc *s8 >|2| 0x000000F8< to __funcptr_type_kind
    0x000000FB store *__funcptr_type_kind >|2| 0x000000F9<, __funcptr_type_kind >|2| 0x000000FA<
    0x000000FC call ag5 "openglGetProcAddress" (cstroflen 14 "glBindSampler") *s8
    0x000000FD gvar *__funcptr_type_kind 0x00000044
    0x000000FE bc *s8 >|2| 0x000000FC< to __funcptr_type_kind
    0x000000FF store *__funcptr_type_kind >|2| 0x000000FD<, __funcptr_type_kind >|2| 0x000000FE<
    0x00000100 call ag5 "openglGetProcAddress" (cstroflen 15 "glBindSamplers") *s8
    0x00000101 gvar *__funcptr_type_kind 0x00000045
    0x00000102 bc *s8 >|2| 0x00000100< to __funcptr_type_kind
    0x00000103 store *__funcptr_type_kind >|2| 0x00000101<, __funcptr_type_kind >|2| 0x00000102<
    0x00000104 call ag5 "openglGetProcAddress" (cstroflen 17 "glBindTextureEXT") *s8
    0x00000105 gvar *__funcptr_type_kind 0x00000046
    0x00000106 bc *s8 >|2| 0x00000104< to __funcptr_type_kind
    0x00000107 store *__funcptr_type_kind >|2| 0x00000105<, __funcptr_type_kind >|2| 0x00000106<
    0x00000108 call ag5 "openglGetProcAddress" (cstroflen 15 "glBindTextures") *s8
    0x00000109 gvar *__funcptr_type_kind 0x00000047
    0x0000010A bc *s8 >|2| 0x00000108< to __funcptr_type_kind
    0x0000010B store *__funcptr_type_kind >|2| 0x00000109<, __funcptr_type_kind >|2| 0x0000010A<
    0x0000010C call ag5 "openglGetProcAddress" (cstroflen 18 "glBindTextureUnit") *s8
    0x0000010D gvar *__funcptr_type_kind 0x00000048
    0x0000010E bc *s8 >|2| 0x0000010C< to __funcptr_type_kind
    0x0000010F store *__funcptr_type_kind >|2| 0x0000010D<, __funcptr_type_kind >|2| 0x0000010E<
    0x00000110 call ag5 "openglGetProcAddress" (cstroflen 26 "glBindTransformFeedbackNV") *s8
    0x00000111 gvar *__funcptr_type_kind 0x00000049
    0x00000112 bc *s8 >|2| 0x00000110< to __funcptr_type_kind
    0x00000113 store *__funcptr_type_kind >|2| 0x00000111<, __funcptr_type_kind >|2| 0x00000112<
    0x00000114 call ag5 "openglGetProcAddress" (cstroflen 24 "glBindTransformFeedback") *s8
    0x00000115 gvar *__funcptr_type_kind 0x0000004A
    0x00000116 bc *s8 >|2| 0x00000114< to __funcptr_type_kind
    0x00000117 store *__funcptr_type_kind >|2| 0x00000115<, __funcptr_type_kind >|2| 0x00000116<
    0x00000118 call ag5 "openglGetProcAddress" (cstroflen 23 "glBindVertexArrayAPPLE") *s8
    0x00000119 gvar *__funcptr_type_kind 0x0000004B
    0x0000011A bc *s8 >|2| 0x00000118< to __funcptr_type_kind
    0x0000011B store *__funcptr_type_kind >|2| 0x00000119<, __funcptr_type_kind >|2| 0x0000011A<
    0x0000011C call ag5 "openglGetProcAddress" (cstroflen 18 "glBindVertexArray") *s8
    0x0000011D gvar *__funcptr_type_kind 0x0000004C
    0x0000011E bc *s8 >|2| 0x0000011C< to __funcptr_type_kind
    0x0000011F store *__funcptr_type_kind >|2| 0x0000011D<, __funcptr_type_kind >|2| 0x0000011E<
    0x00000120 call ag5 "openglGetProcAddress" (cstroflen 19 "glBindVertexBuffer") *s8
    0x00000121 gvar *__funcptr_type_kind 0x0000004D
    0x00000122 bc *s8 >|2| 0x00000120< to __funcptr_type_kind
    0x00000123 store *__funcptr_type_kind >|2| 0x00000121<, __funcptr_type_kind >|2| 0x00000122<
    0x00000124 call ag5 "openglGetProcAddress" (cstroflen 20 "glBindVertexBuffers") *s8
    0x00000125 gvar *__funcptr_type_kind 0x0000004E
    0x00000126 bc *s8 >|2| 0x00000124< to __funcptr_type_kind
    0x00000127 store *__funcptr_type_kind >|2| 0x00000125<, __funcptr_type_kind >|2| 0x00000126<
    0x00000128 call ag5 "openglGetProcAddress" (cstroflen 22 "glBindVertexShaderEXT") *s8
    0x00000129 gvar *__funcptr_type_kind 0x0000004F
    0x0000012A bc *s8 >|2| 0x00000128< to __funcptr_type_kind
    0x0000012B store *__funcptr_type_kind >|2| 0x00000129<, __funcptr_type_kind >|2| 0x0000012A<
    0x0000012C call ag5 "openglGetProcAddress" (cstroflen 33 "glBindVideoCaptureStreamBufferNV") *s8
    0x0000012D gvar *__funcptr_type_kind 0x00000050
    0x0000012E bc *s8 >|2| 0x0000012C< to __funcptr_type_kind
    0x0000012F store *__funcptr_type_kind >|2| 0x0000012D<, __funcptr_type_kind >|2| 0x0000012E<
    0x00000130 call ag5 "openglGetProcAddress" (cstroflen 34 "glBindVideoCaptureStreamTextureNV") *s8
    0x00000131 gvar *__funcptr_type_kind 0x00000051
    0x00000132 bc *s8 >|2| 0x00000130< to __funcptr_type_kind
    0x00000133 store *__funcptr_type_kind >|2| 0x00000131<, __funcptr_type_kind >|2| 0x00000132<
    0x00000134 call ag5 "openglGetProcAddress" (cstroflen 21 "glBinormalPointerEXT") *s8
    0x00000135 gvar *__funcptr_type_kind 0x00000052
    0x00000136 bc *s8 >|2| 0x00000134< to __funcptr_type_kind
    0x00000137 store *__funcptr_type_kind >|2| 0x00000135<, __funcptr_type_kind >|2| 0x00000136<
    0x00000138 call ag5 "openglGetProcAddress" (cstroflen 18 "glBlendBarrierKHR") *s8
    0x00000139 gvar *__funcptr_type_kind 0x00000053
    0x0000013A bc *s8 >|2| 0x00000138< to __funcptr_type_kind
    0x0000013B store *__funcptr_type_kind >|2| 0x00000139<, __funcptr_type_kind >|2| 0x0000013A<
    0x0000013C call ag5 "openglGetProcAddress" (cstroflen 17 "glBlendBarrierNV") *s8
    0x0000013D gvar *__funcptr_type_kind 0x00000054
    0x0000013E bc *s8 >|2| 0x0000013C< to __funcptr_type_kind
    0x0000013F store *__funcptr_type_kind >|2| 0x0000013D<, __funcptr_type_kind >|2| 0x0000013E<
    0x00000140 call ag5 "openglGetProcAddress" (cstroflen 16 "glBlendColorEXT") *s8
    0x00000141 gvar *__funcptr_type_kind 0x00000055
    0x00000142 bc *s8 >|2| 0x00000140< to __funcptr_type_kind
    0x00000143 store *__funcptr_type_kind >|2| 0x00000141<, __funcptr_type_kind >|2| 0x00000142<
    0x00000144 call ag5 "openglGetProcAddress" (cstroflen 13 "glBlendColor") *s8
    0x00000145 gvar *__funcptr_type_kind 0x00000056
    0x00000146 bc *s8 >|2| 0x00000144< to __funcptr_type_kind
    0x00000147 store *__funcptr_type_kind >|2| 0x00000145<, __funcptr_type_kind >|2| 0x00000146<
    0x00000148 call ag5 "openglGetProcAddress" (cstroflen 19 "glBlendEquationEXT") *s8
    0x00000149 gvar *__funcptr_type_kind 0x00000057
    0x0000014A bc *s8 >|2| 0x00000148< to __funcptr_type_kind
    0x0000014B store *__funcptr_type_kind >|2| 0x00000149<, __funcptr_type_kind >|2| 0x0000014A<
    0x0000014C call ag5 "openglGetProcAddress" (cstroflen 20 "glBlendEquationiARB") *s8
    0x0000014D gvar *__funcptr_type_kind 0x00000058
    0x0000014E bc *s8 >|2| 0x0000014C< to __funcptr_type_kind
    0x0000014F store *__funcptr_type_kind >|2| 0x0000014D<, __funcptr_type_kind >|2| 0x0000014E<
    0x00000150 call ag5 "openglGetProcAddress" (cstroflen 26 "glBlendEquationIndexedAMD") *s8
    0x00000151 gvar *__funcptr_type_kind 0x00000059
    0x00000152 bc *s8 >|2| 0x00000150< to __funcptr_type_kind
    0x00000153 store *__funcptr_type_kind >|2| 0x00000151<, __funcptr_type_kind >|2| 0x00000152<
    0x00000154 call ag5 "openglGetProcAddress" (cstroflen 17 "glBlendEquationi") *s8
    0x00000155 gvar *__funcptr_type_kind 0x0000005A
    0x00000156 bc *s8 >|2| 0x00000154< to __funcptr_type_kind
    0x00000157 store *__funcptr_type_kind >|2| 0x00000155<, __funcptr_type_kind >|2| 0x00000156<
    0x00000158 call ag5 "openglGetProcAddress" (cstroflen 16 "glBlendEquation") *s8
    0x00000159 gvar *__funcptr_type_kind 0x0000005B
    0x0000015A bc *s8 >|2| 0x00000158< to __funcptr_type_kind
    0x0000015B store *__funcptr_type_kind >|2| 0x00000159<, __funcptr_type_kind >|2| 0x0000015A<
    0x0000015C call ag5 "openglGetProcAddress" (cstroflen 27 "glBlendEquationSeparateEXT") *s8
    0x0000015D gvar *__funcptr_type_kind 0x0000005C
    0x0000015E bc *s8 >|2| 0x0000015C< to __funcptr_type_kind
    0x0000015F store *__funcptr_type_kind >|2| 0x0000015D<, __funcptr_type_kind >|2| 0x0000015E<
    0x00000160 call ag5 "openglGetProcAddress" (cstroflen 28 "glBlendEquationSeparateiARB") *s8
    0x00000161 gvar *__funcptr_type_kind 0x0000005D
    0x00000162 bc *s8 >|2| 0x00000160< to __funcptr_type_kind
    0x00000163 store *__funcptr_type_kind >|2| 0x00000161<, __funcptr_type_kind >|2| 0x00000162<
    0x00000164 call ag5 "openglGetProcAddress" (cstroflen 34 "glBlendEquationSeparateIndexedAMD") *s8
    0x00000165 gvar *__funcptr_type_kind 0x0000005E
    0x00000166 bc *s8 >|2| 0x00000164< to __funcptr_type_kind
    0x00000167 store *__funcptr_type_kind >|2| 0x00000165<, __funcptr_type_kind >|2| 0x00000166<
    0x00000168 call ag5 "openglGetProcAddress" (cstroflen 25 "glBlendEquationSeparatei") *s8
    0x00000169 gvar *__funcptr_type_kind 0x0000005F
    0x0000016A bc *s8 >|2| 0x00000168< to __funcptr_type_kind
    0x0000016B store *__funcptr_type_kind >|2| 0x00000169<, __funcptr_type_kind >|2| 0x0000016A<
    0x0000016C call ag5 "openglGetProcAddress" (cstroflen 24 "glBlendEquationSeparate") *s8
    0x0000016D gvar *__funcptr_type_kind 0x00000060
    0x0000016E bc *s8 >|2| 0x0000016C< to __funcptr_type_kind
    0x0000016F store *__funcptr_type_kind >|2| 0x0000016D<, __funcptr_type_kind >|2| 0x0000016E<
    0x00000170 call ag5 "openglGetProcAddress" (cstroflen 16 "glBlendFunciARB") *s8
    0x00000171 gvar *__funcptr_type_kind 0x00000061
    0x00000172 bc *s8 >|2| 0x00000170< to __funcptr_type_kind
    0x00000173 store *__funcptr_type_kind >|2| 0x00000171<, __funcptr_type_kind >|2| 0x00000172<
    0x00000174 call ag5 "openglGetProcAddress" (cstroflen 22 "glBlendFuncIndexedAMD") *s8
    0x00000175 gvar *__funcptr_type_kind 0x00000062
    0x00000176 bc *s8 >|2| 0x00000174< to __funcptr_type_kind
    0x00000177 store *__funcptr_type_kind >|2| 0x00000175<, __funcptr_type_kind >|2| 0x00000176<
    0x00000178 call ag5 "openglGetProcAddress" (cstroflen 13 "glBlendFunci") *s8
    0x00000179 gvar *__funcptr_type_kind 0x00000063
    0x0000017A bc *s8 >|2| 0x00000178< to __funcptr_type_kind
    0x0000017B store *__funcptr_type_kind >|2| 0x00000179<, __funcptr_type_kind >|2| 0x0000017A<
    0x0000017C call ag5 "openglGetProcAddress" (cstroflen 23 "glBlendFuncSeparateEXT") *s8
    0x0000017D gvar *__funcptr_type_kind 0x00000064
    0x0000017E bc *s8 >|2| 0x0000017C< to __funcptr_type_kind
    0x0000017F store *__funcptr_type_kind >|2| 0x0000017D<, __funcptr_type_kind >|2| 0x0000017E<
    0x00000180 call ag5 "openglGetProcAddress" (cstroflen 24 "glBlendFuncSeparateiARB") *s8
    0x00000181 gvar *__funcptr_type_kind 0x00000065
    0x00000182 bc *s8 >|2| 0x00000180< to __funcptr_type_kind
    0x00000183 store *__funcptr_type_kind >|2| 0x00000181<, __funcptr_type_kind >|2| 0x00000182<
    0x00000184 call ag5 "openglGetProcAddress" (cstroflen 30 "glBlendFuncSeparateIndexedAMD") *s8
    0x00000185 gvar *__funcptr_type_kind 0x00000066
    0x00000186 bc *s8 >|2| 0x00000184< to __funcptr_type_kind
    0x00000187 store *__funcptr_type_kind >|2| 0x00000185<, __funcptr_type_kind >|2| 0x00000186<
    0x00000188 call ag5 "openglGetProcAddress" (cstroflen 21 "glBlendFuncSeparatei") *s8
    0x00000189 gvar *__funcptr_type_kind 0x00000067
    0x0000018A bc *s8 >|2| 0x00000188< to __funcptr_type_kind
    0x0000018B store *__funcptr_type_kind >|2| 0x00000189<, __funcptr_type_kind >|2| 0x0000018A<
    0x0000018C call ag5 "openglGetProcAddress" (cstroflen 20 "glBlendFuncSeparate") *s8
    0x0000018D gvar *__funcptr_type_kind 0x00000068
    0x0000018E bc *s8 >|2| 0x0000018C< to __funcptr_type_kind
    0x0000018F store *__funcptr_type_kind >|2| 0x0000018D<, __funcptr_type_kind >|2| 0x0000018E<
    0x00000190 call ag5 "openglGetProcAddress" (cstroflen 20 "glBlendParameteriNV") *s8
    0x00000191 gvar *__funcptr_type_kind 0x00000069
    0x00000192 bc *s8 >|2| 0x00000190< to __funcptr_type_kind
    0x00000193 store *__funcptr_type_kind >|2| 0x00000191<, __funcptr_type_kind >|2| 0x00000192<
    0x00000194 call ag5 "openglGetProcAddress" (cstroflen 23 "glBlitFramebufferANGLE") *s8
    0x00000195 gvar *__funcptr_type_kind 0x0000006A
    0x00000196 bc *s8 >|2| 0x00000194< to __funcptr_type_kind
    0x00000197 store *__funcptr_type_kind >|2| 0x00000195<, __funcptr_type_kind >|2| 0x00000196<
    0x00000198 call ag5 "openglGetProcAddress" (cstroflen 21 "glBlitFramebufferEXT") *s8
    0x00000199 gvar *__funcptr_type_kind 0x0000006B
    0x0000019A bc *s8 >|2| 0x00000198< to __funcptr_type_kind
    0x0000019B store *__funcptr_type_kind >|2| 0x00000199<, __funcptr_type_kind >|2| 0x0000019A<
    0x0000019C call ag5 "openglGetProcAddress" (cstroflen 18 "glBlitFramebuffer") *s8
    0x0000019D gvar *__funcptr_type_kind 0x0000006C
    0x0000019E bc *s8 >|2| 0x0000019C< to __funcptr_type_kind
    0x0000019F store *__funcptr_type_kind >|2| 0x0000019D<, __funcptr_type_kind >|2| 0x0000019E<
    0x000001A0 call ag5 "openglGetProcAddress" (cstroflen 23 "glBlitNamedFramebuffer") *s8
    0x000001A1 gvar *__funcptr_type_kind 0x0000006D
    0x000001A2 bc *s8 >|2| 0x000001A0< to __funcptr_type_kind
    0x000001A3 store *__funcptr_type_kind >|2| 0x000001A1<, __funcptr_type_kind >|2| 0x000001A2<
    0x000001A4 call ag5 "openglGetProcAddress" (cstroflen 23 "glBufferAddressRangeNV") *s8
    0x000001A5 gvar *__funcptr_type_kind 0x0000006E
    0x000001A6 bc *s8 >|2| 0x000001A4< to __funcptr_type_kind
    0x000001A7 store *__funcptr_type_kind >|2| 0x000001A5<, __funcptr_type_kind >|2| 0x000001A6<
    0x000001A8 call ag5 "openglGetProcAddress" (cstroflen 16 "glBufferDataARB") *s8
    0x000001A9 gvar *__funcptr_type_kind 0x0000006F
    0x000001AA bc *s8 >|2| 0x000001A8< to __funcptr_type_kind
    0x000001AB store *__funcptr_type_kind >|2| 0x000001A9<, __funcptr_type_kind >|2| 0x000001AA<
    0x000001AC call ag5 "openglGetProcAddress" (cstroflen 13 "glBufferData") *s8
    0x000001AD gvar *__funcptr_type_kind 0x00000070
    0x000001AE bc *s8 >|2| 0x000001AC< to __funcptr_type_kind
    0x000001AF store *__funcptr_type_kind >|2| 0x000001AD<, __funcptr_type_kind >|2| 0x000001AE<
    0x000001B0 call ag5 "openglGetProcAddress" (cstroflen 26 "glBufferPageCommitmentARB") *s8
    0x000001B1 gvar *__funcptr_type_kind 0x00000071
    0x000001B2 bc *s8 >|2| 0x000001B0< to __funcptr_type_kind
    0x000001B3 store *__funcptr_type_kind >|2| 0x000001B1<, __funcptr_type_kind >|2| 0x000001B2<
    0x000001B4 call ag5 "openglGetProcAddress" (cstroflen 24 "glBufferParameteriAPPLE") *s8
    0x000001B5 gvar *__funcptr_type_kind 0x00000072
    0x000001B6 bc *s8 >|2| 0x000001B4< to __funcptr_type_kind
    0x000001B7 store *__funcptr_type_kind >|2| 0x000001B5<, __funcptr_type_kind >|2| 0x000001B6<
    0x000001B8 call ag5 "openglGetProcAddress" (cstroflen 16 "glBufferStorage") *s8
    0x000001B9 gvar *__funcptr_type_kind 0x00000073
    0x000001BA bc *s8 >|2| 0x000001B8< to __funcptr_type_kind
    0x000001BB store *__funcptr_type_kind >|2| 0x000001B9<, __funcptr_type_kind >|2| 0x000001BA<
    0x000001BC call ag5 "openglGetProcAddress" (cstroflen 19 "glBufferSubDataARB") *s8
    0x000001BD gvar *__funcptr_type_kind 0x00000074
    0x000001BE bc *s8 >|2| 0x000001BC< to __funcptr_type_kind
    0x000001BF store *__funcptr_type_kind >|2| 0x000001BD<, __funcptr_type_kind >|2| 0x000001BE<
    0x000001C0 call ag5 "openglGetProcAddress" (cstroflen 16 "glBufferSubData") *s8
    0x000001C1 gvar *__funcptr_type_kind 0x00000075
    0x000001C2 bc *s8 >|2| 0x000001C0< to __funcptr_type_kind
    0x000001C3 store *__funcptr_type_kind >|2| 0x000001C1<, __funcptr_type_kind >|2| 0x000001C2<
    0x000001C4 call ag5 "openglGetProcAddress" (cstroflen 16 "glClampColorARB") *s8
    0x000001C5 gvar *__funcptr_type_kind 0x00000076
    0x000001C6 bc *s8 >|2| 0x000001C4< to __funcptr_type_kind
    0x000001C7 store *__funcptr_type_kind >|2| 0x000001C5<, __funcptr_type_kind >|2| 0x000001C6<
    0x000001C8 call ag5 "openglGetProcAddress" (cstroflen 13 "glClampColor") *s8
    0x000001C9 gvar *__funcptr_type_kind 0x00000077
    0x000001CA bc *s8 >|2| 0x000001C8< to __funcptr_type_kind
    0x000001CB store *__funcptr_type_kind >|2| 0x000001C9<, __funcptr_type_kind >|2| 0x000001CA<
    0x000001CC call ag5 "openglGetProcAddress" (cstroflen 18 "glClearBufferData") *s8
    0x000001CD gvar *__funcptr_type_kind 0x00000078
    0x000001CE bc *s8 >|2| 0x000001CC< to __funcptr_type_kind
    0x000001CF store *__funcptr_type_kind >|2| 0x000001CD<, __funcptr_type_kind >|2| 0x000001CE<
    0x000001D0 call ag5 "openglGetProcAddress" (cstroflen 16 "glClearBufferfi") *s8
    0x000001D1 gvar *__funcptr_type_kind 0x00000079
    0x000001D2 bc *s8 >|2| 0x000001D0< to __funcptr_type_kind
    0x000001D3 store *__funcptr_type_kind >|2| 0x000001D1<, __funcptr_type_kind >|2| 0x000001D2<
    0x000001D4 call ag5 "openglGetProcAddress" (cstroflen 16 "glClearBufferfv") *s8
    0x000001D5 gvar *__funcptr_type_kind 0x0000007A
    0x000001D6 bc *s8 >|2| 0x000001D4< to __funcptr_type_kind
    0x000001D7 store *__funcptr_type_kind >|2| 0x000001D5<, __funcptr_type_kind >|2| 0x000001D6<
    0x000001D8 call ag5 "openglGetProcAddress" (cstroflen 16 "glClearBufferiv") *s8
    0x000001D9 gvar *__funcptr_type_kind 0x0000007B
    0x000001DA bc *s8 >|2| 0x000001D8< to __funcptr_type_kind
    0x000001DB store *__funcptr_type_kind >|2| 0x000001D9<, __funcptr_type_kind >|2| 0x000001DA<
    0x000001DC call ag5 "openglGetProcAddress" (cstroflen 21 "glClearBufferSubData") *s8
    0x000001DD gvar *__funcptr_type_kind 0x0000007C
    0x000001DE bc *s8 >|2| 0x000001DC< to __funcptr_type_kind
    0x000001DF store *__funcptr_type_kind >|2| 0x000001DD<, __funcptr_type_kind >|2| 0x000001DE<
    0x000001E0 call ag5 "openglGetProcAddress" (cstroflen 17 "glClearBufferuiv") *s8
    0x000001E1 gvar *__funcptr_type_kind 0x0000007D
    0x000001E2 bc *s8 >|2| 0x000001E0< to __funcptr_type_kind
    0x000001E3 store *__funcptr_type_kind >|2| 0x000001E1<, __funcptr_type_kind >|2| 0x000001E2<
    0x000001E4 call ag5 "openglGetProcAddress" (cstroflen 18 "glClearColorIiEXT") *s8
    0x000001E5 gvar *__funcptr_type_kind 0x0000007E
    0x000001E6 bc *s8 >|2| 0x000001E4< to __funcptr_type_kind
    0x000001E7 store *__funcptr_type_kind >|2| 0x000001E5<, __funcptr_type_kind >|2| 0x000001E6<
    0x000001E8 call ag5 "openglGetProcAddress" (cstroflen 19 "glClearColorIuiEXT") *s8
    0x000001E9 gvar *__funcptr_type_kind 0x0000007F
    0x000001EA bc *s8 >|2| 0x000001E8< to __funcptr_type_kind
    0x000001EB store *__funcptr_type_kind >|2| 0x000001E9<, __funcptr_type_kind >|2| 0x000001EA<
    0x000001EC call ag5 "openglGetProcAddress" (cstroflen 14 "glClearColorx") *s8
    0x000001ED gvar *__funcptr_type_kind 0x00000080
    0x000001EE bc *s8 >|2| 0x000001EC< to __funcptr_type_kind
    0x000001EF store *__funcptr_type_kind >|2| 0x000001ED<, __funcptr_type_kind >|2| 0x000001EE<
    0x000001F0 call ag5 "openglGetProcAddress" (cstroflen 16 "glClearDepthdNV") *s8
    0x000001F1 gvar *__funcptr_type_kind 0x00000081
    0x000001F2 bc *s8 >|2| 0x000001F0< to __funcptr_type_kind
    0x000001F3 store *__funcptr_type_kind >|2| 0x000001F1<, __funcptr_type_kind >|2| 0x000001F2<
    0x000001F4 call ag5 "openglGetProcAddress" (cstroflen 17 "glClearDepthfOES") *s8
    0x000001F5 gvar *__funcptr_type_kind 0x00000082
    0x000001F6 bc *s8 >|2| 0x000001F4< to __funcptr_type_kind
    0x000001F7 store *__funcptr_type_kind >|2| 0x000001F5<, __funcptr_type_kind >|2| 0x000001F6<
    0x000001F8 call ag5 "openglGetProcAddress" (cstroflen 14 "glClearDepthf") *s8
    0x000001F9 gvar *__funcptr_type_kind 0x00000083
    0x000001FA bc *s8 >|2| 0x000001F8< to __funcptr_type_kind
    0x000001FB store *__funcptr_type_kind >|2| 0x000001F9<, __funcptr_type_kind >|2| 0x000001FA<
    0x000001FC call ag5 "openglGetProcAddress" (cstroflen 14 "glClearDepthx") *s8
    0x000001FD gvar *__funcptr_type_kind 0x00000084
    0x000001FE bc *s8 >|2| 0x000001FC< to __funcptr_type_kind
    0x000001FF store *__funcptr_type_kind >|2| 0x000001FD<, __funcptr_type_kind >|2| 0x000001FE<
    0x00000200 call ag5 "openglGetProcAddress" (cstroflen 26 "glClearNamedBufferDataEXT") *s8
    0x00000201 gvar *__funcptr_type_kind 0x00000085
    0x00000202 bc *s8 >|2| 0x00000200< to __funcptr_type_kind
    0x00000203 store *__funcptr_type_kind >|2| 0x00000201<, __funcptr_type_kind >|2| 0x00000202<
    0x00000204 call ag5 "openglGetProcAddress" (cstroflen 23 "glClearNamedBufferData") *s8
    0x00000205 gvar *__funcptr_type_kind 0x00000086
    0x00000206 bc *s8 >|2| 0x00000204< to __funcptr_type_kind
    0x00000207 store *__funcptr_type_kind >|2| 0x00000205<, __funcptr_type_kind >|2| 0x00000206<
    0x00000208 call ag5 "openglGetProcAddress" (cstroflen 29 "glClearNamedBufferSubDataEXT") *s8
    0x00000209 gvar *__funcptr_type_kind 0x00000087
    0x0000020A bc *s8 >|2| 0x00000208< to __funcptr_type_kind
    0x0000020B store *__funcptr_type_kind >|2| 0x00000209<, __funcptr_type_kind >|2| 0x0000020A<
    0x0000020C call ag5 "openglGetProcAddress" (cstroflen 26 "glClearNamedBufferSubData") *s8
    0x0000020D gvar *__funcptr_type_kind 0x00000088
    0x0000020E bc *s8 >|2| 0x0000020C< to __funcptr_type_kind
    0x0000020F store *__funcptr_type_kind >|2| 0x0000020D<, __funcptr_type_kind >|2| 0x0000020E<
    0x00000210 call ag5 "openglGetProcAddress" (cstroflen 26 "glClearNamedFramebufferfi") *s8
    0x00000211 gvar *__funcptr_type_kind 0x00000089
    0x00000212 bc *s8 >|2| 0x00000210< to __funcptr_type_kind
    0x00000213 store *__funcptr_type_kind >|2| 0x00000211<, __funcptr_type_kind >|2| 0x00000212<
    0x00000214 call ag5 "openglGetProcAddress" (cstroflen 26 "glClearNamedFramebufferfv") *s8
    0x00000215 gvar *__funcptr_type_kind 0x0000008A
    0x00000216 bc *s8 >|2| 0x00000214< to __funcptr_type_kind
    0x00000217 store *__funcptr_type_kind >|2| 0x00000215<, __funcptr_type_kind >|2| 0x00000216<
    0x00000218 call ag5 "openglGetProcAddress" (cstroflen 26 "glClearNamedFramebufferiv") *s8
    0x00000219 gvar *__funcptr_type_kind 0x0000008B
    0x0000021A bc *s8 >|2| 0x00000218< to __funcptr_type_kind
    0x0000021B store *__funcptr_type_kind >|2| 0x00000219<, __funcptr_type_kind >|2| 0x0000021A<
    0x0000021C call ag5 "openglGetProcAddress" (cstroflen 27 "glClearNamedFramebufferuiv") *s8
    0x0000021D gvar *__funcptr_type_kind 0x0000008C
    0x0000021E bc *s8 >|2| 0x0000021C< to __funcptr_type_kind
    0x0000021F store *__funcptr_type_kind >|2| 0x0000021D<, __funcptr_type_kind >|2| 0x0000021E<
    0x00000220 call ag5 "openglGetProcAddress" (cstroflen 16 "glClearTexImage") *s8
    0x00000221 gvar *__funcptr_type_kind 0x0000008D
    0x00000222 bc *s8 >|2| 0x00000220< to __funcptr_type_kind
    0x00000223 store *__funcptr_type_kind >|2| 0x00000221<, __funcptr_type_kind >|2| 0x00000222<
    0x00000224 call ag5 "openglGetProcAddress" (cstroflen 19 "glClearTexSubImage") *s8
    0x00000225 gvar *__funcptr_type_kind 0x0000008E
    0x00000226 bc *s8 >|2| 0x00000224< to __funcptr_type_kind
    0x00000227 store *__funcptr_type_kind >|2| 0x00000225<, __funcptr_type_kind >|2| 0x00000226<
    0x00000228 call ag5 "openglGetProcAddress" (cstroflen 25 "glClientActiveTextureARB") *s8
    0x00000229 gvar *__funcptr_type_kind 0x0000008F
    0x0000022A bc *s8 >|2| 0x00000228< to __funcptr_type_kind
    0x0000022B store *__funcptr_type_kind >|2| 0x00000229<, __funcptr_type_kind >|2| 0x0000022A<
    0x0000022C call ag5 "openglGetProcAddress" (cstroflen 22 "glClientActiveTexture") *s8
    0x0000022D gvar *__funcptr_type_kind 0x00000090
    0x0000022E bc *s8 >|2| 0x0000022C< to __funcptr_type_kind
    0x0000022F store *__funcptr_type_kind >|2| 0x0000022D<, __funcptr_type_kind >|2| 0x0000022E<
    0x00000230 call ag5 "openglGetProcAddress" (cstroflen 30 "glClientActiveVertexStreamATI") *s8
    0x00000231 gvar *__funcptr_type_kind 0x00000091
    0x00000232 bc *s8 >|2| 0x00000230< to __funcptr_type_kind
    0x00000233 store *__funcptr_type_kind >|2| 0x00000231<, __funcptr_type_kind >|2| 0x00000232<
    0x00000234 call ag5 "openglGetProcAddress" (cstroflen 25 "glClientAttribDefaultEXT") *s8
    0x00000235 gvar *__funcptr_type_kind 0x00000092
    0x00000236 bc *s8 >|2| 0x00000234< to __funcptr_type_kind
    0x00000237 store *__funcptr_type_kind >|2| 0x00000235<, __funcptr_type_kind >|2| 0x00000236<
    0x00000238 call ag5 "openglGetProcAddress" (cstroflen 14 "glClipControl") *s8
    0x00000239 gvar *__funcptr_type_kind 0x00000093
    0x0000023A bc *s8 >|2| 0x00000238< to __funcptr_type_kind
    0x0000023B store *__funcptr_type_kind >|2| 0x00000239<, __funcptr_type_kind >|2| 0x0000023A<
    0x0000023C call ag5 "openglGetProcAddress" (cstroflen 16 "glClipPlanefOES") *s8
    0x0000023D gvar *__funcptr_type_kind 0x00000094
    0x0000023E bc *s8 >|2| 0x0000023C< to __funcptr_type_kind
    0x0000023F store *__funcptr_type_kind >|2| 0x0000023D<, __funcptr_type_kind >|2| 0x0000023E<
    0x00000240 call ag5 "openglGetProcAddress" (cstroflen 13 "glClipPlanef") *s8
    0x00000241 gvar *__funcptr_type_kind 0x00000095
    0x00000242 bc *s8 >|2| 0x00000240< to __funcptr_type_kind
    0x00000243 store *__funcptr_type_kind >|2| 0x00000241<, __funcptr_type_kind >|2| 0x00000242<
    0x00000244 call ag5 "openglGetProcAddress" (cstroflen 13 "glClipPlanex") *s8
    0x00000245 gvar *__funcptr_type_kind 0x00000096
    0x00000246 bc *s8 >|2| 0x00000244< to __funcptr_type_kind
    0x00000247 store *__funcptr_type_kind >|2| 0x00000245<, __funcptr_type_kind >|2| 0x00000246<
    0x00000248 call ag5 "openglGetProcAddress" (cstroflen 21 "glColor3fVertex3fSUN") *s8
    0x00000249 gvar *__funcptr_type_kind 0x00000097
    0x0000024A bc *s8 >|2| 0x00000248< to __funcptr_type_kind
    0x0000024B store *__funcptr_type_kind >|2| 0x00000249<, __funcptr_type_kind >|2| 0x0000024A<
    0x0000024C call ag5 "openglGetProcAddress" (cstroflen 22 "glColor3fVertex3fvSUN") *s8
    0x0000024D gvar *__funcptr_type_kind 0x00000098
    0x0000024E bc *s8 >|2| 0x0000024C< to __funcptr_type_kind
    0x0000024F store *__funcptr_type_kind >|2| 0x0000024D<, __funcptr_type_kind >|2| 0x0000024E<
    0x00000250 call ag5 "openglGetProcAddress" (cstroflen 12 "glColor3hNV") *s8
    0x00000251 gvar *__funcptr_type_kind 0x00000099
    0x00000252 bc *s8 >|2| 0x00000250< to __funcptr_type_kind
    0x00000253 store *__funcptr_type_kind >|2| 0x00000251<, __funcptr_type_kind >|2| 0x00000252<
    0x00000254 call ag5 "openglGetProcAddress" (cstroflen 13 "glColor3hvNV") *s8
    0x00000255 gvar *__funcptr_type_kind 0x0000009A
    0x00000256 bc *s8 >|2| 0x00000254< to __funcptr_type_kind
    0x00000257 store *__funcptr_type_kind >|2| 0x00000255<, __funcptr_type_kind >|2| 0x00000256<
    0x00000258 call ag5 "openglGetProcAddress" (cstroflen 29 "glColor4fNormal3fVertex3fSUN") *s8
    0x00000259 gvar *__funcptr_type_kind 0x0000009B
    0x0000025A bc *s8 >|2| 0x00000258< to __funcptr_type_kind
    0x0000025B store *__funcptr_type_kind >|2| 0x00000259<, __funcptr_type_kind >|2| 0x0000025A<
    0x0000025C call ag5 "openglGetProcAddress" (cstroflen 30 "glColor4fNormal3fVertex3fvSUN") *s8
    0x0000025D gvar *__funcptr_type_kind 0x0000009C
    0x0000025E bc *s8 >|2| 0x0000025C< to __funcptr_type_kind
    0x0000025F store *__funcptr_type_kind >|2| 0x0000025D<, __funcptr_type_kind >|2| 0x0000025E<
    0x00000260 call ag5 "openglGetProcAddress" (cstroflen 12 "glColor4hNV") *s8
    0x00000261 gvar *__funcptr_type_kind 0x0000009D
    0x00000262 bc *s8 >|2| 0x00000260< to __funcptr_type_kind
    0x00000263 store *__funcptr_type_kind >|2| 0x00000261<, __funcptr_type_kind >|2| 0x00000262<
    0x00000264 call ag5 "openglGetProcAddress" (cstroflen 13 "glColor4hvNV") *s8
    0x00000265 gvar *__funcptr_type_kind 0x0000009E
    0x00000266 bc *s8 >|2| 0x00000264< to __funcptr_type_kind
    0x00000267 store *__funcptr_type_kind >|2| 0x00000265<, __funcptr_type_kind >|2| 0x00000266<
    0x00000268 call ag5 "openglGetProcAddress" (cstroflen 22 "glColor4ubVertex2fSUN") *s8
    0x00000269 gvar *__funcptr_type_kind 0x0000009F
    0x0000026A bc *s8 >|2| 0x00000268< to __funcptr_type_kind
    0x0000026B store *__funcptr_type_kind >|2| 0x00000269<, __funcptr_type_kind >|2| 0x0000026A<
    0x0000026C call ag5 "openglGetProcAddress" (cstroflen 23 "glColor4ubVertex2fvSUN") *s8
    0x0000026D gvar *__funcptr_type_kind 0x000000A0
    0x0000026E bc *s8 >|2| 0x0000026C< to __funcptr_type_kind
    0x0000026F store *__funcptr_type_kind >|2| 0x0000026D<, __funcptr_type_kind >|2| 0x0000026E<
    0x00000270 call ag5 "openglGetProcAddress" (cstroflen 22 "glColor4ubVertex3fSUN") *s8
    0x00000271 gvar *__funcptr_type_kind 0x000000A1
    0x00000272 bc *s8 >|2| 0x00000270< to __funcptr_type_kind
    0x00000273 store *__funcptr_type_kind >|2| 0x00000271<, __funcptr_type_kind >|2| 0x00000272<
    0x00000274 call ag5 "openglGetProcAddress" (cstroflen 23 "glColor4ubVertex3fvSUN") *s8
    0x00000275 gvar *__funcptr_type_kind 0x000000A2
    0x00000276 bc *s8 >|2| 0x00000274< to __funcptr_type_kind
    0x00000277 store *__funcptr_type_kind >|2| 0x00000275<, __funcptr_type_kind >|2| 0x00000276<
    0x00000278 call ag5 "openglGetProcAddress" (cstroflen 10 "glColor4x") *s8
    0x00000279 gvar *__funcptr_type_kind 0x000000A3
    0x0000027A bc *s8 >|2| 0x00000278< to __funcptr_type_kind
    0x0000027B store *__funcptr_type_kind >|2| 0x00000279<, __funcptr_type_kind >|2| 0x0000027A<
    0x0000027C call ag5 "openglGetProcAddress" (cstroflen 16 "glColorFormatNV") *s8
    0x0000027D gvar *__funcptr_type_kind 0x000000A4
    0x0000027E bc *s8 >|2| 0x0000027C< to __funcptr_type_kind
    0x0000027F store *__funcptr_type_kind >|2| 0x0000027D<, __funcptr_type_kind >|2| 0x0000027E<
    0x00000280 call ag5 "openglGetProcAddress" (cstroflen 22 "glColorFragmentOp1ATI") *s8
    0x00000281 gvar *__funcptr_type_kind 0x000000A5
    0x00000282 bc *s8 >|2| 0x00000280< to __funcptr_type_kind
    0x00000283 store *__funcptr_type_kind >|2| 0x00000281<, __funcptr_type_kind >|2| 0x00000282<
    0x00000284 call ag5 "openglGetProcAddress" (cstroflen 22 "glColorFragmentOp2ATI") *s8
    0x00000285 gvar *__funcptr_type_kind 0x000000A6
    0x00000286 bc *s8 >|2| 0x00000284< to __funcptr_type_kind
    0x00000287 store *__funcptr_type_kind >|2| 0x00000285<, __funcptr_type_kind >|2| 0x00000286<
    0x00000288 call ag5 "openglGetProcAddress" (cstroflen 22 "glColorFragmentOp3ATI") *s8
    0x00000289 gvar *__funcptr_type_kind 0x000000A7
    0x0000028A bc *s8 >|2| 0x00000288< to __funcptr_type_kind
    0x0000028B store *__funcptr_type_kind >|2| 0x00000289<, __funcptr_type_kind >|2| 0x0000028A<
    0x0000028C call ag5 "openglGetProcAddress" (cstroflen 22 "glColorMaskIndexedEXT") *s8
    0x0000028D gvar *__funcptr_type_kind 0x000000A8
    0x0000028E bc *s8 >|2| 0x0000028C< to __funcptr_type_kind
    0x0000028F store *__funcptr_type_kind >|2| 0x0000028D<, __funcptr_type_kind >|2| 0x0000028E<
    0x00000290 call ag5 "openglGetProcAddress" (cstroflen 13 "glColorMaski") *s8
    0x00000291 gvar *__funcptr_type_kind 0x000000A9
    0x00000292 bc *s8 >|2| 0x00000290< to __funcptr_type_kind
    0x00000293 store *__funcptr_type_kind >|2| 0x00000291<, __funcptr_type_kind >|2| 0x00000292<
    0x00000294 call ag5 "openglGetProcAddress" (cstroflen 12 "glColorP3ui") *s8
    0x00000295 gvar *__funcptr_type_kind 0x000000AA
    0x00000296 bc *s8 >|2| 0x00000294< to __funcptr_type_kind
    0x00000297 store *__funcptr_type_kind >|2| 0x00000295<, __funcptr_type_kind >|2| 0x00000296<
    0x00000298 call ag5 "openglGetProcAddress" (cstroflen 13 "glColorP3uiv") *s8
    0x00000299 gvar *__funcptr_type_kind 0x000000AB
    0x0000029A bc *s8 >|2| 0x00000298< to __funcptr_type_kind
    0x0000029B store *__funcptr_type_kind >|2| 0x00000299<, __funcptr_type_kind >|2| 0x0000029A<
    0x0000029C call ag5 "openglGetProcAddress" (cstroflen 12 "glColorP4ui") *s8
    0x0000029D gvar *__funcptr_type_kind 0x000000AC
    0x0000029E bc *s8 >|2| 0x0000029C< to __funcptr_type_kind
    0x0000029F store *__funcptr_type_kind >|2| 0x0000029D<, __funcptr_type_kind >|2| 0x0000029E<
    0x000002A0 call ag5 "openglGetProcAddress" (cstroflen 13 "glColorP4uiv") *s8
    0x000002A1 gvar *__funcptr_type_kind 0x000000AD
    0x000002A2 bc *s8 >|2| 0x000002A0< to __funcptr_type_kind
    0x000002A3 store *__funcptr_type_kind >|2| 0x000002A1<, __funcptr_type_kind >|2| 0x000002A2<
    0x000002A4 call ag5 "openglGetProcAddress" (cstroflen 18 "glColorPointerEXT") *s8
    0x000002A5 gvar *__funcptr_type_kind 0x000000AE
    0x000002A6 bc *s8 >|2| 0x000002A4< to __funcptr_type_kind
    0x000002A7 store *__funcptr_type_kind >|2| 0x000002A5<, __funcptr_type_kind >|2| 0x000002A6<
    0x000002A8 call ag5 "openglGetProcAddress" (cstroflen 22 "glColorPointerListIBM") *s8
    0x000002A9 gvar *__funcptr_type_kind 0x000000AF
    0x000002AA bc *s8 >|2| 0x000002A8< to __funcptr_type_kind
    0x000002AB store *__funcptr_type_kind >|2| 0x000002A9<, __funcptr_type_kind >|2| 0x000002AA<
    0x000002AC call ag5 "openglGetProcAddress" (cstroflen 21 "glColorPointervINTEL") *s8
    0x000002AD gvar *__funcptr_type_kind 0x000000B0
    0x000002AE bc *s8 >|2| 0x000002AC< to __funcptr_type_kind
    0x000002AF store *__funcptr_type_kind >|2| 0x000002AD<, __funcptr_type_kind >|2| 0x000002AE<
    0x000002B0 call ag5 "openglGetProcAddress" (cstroflen 19 "glColorSubTableEXT") *s8
    0x000002B1 gvar *__funcptr_type_kind 0x000000B1
    0x000002B2 bc *s8 >|2| 0x000002B0< to __funcptr_type_kind
    0x000002B3 store *__funcptr_type_kind >|2| 0x000002B1<, __funcptr_type_kind >|2| 0x000002B2<
    0x000002B4 call ag5 "openglGetProcAddress" (cstroflen 16 "glColorSubTable") *s8
    0x000002B5 gvar *__funcptr_type_kind 0x000000B2
    0x000002B6 bc *s8 >|2| 0x000002B4< to __funcptr_type_kind
    0x000002B7 store *__funcptr_type_kind >|2| 0x000002B5<, __funcptr_type_kind >|2| 0x000002B6<
    0x000002B8 call ag5 "openglGetProcAddress" (cstroflen 16 "glColorTableEXT") *s8
    0x000002B9 gvar *__funcptr_type_kind 0x000000B3
    0x000002BA bc *s8 >|2| 0x000002B8< to __funcptr_type_kind
    0x000002BB store *__funcptr_type_kind >|2| 0x000002B9<, __funcptr_type_kind >|2| 0x000002BA<
    0x000002BC call ag5 "openglGetProcAddress" (cstroflen 24 "glColorTableParameterfv") *s8
    0x000002BD gvar *__funcptr_type_kind 0x000000B4
    0x000002BE bc *s8 >|2| 0x000002BC< to __funcptr_type_kind
    0x000002BF store *__funcptr_type_kind >|2| 0x000002BD<, __funcptr_type_kind >|2| 0x000002BE<
    0x000002C0 call ag5 "openglGetProcAddress" (cstroflen 27 "glColorTableParameterfvSGI") *s8
    0x000002C1 gvar *__funcptr_type_kind 0x000000B5
    0x000002C2 bc *s8 >|2| 0x000002C0< to __funcptr_type_kind
    0x000002C3 store *__funcptr_type_kind >|2| 0x000002C1<, __funcptr_type_kind >|2| 0x000002C2<
    0x000002C4 call ag5 "openglGetProcAddress" (cstroflen 24 "glColorTableParameteriv") *s8
    0x000002C5 gvar *__funcptr_type_kind 0x000000B6
    0x000002C6 bc *s8 >|2| 0x000002C4< to __funcptr_type_kind
    0x000002C7 store *__funcptr_type_kind >|2| 0x000002C5<, __funcptr_type_kind >|2| 0x000002C6<
    0x000002C8 call ag5 "openglGetProcAddress" (cstroflen 27 "glColorTableParameterivSGI") *s8
    0x000002C9 gvar *__funcptr_type_kind 0x000000B7
    0x000002CA bc *s8 >|2| 0x000002C8< to __funcptr_type_kind
    0x000002CB store *__funcptr_type_kind >|2| 0x000002C9<, __funcptr_type_kind >|2| 0x000002CA<
    0x000002CC call ag5 "openglGetProcAddress" (cstroflen 13 "glColorTable") *s8
    0x000002CD gvar *__funcptr_type_kind 0x000000B8
    0x000002CE bc *s8 >|2| 0x000002CC< to __funcptr_type_kind
    0x000002CF store *__funcptr_type_kind >|2| 0x000002CD<, __funcptr_type_kind >|2| 0x000002CE<
    0x000002D0 call ag5 "openglGetProcAddress" (cstroflen 16 "glColorTableSGI") *s8
    0x000002D1 gvar *__funcptr_type_kind 0x000000B9
    0x000002D2 bc *s8 >|2| 0x000002D0< to __funcptr_type_kind
    0x000002D3 store *__funcptr_type_kind >|2| 0x000002D1<, __funcptr_type_kind >|2| 0x000002D2<
    0x000002D4 call ag5 "openglGetProcAddress" (cstroflen 18 "glCombinerInputNV") *s8
    0x000002D5 gvar *__funcptr_type_kind 0x000000BA
    0x000002D6 bc *s8 >|2| 0x000002D4< to __funcptr_type_kind
    0x000002D7 store *__funcptr_type_kind >|2| 0x000002D5<, __funcptr_type_kind >|2| 0x000002D6<
    0x000002D8 call ag5 "openglGetProcAddress" (cstroflen 19 "glCombinerOutputNV") *s8
    0x000002D9 gvar *__funcptr_type_kind 0x000000BB
    0x000002DA bc *s8 >|2| 0x000002D8< to __funcptr_type_kind
    0x000002DB store *__funcptr_type_kind >|2| 0x000002D9<, __funcptr_type_kind >|2| 0x000002DA<
    0x000002DC call ag5 "openglGetProcAddress" (cstroflen 23 "glCombinerParameterfNV") *s8
    0x000002DD gvar *__funcptr_type_kind 0x000000BC
    0x000002DE bc *s8 >|2| 0x000002DC< to __funcptr_type_kind
    0x000002DF store *__funcptr_type_kind >|2| 0x000002DD<, __funcptr_type_kind >|2| 0x000002DE<
    0x000002E0 call ag5 "openglGetProcAddress" (cstroflen 24 "glCombinerParameterfvNV") *s8
    0x000002E1 gvar *__funcptr_type_kind 0x000000BD
    0x000002E2 bc *s8 >|2| 0x000002E0< to __funcptr_type_kind
    0x000002E3 store *__funcptr_type_kind >|2| 0x000002E1<, __funcptr_type_kind >|2| 0x000002E2<
    0x000002E4 call ag5 "openglGetProcAddress" (cstroflen 23 "glCombinerParameteriNV") *s8
    0x000002E5 gvar *__funcptr_type_kind 0x000000BE
    0x000002E6 bc *s8 >|2| 0x000002E4< to __funcptr_type_kind
    0x000002E7 store *__funcptr_type_kind >|2| 0x000002E5<, __funcptr_type_kind >|2| 0x000002E6<
    0x000002E8 call ag5 "openglGetProcAddress" (cstroflen 24 "glCombinerParameterivNV") *s8
    0x000002E9 gvar *__funcptr_type_kind 0x000000BF
    0x000002EA bc *s8 >|2| 0x000002E8< to __funcptr_type_kind
    0x000002EB store *__funcptr_type_kind >|2| 0x000002E9<, __funcptr_type_kind >|2| 0x000002EA<
    0x000002EC call ag5 "openglGetProcAddress" (cstroflen 29 "glCombinerStageParameterfvNV") *s8
    0x000002ED gvar *__funcptr_type_kind 0x000000C0
    0x000002EE bc *s8 >|2| 0x000002EC< to __funcptr_type_kind
    0x000002EF store *__funcptr_type_kind >|2| 0x000002ED<, __funcptr_type_kind >|2| 0x000002EE<
    0x000002F0 call ag5 "openglGetProcAddress" (cstroflen 19 "glCompileShaderARB") *s8
    0x000002F1 gvar *__funcptr_type_kind 0x000000C1
    0x000002F2 bc *s8 >|2| 0x000002F0< to __funcptr_type_kind
    0x000002F3 store *__funcptr_type_kind >|2| 0x000002F1<, __funcptr_type_kind >|2| 0x000002F2<
    0x000002F4 call ag5 "openglGetProcAddress" (cstroflen 26 "glCompileShaderIncludeARB") *s8
    0x000002F5 gvar *__funcptr_type_kind 0x000000C2
    0x000002F6 bc *s8 >|2| 0x000002F4< to __funcptr_type_kind
    0x000002F7 store *__funcptr_type_kind >|2| 0x000002F5<, __funcptr_type_kind >|2| 0x000002F6<
    0x000002F8 call ag5 "openglGetProcAddress" (cstroflen 16 "glCompileShader") *s8
    0x000002F9 gvar *__funcptr_type_kind 0x000000C3
    0x000002FA bc *s8 >|2| 0x000002F8< to __funcptr_type_kind
    0x000002FB store *__funcptr_type_kind >|2| 0x000002F9<, __funcptr_type_kind >|2| 0x000002FA<
    0x000002FC call ag5 "openglGetProcAddress" (cstroflen 31 "glCompressedMultiTexImage1DEXT") *s8
    0x000002FD gvar *__funcptr_type_kind 0x000000C4
    0x000002FE bc *s8 >|2| 0x000002FC< to __funcptr_type_kind
    0x000002FF store *__funcptr_type_kind >|2| 0x000002FD<, __funcptr_type_kind >|2| 0x000002FE<
    0x00000300 call ag5 "openglGetProcAddress" (cstroflen 31 "glCompressedMultiTexImage2DEXT") *s8
    0x00000301 gvar *__funcptr_type_kind 0x000000C5
    0x00000302 bc *s8 >|2| 0x00000300< to __funcptr_type_kind
    0x00000303 store *__funcptr_type_kind >|2| 0x00000301<, __funcptr_type_kind >|2| 0x00000302<
    0x00000304 call ag5 "openglGetProcAddress" (cstroflen 31 "glCompressedMultiTexImage3DEXT") *s8
    0x00000305 gvar *__funcptr_type_kind 0x000000C6
    0x00000306 bc *s8 >|2| 0x00000304< to __funcptr_type_kind
    0x00000307 store *__funcptr_type_kind >|2| 0x00000305<, __funcptr_type_kind >|2| 0x00000306<
    0x00000308 call ag5 "openglGetProcAddress" (cstroflen 34 "glCompressedMultiTexSubImage1DEXT") *s8
    0x00000309 gvar *__funcptr_type_kind 0x000000C7
    0x0000030A bc *s8 >|2| 0x00000308< to __funcptr_type_kind
    0x0000030B store *__funcptr_type_kind >|2| 0x00000309<, __funcptr_type_kind >|2| 0x0000030A<
    0x0000030C call ag5 "openglGetProcAddress" (cstroflen 34 "glCompressedMultiTexSubImage2DEXT") *s8
    0x0000030D gvar *__funcptr_type_kind 0x000000C8
    0x0000030E bc *s8 >|2| 0x0000030C< to __funcptr_type_kind
    0x0000030F store *__funcptr_type_kind >|2| 0x0000030D<, __funcptr_type_kind >|2| 0x0000030E<
    0x00000310 call ag5 "openglGetProcAddress" (cstroflen 34 "glCompressedMultiTexSubImage3DEXT") *s8
    0x00000311 gvar *__funcptr_type_kind 0x000000C9
    0x00000312 bc *s8 >|2| 0x00000310< to __funcptr_type_kind
    0x00000313 store *__funcptr_type_kind >|2| 0x00000311<, __funcptr_type_kind >|2| 0x00000312<
    0x00000314 call ag5 "openglGetProcAddress" (cstroflen 26 "glCompressedTexImage1DARB") *s8
    0x00000315 gvar *__funcptr_type_kind 0x000000CA
    0x00000316 bc *s8 >|2| 0x00000314< to __funcptr_type_kind
    0x00000317 store *__funcptr_type_kind >|2| 0x00000315<, __funcptr_type_kind >|2| 0x00000316<
    0x00000318 call ag5 "openglGetProcAddress" (cstroflen 23 "glCompressedTexImage1D") *s8
    0x00000319 gvar *__funcptr_type_kind 0x000000CB
    0x0000031A bc *s8 >|2| 0x00000318< to __funcptr_type_kind
    0x0000031B store *__funcptr_type_kind >|2| 0x00000319<, __funcptr_type_kind >|2| 0x0000031A<
    0x0000031C call ag5 "openglGetProcAddress" (cstroflen 26 "glCompressedTexImage2DARB") *s8
    0x0000031D gvar *__funcptr_type_kind 0x000000CC
    0x0000031E bc *s8 >|2| 0x0000031C< to __funcptr_type_kind
    0x0000031F store *__funcptr_type_kind >|2| 0x0000031D<, __funcptr_type_kind >|2| 0x0000031E<
    0x00000320 call ag5 "openglGetProcAddress" (cstroflen 23 "glCompressedTexImage2D") *s8
    0x00000321 gvar *__funcptr_type_kind 0x000000CD
    0x00000322 bc *s8 >|2| 0x00000320< to __funcptr_type_kind
    0x00000323 store *__funcptr_type_kind >|2| 0x00000321<, __funcptr_type_kind >|2| 0x00000322<
    0x00000324 call ag5 "openglGetProcAddress" (cstroflen 26 "glCompressedTexImage3DARB") *s8
    0x00000325 gvar *__funcptr_type_kind 0x000000CE
    0x00000326 bc *s8 >|2| 0x00000324< to __funcptr_type_kind
    0x00000327 store *__funcptr_type_kind >|2| 0x00000325<, __funcptr_type_kind >|2| 0x00000326<
    0x00000328 call ag5 "openglGetProcAddress" (cstroflen 23 "glCompressedTexImage3D") *s8
    0x00000329 gvar *__funcptr_type_kind 0x000000CF
    0x0000032A bc *s8 >|2| 0x00000328< to __funcptr_type_kind
    0x0000032B store *__funcptr_type_kind >|2| 0x00000329<, __funcptr_type_kind >|2| 0x0000032A<
    0x0000032C call ag5 "openglGetProcAddress" (cstroflen 29 "glCompressedTexSubImage1DARB") *s8
    0x0000032D gvar *__funcptr_type_kind 0x000000D0
    0x0000032E bc *s8 >|2| 0x0000032C< to __funcptr_type_kind
    0x0000032F store *__funcptr_type_kind >|2| 0x0000032D<, __funcptr_type_kind >|2| 0x0000032E<
    0x00000330 call ag5 "openglGetProcAddress" (cstroflen 26 "glCompressedTexSubImage1D") *s8
    0x00000331 gvar *__funcptr_type_kind 0x000000D1
    0x00000332 bc *s8 >|2| 0x00000330< to __funcptr_type_kind
    0x00000333 store *__funcptr_type_kind >|2| 0x00000331<, __funcptr_type_kind >|2| 0x00000332<
    0x00000334 call ag5 "openglGetProcAddress" (cstroflen 29 "glCompressedTexSubImage2DARB") *s8
    0x00000335 gvar *__funcptr_type_kind 0x000000D2
    0x00000336 bc *s8 >|2| 0x00000334< to __funcptr_type_kind
    0x00000337 store *__funcptr_type_kind >|2| 0x00000335<, __funcptr_type_kind >|2| 0x00000336<
    0x00000338 call ag5 "openglGetProcAddress" (cstroflen 26 "glCompressedTexSubImage2D") *s8
    0x00000339 gvar *__funcptr_type_kind 0x000000D3
    0x0000033A bc *s8 >|2| 0x00000338< to __funcptr_type_kind
    0x0000033B store *__funcptr_type_kind >|2| 0x00000339<, __funcptr_type_kind >|2| 0x0000033A<
    0x0000033C call ag5 "openglGetProcAddress" (cstroflen 29 "glCompressedTexSubImage3DARB") *s8
    0x0000033D gvar *__funcptr_type_kind 0x000000D4
    0x0000033E bc *s8 >|2| 0x0000033C< to __funcptr_type_kind
    0x0000033F store *__funcptr_type_kind >|2| 0x0000033D<, __funcptr_type_kind >|2| 0x0000033E<
    0x00000340 call ag5 "openglGetProcAddress" (cstroflen 26 "glCompressedTexSubImage3D") *s8
    0x00000341 gvar *__funcptr_type_kind 0x000000D5
    0x00000342 bc *s8 >|2| 0x00000340< to __funcptr_type_kind
    0x00000343 store *__funcptr_type_kind >|2| 0x00000341<, __funcptr_type_kind >|2| 0x00000342<
    0x00000344 call ag5 "openglGetProcAddress" (cstroflen 30 "glCompressedTextureImage1DEXT") *s8
    0x00000345 gvar *__funcptr_type_kind 0x000000D6
    0x00000346 bc *s8 >|2| 0x00000344< to __funcptr_type_kind
    0x00000347 store *__funcptr_type_kind >|2| 0x00000345<, __funcptr_type_kind >|2| 0x00000346<
    0x00000348 call ag5 "openglGetProcAddress" (cstroflen 30 "glCompressedTextureImage2DEXT") *s8
    0x00000349 gvar *__funcptr_type_kind 0x000000D7
    0x0000034A bc *s8 >|2| 0x00000348< to __funcptr_type_kind
    0x0000034B store *__funcptr_type_kind >|2| 0x00000349<, __funcptr_type_kind >|2| 0x0000034A<
    0x0000034C call ag5 "openglGetProcAddress" (cstroflen 30 "glCompressedTextureImage3DEXT") *s8
    0x0000034D gvar *__funcptr_type_kind 0x000000D8
    0x0000034E bc *s8 >|2| 0x0000034C< to __funcptr_type_kind
    0x0000034F store *__funcptr_type_kind >|2| 0x0000034D<, __funcptr_type_kind >|2| 0x0000034E<
    0x00000350 call ag5 "openglGetProcAddress" (cstroflen 33 "glCompressedTextureSubImage1DEXT") *s8
    0x00000351 gvar *__funcptr_type_kind 0x000000D9
    0x00000352 bc *s8 >|2| 0x00000350< to __funcptr_type_kind
    0x00000353 store *__funcptr_type_kind >|2| 0x00000351<, __funcptr_type_kind >|2| 0x00000352<
    0x00000354 call ag5 "openglGetProcAddress" (cstroflen 30 "glCompressedTextureSubImage1D") *s8
    0x00000355 gvar *__funcptr_type_kind 0x000000DA
    0x00000356 bc *s8 >|2| 0x00000354< to __funcptr_type_kind
    0x00000357 store *__funcptr_type_kind >|2| 0x00000355<, __funcptr_type_kind >|2| 0x00000356<
    0x00000358 call ag5 "openglGetProcAddress" (cstroflen 33 "glCompressedTextureSubImage2DEXT") *s8
    0x00000359 gvar *__funcptr_type_kind 0x000000DB
    0x0000035A bc *s8 >|2| 0x00000358< to __funcptr_type_kind
    0x0000035B store *__funcptr_type_kind >|2| 0x00000359<, __funcptr_type_kind >|2| 0x0000035A<
    0x0000035C call ag5 "openglGetProcAddress" (cstroflen 30 "glCompressedTextureSubImage2D") *s8
    0x0000035D gvar *__funcptr_type_kind 0x000000DC
    0x0000035E bc *s8 >|2| 0x0000035C< to __funcptr_type_kind
    0x0000035F store *__funcptr_type_kind >|2| 0x0000035D<, __funcptr_type_kind >|2| 0x0000035E<
    0x00000360 call ag5 "openglGetProcAddress" (cstroflen 33 "glCompressedTextureSubImage3DEXT") *s8
    0x00000361 gvar *__funcptr_type_kind 0x000000DD
    0x00000362 bc *s8 >|2| 0x00000360< to __funcptr_type_kind
    0x00000363 store *__funcptr_type_kind >|2| 0x00000361<, __funcptr_type_kind >|2| 0x00000362<
    0x00000364 call ag5 "openglGetProcAddress" (cstroflen 30 "glCompressedTextureSubImage3D") *s8
    0x00000365 gvar *__funcptr_type_kind 0x000000DE
    0x00000366 bc *s8 >|2| 0x00000364< to __funcptr_type_kind
    0x00000367 store *__funcptr_type_kind >|2| 0x00000365<, __funcptr_type_kind >|2| 0x00000366<
    0x00000368 call ag5 "openglGetProcAddress" (cstroflen 33 "glConservativeRasterParameterfNV") *s8
    0x00000369 gvar *__funcptr_type_kind 0x000000DF
    0x0000036A bc *s8 >|2| 0x00000368< to __funcptr_type_kind
    0x0000036B store *__funcptr_type_kind >|2| 0x00000369<, __funcptr_type_kind >|2| 0x0000036A<
    0x0000036C call ag5 "openglGetProcAddress" (cstroflen 25 "glConvolutionFilter1DEXT") *s8
    0x0000036D gvar *__funcptr_type_kind 0x000000E0
    0x0000036E bc *s8 >|2| 0x0000036C< to __funcptr_type_kind
    0x0000036F store *__funcptr_type_kind >|2| 0x0000036D<, __funcptr_type_kind >|2| 0x0000036E<
    0x00000370 call ag5 "openglGetProcAddress" (cstroflen 22 "glConvolutionFilter1D") *s8
    0x00000371 gvar *__funcptr_type_kind 0x000000E1
    0x00000372 bc *s8 >|2| 0x00000370< to __funcptr_type_kind
    0x00000373 store *__funcptr_type_kind >|2| 0x00000371<, __funcptr_type_kind >|2| 0x00000372<
    0x00000374 call ag5 "openglGetProcAddress" (cstroflen 25 "glConvolutionFilter2DEXT") *s8
    0x00000375 gvar *__funcptr_type_kind 0x000000E2
    0x00000376 bc *s8 >|2| 0x00000374< to __funcptr_type_kind
    0x00000377 store *__funcptr_type_kind >|2| 0x00000375<, __funcptr_type_kind >|2| 0x00000376<
    0x00000378 call ag5 "openglGetProcAddress" (cstroflen 22 "glConvolutionFilter2D") *s8
    0x00000379 gvar *__funcptr_type_kind 0x000000E3
    0x0000037A bc *s8 >|2| 0x00000378< to __funcptr_type_kind
    0x0000037B store *__funcptr_type_kind >|2| 0x00000379<, __funcptr_type_kind >|2| 0x0000037A<
    0x0000037C call ag5 "openglGetProcAddress" (cstroflen 27 "glConvolutionParameterfEXT") *s8
    0x0000037D gvar *__funcptr_type_kind 0x000000E4
    0x0000037E bc *s8 >|2| 0x0000037C< to __funcptr_type_kind
    0x0000037F store *__funcptr_type_kind >|2| 0x0000037D<, __funcptr_type_kind >|2| 0x0000037E<
    0x00000380 call ag5 "openglGetProcAddress" (cstroflen 24 "glConvolutionParameterf") *s8
    0x00000381 gvar *__funcptr_type_kind 0x000000E5
    0x00000382 bc *s8 >|2| 0x00000380< to __funcptr_type_kind
    0x00000383 store *__funcptr_type_kind >|2| 0x00000381<, __funcptr_type_kind >|2| 0x00000382<
    0x00000384 call ag5 "openglGetProcAddress" (cstroflen 28 "glConvolutionParameterfvEXT") *s8
    0x00000385 gvar *__funcptr_type_kind 0x000000E6
    0x00000386 bc *s8 >|2| 0x00000384< to __funcptr_type_kind
    0x00000387 store *__funcptr_type_kind >|2| 0x00000385<, __funcptr_type_kind >|2| 0x00000386<
    0x00000388 call ag5 "openglGetProcAddress" (cstroflen 25 "glConvolutionParameterfv") *s8
    0x00000389 gvar *__funcptr_type_kind 0x000000E7
    0x0000038A bc *s8 >|2| 0x00000388< to __funcptr_type_kind
    0x0000038B store *__funcptr_type_kind >|2| 0x00000389<, __funcptr_type_kind >|2| 0x0000038A<
    0x0000038C call ag5 "openglGetProcAddress" (cstroflen 27 "glConvolutionParameteriEXT") *s8
    0x0000038D gvar *__funcptr_type_kind 0x000000E8
    0x0000038E bc *s8 >|2| 0x0000038C< to __funcptr_type_kind
    0x0000038F store *__funcptr_type_kind >|2| 0x0000038D<, __funcptr_type_kind >|2| 0x0000038E<
    0x00000390 call ag5 "openglGetProcAddress" (cstroflen 24 "glConvolutionParameteri") *s8
    0x00000391 gvar *__funcptr_type_kind 0x000000E9
    0x00000392 bc *s8 >|2| 0x00000390< to __funcptr_type_kind
    0x00000393 store *__funcptr_type_kind >|2| 0x00000391<, __funcptr_type_kind >|2| 0x00000392<
    0x00000394 call ag5 "openglGetProcAddress" (cstroflen 28 "glConvolutionParameterivEXT") *s8
    0x00000395 gvar *__funcptr_type_kind 0x000000EA
    0x00000396 bc *s8 >|2| 0x00000394< to __funcptr_type_kind
    0x00000397 store *__funcptr_type_kind >|2| 0x00000395<, __funcptr_type_kind >|2| 0x00000396<
    0x00000398 call ag5 "openglGetProcAddress" (cstroflen 25 "glConvolutionParameteriv") *s8
    0x00000399 gvar *__funcptr_type_kind 0x000000EB
    0x0000039A bc *s8 >|2| 0x00000398< to __funcptr_type_kind
    0x0000039B store *__funcptr_type_kind >|2| 0x00000399<, __funcptr_type_kind >|2| 0x0000039A<
    0x0000039C call ag5 "openglGetProcAddress" (cstroflen 20 "glCopyBufferSubData") *s8
    0x0000039D gvar *__funcptr_type_kind 0x000000EC
    0x0000039E bc *s8 >|2| 0x0000039C< to __funcptr_type_kind
    0x0000039F store *__funcptr_type_kind >|2| 0x0000039D<, __funcptr_type_kind >|2| 0x0000039E<
    0x000003A0 call ag5 "openglGetProcAddress" (cstroflen 23 "glCopyColorSubTableEXT") *s8
    0x000003A1 gvar *__funcptr_type_kind 0x000000ED
    0x000003A2 bc *s8 >|2| 0x000003A0< to __funcptr_type_kind
    0x000003A3 store *__funcptr_type_kind >|2| 0x000003A1<, __funcptr_type_kind >|2| 0x000003A2<
    0x000003A4 call ag5 "openglGetProcAddress" (cstroflen 20 "glCopyColorSubTable") *s8
    0x000003A5 gvar *__funcptr_type_kind 0x000000EE
    0x000003A6 bc *s8 >|2| 0x000003A4< to __funcptr_type_kind
    0x000003A7 store *__funcptr_type_kind >|2| 0x000003A5<, __funcptr_type_kind >|2| 0x000003A6<
    0x000003A8 call ag5 "openglGetProcAddress" (cstroflen 17 "glCopyColorTable") *s8
    0x000003A9 gvar *__funcptr_type_kind 0x000000EF
    0x000003AA bc *s8 >|2| 0x000003A8< to __funcptr_type_kind
    0x000003AB store *__funcptr_type_kind >|2| 0x000003A9<, __funcptr_type_kind >|2| 0x000003AA<
    0x000003AC call ag5 "openglGetProcAddress" (cstroflen 20 "glCopyColorTableSGI") *s8
    0x000003AD gvar *__funcptr_type_kind 0x000000F0
    0x000003AE bc *s8 >|2| 0x000003AC< to __funcptr_type_kind
    0x000003AF store *__funcptr_type_kind >|2| 0x000003AD<, __funcptr_type_kind >|2| 0x000003AE<
    0x000003B0 call ag5 "openglGetProcAddress" (cstroflen 29 "glCopyConvolutionFilter1DEXT") *s8
    0x000003B1 gvar *__funcptr_type_kind 0x000000F1
    0x000003B2 bc *s8 >|2| 0x000003B0< to __funcptr_type_kind
    0x000003B3 store *__funcptr_type_kind >|2| 0x000003B1<, __funcptr_type_kind >|2| 0x000003B2<
    0x000003B4 call ag5 "openglGetProcAddress" (cstroflen 26 "glCopyConvolutionFilter1D") *s8
    0x000003B5 gvar *__funcptr_type_kind 0x000000F2
    0x000003B6 bc *s8 >|2| 0x000003B4< to __funcptr_type_kind
    0x000003B7 store *__funcptr_type_kind >|2| 0x000003B5<, __funcptr_type_kind >|2| 0x000003B6<
    0x000003B8 call ag5 "openglGetProcAddress" (cstroflen 29 "glCopyConvolutionFilter2DEXT") *s8
    0x000003B9 gvar *__funcptr_type_kind 0x000000F3
    0x000003BA bc *s8 >|2| 0x000003B8< to __funcptr_type_kind
    0x000003BB store *__funcptr_type_kind >|2| 0x000003B9<, __funcptr_type_kind >|2| 0x000003BA<
    0x000003BC call ag5 "openglGetProcAddress" (cstroflen 26 "glCopyConvolutionFilter2D") *s8
    0x000003BD gvar *__funcptr_type_kind 0x000000F4
    0x000003BE bc *s8 >|2| 0x000003BC< to __funcptr_type_kind
    0x000003BF store *__funcptr_type_kind >|2| 0x000003BD<, __funcptr_type_kind >|2| 0x000003BE<
    0x000003C0 call ag5 "openglGetProcAddress" (cstroflen 21 "glCopyImageSubDataNV") *s8
    0x000003C1 gvar *__funcptr_type_kind 0x000000F5
    0x000003C2 bc *s8 >|2| 0x000003C0< to __funcptr_type_kind
    0x000003C3 store *__funcptr_type_kind >|2| 0x000003C1<, __funcptr_type_kind >|2| 0x000003C2<
    0x000003C4 call ag5 "openglGetProcAddress" (cstroflen 19 "glCopyImageSubData") *s8
    0x000003C5 gvar *__funcptr_type_kind 0x000000F6
    0x000003C6 bc *s8 >|2| 0x000003C4< to __funcptr_type_kind
    0x000003C7 store *__funcptr_type_kind >|2| 0x000003C5<, __funcptr_type_kind >|2| 0x000003C6<
    0x000003C8 call ag5 "openglGetProcAddress" (cstroflen 25 "glCopyMultiTexImage1DEXT") *s8
    0x000003C9 gvar *__funcptr_type_kind 0x000000F7
    0x000003CA bc *s8 >|2| 0x000003C8< to __funcptr_type_kind
    0x000003CB store *__funcptr_type_kind >|2| 0x000003C9<, __funcptr_type_kind >|2| 0x000003CA<
    0x000003CC call ag5 "openglGetProcAddress" (cstroflen 25 "glCopyMultiTexImage2DEXT") *s8
    0x000003CD gvar *__funcptr_type_kind 0x000000F8
    0x000003CE bc *s8 >|2| 0x000003CC< to __funcptr_type_kind
    0x000003CF store *__funcptr_type_kind >|2| 0x000003CD<, __funcptr_type_kind >|2| 0x000003CE<
    0x000003D0 call ag5 "openglGetProcAddress" (cstroflen 28 "glCopyMultiTexSubImage1DEXT") *s8
    0x000003D1 gvar *__funcptr_type_kind 0x000000F9
    0x000003D2 bc *s8 >|2| 0x000003D0< to __funcptr_type_kind
    0x000003D3 store *__funcptr_type_kind >|2| 0x000003D1<, __funcptr_type_kind >|2| 0x000003D2<
    0x000003D4 call ag5 "openglGetProcAddress" (cstroflen 28 "glCopyMultiTexSubImage2DEXT") *s8
    0x000003D5 gvar *__funcptr_type_kind 0x000000FA
    0x000003D6 bc *s8 >|2| 0x000003D4< to __funcptr_type_kind
    0x000003D7 store *__funcptr_type_kind >|2| 0x000003D5<, __funcptr_type_kind >|2| 0x000003D6<
    0x000003D8 call ag5 "openglGetProcAddress" (cstroflen 28 "glCopyMultiTexSubImage3DEXT") *s8
    0x000003D9 gvar *__funcptr_type_kind 0x000000FB
    0x000003DA bc *s8 >|2| 0x000003D8< to __funcptr_type_kind
    0x000003DB store *__funcptr_type_kind >|2| 0x000003D9<, __funcptr_type_kind >|2| 0x000003DA<
    0x000003DC call ag5 "openglGetProcAddress" (cstroflen 25 "glCopyNamedBufferSubData") *s8
    0x000003DD gvar *__funcptr_type_kind 0x000000FC
    0x000003DE bc *s8 >|2| 0x000003DC< to __funcptr_type_kind
    0x000003DF store *__funcptr_type_kind >|2| 0x000003DD<, __funcptr_type_kind >|2| 0x000003DE<
    0x000003E0 call ag5 "openglGetProcAddress" (cstroflen 13 "glCopyPathNV") *s8
    0x000003E1 gvar *__funcptr_type_kind 0x000000FD
    0x000003E2 bc *s8 >|2| 0x000003E0< to __funcptr_type_kind
    0x000003E3 store *__funcptr_type_kind >|2| 0x000003E1<, __funcptr_type_kind >|2| 0x000003E2<
    0x000003E4 call ag5 "openglGetProcAddress" (cstroflen 20 "glCopyTexImage1DEXT") *s8
    0x000003E5 gvar *__funcptr_type_kind 0x000000FE
    0x000003E6 bc *s8 >|2| 0x000003E4< to __funcptr_type_kind
    0x000003E7 store *__funcptr_type_kind >|2| 0x000003E5<, __funcptr_type_kind >|2| 0x000003E6<
    0x000003E8 call ag5 "openglGetProcAddress" (cstroflen 20 "glCopyTexImage2DEXT") *s8
    0x000003E9 gvar *__funcptr_type_kind 0x000000FF
    0x000003EA bc *s8 >|2| 0x000003E8< to __funcptr_type_kind
    0x000003EB store *__funcptr_type_kind >|2| 0x000003E9<, __funcptr_type_kind >|2| 0x000003EA<
    0x000003EC call ag5 "openglGetProcAddress" (cstroflen 23 "glCopyTexSubImage1DEXT") *s8
    0x000003ED gvar *__funcptr_type_kind 0x00000100
    0x000003EE bc *s8 >|2| 0x000003EC< to __funcptr_type_kind
    0x000003EF store *__funcptr_type_kind >|2| 0x000003ED<, __funcptr_type_kind >|2| 0x000003EE<
    0x000003F0 call ag5 "openglGetProcAddress" (cstroflen 23 "glCopyTexSubImage2DEXT") *s8
    0x000003F1 gvar *__funcptr_type_kind 0x00000101
    0x000003F2 bc *s8 >|2| 0x000003F0< to __funcptr_type_kind
    0x000003F3 store *__funcptr_type_kind >|2| 0x000003F1<, __funcptr_type_kind >|2| 0x000003F2<
    0x000003F4 call ag5 "openglGetProcAddress" (cstroflen 23 "glCopyTexSubImage3DEXT") *s8
    0x000003F5 gvar *__funcptr_type_kind 0x00000102
    0x000003F6 bc *s8 >|2| 0x000003F4< to __funcptr_type_kind
    0x000003F7 store *__funcptr_type_kind >|2| 0x000003F5<, __funcptr_type_kind >|2| 0x000003F6<
    0x000003F8 call ag5 "openglGetProcAddress" (cstroflen 20 "glCopyTexSubImage3D") *s8
    0x000003F9 gvar *__funcptr_type_kind 0x00000103
    0x000003FA bc *s8 >|2| 0x000003F8< to __funcptr_type_kind
    0x000003FB store *__funcptr_type_kind >|2| 0x000003F9<, __funcptr_type_kind >|2| 0x000003FA<
    0x000003FC call ag5 "openglGetProcAddress" (cstroflen 24 "glCopyTextureImage1DEXT") *s8
    0x000003FD gvar *__funcptr_type_kind 0x00000104
    0x000003FE bc *s8 >|2| 0x000003FC< to __funcptr_type_kind
    0x000003FF store *__funcptr_type_kind >|2| 0x000003FD<, __funcptr_type_kind >|2| 0x000003FE<
    0x00000400 call ag5 "openglGetProcAddress" (cstroflen 24 "glCopyTextureImage2DEXT") *s8
    0x00000401 gvar *__funcptr_type_kind 0x00000105
    0x00000402 bc *s8 >|2| 0x00000400< to __funcptr_type_kind
    0x00000403 store *__funcptr_type_kind >|2| 0x00000401<, __funcptr_type_kind >|2| 0x00000402<
    0x00000404 call ag5 "openglGetProcAddress" (cstroflen 27 "glCopyTextureSubImage1DEXT") *s8
    0x00000405 gvar *__funcptr_type_kind 0x00000106
    0x00000406 bc *s8 >|2| 0x00000404< to __funcptr_type_kind
    0x00000407 store *__funcptr_type_kind >|2| 0x00000405<, __funcptr_type_kind >|2| 0x00000406<
    0x00000408 call ag5 "openglGetProcAddress" (cstroflen 24 "glCopyTextureSubImage1D") *s8
    0x00000409 gvar *__funcptr_type_kind 0x00000107
    0x0000040A bc *s8 >|2| 0x00000408< to __funcptr_type_kind
    0x0000040B store *__funcptr_type_kind >|2| 0x00000409<, __funcptr_type_kind >|2| 0x0000040A<
    0x0000040C call ag5 "openglGetProcAddress" (cstroflen 27 "glCopyTextureSubImage2DEXT") *s8
    0x0000040D gvar *__funcptr_type_kind 0x00000108
    0x0000040E bc *s8 >|2| 0x0000040C< to __funcptr_type_kind
    0x0000040F store *__funcptr_type_kind >|2| 0x0000040D<, __funcptr_type_kind >|2| 0x0000040E<
    0x00000410 call ag5 "openglGetProcAddress" (cstroflen 24 "glCopyTextureSubImage2D") *s8
    0x00000411 gvar *__funcptr_type_kind 0x00000109
    0x00000412 bc *s8 >|2| 0x00000410< to __funcptr_type_kind
    0x00000413 store *__funcptr_type_kind >|2| 0x00000411<, __funcptr_type_kind >|2| 0x00000412<
    0x00000414 call ag5 "openglGetProcAddress" (cstroflen 27 "glCopyTextureSubImage3DEXT") *s8
    0x00000415 gvar *__funcptr_type_kind 0x0000010A
    0x00000416 bc *s8 >|2| 0x00000414< to __funcptr_type_kind
    0x00000417 store *__funcptr_type_kind >|2| 0x00000415<, __funcptr_type_kind >|2| 0x00000416<
    0x00000418 call ag5 "openglGetProcAddress" (cstroflen 24 "glCopyTextureSubImage3D") *s8
    0x00000419 gvar *__funcptr_type_kind 0x0000010B
    0x0000041A bc *s8 >|2| 0x00000418< to __funcptr_type_kind
    0x0000041B store *__funcptr_type_kind >|2| 0x00000419<, __funcptr_type_kind >|2| 0x0000041A<
    0x0000041C call ag5 "openglGetProcAddress" (cstroflen 23 "glCoverageModulationNV") *s8
    0x0000041D gvar *__funcptr_type_kind 0x0000010C
    0x0000041E bc *s8 >|2| 0x0000041C< to __funcptr_type_kind
    0x0000041F store *__funcptr_type_kind >|2| 0x0000041D<, __funcptr_type_kind >|2| 0x0000041E<
    0x00000420 call ag5 "openglGetProcAddress" (cstroflen 28 "glCoverageModulationTableNV") *s8
    0x00000421 gvar *__funcptr_type_kind 0x0000010D
    0x00000422 bc *s8 >|2| 0x00000420< to __funcptr_type_kind
    0x00000423 store *__funcptr_type_kind >|2| 0x00000421<, __funcptr_type_kind >|2| 0x00000422<
    0x00000424 call ag5 "openglGetProcAddress" (cstroflen 27 "glCoverFillPathInstancedNV") *s8
    0x00000425 gvar *__funcptr_type_kind 0x0000010E
    0x00000426 bc *s8 >|2| 0x00000424< to __funcptr_type_kind
    0x00000427 store *__funcptr_type_kind >|2| 0x00000425<, __funcptr_type_kind >|2| 0x00000426<
    0x00000428 call ag5 "openglGetProcAddress" (cstroflen 18 "glCoverFillPathNV") *s8
    0x00000429 gvar *__funcptr_type_kind 0x0000010F
    0x0000042A bc *s8 >|2| 0x00000428< to __funcptr_type_kind
    0x0000042B store *__funcptr_type_kind >|2| 0x00000429<, __funcptr_type_kind >|2| 0x0000042A<
    0x0000042C call ag5 "openglGetProcAddress" (cstroflen 29 "glCoverStrokePathInstancedNV") *s8
    0x0000042D gvar *__funcptr_type_kind 0x00000110
    0x0000042E bc *s8 >|2| 0x0000042C< to __funcptr_type_kind
    0x0000042F store *__funcptr_type_kind >|2| 0x0000042D<, __funcptr_type_kind >|2| 0x0000042E<
    0x00000430 call ag5 "openglGetProcAddress" (cstroflen 20 "glCoverStrokePathNV") *s8
    0x00000431 gvar *__funcptr_type_kind 0x00000111
    0x00000432 bc *s8 >|2| 0x00000430< to __funcptr_type_kind
    0x00000433 store *__funcptr_type_kind >|2| 0x00000431<, __funcptr_type_kind >|2| 0x00000432<
    0x00000434 call ag5 "openglGetProcAddress" (cstroflen 16 "glCreateBuffers") *s8
    0x00000435 gvar *__funcptr_type_kind 0x00000112
    0x00000436 bc *s8 >|2| 0x00000434< to __funcptr_type_kind
    0x00000437 store *__funcptr_type_kind >|2| 0x00000435<, __funcptr_type_kind >|2| 0x00000436<
    0x00000438 call ag5 "openglGetProcAddress" (cstroflen 21 "glCreateFramebuffers") *s8
    0x00000439 gvar *__funcptr_type_kind 0x00000113
    0x0000043A bc *s8 >|2| 0x00000438< to __funcptr_type_kind
    0x0000043B store *__funcptr_type_kind >|2| 0x00000439<, __funcptr_type_kind >|2| 0x0000043A<
    0x0000043C call ag5 "openglGetProcAddress" (cstroflen 23 "glCreatePerfQueryINTEL") *s8
    0x0000043D gvar *__funcptr_type_kind 0x00000114
    0x0000043E bc *s8 >|2| 0x0000043C< to __funcptr_type_kind
    0x0000043F store *__funcptr_type_kind >|2| 0x0000043D<, __funcptr_type_kind >|2| 0x0000043E<
    0x00000440 call ag5 "openglGetProcAddress" (cstroflen 16 "glCreateProgram") *s8
    0x00000441 gvar *__funcptr_type_kind 0x00000115
    0x00000442 bc *s8 >|2| 0x00000440< to __funcptr_type_kind
    0x00000443 store *__funcptr_type_kind >|2| 0x00000441<, __funcptr_type_kind >|2| 0x00000442<
    0x00000444 call ag5 "openglGetProcAddress" (cstroflen 25 "glCreateProgramPipelines") *s8
    0x00000445 gvar *__funcptr_type_kind 0x00000116
    0x00000446 bc *s8 >|2| 0x00000444< to __funcptr_type_kind
    0x00000447 store *__funcptr_type_kind >|2| 0x00000445<, __funcptr_type_kind >|2| 0x00000446<
    0x00000448 call ag5 "openglGetProcAddress" (cstroflen 16 "glCreateQueries") *s8
    0x00000449 gvar *__funcptr_type_kind 0x00000117
    0x0000044A bc *s8 >|2| 0x00000448< to __funcptr_type_kind
    0x0000044B store *__funcptr_type_kind >|2| 0x00000449<, __funcptr_type_kind >|2| 0x0000044A<
    0x0000044C call ag5 "openglGetProcAddress" (cstroflen 22 "glCreateRenderbuffers") *s8
    0x0000044D gvar *__funcptr_type_kind 0x00000118
    0x0000044E bc *s8 >|2| 0x0000044C< to __funcptr_type_kind
    0x0000044F store *__funcptr_type_kind >|2| 0x0000044D<, __funcptr_type_kind >|2| 0x0000044E<
    0x00000450 call ag5 "openglGetProcAddress" (cstroflen 17 "glCreateSamplers") *s8
    0x00000451 gvar *__funcptr_type_kind 0x00000119
    0x00000452 bc *s8 >|2| 0x00000450< to __funcptr_type_kind
    0x00000453 store *__funcptr_type_kind >|2| 0x00000451<, __funcptr_type_kind >|2| 0x00000452<
    0x00000454 call ag5 "openglGetProcAddress" (cstroflen 15 "glCreateShader") *s8
    0x00000455 gvar *__funcptr_type_kind 0x0000011A
    0x00000456 bc *s8 >|2| 0x00000454< to __funcptr_type_kind
    0x00000457 store *__funcptr_type_kind >|2| 0x00000455<, __funcptr_type_kind >|2| 0x00000456<
    0x00000458 call ag5 "openglGetProcAddress" (cstroflen 17 "glCreateTextures") *s8
    0x00000459 gvar *__funcptr_type_kind 0x0000011B
    0x0000045A bc *s8 >|2| 0x00000458< to __funcptr_type_kind
    0x0000045B store *__funcptr_type_kind >|2| 0x00000459<, __funcptr_type_kind >|2| 0x0000045A<
    0x0000045C call ag5 "openglGetProcAddress" (cstroflen 27 "glCreateTransformFeedbacks") *s8
    0x0000045D gvar *__funcptr_type_kind 0x0000011C
    0x0000045E bc *s8 >|2| 0x0000045C< to __funcptr_type_kind
    0x0000045F store *__funcptr_type_kind >|2| 0x0000045D<, __funcptr_type_kind >|2| 0x0000045E<
    0x00000460 call ag5 "openglGetProcAddress" (cstroflen 21 "glCreateVertexArrays") *s8
    0x00000461 gvar *__funcptr_type_kind 0x0000011D
    0x00000462 bc *s8 >|2| 0x00000460< to __funcptr_type_kind
    0x00000463 store *__funcptr_type_kind >|2| 0x00000461<, __funcptr_type_kind >|2| 0x00000462<
    0x00000464 call ag5 "openglGetProcAddress" (cstroflen 21 "glCullParameterdvEXT") *s8
    0x00000465 gvar *__funcptr_type_kind 0x0000011E
    0x00000466 bc *s8 >|2| 0x00000464< to __funcptr_type_kind
    0x00000467 store *__funcptr_type_kind >|2| 0x00000465<, __funcptr_type_kind >|2| 0x00000466<
    0x00000468 call ag5 "openglGetProcAddress" (cstroflen 21 "glCullParameterfvEXT") *s8
    0x00000469 gvar *__funcptr_type_kind 0x0000011F
    0x0000046A bc *s8 >|2| 0x00000468< to __funcptr_type_kind
    0x0000046B store *__funcptr_type_kind >|2| 0x00000469<, __funcptr_type_kind >|2| 0x0000046A<
    0x0000046C call ag5 "openglGetProcAddress" (cstroflen 26 "glCurrentPaletteMatrixARB") *s8
    0x0000046D gvar *__funcptr_type_kind 0x00000120
    0x0000046E bc *s8 >|2| 0x0000046C< to __funcptr_type_kind
    0x0000046F store *__funcptr_type_kind >|2| 0x0000046D<, __funcptr_type_kind >|2| 0x0000046E<
    0x00000470 call ag5 "openglGetProcAddress" (cstroflen 26 "glDebugMessageCallbackAMD") *s8
    0x00000471 gvar *__funcptr_type_kind 0x00000121
    0x00000472 bc *s8 >|2| 0x00000470< to __funcptr_type_kind
    0x00000473 store *__funcptr_type_kind >|2| 0x00000471<, __funcptr_type_kind >|2| 0x00000472<
    0x00000474 call ag5 "openglGetProcAddress" (cstroflen 26 "glDebugMessageCallbackARB") *s8
    0x00000475 gvar *__funcptr_type_kind 0x00000122
    0x00000476 bc *s8 >|2| 0x00000474< to __funcptr_type_kind
    0x00000477 store *__funcptr_type_kind >|2| 0x00000475<, __funcptr_type_kind >|2| 0x00000476<
    0x00000478 call ag5 "openglGetProcAddress" (cstroflen 23 "glDebugMessageCallback") *s8
    0x00000479 gvar *__funcptr_type_kind 0x00000123
    0x0000047A bc *s8 >|2| 0x00000478< to __funcptr_type_kind
    0x0000047B store *__funcptr_type_kind >|2| 0x00000479<, __funcptr_type_kind >|2| 0x0000047A<
    0x0000047C call ag5 "openglGetProcAddress" (cstroflen 25 "glDebugMessageControlARB") *s8
    0x0000047D gvar *__funcptr_type_kind 0x00000124
    0x0000047E bc *s8 >|2| 0x0000047C< to __funcptr_type_kind
    0x0000047F store *__funcptr_type_kind >|2| 0x0000047D<, __funcptr_type_kind >|2| 0x0000047E<
    0x00000480 call ag5 "openglGetProcAddress" (cstroflen 22 "glDebugMessageControl") *s8
    0x00000481 gvar *__funcptr_type_kind 0x00000125
    0x00000482 bc *s8 >|2| 0x00000480< to __funcptr_type_kind
    0x00000483 store *__funcptr_type_kind >|2| 0x00000481<, __funcptr_type_kind >|2| 0x00000482<
    0x00000484 call ag5 "openglGetProcAddress" (cstroflen 24 "glDebugMessageEnableAMD") *s8
    0x00000485 gvar *__funcptr_type_kind 0x00000126
    0x00000486 bc *s8 >|2| 0x00000484< to __funcptr_type_kind
    0x00000487 store *__funcptr_type_kind >|2| 0x00000485<, __funcptr_type_kind >|2| 0x00000486<
    0x00000488 call ag5 "openglGetProcAddress" (cstroflen 24 "glDebugMessageInsertAMD") *s8
    0x00000489 gvar *__funcptr_type_kind 0x00000127
    0x0000048A bc *s8 >|2| 0x00000488< to __funcptr_type_kind
    0x0000048B store *__funcptr_type_kind >|2| 0x00000489<, __funcptr_type_kind >|2| 0x0000048A<
    0x0000048C call ag5 "openglGetProcAddress" (cstroflen 24 "glDebugMessageInsertARB") *s8
    0x0000048D gvar *__funcptr_type_kind 0x00000128
    0x0000048E bc *s8 >|2| 0x0000048C< to __funcptr_type_kind
    0x0000048F store *__funcptr_type_kind >|2| 0x0000048D<, __funcptr_type_kind >|2| 0x0000048E<
    0x00000490 call ag5 "openglGetProcAddress" (cstroflen 21 "glDebugMessageInsert") *s8
    0x00000491 gvar *__funcptr_type_kind 0x00000129
    0x00000492 bc *s8 >|2| 0x00000490< to __funcptr_type_kind
    0x00000493 store *__funcptr_type_kind >|2| 0x00000491<, __funcptr_type_kind >|2| 0x00000492<
    0x00000494 call ag5 "openglGetProcAddress" (cstroflen 25 "glDeleteAsyncMarkersSGIX") *s8
    0x00000495 gvar *__funcptr_type_kind 0x0000012A
    0x00000496 bc *s8 >|2| 0x00000494< to __funcptr_type_kind
    0x00000497 store *__funcptr_type_kind >|2| 0x00000495<, __funcptr_type_kind >|2| 0x00000496<
    0x00000498 call ag5 "openglGetProcAddress" (cstroflen 21 "glDeleteBufferRegion") *s8
    0x00000499 gvar *__funcptr_type_kind 0x0000012B
    0x0000049A bc *s8 >|2| 0x00000498< to __funcptr_type_kind
    0x0000049B store *__funcptr_type_kind >|2| 0x00000499<, __funcptr_type_kind >|2| 0x0000049A<
    0x0000049C call ag5 "openglGetProcAddress" (cstroflen 19 "glDeleteBuffersARB") *s8
    0x0000049D gvar *__funcptr_type_kind 0x0000012C
    0x0000049E bc *s8 >|2| 0x0000049C< to __funcptr_type_kind
    0x0000049F store *__funcptr_type_kind >|2| 0x0000049D<, __funcptr_type_kind >|2| 0x0000049E<
    0x000004A0 call ag5 "openglGetProcAddress" (cstroflen 16 "glDeleteBuffers") *s8
    0x000004A1 gvar *__funcptr_type_kind 0x0000012D
    0x000004A2 bc *s8 >|2| 0x000004A0< to __funcptr_type_kind
    0x000004A3 store *__funcptr_type_kind >|2| 0x000004A1<, __funcptr_type_kind >|2| 0x000004A2<
    0x000004A4 call ag5 "openglGetProcAddress" (cstroflen 20 "glDeleteFencesAPPLE") *s8
    0x000004A5 gvar *__funcptr_type_kind 0x0000012E
    0x000004A6 bc *s8 >|2| 0x000004A4< to __funcptr_type_kind
    0x000004A7 store *__funcptr_type_kind >|2| 0x000004A5<, __funcptr_type_kind >|2| 0x000004A6<
    0x000004A8 call ag5 "openglGetProcAddress" (cstroflen 17 "glDeleteFencesNV") *s8
    0x000004A9 gvar *__funcptr_type_kind 0x0000012F
    0x000004AA bc *s8 >|2| 0x000004A8< to __funcptr_type_kind
    0x000004AB store *__funcptr_type_kind >|2| 0x000004A9<, __funcptr_type_kind >|2| 0x000004AA<
    0x000004AC call ag5 "openglGetProcAddress" (cstroflen 26 "glDeleteFragmentShaderATI") *s8
    0x000004AD gvar *__funcptr_type_kind 0x00000130
    0x000004AE bc *s8 >|2| 0x000004AC< to __funcptr_type_kind
    0x000004AF store *__funcptr_type_kind >|2| 0x000004AD<, __funcptr_type_kind >|2| 0x000004AE<
    0x000004B0 call ag5 "openglGetProcAddress" (cstroflen 24 "glDeleteFramebuffersEXT") *s8
    0x000004B1 gvar *__funcptr_type_kind 0x00000131
    0x000004B2 bc *s8 >|2| 0x000004B0< to __funcptr_type_kind
    0x000004B3 store *__funcptr_type_kind >|2| 0x000004B1<, __funcptr_type_kind >|2| 0x000004B2<
    0x000004B4 call ag5 "openglGetProcAddress" (cstroflen 21 "glDeleteFramebuffers") *s8
    0x000004B5 gvar *__funcptr_type_kind 0x00000132
    0x000004B6 bc *s8 >|2| 0x000004B4< to __funcptr_type_kind
    0x000004B7 store *__funcptr_type_kind >|2| 0x000004B5<, __funcptr_type_kind >|2| 0x000004B6<
    0x000004B8 call ag5 "openglGetProcAddress" (cstroflen 23 "glDeleteNamedStringARB") *s8
    0x000004B9 gvar *__funcptr_type_kind 0x00000133
    0x000004BA bc *s8 >|2| 0x000004B8< to __funcptr_type_kind
    0x000004BB store *__funcptr_type_kind >|2| 0x000004B9<, __funcptr_type_kind >|2| 0x000004BA<
    0x000004BC call ag5 "openglGetProcAddress" (cstroflen 17 "glDeleteNamesAMD") *s8
    0x000004BD gvar *__funcptr_type_kind 0x00000134
    0x000004BE bc *s8 >|2| 0x000004BC< to __funcptr_type_kind
    0x000004BF store *__funcptr_type_kind >|2| 0x000004BD<, __funcptr_type_kind >|2| 0x000004BE<
    0x000004C0 call ag5 "openglGetProcAddress" (cstroflen 18 "glDeleteObjectARB") *s8
    0x000004C1 gvar *__funcptr_type_kind 0x00000135
    0x000004C2 bc *s8 >|2| 0x000004C0< to __funcptr_type_kind
    0x000004C3 store *__funcptr_type_kind >|2| 0x000004C1<, __funcptr_type_kind >|2| 0x000004C2<
    0x000004C4 call ag5 "openglGetProcAddress" (cstroflen 27 "glDeleteOcclusionQueriesNV") *s8
    0x000004C5 gvar *__funcptr_type_kind 0x00000136
    0x000004C6 bc *s8 >|2| 0x000004C4< to __funcptr_type_kind
    0x000004C7 store *__funcptr_type_kind >|2| 0x000004C5<, __funcptr_type_kind >|2| 0x000004C6<
    0x000004C8 call ag5 "openglGetProcAddress" (cstroflen 16 "glDeletePathsNV") *s8
    0x000004C9 gvar *__funcptr_type_kind 0x00000137
    0x000004CA bc *s8 >|2| 0x000004C8< to __funcptr_type_kind
    0x000004CB store *__funcptr_type_kind >|2| 0x000004C9<, __funcptr_type_kind >|2| 0x000004CA<
    0x000004CC call ag5 "openglGetProcAddress" (cstroflen 24 "glDeletePerfMonitorsAMD") *s8
    0x000004CD gvar *__funcptr_type_kind 0x00000138
    0x000004CE bc *s8 >|2| 0x000004CC< to __funcptr_type_kind
    0x000004CF store *__funcptr_type_kind >|2| 0x000004CD<, __funcptr_type_kind >|2| 0x000004CE<
    0x000004D0 call ag5 "openglGetProcAddress" (cstroflen 23 "glDeletePerfQueryINTEL") *s8
    0x000004D1 gvar *__funcptr_type_kind 0x00000139
    0x000004D2 bc *s8 >|2| 0x000004D0< to __funcptr_type_kind
    0x000004D3 store *__funcptr_type_kind >|2| 0x000004D1<, __funcptr_type_kind >|2| 0x000004D2<
    0x000004D4 call ag5 "openglGetProcAddress" (cstroflen 25 "glDeleteProgramPipelines") *s8
    0x000004D5 gvar *__funcptr_type_kind 0x0000013A
    0x000004D6 bc *s8 >|2| 0x000004D4< to __funcptr_type_kind
    0x000004D7 store *__funcptr_type_kind >|2| 0x000004D5<, __funcptr_type_kind >|2| 0x000004D6<
    0x000004D8 call ag5 "openglGetProcAddress" (cstroflen 16 "glDeleteProgram") *s8
    0x000004D9 gvar *__funcptr_type_kind 0x0000013B
    0x000004DA bc *s8 >|2| 0x000004D8< to __funcptr_type_kind
    0x000004DB store *__funcptr_type_kind >|2| 0x000004D9<, __funcptr_type_kind >|2| 0x000004DA<
    0x000004DC call ag5 "openglGetProcAddress" (cstroflen 20 "glDeleteProgramsARB") *s8
    0x000004DD gvar *__funcptr_type_kind 0x0000013C
    0x000004DE bc *s8 >|2| 0x000004DC< to __funcptr_type_kind
    0x000004DF store *__funcptr_type_kind >|2| 0x000004DD<, __funcptr_type_kind >|2| 0x000004DE<
    0x000004E0 call ag5 "openglGetProcAddress" (cstroflen 19 "glDeleteProgramsNV") *s8
    0x000004E1 gvar *__funcptr_type_kind 0x0000013D
    0x000004E2 bc *s8 >|2| 0x000004E0< to __funcptr_type_kind
    0x000004E3 store *__funcptr_type_kind >|2| 0x000004E1<, __funcptr_type_kind >|2| 0x000004E2<
    0x000004E4 call ag5 "openglGetProcAddress" (cstroflen 21 "glDeleteQueriesANGLE") *s8
    0x000004E5 gvar *__funcptr_type_kind 0x0000013E
    0x000004E6 bc *s8 >|2| 0x000004E4< to __funcptr_type_kind
    0x000004E7 store *__funcptr_type_kind >|2| 0x000004E5<, __funcptr_type_kind >|2| 0x000004E6<
    0x000004E8 call ag5 "openglGetProcAddress" (cstroflen 19 "glDeleteQueriesARB") *s8
    0x000004E9 gvar *__funcptr_type_kind 0x0000013F
    0x000004EA bc *s8 >|2| 0x000004E8< to __funcptr_type_kind
    0x000004EB store *__funcptr_type_kind >|2| 0x000004E9<, __funcptr_type_kind >|2| 0x000004EA<
    0x000004EC call ag5 "openglGetProcAddress" (cstroflen 16 "glDeleteQueries") *s8
    0x000004ED gvar *__funcptr_type_kind 0x00000140
    0x000004EE bc *s8 >|2| 0x000004EC< to __funcptr_type_kind
    0x000004EF store *__funcptr_type_kind >|2| 0x000004ED<, __funcptr_type_kind >|2| 0x000004EE<
    0x000004F0 call ag5 "openglGetProcAddress" (cstroflen 25 "glDeleteRenderbuffersEXT") *s8
    0x000004F1 gvar *__funcptr_type_kind 0x00000141
    0x000004F2 bc *s8 >|2| 0x000004F0< to __funcptr_type_kind
    0x000004F3 store *__funcptr_type_kind >|2| 0x000004F1<, __funcptr_type_kind >|2| 0x000004F2<
    0x000004F4 call ag5 "openglGetProcAddress" (cstroflen 22 "glDeleteRenderbuffers") *s8
    0x000004F5 gvar *__funcptr_type_kind 0x00000142
    0x000004F6 bc *s8 >|2| 0x000004F4< to __funcptr_type_kind
    0x000004F7 store *__funcptr_type_kind >|2| 0x000004F5<, __funcptr_type_kind >|2| 0x000004F6<
    0x000004F8 call ag5 "openglGetProcAddress" (cstroflen 17 "glDeleteSamplers") *s8
    0x000004F9 gvar *__funcptr_type_kind 0x00000143
    0x000004FA bc *s8 >|2| 0x000004F8< to __funcptr_type_kind
    0x000004FB store *__funcptr_type_kind >|2| 0x000004F9<, __funcptr_type_kind >|2| 0x000004FA<
    0x000004FC call ag5 "openglGetProcAddress" (cstroflen 15 "glDeleteShader") *s8
    0x000004FD gvar *__funcptr_type_kind 0x00000144
    0x000004FE bc *s8 >|2| 0x000004FC< to __funcptr_type_kind
    0x000004FF store *__funcptr_type_kind >|2| 0x000004FD<, __funcptr_type_kind >|2| 0x000004FE<
    0x00000500 call ag5 "openglGetProcAddress" (cstroflen 13 "glDeleteSync") *s8
    0x00000501 gvar *__funcptr_type_kind 0x00000145
    0x00000502 bc *s8 >|2| 0x00000500< to __funcptr_type_kind
    0x00000503 store *__funcptr_type_kind >|2| 0x00000501<, __funcptr_type_kind >|2| 0x00000502<
    0x00000504 call ag5 "openglGetProcAddress" (cstroflen 20 "glDeleteTexturesEXT") *s8
    0x00000505 gvar *__funcptr_type_kind 0x00000146
    0x00000506 bc *s8 >|2| 0x00000504< to __funcptr_type_kind
    0x00000507 store *__funcptr_type_kind >|2| 0x00000505<, __funcptr_type_kind >|2| 0x00000506<
    0x00000508 call ag5 "openglGetProcAddress" (cstroflen 29 "glDeleteTransformFeedbacksNV") *s8
    0x00000509 gvar *__funcptr_type_kind 0x00000147
    0x0000050A bc *s8 >|2| 0x00000508< to __funcptr_type_kind
    0x0000050B store *__funcptr_type_kind >|2| 0x00000509<, __funcptr_type_kind >|2| 0x0000050A<
    0x0000050C call ag5 "openglGetProcAddress" (cstroflen 27 "glDeleteTransformFeedbacks") *s8
    0x0000050D gvar *__funcptr_type_kind 0x00000148
    0x0000050E bc *s8 >|2| 0x0000050C< to __funcptr_type_kind
    0x0000050F store *__funcptr_type_kind >|2| 0x0000050D<, __funcptr_type_kind >|2| 0x0000050E<
    0x00000510 call ag5 "openglGetProcAddress" (cstroflen 26 "glDeleteVertexArraysAPPLE") *s8
    0x00000511 gvar *__funcptr_type_kind 0x00000149
    0x00000512 bc *s8 >|2| 0x00000510< to __funcptr_type_kind
    0x00000513 store *__funcptr_type_kind >|2| 0x00000511<, __funcptr_type_kind >|2| 0x00000512<
    0x00000514 call ag5 "openglGetProcAddress" (cstroflen 21 "glDeleteVertexArrays") *s8
    0x00000515 gvar *__funcptr_type_kind 0x0000014A
    0x00000516 bc *s8 >|2| 0x00000514< to __funcptr_type_kind
    0x00000517 store *__funcptr_type_kind >|2| 0x00000515<, __funcptr_type_kind >|2| 0x00000516<
    0x00000518 call ag5 "openglGetProcAddress" (cstroflen 24 "glDeleteVertexShaderEXT") *s8
    0x00000519 gvar *__funcptr_type_kind 0x0000014B
    0x0000051A bc *s8 >|2| 0x00000518< to __funcptr_type_kind
    0x0000051B store *__funcptr_type_kind >|2| 0x00000519<, __funcptr_type_kind >|2| 0x0000051A<
    0x0000051C call ag5 "openglGetProcAddress" (cstroflen 17 "glDepthBoundsdNV") *s8
    0x0000051D gvar *__funcptr_type_kind 0x0000014C
    0x0000051E bc *s8 >|2| 0x0000051C< to __funcptr_type_kind
    0x0000051F store *__funcptr_type_kind >|2| 0x0000051D<, __funcptr_type_kind >|2| 0x0000051E<
    0x00000520 call ag5 "openglGetProcAddress" (cstroflen 17 "glDepthBoundsEXT") *s8
    0x00000521 gvar *__funcptr_type_kind 0x0000014D
    0x00000522 bc *s8 >|2| 0x00000520< to __funcptr_type_kind
    0x00000523 store *__funcptr_type_kind >|2| 0x00000521<, __funcptr_type_kind >|2| 0x00000522<
    0x00000524 call ag5 "openglGetProcAddress" (cstroflen 19 "glDepthRangeArrayv") *s8
    0x00000525 gvar *__funcptr_type_kind 0x0000014E
    0x00000526 bc *s8 >|2| 0x00000524< to __funcptr_type_kind
    0x00000527 store *__funcptr_type_kind >|2| 0x00000525<, __funcptr_type_kind >|2| 0x00000526<
    0x00000528 call ag5 "openglGetProcAddress" (cstroflen 16 "glDepthRangedNV") *s8
    0x00000529 gvar *__funcptr_type_kind 0x0000014F
    0x0000052A bc *s8 >|2| 0x00000528< to __funcptr_type_kind
    0x0000052B store *__funcptr_type_kind >|2| 0x00000529<, __funcptr_type_kind >|2| 0x0000052A<
    0x0000052C call ag5 "openglGetProcAddress" (cstroflen 17 "glDepthRangefOES") *s8
    0x0000052D gvar *__funcptr_type_kind 0x00000150
    0x0000052E bc *s8 >|2| 0x0000052C< to __funcptr_type_kind
    0x0000052F store *__funcptr_type_kind >|2| 0x0000052D<, __funcptr_type_kind >|2| 0x0000052E<
    0x00000530 call ag5 "openglGetProcAddress" (cstroflen 14 "glDepthRangef") *s8
    0x00000531 gvar *__funcptr_type_kind 0x00000151
    0x00000532 bc *s8 >|2| 0x00000530< to __funcptr_type_kind
    0x00000533 store *__funcptr_type_kind >|2| 0x00000531<, __funcptr_type_kind >|2| 0x00000532<
    0x00000534 call ag5 "openglGetProcAddress" (cstroflen 20 "glDepthRangeIndexed") *s8
    0x00000535 gvar *__funcptr_type_kind 0x00000152
    0x00000536 bc *s8 >|2| 0x00000534< to __funcptr_type_kind
    0x00000537 store *__funcptr_type_kind >|2| 0x00000535<, __funcptr_type_kind >|2| 0x00000536<
    0x00000538 call ag5 "openglGetProcAddress" (cstroflen 14 "glDepthRangex") *s8
    0x00000539 gvar *__funcptr_type_kind 0x00000153
    0x0000053A bc *s8 >|2| 0x00000538< to __funcptr_type_kind
    0x0000053B store *__funcptr_type_kind >|2| 0x00000539<, __funcptr_type_kind >|2| 0x0000053A<
    0x0000053C call ag5 "openglGetProcAddress" (cstroflen 18 "glDetachObjectARB") *s8
    0x0000053D gvar *__funcptr_type_kind 0x00000154
    0x0000053E bc *s8 >|2| 0x0000053C< to __funcptr_type_kind
    0x0000053F store *__funcptr_type_kind >|2| 0x0000053D<, __funcptr_type_kind >|2| 0x0000053E<
    0x00000540 call ag5 "openglGetProcAddress" (cstroflen 15 "glDetachShader") *s8
    0x00000541 gvar *__funcptr_type_kind 0x00000155
    0x00000542 bc *s8 >|2| 0x00000540< to __funcptr_type_kind
    0x00000543 store *__funcptr_type_kind >|2| 0x00000541<, __funcptr_type_kind >|2| 0x00000542<
    0x00000544 call ag5 "openglGetProcAddress" (cstroflen 20 "glDetailTexFuncSGIS") *s8
    0x00000545 gvar *__funcptr_type_kind 0x00000156
    0x00000546 bc *s8 >|2| 0x00000544< to __funcptr_type_kind
    0x00000547 store *__funcptr_type_kind >|2| 0x00000545<, __funcptr_type_kind >|2| 0x00000546<
    0x00000548 call ag5 "openglGetProcAddress" (cstroflen 25 "glDisableClientStateiEXT") *s8
    0x00000549 gvar *__funcptr_type_kind 0x00000157
    0x0000054A bc *s8 >|2| 0x00000548< to __funcptr_type_kind
    0x0000054B store *__funcptr_type_kind >|2| 0x00000549<, __funcptr_type_kind >|2| 0x0000054A<
    0x0000054C call ag5 "openglGetProcAddress" (cstroflen 31 "glDisableClientStateIndexedEXT") *s8
    0x0000054D gvar *__funcptr_type_kind 0x00000158
    0x0000054E bc *s8 >|2| 0x0000054C< to __funcptr_type_kind
    0x0000054F store *__funcptr_type_kind >|2| 0x0000054D<, __funcptr_type_kind >|2| 0x0000054E<
    0x00000550 call ag5 "openglGetProcAddress" (cstroflen 20 "glDisableIndexedEXT") *s8
    0x00000551 gvar *__funcptr_type_kind 0x00000159
    0x00000552 bc *s8 >|2| 0x00000550< to __funcptr_type_kind
    0x00000553 store *__funcptr_type_kind >|2| 0x00000551<, __funcptr_type_kind >|2| 0x00000552<
    0x00000554 call ag5 "openglGetProcAddress" (cstroflen 11 "glDisablei") *s8
    0x00000555 gvar *__funcptr_type_kind 0x0000015A
    0x00000556 bc *s8 >|2| 0x00000554< to __funcptr_type_kind
    0x00000557 store *__funcptr_type_kind >|2| 0x00000555<, __funcptr_type_kind >|2| 0x00000556<
    0x00000558 call ag5 "openglGetProcAddress" (cstroflen 31 "glDisableVariantClientStateEXT") *s8
    0x00000559 gvar *__funcptr_type_kind 0x0000015B
    0x0000055A bc *s8 >|2| 0x00000558< to __funcptr_type_kind
    0x0000055B store *__funcptr_type_kind >|2| 0x00000559<, __funcptr_type_kind >|2| 0x0000055A<
    0x0000055C call ag5 "openglGetProcAddress" (cstroflen 30 "glDisableVertexArrayAttribEXT") *s8
    0x0000055D gvar *__funcptr_type_kind 0x0000015C
    0x0000055E bc *s8 >|2| 0x0000055C< to __funcptr_type_kind
    0x0000055F store *__funcptr_type_kind >|2| 0x0000055D<, __funcptr_type_kind >|2| 0x0000055E<
    0x00000560 call ag5 "openglGetProcAddress" (cstroflen 27 "glDisableVertexArrayAttrib") *s8
    0x00000561 gvar *__funcptr_type_kind 0x0000015D
    0x00000562 bc *s8 >|2| 0x00000560< to __funcptr_type_kind
    0x00000563 store *__funcptr_type_kind >|2| 0x00000561<, __funcptr_type_kind >|2| 0x00000562<
    0x00000564 call ag5 "openglGetProcAddress" (cstroflen 24 "glDisableVertexArrayEXT") *s8
    0x00000565 gvar *__funcptr_type_kind 0x0000015E
    0x00000566 bc *s8 >|2| 0x00000564< to __funcptr_type_kind
    0x00000567 store *__funcptr_type_kind >|2| 0x00000565<, __funcptr_type_kind >|2| 0x00000566<
    0x00000568 call ag5 "openglGetProcAddress" (cstroflen 27 "glDisableVertexAttribAPPLE") *s8
    0x00000569 gvar *__funcptr_type_kind 0x0000015F
    0x0000056A bc *s8 >|2| 0x00000568< to __funcptr_type_kind
    0x0000056B store *__funcptr_type_kind >|2| 0x00000569<, __funcptr_type_kind >|2| 0x0000056A<
    0x0000056C call ag5 "openglGetProcAddress" (cstroflen 30 "glDisableVertexAttribArrayARB") *s8
    0x0000056D gvar *__funcptr_type_kind 0x00000160
    0x0000056E bc *s8 >|2| 0x0000056C< to __funcptr_type_kind
    0x0000056F store *__funcptr_type_kind >|2| 0x0000056D<, __funcptr_type_kind >|2| 0x0000056E<
    0x00000570 call ag5 "openglGetProcAddress" (cstroflen 27 "glDisableVertexAttribArray") *s8
    0x00000571 gvar *__funcptr_type_kind 0x00000161
    0x00000572 bc *s8 >|2| 0x00000570< to __funcptr_type_kind
    0x00000573 store *__funcptr_type_kind >|2| 0x00000571<, __funcptr_type_kind >|2| 0x00000572<
    0x00000574 call ag5 "openglGetProcAddress" (cstroflen 30 "glDispatchComputeGroupSizeARB") *s8
    0x00000575 gvar *__funcptr_type_kind 0x00000162
    0x00000576 bc *s8 >|2| 0x00000574< to __funcptr_type_kind
    0x00000577 store *__funcptr_type_kind >|2| 0x00000575<, __funcptr_type_kind >|2| 0x00000576<
    0x00000578 call ag5 "openglGetProcAddress" (cstroflen 26 "glDispatchComputeIndirect") *s8
    0x00000579 gvar *__funcptr_type_kind 0x00000163
    0x0000057A bc *s8 >|2| 0x00000578< to __funcptr_type_kind
    0x0000057B store *__funcptr_type_kind >|2| 0x00000579<, __funcptr_type_kind >|2| 0x0000057A<
    0x0000057C call ag5 "openglGetProcAddress" (cstroflen 18 "glDispatchCompute") *s8
    0x0000057D gvar *__funcptr_type_kind 0x00000164
    0x0000057E bc *s8 >|2| 0x0000057C< to __funcptr_type_kind
    0x0000057F store *__funcptr_type_kind >|2| 0x0000057D<, __funcptr_type_kind >|2| 0x0000057E<
    0x00000580 call ag5 "openglGetProcAddress" (cstroflen 16 "glDrawArraysEXT") *s8
    0x00000581 gvar *__funcptr_type_kind 0x00000165
    0x00000582 bc *s8 >|2| 0x00000580< to __funcptr_type_kind
    0x00000583 store *__funcptr_type_kind >|2| 0x00000581<, __funcptr_type_kind >|2| 0x00000582<
    0x00000584 call ag5 "openglGetProcAddress" (cstroflen 21 "glDrawArraysIndirect") *s8
    0x00000585 gvar *__funcptr_type_kind 0x00000166
    0x00000586 bc *s8 >|2| 0x00000584< to __funcptr_type_kind
    0x00000587 store *__funcptr_type_kind >|2| 0x00000585<, __funcptr_type_kind >|2| 0x00000586<
    0x00000588 call ag5 "openglGetProcAddress" (cstroflen 27 "glDrawArraysInstancedANGLE") *s8
    0x00000589 gvar *__funcptr_type_kind 0x00000167
    0x0000058A bc *s8 >|2| 0x00000588< to __funcptr_type_kind
    0x0000058B store *__funcptr_type_kind >|2| 0x00000589<, __funcptr_type_kind >|2| 0x0000058A<
    0x0000058C call ag5 "openglGetProcAddress" (cstroflen 25 "glDrawArraysInstancedARB") *s8
    0x0000058D gvar *__funcptr_type_kind 0x00000168
    0x0000058E bc *s8 >|2| 0x0000058C< to __funcptr_type_kind
    0x0000058F store *__funcptr_type_kind >|2| 0x0000058D<, __funcptr_type_kind >|2| 0x0000058E<
    0x00000590 call ag5 "openglGetProcAddress" (cstroflen 34 "glDrawArraysInstancedBaseInstance") *s8
    0x00000591 gvar *__funcptr_type_kind 0x00000169
    0x00000592 bc *s8 >|2| 0x00000590< to __funcptr_type_kind
    0x00000593 store *__funcptr_type_kind >|2| 0x00000591<, __funcptr_type_kind >|2| 0x00000592<
    0x00000594 call ag5 "openglGetProcAddress" (cstroflen 25 "glDrawArraysInstancedEXT") *s8
    0x00000595 gvar *__funcptr_type_kind 0x0000016A
    0x00000596 bc *s8 >|2| 0x00000594< to __funcptr_type_kind
    0x00000597 store *__funcptr_type_kind >|2| 0x00000595<, __funcptr_type_kind >|2| 0x00000596<
    0x00000598 call ag5 "openglGetProcAddress" (cstroflen 22 "glDrawArraysInstanced") *s8
    0x00000599 gvar *__funcptr_type_kind 0x0000016B
    0x0000059A bc *s8 >|2| 0x00000598< to __funcptr_type_kind
    0x0000059B store *__funcptr_type_kind >|2| 0x00000599<, __funcptr_type_kind >|2| 0x0000059A<
    0x0000059C call ag5 "openglGetProcAddress" (cstroflen 19 "glDrawBufferRegion") *s8
    0x0000059D gvar *__funcptr_type_kind 0x0000016C
    0x0000059E bc *s8 >|2| 0x0000059C< to __funcptr_type_kind
    0x0000059F store *__funcptr_type_kind >|2| 0x0000059D<, __funcptr_type_kind >|2| 0x0000059E<
    0x000005A0 call ag5 "openglGetProcAddress" (cstroflen 17 "glDrawBuffersARB") *s8
    0x000005A1 gvar *__funcptr_type_kind 0x0000016D
    0x000005A2 bc *s8 >|2| 0x000005A0< to __funcptr_type_kind
    0x000005A3 store *__funcptr_type_kind >|2| 0x000005A1<, __funcptr_type_kind >|2| 0x000005A2<
    0x000005A4 call ag5 "openglGetProcAddress" (cstroflen 17 "glDrawBuffersATI") *s8
    0x000005A5 gvar *__funcptr_type_kind 0x0000016E
    0x000005A6 bc *s8 >|2| 0x000005A4< to __funcptr_type_kind
    0x000005A7 store *__funcptr_type_kind >|2| 0x000005A5<, __funcptr_type_kind >|2| 0x000005A6<
    0x000005A8 call ag5 "openglGetProcAddress" (cstroflen 14 "glDrawBuffers") *s8
    0x000005A9 gvar *__funcptr_type_kind 0x0000016F
    0x000005AA bc *s8 >|2| 0x000005A8< to __funcptr_type_kind
    0x000005AB store *__funcptr_type_kind >|2| 0x000005A9<, __funcptr_type_kind >|2| 0x000005AA<
    0x000005AC call ag5 "openglGetProcAddress" (cstroflen 24 "glDrawElementArrayAPPLE") *s8
    0x000005AD gvar *__funcptr_type_kind 0x00000170
    0x000005AE bc *s8 >|2| 0x000005AC< to __funcptr_type_kind
    0x000005AF store *__funcptr_type_kind >|2| 0x000005AD<, __funcptr_type_kind >|2| 0x000005AE<
    0x000005B0 call ag5 "openglGetProcAddress" (cstroflen 22 "glDrawElementArrayATI") *s8
    0x000005B1 gvar *__funcptr_type_kind 0x00000171
    0x000005B2 bc *s8 >|2| 0x000005B0< to __funcptr_type_kind
    0x000005B3 store *__funcptr_type_kind >|2| 0x000005B1<, __funcptr_type_kind >|2| 0x000005B2<
    0x000005B4 call ag5 "openglGetProcAddress" (cstroflen 25 "glDrawElementsBaseVertex") *s8
    0x000005B5 gvar *__funcptr_type_kind 0x00000172
    0x000005B6 bc *s8 >|2| 0x000005B4< to __funcptr_type_kind
    0x000005B7 store *__funcptr_type_kind >|2| 0x000005B5<, __funcptr_type_kind >|2| 0x000005B6<
    0x000005B8 call ag5 "openglGetProcAddress" (cstroflen 23 "glDrawElementsIndirect") *s8
    0x000005B9 gvar *__funcptr_type_kind 0x00000173
    0x000005BA bc *s8 >|2| 0x000005B8< to __funcptr_type_kind
    0x000005BB store *__funcptr_type_kind >|2| 0x000005B9<, __funcptr_type_kind >|2| 0x000005BA<
    0x000005BC call ag5 "openglGetProcAddress" (cstroflen 29 "glDrawElementsInstancedANGLE") *s8
    0x000005BD gvar *__funcptr_type_kind 0x00000174
    0x000005BE bc *s8 >|2| 0x000005BC< to __funcptr_type_kind
    0x000005BF store *__funcptr_type_kind >|2| 0x000005BD<, __funcptr_type_kind >|2| 0x000005BE<
    0x000005C0 call ag5 "openglGetProcAddress" (cstroflen 27 "glDrawElementsInstancedARB") *s8
    0x000005C1 gvar *__funcptr_type_kind 0x00000175
    0x000005C2 bc *s8 >|2| 0x000005C0< to __funcptr_type_kind
    0x000005C3 store *__funcptr_type_kind >|2| 0x000005C1<, __funcptr_type_kind >|2| 0x000005C2<
    0x000005C4 call ag5 "openglGetProcAddress" (cstroflen 36 "glDrawElementsInstancedBaseInstance") *s8
    0x000005C5 gvar *__funcptr_type_kind 0x00000176
    0x000005C6 bc *s8 >|2| 0x000005C4< to __funcptr_type_kind
    0x000005C7 store *__funcptr_type_kind >|2| 0x000005C5<, __funcptr_type_kind >|2| 0x000005C6<
    0x000005C8 call ag5 "openglGetProcAddress" (cstroflen 46 "glDrawElementsInstancedBaseVertexBaseInstance") *s8
    0x000005C9 gvar *__funcptr_type_kind 0x00000177
    0x000005CA bc *s8 >|2| 0x000005C8< to __funcptr_type_kind
    0x000005CB store *__funcptr_type_kind >|2| 0x000005C9<, __funcptr_type_kind >|2| 0x000005CA<
    0x000005CC call ag5 "openglGetProcAddress" (cstroflen 34 "glDrawElementsInstancedBaseVertex") *s8
    0x000005CD gvar *__funcptr_type_kind 0x00000178
    0x000005CE bc *s8 >|2| 0x000005CC< to __funcptr_type_kind
    0x000005CF store *__funcptr_type_kind >|2| 0x000005CD<, __funcptr_type_kind >|2| 0x000005CE<
    0x000005D0 call ag5 "openglGetProcAddress" (cstroflen 27 "glDrawElementsInstancedEXT") *s8
    0x000005D1 gvar *__funcptr_type_kind 0x00000179
    0x000005D2 bc *s8 >|2| 0x000005D0< to __funcptr_type_kind
    0x000005D3 store *__funcptr_type_kind >|2| 0x000005D1<, __funcptr_type_kind >|2| 0x000005D2<
    0x000005D4 call ag5 "openglGetProcAddress" (cstroflen 24 "glDrawElementsInstanced") *s8
    0x000005D5 gvar *__funcptr_type_kind 0x0000017A
    0x000005D6 bc *s8 >|2| 0x000005D4< to __funcptr_type_kind
    0x000005D7 store *__funcptr_type_kind >|2| 0x000005D5<, __funcptr_type_kind >|2| 0x000005D6<
    0x000005D8 call ag5 "openglGetProcAddress" (cstroflen 29 "glDrawRangeElementArrayAPPLE") *s8
    0x000005D9 gvar *__funcptr_type_kind 0x0000017B
    0x000005DA bc *s8 >|2| 0x000005D8< to __funcptr_type_kind
    0x000005DB store *__funcptr_type_kind >|2| 0x000005D9<, __funcptr_type_kind >|2| 0x000005DA<
    0x000005DC call ag5 "openglGetProcAddress" (cstroflen 27 "glDrawRangeElementArrayATI") *s8
    0x000005DD gvar *__funcptr_type_kind 0x0000017C
    0x000005DE bc *s8 >|2| 0x000005DC< to __funcptr_type_kind
    0x000005DF store *__funcptr_type_kind >|2| 0x000005DD<, __funcptr_type_kind >|2| 0x000005DE<
    0x000005E0 call ag5 "openglGetProcAddress" (cstroflen 30 "glDrawRangeElementsBaseVertex") *s8
    0x000005E1 gvar *__funcptr_type_kind 0x0000017D
    0x000005E2 bc *s8 >|2| 0x000005E0< to __funcptr_type_kind
    0x000005E3 store *__funcptr_type_kind >|2| 0x000005E1<, __funcptr_type_kind >|2| 0x000005E2<
    0x000005E4 call ag5 "openglGetProcAddress" (cstroflen 23 "glDrawRangeElementsEXT") *s8
    0x000005E5 gvar *__funcptr_type_kind 0x0000017E
    0x000005E6 bc *s8 >|2| 0x000005E4< to __funcptr_type_kind
    0x000005E7 store *__funcptr_type_kind >|2| 0x000005E5<, __funcptr_type_kind >|2| 0x000005E6<
    0x000005E8 call ag5 "openglGetProcAddress" (cstroflen 20 "glDrawRangeElements") *s8
    0x000005E9 gvar *__funcptr_type_kind 0x0000017F
    0x000005EA bc *s8 >|2| 0x000005E8< to __funcptr_type_kind
    0x000005EB store *__funcptr_type_kind >|2| 0x000005E9<, __funcptr_type_kind >|2| 0x000005EA<
    0x000005EC call ag5 "openglGetProcAddress" (cstroflen 16 "glDrawTextureNV") *s8
    0x000005ED gvar *__funcptr_type_kind 0x00000180
    0x000005EE bc *s8 >|2| 0x000005EC< to __funcptr_type_kind
    0x000005EF store *__funcptr_type_kind >|2| 0x000005ED<, __funcptr_type_kind >|2| 0x000005EE<
    0x000005F0 call ag5 "openglGetProcAddress" (cstroflen 33 "glDrawTransformFeedbackInstanced") *s8
    0x000005F1 gvar *__funcptr_type_kind 0x00000181
    0x000005F2 bc *s8 >|2| 0x000005F0< to __funcptr_type_kind
    0x000005F3 store *__funcptr_type_kind >|2| 0x000005F1<, __funcptr_type_kind >|2| 0x000005F2<
    0x000005F4 call ag5 "openglGetProcAddress" (cstroflen 26 "glDrawTransformFeedbackNV") *s8
    0x000005F5 gvar *__funcptr_type_kind 0x00000182
    0x000005F6 bc *s8 >|2| 0x000005F4< to __funcptr_type_kind
    0x000005F7 store *__funcptr_type_kind >|2| 0x000005F5<, __funcptr_type_kind >|2| 0x000005F6<
    0x000005F8 call ag5 "openglGetProcAddress" (cstroflen 24 "glDrawTransformFeedback") *s8
    0x000005F9 gvar *__funcptr_type_kind 0x00000183
    0x000005FA bc *s8 >|2| 0x000005F8< to __funcptr_type_kind
    0x000005FB store *__funcptr_type_kind >|2| 0x000005F9<, __funcptr_type_kind >|2| 0x000005FA<
    0x000005FC call ag5 "openglGetProcAddress" (cstroflen 39 "glDrawTransformFeedbackStreamInstanced") *s8
    0x000005FD gvar *__funcptr_type_kind 0x00000184
    0x000005FE bc *s8 >|2| 0x000005FC< to __funcptr_type_kind
    0x000005FF store *__funcptr_type_kind >|2| 0x000005FD<, __funcptr_type_kind >|2| 0x000005FE<
    0x00000600 call ag5 "openglGetProcAddress" (cstroflen 30 "glDrawTransformFeedbackStream") *s8
    0x00000601 gvar *__funcptr_type_kind 0x00000185
    0x00000602 bc *s8 >|2| 0x00000600< to __funcptr_type_kind
    0x00000603 store *__funcptr_type_kind >|2| 0x00000601<, __funcptr_type_kind >|2| 0x00000602<
    0x00000604 call ag5 "openglGetProcAddress" (cstroflen 19 "glEdgeFlagFormatNV") *s8
    0x00000605 gvar *__funcptr_type_kind 0x00000186
    0x00000606 bc *s8 >|2| 0x00000604< to __funcptr_type_kind
    0x00000607 store *__funcptr_type_kind >|2| 0x00000605<, __funcptr_type_kind >|2| 0x00000606<
    0x00000608 call ag5 "openglGetProcAddress" (cstroflen 21 "glEdgeFlagPointerEXT") *s8
    0x00000609 gvar *__funcptr_type_kind 0x00000187
    0x0000060A bc *s8 >|2| 0x00000608< to __funcptr_type_kind
    0x0000060B store *__funcptr_type_kind >|2| 0x00000609<, __funcptr_type_kind >|2| 0x0000060A<
    0x0000060C call ag5 "openglGetProcAddress" (cstroflen 25 "glEdgeFlagPointerListIBM") *s8
    0x0000060D gvar *__funcptr_type_kind 0x00000188
    0x0000060E bc *s8 >|2| 0x0000060C< to __funcptr_type_kind
    0x0000060F store *__funcptr_type_kind >|2| 0x0000060D<, __funcptr_type_kind >|2| 0x0000060E<
    0x00000610 call ag5 "openglGetProcAddress" (cstroflen 22 "glElementPointerAPPLE") *s8
    0x00000611 gvar *__funcptr_type_kind 0x00000189
    0x00000612 bc *s8 >|2| 0x00000610< to __funcptr_type_kind
    0x00000613 store *__funcptr_type_kind >|2| 0x00000611<, __funcptr_type_kind >|2| 0x00000612<
    0x00000614 call ag5 "openglGetProcAddress" (cstroflen 20 "glElementPointerATI") *s8
    0x00000615 gvar *__funcptr_type_kind 0x0000018A
    0x00000616 bc *s8 >|2| 0x00000614< to __funcptr_type_kind
    0x00000617 store *__funcptr_type_kind >|2| 0x00000615<, __funcptr_type_kind >|2| 0x00000616<
    0x00000618 call ag5 "openglGetProcAddress" (cstroflen 24 "glEnableClientStateiEXT") *s8
    0x00000619 gvar *__funcptr_type_kind 0x0000018B
    0x0000061A bc *s8 >|2| 0x00000618< to __funcptr_type_kind
    0x0000061B store *__funcptr_type_kind >|2| 0x00000619<, __funcptr_type_kind >|2| 0x0000061A<
    0x0000061C call ag5 "openglGetProcAddress" (cstroflen 30 "glEnableClientStateIndexedEXT") *s8
    0x0000061D gvar *__funcptr_type_kind 0x0000018C
    0x0000061E bc *s8 >|2| 0x0000061C< to __funcptr_type_kind
    0x0000061F store *__funcptr_type_kind >|2| 0x0000061D<, __funcptr_type_kind >|2| 0x0000061E<
    0x00000620 call ag5 "openglGetProcAddress" (cstroflen 19 "glEnableIndexedEXT") *s8
    0x00000621 gvar *__funcptr_type_kind 0x0000018D
    0x00000622 bc *s8 >|2| 0x00000620< to __funcptr_type_kind
    0x00000623 store *__funcptr_type_kind >|2| 0x00000621<, __funcptr_type_kind >|2| 0x00000622<
    0x00000624 call ag5 "openglGetProcAddress" (cstroflen 10 "glEnablei") *s8
    0x00000625 gvar *__funcptr_type_kind 0x0000018E
    0x00000626 bc *s8 >|2| 0x00000624< to __funcptr_type_kind
    0x00000627 store *__funcptr_type_kind >|2| 0x00000625<, __funcptr_type_kind >|2| 0x00000626<
    0x00000628 call ag5 "openglGetProcAddress" (cstroflen 30 "glEnableVariantClientStateEXT") *s8
    0x00000629 gvar *__funcptr_type_kind 0x0000018F
    0x0000062A bc *s8 >|2| 0x00000628< to __funcptr_type_kind
    0x0000062B store *__funcptr_type_kind >|2| 0x00000629<, __funcptr_type_kind >|2| 0x0000062A<
    0x0000062C call ag5 "openglGetProcAddress" (cstroflen 29 "glEnableVertexArrayAttribEXT") *s8
    0x0000062D gvar *__funcptr_type_kind 0x00000190
    0x0000062E bc *s8 >|2| 0x0000062C< to __funcptr_type_kind
    0x0000062F store *__funcptr_type_kind >|2| 0x0000062D<, __funcptr_type_kind >|2| 0x0000062E<
    0x00000630 call ag5 "openglGetProcAddress" (cstroflen 26 "glEnableVertexArrayAttrib") *s8
    0x00000631 gvar *__funcptr_type_kind 0x00000191
    0x00000632 bc *s8 >|2| 0x00000630< to __funcptr_type_kind
    0x00000633 store *__funcptr_type_kind >|2| 0x00000631<, __funcptr_type_kind >|2| 0x00000632<
    0x00000634 call ag5 "openglGetProcAddress" (cstroflen 23 "glEnableVertexArrayEXT") *s8
    0x00000635 gvar *__funcptr_type_kind 0x00000192
    0x00000636 bc *s8 >|2| 0x00000634< to __funcptr_type_kind
    0x00000637 store *__funcptr_type_kind >|2| 0x00000635<, __funcptr_type_kind >|2| 0x00000636<
    0x00000638 call ag5 "openglGetProcAddress" (cstroflen 26 "glEnableVertexAttribAPPLE") *s8
    0x00000639 gvar *__funcptr_type_kind 0x00000193
    0x0000063A bc *s8 >|2| 0x00000638< to __funcptr_type_kind
    0x0000063B store *__funcptr_type_kind >|2| 0x00000639<, __funcptr_type_kind >|2| 0x0000063A<
    0x0000063C call ag5 "openglGetProcAddress" (cstroflen 29 "glEnableVertexAttribArrayARB") *s8
    0x0000063D gvar *__funcptr_type_kind 0x00000194
    0x0000063E bc *s8 >|2| 0x0000063C< to __funcptr_type_kind
    0x0000063F store *__funcptr_type_kind >|2| 0x0000063D<, __funcptr_type_kind >|2| 0x0000063E<
    0x00000640 call ag5 "openglGetProcAddress" (cstroflen 26 "glEnableVertexAttribArray") *s8
    0x00000641 gvar *__funcptr_type_kind 0x00000195
    0x00000642 bc *s8 >|2| 0x00000640< to __funcptr_type_kind
    0x00000643 store *__funcptr_type_kind >|2| 0x00000641<, __funcptr_type_kind >|2| 0x00000642<
    0x00000644 call ag5 "openglGetProcAddress" (cstroflen 25 "glEndConditionalRenderNV") *s8
    0x00000645 gvar *__funcptr_type_kind 0x00000196
    0x00000646 bc *s8 >|2| 0x00000644< to __funcptr_type_kind
    0x00000647 store *__funcptr_type_kind >|2| 0x00000645<, __funcptr_type_kind >|2| 0x00000646<
    0x00000648 call ag5 "openglGetProcAddress" (cstroflen 26 "glEndConditionalRenderNVX") *s8
    0x00000649 gvar *__funcptr_type_kind 0x00000197
    0x0000064A bc *s8 >|2| 0x00000648< to __funcptr_type_kind
    0x0000064B store *__funcptr_type_kind >|2| 0x00000649<, __funcptr_type_kind >|2| 0x0000064A<
    0x0000064C call ag5 "openglGetProcAddress" (cstroflen 23 "glEndConditionalRender") *s8
    0x0000064D gvar *__funcptr_type_kind 0x00000198
    0x0000064E bc *s8 >|2| 0x0000064C< to __funcptr_type_kind
    0x0000064F store *__funcptr_type_kind >|2| 0x0000064D<, __funcptr_type_kind >|2| 0x0000064E<
    0x00000650 call ag5 "openglGetProcAddress" (cstroflen 23 "glEndFragmentShaderATI") *s8
    0x00000651 gvar *__funcptr_type_kind 0x00000199
    0x00000652 bc *s8 >|2| 0x00000650< to __funcptr_type_kind
    0x00000653 store *__funcptr_type_kind >|2| 0x00000651<, __funcptr_type_kind >|2| 0x00000652<
    0x00000654 call ag5 "openglGetProcAddress" (cstroflen 22 "glEndOcclusionQueryNV") *s8
    0x00000655 gvar *__funcptr_type_kind 0x0000019A
    0x00000656 bc *s8 >|2| 0x00000654< to __funcptr_type_kind
    0x00000657 store *__funcptr_type_kind >|2| 0x00000655<, __funcptr_type_kind >|2| 0x00000656<
    0x00000658 call ag5 "openglGetProcAddress" (cstroflen 20 "glEndPerfMonitorAMD") *s8
    0x00000659 gvar *__funcptr_type_kind 0x0000019B
    0x0000065A bc *s8 >|2| 0x00000658< to __funcptr_type_kind
    0x0000065B store *__funcptr_type_kind >|2| 0x00000659<, __funcptr_type_kind >|2| 0x0000065A<
    0x0000065C call ag5 "openglGetProcAddress" (cstroflen 20 "glEndPerfQueryINTEL") *s8
    0x0000065D gvar *__funcptr_type_kind 0x0000019C
    0x0000065E bc *s8 >|2| 0x0000065C< to __funcptr_type_kind
    0x0000065F store *__funcptr_type_kind >|2| 0x0000065D<, __funcptr_type_kind >|2| 0x0000065E<
    0x00000660 call ag5 "openglGetProcAddress" (cstroflen 16 "glEndQueryANGLE") *s8
    0x00000661 gvar *__funcptr_type_kind 0x0000019D
    0x00000662 bc *s8 >|2| 0x00000660< to __funcptr_type_kind
    0x00000663 store *__funcptr_type_kind >|2| 0x00000661<, __funcptr_type_kind >|2| 0x00000662<
    0x00000664 call ag5 "openglGetProcAddress" (cstroflen 14 "glEndQueryARB") *s8
    0x00000665 gvar *__funcptr_type_kind 0x0000019E
    0x00000666 bc *s8 >|2| 0x00000664< to __funcptr_type_kind
    0x00000667 store *__funcptr_type_kind >|2| 0x00000665<, __funcptr_type_kind >|2| 0x00000666<
    0x00000668 call ag5 "openglGetProcAddress" (cstroflen 18 "glEndQueryIndexed") *s8
    0x00000669 gvar *__funcptr_type_kind 0x0000019F
    0x0000066A bc *s8 >|2| 0x00000668< to __funcptr_type_kind
    0x0000066B store *__funcptr_type_kind >|2| 0x00000669<, __funcptr_type_kind >|2| 0x0000066A<
    0x0000066C call ag5 "openglGetProcAddress" (cstroflen 11 "glEndQuery") *s8
    0x0000066D gvar *__funcptr_type_kind 0x000001A0
    0x0000066E bc *s8 >|2| 0x0000066C< to __funcptr_type_kind
    0x0000066F store *__funcptr_type_kind >|2| 0x0000066D<, __funcptr_type_kind >|2| 0x0000066E<
    0x00000670 call ag5 "openglGetProcAddress" (cstroflen 14 "glEndSceneEXT") *s8
    0x00000671 gvar *__funcptr_type_kind 0x000001A1
    0x00000672 bc *s8 >|2| 0x00000670< to __funcptr_type_kind
    0x00000673 store *__funcptr_type_kind >|2| 0x00000671<, __funcptr_type_kind >|2| 0x00000672<
    0x00000674 call ag5 "openglGetProcAddress" (cstroflen 26 "glEndTransformFeedbackEXT") *s8
    0x00000675 gvar *__funcptr_type_kind 0x000001A2
    0x00000676 bc *s8 >|2| 0x00000674< to __funcptr_type_kind
    0x00000677 store *__funcptr_type_kind >|2| 0x00000675<, __funcptr_type_kind >|2| 0x00000676<
    0x00000678 call ag5 "openglGetProcAddress" (cstroflen 25 "glEndTransformFeedbackNV") *s8
    0x00000679 gvar *__funcptr_type_kind 0x000001A3
    0x0000067A bc *s8 >|2| 0x00000678< to __funcptr_type_kind
    0x0000067B store *__funcptr_type_kind >|2| 0x00000679<, __funcptr_type_kind >|2| 0x0000067A<
    0x0000067C call ag5 "openglGetProcAddress" (cstroflen 23 "glEndTransformFeedback") *s8
    0x0000067D gvar *__funcptr_type_kind 0x000001A4
    0x0000067E bc *s8 >|2| 0x0000067C< to __funcptr_type_kind
    0x0000067F store *__funcptr_type_kind >|2| 0x0000067D<, __funcptr_type_kind >|2| 0x0000067E<
    0x00000680 call ag5 "openglGetProcAddress" (cstroflen 21 "glEndVertexShaderEXT") *s8
    0x00000681 gvar *__funcptr_type_kind 0x000001A5
    0x00000682 bc *s8 >|2| 0x00000680< to __funcptr_type_kind
    0x00000683 store *__funcptr_type_kind >|2| 0x00000681<, __funcptr_type_kind >|2| 0x00000682<
    0x00000684 call ag5 "openglGetProcAddress" (cstroflen 20 "glEndVideoCaptureNV") *s8
    0x00000685 gvar *__funcptr_type_kind 0x000001A6
    0x00000686 bc *s8 >|2| 0x00000684< to __funcptr_type_kind
    0x00000687 store *__funcptr_type_kind >|2| 0x00000685<, __funcptr_type_kind >|2| 0x00000686<
    0x00000688 call ag5 "openglGetProcAddress" (cstroflen 13 "glEvalMapsNV") *s8
    0x00000689 gvar *__funcptr_type_kind 0x000001A7
    0x0000068A bc *s8 >|2| 0x00000688< to __funcptr_type_kind
    0x0000068B store *__funcptr_type_kind >|2| 0x00000689<, __funcptr_type_kind >|2| 0x0000068A<
    0x0000068C call ag5 "openglGetProcAddress" (cstroflen 19 "glExecuteProgramNV") *s8
    0x0000068D gvar *__funcptr_type_kind 0x000001A8
    0x0000068E bc *s8 >|2| 0x0000068C< to __funcptr_type_kind
    0x0000068F store *__funcptr_type_kind >|2| 0x0000068D<, __funcptr_type_kind >|2| 0x0000068E<
    0x00000690 call ag5 "openglGetProcAddress" (cstroflen 22 "glExtractComponentEXT") *s8
    0x00000691 gvar *__funcptr_type_kind 0x000001A9
    0x00000692 bc *s8 >|2| 0x00000690< to __funcptr_type_kind
    0x00000693 store *__funcptr_type_kind >|2| 0x00000691<, __funcptr_type_kind >|2| 0x00000692<
    0x00000694 call ag5 "openglGetProcAddress" (cstroflen 23 "glFinalCombinerInputNV") *s8
    0x00000695 gvar *__funcptr_type_kind 0x000001AA
    0x00000696 bc *s8 >|2| 0x00000694< to __funcptr_type_kind
    0x00000697 store *__funcptr_type_kind >|2| 0x00000695<, __funcptr_type_kind >|2| 0x00000696<
    0x00000698 call ag5 "openglGetProcAddress" (cstroflen 19 "glFinishFenceAPPLE") *s8
    0x00000699 gvar *__funcptr_type_kind 0x000001AB
    0x0000069A bc *s8 >|2| 0x00000698< to __funcptr_type_kind
    0x0000069B store *__funcptr_type_kind >|2| 0x00000699<, __funcptr_type_kind >|2| 0x0000069A<
    0x0000069C call ag5 "openglGetProcAddress" (cstroflen 16 "glFinishFenceNV") *s8
    0x0000069D gvar *__funcptr_type_kind 0x000001AC
    0x0000069E bc *s8 >|2| 0x0000069C< to __funcptr_type_kind
    0x0000069F store *__funcptr_type_kind >|2| 0x0000069D<, __funcptr_type_kind >|2| 0x0000069E<
    0x000006A0 call ag5 "openglGetProcAddress" (cstroflen 20 "glFinishObjectAPPLE") *s8
    0x000006A1 gvar *__funcptr_type_kind 0x000001AD
    0x000006A2 bc *s8 >|2| 0x000006A0< to __funcptr_type_kind
    0x000006A3 store *__funcptr_type_kind >|2| 0x000006A1<, __funcptr_type_kind >|2| 0x000006A2<
    0x000006A4 call ag5 "openglGetProcAddress" (cstroflen 20 "glFinishTextureSUNX") *s8
    0x000006A5 gvar *__funcptr_type_kind 0x000001AE
    0x000006A6 bc *s8 >|2| 0x000006A4< to __funcptr_type_kind
    0x000006A7 store *__funcptr_type_kind >|2| 0x000006A5<, __funcptr_type_kind >|2| 0x000006A6<
    0x000006A8 call ag5 "openglGetProcAddress" (cstroflen 30 "glFlushMappedBufferRangeAPPLE") *s8
    0x000006A9 gvar *__funcptr_type_kind 0x000001AF
    0x000006AA bc *s8 >|2| 0x000006A8< to __funcptr_type_kind
    0x000006AB store *__funcptr_type_kind >|2| 0x000006A9<, __funcptr_type_kind >|2| 0x000006AA<
    0x000006AC call ag5 "openglGetProcAddress" (cstroflen 25 "glFlushMappedBufferRange") *s8
    0x000006AD gvar *__funcptr_type_kind 0x000001B0
    0x000006AE bc *s8 >|2| 0x000006AC< to __funcptr_type_kind
    0x000006AF store *__funcptr_type_kind >|2| 0x000006AD<, __funcptr_type_kind >|2| 0x000006AE<
    0x000006B0 call ag5 "openglGetProcAddress" (cstroflen 33 "glFlushMappedNamedBufferRangeEXT") *s8
    0x000006B1 gvar *__funcptr_type_kind 0x000001B1
    0x000006B2 bc *s8 >|2| 0x000006B0< to __funcptr_type_kind
    0x000006B3 store *__funcptr_type_kind >|2| 0x000006B1<, __funcptr_type_kind >|2| 0x000006B2<
    0x000006B4 call ag5 "openglGetProcAddress" (cstroflen 30 "glFlushMappedNamedBufferRange") *s8
    0x000006B5 gvar *__funcptr_type_kind 0x000001B2
    0x000006B6 bc *s8 >|2| 0x000006B4< to __funcptr_type_kind
    0x000006B7 store *__funcptr_type_kind >|2| 0x000006B5<, __funcptr_type_kind >|2| 0x000006B6<
    0x000006B8 call ag5 "openglGetProcAddress" (cstroflen 24 "glFlushPixelDataRangeNV") *s8
    0x000006B9 gvar *__funcptr_type_kind 0x000001B3
    0x000006BA bc *s8 >|2| 0x000006B8< to __funcptr_type_kind
    0x000006BB store *__funcptr_type_kind >|2| 0x000006B9<, __funcptr_type_kind >|2| 0x000006BA<
    0x000006BC call ag5 "openglGetProcAddress" (cstroflen 18 "glFlushRasterSGIX") *s8
    0x000006BD gvar *__funcptr_type_kind 0x000001B4
    0x000006BE bc *s8 >|2| 0x000006BC< to __funcptr_type_kind
    0x000006BF store *__funcptr_type_kind >|2| 0x000006BD<, __funcptr_type_kind >|2| 0x000006BE<
    0x000006C0 call ag5 "openglGetProcAddress" (cstroflen 29 "glFlushVertexArrayRangeAPPLE") *s8
    0x000006C1 gvar *__funcptr_type_kind 0x000001B5
    0x000006C2 bc *s8 >|2| 0x000006C0< to __funcptr_type_kind
    0x000006C3 store *__funcptr_type_kind >|2| 0x000006C1<, __funcptr_type_kind >|2| 0x000006C2<
    0x000006C4 call ag5 "openglGetProcAddress" (cstroflen 26 "glFlushVertexArrayRangeNV") *s8
    0x000006C5 gvar *__funcptr_type_kind 0x000001B6
    0x000006C6 bc *s8 >|2| 0x000006C4< to __funcptr_type_kind
    0x000006C7 store *__funcptr_type_kind >|2| 0x000006C5<, __funcptr_type_kind >|2| 0x000006C6<
    0x000006C8 call ag5 "openglGetProcAddress" (cstroflen 15 "glFogCoorddEXT") *s8
    0x000006C9 gvar *__funcptr_type_kind 0x000001B7
    0x000006CA bc *s8 >|2| 0x000006C8< to __funcptr_type_kind
    0x000006CB store *__funcptr_type_kind >|2| 0x000006C9<, __funcptr_type_kind >|2| 0x000006CA<
    0x000006CC call ag5 "openglGetProcAddress" (cstroflen 12 "glFogCoordd") *s8
    0x000006CD gvar *__funcptr_type_kind 0x000001B8
    0x000006CE bc *s8 >|2| 0x000006CC< to __funcptr_type_kind
    0x000006CF store *__funcptr_type_kind >|2| 0x000006CD<, __funcptr_type_kind >|2| 0x000006CE<
    0x000006D0 call ag5 "openglGetProcAddress" (cstroflen 16 "glFogCoorddvEXT") *s8
    0x000006D1 gvar *__funcptr_type_kind 0x000001B9
    0x000006D2 bc *s8 >|2| 0x000006D0< to __funcptr_type_kind
    0x000006D3 store *__funcptr_type_kind >|2| 0x000006D1<, __funcptr_type_kind >|2| 0x000006D2<
    0x000006D4 call ag5 "openglGetProcAddress" (cstroflen 13 "glFogCoorddv") *s8
    0x000006D5 gvar *__funcptr_type_kind 0x000001BA
    0x000006D6 bc *s8 >|2| 0x000006D4< to __funcptr_type_kind
    0x000006D7 store *__funcptr_type_kind >|2| 0x000006D5<, __funcptr_type_kind >|2| 0x000006D6<
    0x000006D8 call ag5 "openglGetProcAddress" (cstroflen 15 "glFogCoordfEXT") *s8
    0x000006D9 gvar *__funcptr_type_kind 0x000001BB
    0x000006DA bc *s8 >|2| 0x000006D8< to __funcptr_type_kind
    0x000006DB store *__funcptr_type_kind >|2| 0x000006D9<, __funcptr_type_kind >|2| 0x000006DA<
    0x000006DC call ag5 "openglGetProcAddress" (cstroflen 19 "glFogCoordFormatNV") *s8
    0x000006DD gvar *__funcptr_type_kind 0x000001BC
    0x000006DE bc *s8 >|2| 0x000006DC< to __funcptr_type_kind
    0x000006DF store *__funcptr_type_kind >|2| 0x000006DD<, __funcptr_type_kind >|2| 0x000006DE<
    0x000006E0 call ag5 "openglGetProcAddress" (cstroflen 12 "glFogCoordf") *s8
    0x000006E1 gvar *__funcptr_type_kind 0x000001BD
    0x000006E2 bc *s8 >|2| 0x000006E0< to __funcptr_type_kind
    0x000006E3 store *__funcptr_type_kind >|2| 0x000006E1<, __funcptr_type_kind >|2| 0x000006E2<
    0x000006E4 call ag5 "openglGetProcAddress" (cstroflen 16 "glFogCoordfvEXT") *s8
    0x000006E5 gvar *__funcptr_type_kind 0x000001BE
    0x000006E6 bc *s8 >|2| 0x000006E4< to __funcptr_type_kind
    0x000006E7 store *__funcptr_type_kind >|2| 0x000006E5<, __funcptr_type_kind >|2| 0x000006E6<
    0x000006E8 call ag5 "openglGetProcAddress" (cstroflen 13 "glFogCoordfv") *s8
    0x000006E9 gvar *__funcptr_type_kind 0x000001BF
    0x000006EA bc *s8 >|2| 0x000006E8< to __funcptr_type_kind
    0x000006EB store *__funcptr_type_kind >|2| 0x000006E9<, __funcptr_type_kind >|2| 0x000006EA<
    0x000006EC call ag5 "openglGetProcAddress" (cstroflen 14 "glFogCoordhNV") *s8
    0x000006ED gvar *__funcptr_type_kind 0x000001C0
    0x000006EE bc *s8 >|2| 0x000006EC< to __funcptr_type_kind
    0x000006EF store *__funcptr_type_kind >|2| 0x000006ED<, __funcptr_type_kind >|2| 0x000006EE<
    0x000006F0 call ag5 "openglGetProcAddress" (cstroflen 15 "glFogCoordhvNV") *s8
    0x000006F1 gvar *__funcptr_type_kind 0x000001C1
    0x000006F2 bc *s8 >|2| 0x000006F0< to __funcptr_type_kind
    0x000006F3 store *__funcptr_type_kind >|2| 0x000006F1<, __funcptr_type_kind >|2| 0x000006F2<
    0x000006F4 call ag5 "openglGetProcAddress" (cstroflen 21 "glFogCoordPointerEXT") *s8
    0x000006F5 gvar *__funcptr_type_kind 0x000001C2
    0x000006F6 bc *s8 >|2| 0x000006F4< to __funcptr_type_kind
    0x000006F7 store *__funcptr_type_kind >|2| 0x000006F5<, __funcptr_type_kind >|2| 0x000006F6<
    0x000006F8 call ag5 "openglGetProcAddress" (cstroflen 25 "glFogCoordPointerListIBM") *s8
    0x000006F9 gvar *__funcptr_type_kind 0x000001C3
    0x000006FA bc *s8 >|2| 0x000006F8< to __funcptr_type_kind
    0x000006FB store *__funcptr_type_kind >|2| 0x000006F9<, __funcptr_type_kind >|2| 0x000006FA<
    0x000006FC call ag5 "openglGetProcAddress" (cstroflen 18 "glFogCoordPointer") *s8
    0x000006FD gvar *__funcptr_type_kind 0x000001C4
    0x000006FE bc *s8 >|2| 0x000006FC< to __funcptr_type_kind
    0x000006FF store *__funcptr_type_kind >|2| 0x000006FD<, __funcptr_type_kind >|2| 0x000006FE<
    0x00000700 call ag5 "openglGetProcAddress" (cstroflen 14 "glFogFuncSGIS") *s8
    0x00000701 gvar *__funcptr_type_kind 0x000001C5
    0x00000702 bc *s8 >|2| 0x00000700< to __funcptr_type_kind
    0x00000703 store *__funcptr_type_kind >|2| 0x00000701<, __funcptr_type_kind >|2| 0x00000702<
    0x00000704 call ag5 "openglGetProcAddress" (cstroflen 7 "glFogx") *s8
    0x00000705 gvar *__funcptr_type_kind 0x000001C6
    0x00000706 bc *s8 >|2| 0x00000704< to __funcptr_type_kind
    0x00000707 store *__funcptr_type_kind >|2| 0x00000705<, __funcptr_type_kind >|2| 0x00000706<
    0x00000708 call ag5 "openglGetProcAddress" (cstroflen 8 "glFogxv") *s8
    0x00000709 gvar *__funcptr_type_kind 0x000001C7
    0x0000070A bc *s8 >|2| 0x00000708< to __funcptr_type_kind
    0x0000070B store *__funcptr_type_kind >|2| 0x00000709<, __funcptr_type_kind >|2| 0x0000070A<
    0x0000070C call ag5 "openglGetProcAddress" (cstroflen 27 "glFragmentColorMaterialEXT") *s8
    0x0000070D gvar *__funcptr_type_kind 0x000001C8
    0x0000070E bc *s8 >|2| 0x0000070C< to __funcptr_type_kind
    0x0000070F store *__funcptr_type_kind >|2| 0x0000070D<, __funcptr_type_kind >|2| 0x0000070E<
    0x00000710 call ag5 "openglGetProcAddress" (cstroflen 28 "glFragmentColorMaterialSGIX") *s8
    0x00000711 gvar *__funcptr_type_kind 0x000001C9
    0x00000712 bc *s8 >|2| 0x00000710< to __funcptr_type_kind
    0x00000713 store *__funcptr_type_kind >|2| 0x00000711<, __funcptr_type_kind >|2| 0x00000712<
    0x00000714 call ag5 "openglGetProcAddress" (cstroflen 26 "glFragmentCoverageColorNV") *s8
    0x00000715 gvar *__funcptr_type_kind 0x000001CA
    0x00000716 bc *s8 >|2| 0x00000714< to __funcptr_type_kind
    0x00000717 store *__funcptr_type_kind >|2| 0x00000715<, __funcptr_type_kind >|2| 0x00000716<
    0x00000718 call ag5 "openglGetProcAddress" (cstroflen 20 "glFragmentLightfEXT") *s8
    0x00000719 gvar *__funcptr_type_kind 0x000001CB
    0x0000071A bc *s8 >|2| 0x00000718< to __funcptr_type_kind
    0x0000071B store *__funcptr_type_kind >|2| 0x00000719<, __funcptr_type_kind >|2| 0x0000071A<
    0x0000071C call ag5 "openglGetProcAddress" (cstroflen 21 "glFragmentLightfSGIX") *s8
    0x0000071D gvar *__funcptr_type_kind 0x000001CC
    0x0000071E bc *s8 >|2| 0x0000071C< to __funcptr_type_kind
    0x0000071F store *__funcptr_type_kind >|2| 0x0000071D<, __funcptr_type_kind >|2| 0x0000071E<
    0x00000720 call ag5 "openglGetProcAddress" (cstroflen 21 "glFragmentLightfvEXT") *s8
    0x00000721 gvar *__funcptr_type_kind 0x000001CD
    0x00000722 bc *s8 >|2| 0x00000720< to __funcptr_type_kind
    0x00000723 store *__funcptr_type_kind >|2| 0x00000721<, __funcptr_type_kind >|2| 0x00000722<
    0x00000724 call ag5 "openglGetProcAddress" (cstroflen 22 "glFragmentLightfvSGIX") *s8
    0x00000725 gvar *__funcptr_type_kind 0x000001CE
    0x00000726 bc *s8 >|2| 0x00000724< to __funcptr_type_kind
    0x00000727 store *__funcptr_type_kind >|2| 0x00000725<, __funcptr_type_kind >|2| 0x00000726<
    0x00000728 call ag5 "openglGetProcAddress" (cstroflen 20 "glFragmentLightiEXT") *s8
    0x00000729 gvar *__funcptr_type_kind 0x000001CF
    0x0000072A bc *s8 >|2| 0x00000728< to __funcptr_type_kind
    0x0000072B store *__funcptr_type_kind >|2| 0x00000729<, __funcptr_type_kind >|2| 0x0000072A<
    0x0000072C call ag5 "openglGetProcAddress" (cstroflen 21 "glFragmentLightiSGIX") *s8
    0x0000072D gvar *__funcptr_type_kind 0x000001D0
    0x0000072E bc *s8 >|2| 0x0000072C< to __funcptr_type_kind
    0x0000072F store *__funcptr_type_kind >|2| 0x0000072D<, __funcptr_type_kind >|2| 0x0000072E<
    0x00000730 call ag5 "openglGetProcAddress" (cstroflen 21 "glFragmentLightivEXT") *s8
    0x00000731 gvar *__funcptr_type_kind 0x000001D1
    0x00000732 bc *s8 >|2| 0x00000730< to __funcptr_type_kind
    0x00000733 store *__funcptr_type_kind >|2| 0x00000731<, __funcptr_type_kind >|2| 0x00000732<
    0x00000734 call ag5 "openglGetProcAddress" (cstroflen 22 "glFragmentLightivSGIX") *s8
    0x00000735 gvar *__funcptr_type_kind 0x000001D2
    0x00000736 bc *s8 >|2| 0x00000734< to __funcptr_type_kind
    0x00000737 store *__funcptr_type_kind >|2| 0x00000735<, __funcptr_type_kind >|2| 0x00000736<
    0x00000738 call ag5 "openglGetProcAddress" (cstroflen 25 "glFragmentLightModelfEXT") *s8
    0x00000739 gvar *__funcptr_type_kind 0x000001D3
    0x0000073A bc *s8 >|2| 0x00000738< to __funcptr_type_kind
    0x0000073B store *__funcptr_type_kind >|2| 0x00000739<, __funcptr_type_kind >|2| 0x0000073A<
    0x0000073C call ag5 "openglGetProcAddress" (cstroflen 26 "glFragmentLightModelfSGIX") *s8
    0x0000073D gvar *__funcptr_type_kind 0x000001D4
    0x0000073E bc *s8 >|2| 0x0000073C< to __funcptr_type_kind
    0x0000073F store *__funcptr_type_kind >|2| 0x0000073D<, __funcptr_type_kind >|2| 0x0000073E<
    0x00000740 call ag5 "openglGetProcAddress" (cstroflen 26 "glFragmentLightModelfvEXT") *s8
    0x00000741 gvar *__funcptr_type_kind 0x000001D5
    0x00000742 bc *s8 >|2| 0x00000740< to __funcptr_type_kind
    0x00000743 store *__funcptr_type_kind >|2| 0x00000741<, __funcptr_type_kind >|2| 0x00000742<
    0x00000744 call ag5 "openglGetProcAddress" (cstroflen 27 "glFragmentLightModelfvSGIX") *s8
    0x00000745 gvar *__funcptr_type_kind 0x000001D6
    0x00000746 bc *s8 >|2| 0x00000744< to __funcptr_type_kind
    0x00000747 store *__funcptr_type_kind >|2| 0x00000745<, __funcptr_type_kind >|2| 0x00000746<
    0x00000748 call ag5 "openglGetProcAddress" (cstroflen 25 "glFragmentLightModeliEXT") *s8
    0x00000749 gvar *__funcptr_type_kind 0x000001D7
    0x0000074A bc *s8 >|2| 0x00000748< to __funcptr_type_kind
    0x0000074B store *__funcptr_type_kind >|2| 0x00000749<, __funcptr_type_kind >|2| 0x0000074A<
    0x0000074C call ag5 "openglGetProcAddress" (cstroflen 26 "glFragmentLightModeliSGIX") *s8
    0x0000074D gvar *__funcptr_type_kind 0x000001D8
    0x0000074E bc *s8 >|2| 0x0000074C< to __funcptr_type_kind
    0x0000074F store *__funcptr_type_kind >|2| 0x0000074D<, __funcptr_type_kind >|2| 0x0000074E<
    0x00000750 call ag5 "openglGetProcAddress" (cstroflen 26 "glFragmentLightModelivEXT") *s8
    0x00000751 gvar *__funcptr_type_kind 0x000001D9
    0x00000752 bc *s8 >|2| 0x00000750< to __funcptr_type_kind
    0x00000753 store *__funcptr_type_kind >|2| 0x00000751<, __funcptr_type_kind >|2| 0x00000752<
    0x00000754 call ag5 "openglGetProcAddress" (cstroflen 27 "glFragmentLightModelivSGIX") *s8
    0x00000755 gvar *__funcptr_type_kind 0x000001DA
    0x00000756 bc *s8 >|2| 0x00000754< to __funcptr_type_kind
    0x00000757 store *__funcptr_type_kind >|2| 0x00000755<, __funcptr_type_kind >|2| 0x00000756<
    0x00000758 call ag5 "openglGetProcAddress" (cstroflen 23 "glFragmentMaterialfEXT") *s8
    0x00000759 gvar *__funcptr_type_kind 0x000001DB
    0x0000075A bc *s8 >|2| 0x00000758< to __funcptr_type_kind
    0x0000075B store *__funcptr_type_kind >|2| 0x00000759<, __funcptr_type_kind >|2| 0x0000075A<
    0x0000075C call ag5 "openglGetProcAddress" (cstroflen 24 "glFragmentMaterialfSGIX") *s8
    0x0000075D gvar *__funcptr_type_kind 0x000001DC
    0x0000075E bc *s8 >|2| 0x0000075C< to __funcptr_type_kind
    0x0000075F store *__funcptr_type_kind >|2| 0x0000075D<, __funcptr_type_kind >|2| 0x0000075E<
    0x00000760 call ag5 "openglGetProcAddress" (cstroflen 24 "glFragmentMaterialfvEXT") *s8
    0x00000761 gvar *__funcptr_type_kind 0x000001DD
    0x00000762 bc *s8 >|2| 0x00000760< to __funcptr_type_kind
    0x00000763 store *__funcptr_type_kind >|2| 0x00000761<, __funcptr_type_kind >|2| 0x00000762<
    0x00000764 call ag5 "openglGetProcAddress" (cstroflen 25 "glFragmentMaterialfvSGIX") *s8
    0x00000765 gvar *__funcptr_type_kind 0x000001DE
    0x00000766 bc *s8 >|2| 0x00000764< to __funcptr_type_kind
    0x00000767 store *__funcptr_type_kind >|2| 0x00000765<, __funcptr_type_kind >|2| 0x00000766<
    0x00000768 call ag5 "openglGetProcAddress" (cstroflen 23 "glFragmentMaterialiEXT") *s8
    0x00000769 gvar *__funcptr_type_kind 0x000001DF
    0x0000076A bc *s8 >|2| 0x00000768< to __funcptr_type_kind
    0x0000076B store *__funcptr_type_kind >|2| 0x00000769<, __funcptr_type_kind >|2| 0x0000076A<
    0x0000076C call ag5 "openglGetProcAddress" (cstroflen 24 "glFragmentMaterialiSGIX") *s8
    0x0000076D gvar *__funcptr_type_kind 0x000001E0
    0x0000076E bc *s8 >|2| 0x0000076C< to __funcptr_type_kind
    0x0000076F store *__funcptr_type_kind >|2| 0x0000076D<, __funcptr_type_kind >|2| 0x0000076E<
    0x00000770 call ag5 "openglGetProcAddress" (cstroflen 24 "glFragmentMaterialivEXT") *s8
    0x00000771 gvar *__funcptr_type_kind 0x000001E1
    0x00000772 bc *s8 >|2| 0x00000770< to __funcptr_type_kind
    0x00000773 store *__funcptr_type_kind >|2| 0x00000771<, __funcptr_type_kind >|2| 0x00000772<
    0x00000774 call ag5 "openglGetProcAddress" (cstroflen 25 "glFragmentMaterialivSGIX") *s8
    0x00000775 gvar *__funcptr_type_kind 0x000001E2
    0x00000776 bc *s8 >|2| 0x00000774< to __funcptr_type_kind
    0x00000777 store *__funcptr_type_kind >|2| 0x00000775<, __funcptr_type_kind >|2| 0x00000776<
    0x00000778 call ag5 "openglGetProcAddress" (cstroflen 27 "glFramebufferDrawBufferEXT") *s8
    0x00000779 gvar *__funcptr_type_kind 0x000001E3
    0x0000077A bc *s8 >|2| 0x00000778< to __funcptr_type_kind
    0x0000077B store *__funcptr_type_kind >|2| 0x00000779<, __funcptr_type_kind >|2| 0x0000077A<
    0x0000077C call ag5 "openglGetProcAddress" (cstroflen 28 "glFramebufferDrawBuffersEXT") *s8
    0x0000077D gvar *__funcptr_type_kind 0x000001E4
    0x0000077E bc *s8 >|2| 0x0000077C< to __funcptr_type_kind
    0x0000077F store *__funcptr_type_kind >|2| 0x0000077D<, __funcptr_type_kind >|2| 0x0000077E<
    0x00000780 call ag5 "openglGetProcAddress" (cstroflen 24 "glFramebufferParameteri") *s8
    0x00000781 gvar *__funcptr_type_kind 0x000001E5
    0x00000782 bc *s8 >|2| 0x00000780< to __funcptr_type_kind
    0x00000783 store *__funcptr_type_kind >|2| 0x00000781<, __funcptr_type_kind >|2| 0x00000782<
    0x00000784 call ag5 "openglGetProcAddress" (cstroflen 27 "glFramebufferReadBufferEXT") *s8
    0x00000785 gvar *__funcptr_type_kind 0x000001E6
    0x00000786 bc *s8 >|2| 0x00000784< to __funcptr_type_kind
    0x00000787 store *__funcptr_type_kind >|2| 0x00000785<, __funcptr_type_kind >|2| 0x00000786<
    0x00000788 call ag5 "openglGetProcAddress" (cstroflen 29 "glFramebufferRenderbufferEXT") *s8
    0x00000789 gvar *__funcptr_type_kind 0x000001E7
    0x0000078A bc *s8 >|2| 0x00000788< to __funcptr_type_kind
    0x0000078B store *__funcptr_type_kind >|2| 0x00000789<, __funcptr_type_kind >|2| 0x0000078A<
    0x0000078C call ag5 "openglGetProcAddress" (cstroflen 26 "glFramebufferRenderbuffer") *s8
    0x0000078D gvar *__funcptr_type_kind 0x000001E8
    0x0000078E bc *s8 >|2| 0x0000078C< to __funcptr_type_kind
    0x0000078F store *__funcptr_type_kind >|2| 0x0000078D<, __funcptr_type_kind >|2| 0x0000078E<
    0x00000790 call ag5 "openglGetProcAddress" (cstroflen 34 "glFramebufferSampleLocationsfvARB") *s8
    0x00000791 gvar *__funcptr_type_kind 0x000001E9
    0x00000792 bc *s8 >|2| 0x00000790< to __funcptr_type_kind
    0x00000793 store *__funcptr_type_kind >|2| 0x00000791<, __funcptr_type_kind >|2| 0x00000792<
    0x00000794 call ag5 "openglGetProcAddress" (cstroflen 33 "glFramebufferSampleLocationsfvNV") *s8
    0x00000795 gvar *__funcptr_type_kind 0x000001EA
    0x00000796 bc *s8 >|2| 0x00000794< to __funcptr_type_kind
    0x00000797 store *__funcptr_type_kind >|2| 0x00000795<, __funcptr_type_kind >|2| 0x00000796<
    0x00000798 call ag5 "openglGetProcAddress" (cstroflen 26 "glFramebufferTexture1DEXT") *s8
    0x00000799 gvar *__funcptr_type_kind 0x000001EB
    0x0000079A bc *s8 >|2| 0x00000798< to __funcptr_type_kind
    0x0000079B store *__funcptr_type_kind >|2| 0x00000799<, __funcptr_type_kind >|2| 0x0000079A<
    0x0000079C call ag5 "openglGetProcAddress" (cstroflen 23 "glFramebufferTexture1D") *s8
    0x0000079D gvar *__funcptr_type_kind 0x000001EC
    0x0000079E bc *s8 >|2| 0x0000079C< to __funcptr_type_kind
    0x0000079F store *__funcptr_type_kind >|2| 0x0000079D<, __funcptr_type_kind >|2| 0x0000079E<
    0x000007A0 call ag5 "openglGetProcAddress" (cstroflen 26 "glFramebufferTexture2DEXT") *s8
    0x000007A1 gvar *__funcptr_type_kind 0x000001ED
    0x000007A2 bc *s8 >|2| 0x000007A0< to __funcptr_type_kind
    0x000007A3 store *__funcptr_type_kind >|2| 0x000007A1<, __funcptr_type_kind >|2| 0x000007A2<
    0x000007A4 call ag5 "openglGetProcAddress" (cstroflen 23 "glFramebufferTexture2D") *s8
    0x000007A5 gvar *__funcptr_type_kind 0x000001EE
    0x000007A6 bc *s8 >|2| 0x000007A4< to __funcptr_type_kind
    0x000007A7 store *__funcptr_type_kind >|2| 0x000007A5<, __funcptr_type_kind >|2| 0x000007A6<
    0x000007A8 call ag5 "openglGetProcAddress" (cstroflen 26 "glFramebufferTexture3DEXT") *s8
    0x000007A9 gvar *__funcptr_type_kind 0x000001EF
    0x000007AA bc *s8 >|2| 0x000007A8< to __funcptr_type_kind
    0x000007AB store *__funcptr_type_kind >|2| 0x000007A9<, __funcptr_type_kind >|2| 0x000007AA<
    0x000007AC call ag5 "openglGetProcAddress" (cstroflen 23 "glFramebufferTexture3D") *s8
    0x000007AD gvar *__funcptr_type_kind 0x000001F0
    0x000007AE bc *s8 >|2| 0x000007AC< to __funcptr_type_kind
    0x000007AF store *__funcptr_type_kind >|2| 0x000007AD<, __funcptr_type_kind >|2| 0x000007AE<
    0x000007B0 call ag5 "openglGetProcAddress" (cstroflen 24 "glFramebufferTextureARB") *s8
    0x000007B1 gvar *__funcptr_type_kind 0x000001F1
    0x000007B2 bc *s8 >|2| 0x000007B0< to __funcptr_type_kind
    0x000007B3 store *__funcptr_type_kind >|2| 0x000007B1<, __funcptr_type_kind >|2| 0x000007B2<
    0x000007B4 call ag5 "openglGetProcAddress" (cstroflen 24 "glFramebufferTextureEXT") *s8
    0x000007B5 gvar *__funcptr_type_kind 0x000001F2
    0x000007B6 bc *s8 >|2| 0x000007B4< to __funcptr_type_kind
    0x000007B7 store *__funcptr_type_kind >|2| 0x000007B5<, __funcptr_type_kind >|2| 0x000007B6<
    0x000007B8 call ag5 "openglGetProcAddress" (cstroflen 28 "glFramebufferTextureFaceARB") *s8
    0x000007B9 gvar *__funcptr_type_kind 0x000001F3
    0x000007BA bc *s8 >|2| 0x000007B8< to __funcptr_type_kind
    0x000007BB store *__funcptr_type_kind >|2| 0x000007B9<, __funcptr_type_kind >|2| 0x000007BA<
    0x000007BC call ag5 "openglGetProcAddress" (cstroflen 28 "glFramebufferTextureFaceEXT") *s8
    0x000007BD gvar *__funcptr_type_kind 0x000001F4
    0x000007BE bc *s8 >|2| 0x000007BC< to __funcptr_type_kind
    0x000007BF store *__funcptr_type_kind >|2| 0x000007BD<, __funcptr_type_kind >|2| 0x000007BE<
    0x000007C0 call ag5 "openglGetProcAddress" (cstroflen 29 "glFramebufferTextureLayerARB") *s8
    0x000007C1 gvar *__funcptr_type_kind 0x000001F5
    0x000007C2 bc *s8 >|2| 0x000007C0< to __funcptr_type_kind
    0x000007C3 store *__funcptr_type_kind >|2| 0x000007C1<, __funcptr_type_kind >|2| 0x000007C2<
    0x000007C4 call ag5 "openglGetProcAddress" (cstroflen 29 "glFramebufferTextureLayerEXT") *s8
    0x000007C5 gvar *__funcptr_type_kind 0x000001F6
    0x000007C6 bc *s8 >|2| 0x000007C4< to __funcptr_type_kind
    0x000007C7 store *__funcptr_type_kind >|2| 0x000007C5<, __funcptr_type_kind >|2| 0x000007C6<
    0x000007C8 call ag5 "openglGetProcAddress" (cstroflen 26 "glFramebufferTextureLayer") *s8
    0x000007C9 gvar *__funcptr_type_kind 0x000001F7
    0x000007CA bc *s8 >|2| 0x000007C8< to __funcptr_type_kind
    0x000007CB store *__funcptr_type_kind >|2| 0x000007C9<, __funcptr_type_kind >|2| 0x000007CA<
    0x000007CC call ag5 "openglGetProcAddress" (cstroflen 33 "glFramebufferTextureMultiviewOVR") *s8
    0x000007CD gvar *__funcptr_type_kind 0x000001F8
    0x000007CE bc *s8 >|2| 0x000007CC< to __funcptr_type_kind
    0x000007CF store *__funcptr_type_kind >|2| 0x000007CD<, __funcptr_type_kind >|2| 0x000007CE<
    0x000007D0 call ag5 "openglGetProcAddress" (cstroflen 21 "glFramebufferTexture") *s8
    0x000007D1 gvar *__funcptr_type_kind 0x000001F9
    0x000007D2 bc *s8 >|2| 0x000007D0< to __funcptr_type_kind
    0x000007D3 store *__funcptr_type_kind >|2| 0x000007D1<, __funcptr_type_kind >|2| 0x000007D2<
    0x000007D4 call ag5 "openglGetProcAddress" (cstroflen 25 "glFrameTerminatorGREMEDY") *s8
    0x000007D5 gvar *__funcptr_type_kind 0x000001FA
    0x000007D6 bc *s8 >|2| 0x000007D4< to __funcptr_type_kind
    0x000007D7 store *__funcptr_type_kind >|2| 0x000007D5<, __funcptr_type_kind >|2| 0x000007D6<
    0x000007D8 call ag5 "openglGetProcAddress" (cstroflen 16 "glFrameZoomSGIX") *s8
    0x000007D9 gvar *__funcptr_type_kind 0x000001FB
    0x000007DA bc *s8 >|2| 0x000007D8< to __funcptr_type_kind
    0x000007DB store *__funcptr_type_kind >|2| 0x000007D9<, __funcptr_type_kind >|2| 0x000007DA<
    0x000007DC call ag5 "openglGetProcAddress" (cstroflen 22 "glFreeObjectBufferATI") *s8
    0x000007DD gvar *__funcptr_type_kind 0x000001FC
    0x000007DE bc *s8 >|2| 0x000007DC< to __funcptr_type_kind
    0x000007DF store *__funcptr_type_kind >|2| 0x000007DD<, __funcptr_type_kind >|2| 0x000007DE<
    0x000007E0 call ag5 "openglGetProcAddress" (cstroflen 14 "glFrustumfOES") *s8
    0x000007E1 gvar *__funcptr_type_kind 0x000001FD
    0x000007E2 bc *s8 >|2| 0x000007E0< to __funcptr_type_kind
    0x000007E3 store *__funcptr_type_kind >|2| 0x000007E1<, __funcptr_type_kind >|2| 0x000007E2<
    0x000007E4 call ag5 "openglGetProcAddress" (cstroflen 11 "glFrustumf") *s8
    0x000007E5 gvar *__funcptr_type_kind 0x000001FE
    0x000007E6 bc *s8 >|2| 0x000007E4< to __funcptr_type_kind
    0x000007E7 store *__funcptr_type_kind >|2| 0x000007E5<, __funcptr_type_kind >|2| 0x000007E6<
    0x000007E8 call ag5 "openglGetProcAddress" (cstroflen 11 "glFrustumx") *s8
    0x000007E9 gvar *__funcptr_type_kind 0x000001FF
    0x000007EA bc *s8 >|2| 0x000007E8< to __funcptr_type_kind
    0x000007EB store *__funcptr_type_kind >|2| 0x000007E9<, __funcptr_type_kind >|2| 0x000007EA<
    0x000007EC call ag5 "openglGetProcAddress" (cstroflen 16 "glGenBuffersARB") *s8
    0x000007ED gvar *__funcptr_type_kind 0x00000200
    0x000007EE bc *s8 >|2| 0x000007EC< to __funcptr_type_kind
    0x000007EF store *__funcptr_type_kind >|2| 0x000007ED<, __funcptr_type_kind >|2| 0x000007EE<
    0x000007F0 call ag5 "openglGetProcAddress" (cstroflen 13 "glGenBuffers") *s8
    0x000007F1 gvar *__funcptr_type_kind 0x00000201
    0x000007F2 bc *s8 >|2| 0x000007F0< to __funcptr_type_kind
    0x000007F3 store *__funcptr_type_kind >|2| 0x000007F1<, __funcptr_type_kind >|2| 0x000007F2<
    0x000007F4 call ag5 "openglGetProcAddress" (cstroflen 20 "glGenerateMipmapEXT") *s8
    0x000007F5 gvar *__funcptr_type_kind 0x00000202
    0x000007F6 bc *s8 >|2| 0x000007F4< to __funcptr_type_kind
    0x000007F7 store *__funcptr_type_kind >|2| 0x000007F5<, __funcptr_type_kind >|2| 0x000007F6<
    0x000007F8 call ag5 "openglGetProcAddress" (cstroflen 17 "glGenerateMipmap") *s8
    0x000007F9 gvar *__funcptr_type_kind 0x00000203
    0x000007FA bc *s8 >|2| 0x000007F8< to __funcptr_type_kind
    0x000007FB store *__funcptr_type_kind >|2| 0x000007F9<, __funcptr_type_kind >|2| 0x000007FA<
    0x000007FC call ag5 "openglGetProcAddress" (cstroflen 28 "glGenerateMultiTexMipmapEXT") *s8
    0x000007FD gvar *__funcptr_type_kind 0x00000204
    0x000007FE bc *s8 >|2| 0x000007FC< to __funcptr_type_kind
    0x000007FF store *__funcptr_type_kind >|2| 0x000007FD<, __funcptr_type_kind >|2| 0x000007FE<
    0x00000800 call ag5 "openglGetProcAddress" (cstroflen 27 "glGenerateTextureMipmapEXT") *s8
    0x00000801 gvar *__funcptr_type_kind 0x00000205
    0x00000802 bc *s8 >|2| 0x00000800< to __funcptr_type_kind
    0x00000803 store *__funcptr_type_kind >|2| 0x00000801<, __funcptr_type_kind >|2| 0x00000802<
    0x00000804 call ag5 "openglGetProcAddress" (cstroflen 24 "glGenerateTextureMipmap") *s8
    0x00000805 gvar *__funcptr_type_kind 0x00000206
    0x00000806 bc *s8 >|2| 0x00000804< to __funcptr_type_kind
    0x00000807 store *__funcptr_type_kind >|2| 0x00000805<, __funcptr_type_kind >|2| 0x00000806<
    0x00000808 call ag5 "openglGetProcAddress" (cstroflen 17 "glGenFencesAPPLE") *s8
    0x00000809 gvar *__funcptr_type_kind 0x00000207
    0x0000080A bc *s8 >|2| 0x00000808< to __funcptr_type_kind
    0x0000080B store *__funcptr_type_kind >|2| 0x00000809<, __funcptr_type_kind >|2| 0x0000080A<
    0x0000080C call ag5 "openglGetProcAddress" (cstroflen 14 "glGenFencesNV") *s8
    0x0000080D gvar *__funcptr_type_kind 0x00000208
    0x0000080E bc *s8 >|2| 0x0000080C< to __funcptr_type_kind
    0x0000080F store *__funcptr_type_kind >|2| 0x0000080D<, __funcptr_type_kind >|2| 0x0000080E<
    0x00000810 call ag5 "openglGetProcAddress" (cstroflen 21 "glGenFramebuffersEXT") *s8
    0x00000811 gvar *__funcptr_type_kind 0x00000209
    0x00000812 bc *s8 >|2| 0x00000810< to __funcptr_type_kind
    0x00000813 store *__funcptr_type_kind >|2| 0x00000811<, __funcptr_type_kind >|2| 0x00000812<
    0x00000814 call ag5 "openglGetProcAddress" (cstroflen 18 "glGenFramebuffers") *s8
    0x00000815 gvar *__funcptr_type_kind 0x0000020A
    0x00000816 bc *s8 >|2| 0x00000814< to __funcptr_type_kind
    0x00000817 store *__funcptr_type_kind >|2| 0x00000815<, __funcptr_type_kind >|2| 0x00000816<
    0x00000818 call ag5 "openglGetProcAddress" (cstroflen 14 "glGenNamesAMD") *s8
    0x00000819 gvar *__funcptr_type_kind 0x0000020B
    0x0000081A bc *s8 >|2| 0x00000818< to __funcptr_type_kind
    0x0000081B store *__funcptr_type_kind >|2| 0x00000819<, __funcptr_type_kind >|2| 0x0000081A<
    0x0000081C call ag5 "openglGetProcAddress" (cstroflen 24 "glGenOcclusionQueriesNV") *s8
    0x0000081D gvar *__funcptr_type_kind 0x0000020C
    0x0000081E bc *s8 >|2| 0x0000081C< to __funcptr_type_kind
    0x0000081F store *__funcptr_type_kind >|2| 0x0000081D<, __funcptr_type_kind >|2| 0x0000081E<
    0x00000820 call ag5 "openglGetProcAddress" (cstroflen 21 "glGenPerfMonitorsAMD") *s8
    0x00000821 gvar *__funcptr_type_kind 0x0000020D
    0x00000822 bc *s8 >|2| 0x00000820< to __funcptr_type_kind
    0x00000823 store *__funcptr_type_kind >|2| 0x00000821<, __funcptr_type_kind >|2| 0x00000822<
    0x00000824 call ag5 "openglGetProcAddress" (cstroflen 22 "glGenProgramPipelines") *s8
    0x00000825 gvar *__funcptr_type_kind 0x0000020E
    0x00000826 bc *s8 >|2| 0x00000824< to __funcptr_type_kind
    0x00000827 store *__funcptr_type_kind >|2| 0x00000825<, __funcptr_type_kind >|2| 0x00000826<
    0x00000828 call ag5 "openglGetProcAddress" (cstroflen 17 "glGenProgramsARB") *s8
    0x00000829 gvar *__funcptr_type_kind 0x0000020F
    0x0000082A bc *s8 >|2| 0x00000828< to __funcptr_type_kind
    0x0000082B store *__funcptr_type_kind >|2| 0x00000829<, __funcptr_type_kind >|2| 0x0000082A<
    0x0000082C call ag5 "openglGetProcAddress" (cstroflen 16 "glGenProgramsNV") *s8
    0x0000082D gvar *__funcptr_type_kind 0x00000210
    0x0000082E bc *s8 >|2| 0x0000082C< to __funcptr_type_kind
    0x0000082F store *__funcptr_type_kind >|2| 0x0000082D<, __funcptr_type_kind >|2| 0x0000082E<
    0x00000830 call ag5 "openglGetProcAddress" (cstroflen 18 "glGenQueriesANGLE") *s8
    0x00000831 gvar *__funcptr_type_kind 0x00000211
    0x00000832 bc *s8 >|2| 0x00000830< to __funcptr_type_kind
    0x00000833 store *__funcptr_type_kind >|2| 0x00000831<, __funcptr_type_kind >|2| 0x00000832<
    0x00000834 call ag5 "openglGetProcAddress" (cstroflen 16 "glGenQueriesARB") *s8
    0x00000835 gvar *__funcptr_type_kind 0x00000212
    0x00000836 bc *s8 >|2| 0x00000834< to __funcptr_type_kind
    0x00000837 store *__funcptr_type_kind >|2| 0x00000835<, __funcptr_type_kind >|2| 0x00000836<
    0x00000838 call ag5 "openglGetProcAddress" (cstroflen 13 "glGenQueries") *s8
    0x00000839 gvar *__funcptr_type_kind 0x00000213
    0x0000083A bc *s8 >|2| 0x00000838< to __funcptr_type_kind
    0x0000083B store *__funcptr_type_kind >|2| 0x00000839<, __funcptr_type_kind >|2| 0x0000083A<
    0x0000083C call ag5 "openglGetProcAddress" (cstroflen 22 "glGenRenderbuffersEXT") *s8
    0x0000083D gvar *__funcptr_type_kind 0x00000214
    0x0000083E bc *s8 >|2| 0x0000083C< to __funcptr_type_kind
    0x0000083F store *__funcptr_type_kind >|2| 0x0000083D<, __funcptr_type_kind >|2| 0x0000083E<
    0x00000840 call ag5 "openglGetProcAddress" (cstroflen 19 "glGenRenderbuffers") *s8
    0x00000841 gvar *__funcptr_type_kind 0x00000215
    0x00000842 bc *s8 >|2| 0x00000840< to __funcptr_type_kind
    0x00000843 store *__funcptr_type_kind >|2| 0x00000841<, __funcptr_type_kind >|2| 0x00000842<
    0x00000844 call ag5 "openglGetProcAddress" (cstroflen 14 "glGenSamplers") *s8
    0x00000845 gvar *__funcptr_type_kind 0x00000216
    0x00000846 bc *s8 >|2| 0x00000844< to __funcptr_type_kind
    0x00000847 store *__funcptr_type_kind >|2| 0x00000845<, __funcptr_type_kind >|2| 0x00000846<
    0x00000848 call ag5 "openglGetProcAddress" (cstroflen 17 "glGenTexturesEXT") *s8
    0x00000849 gvar *__funcptr_type_kind 0x00000217
    0x0000084A bc *s8 >|2| 0x00000848< to __funcptr_type_kind
    0x0000084B store *__funcptr_type_kind >|2| 0x00000849<, __funcptr_type_kind >|2| 0x0000084A<
    0x0000084C call ag5 "openglGetProcAddress" (cstroflen 26 "glGenTransformFeedbacksNV") *s8
    0x0000084D gvar *__funcptr_type_kind 0x00000218
    0x0000084E bc *s8 >|2| 0x0000084C< to __funcptr_type_kind
    0x0000084F store *__funcptr_type_kind >|2| 0x0000084D<, __funcptr_type_kind >|2| 0x0000084E<
    0x00000850 call ag5 "openglGetProcAddress" (cstroflen 24 "glGenTransformFeedbacks") *s8
    0x00000851 gvar *__funcptr_type_kind 0x00000219
    0x00000852 bc *s8 >|2| 0x00000850< to __funcptr_type_kind
    0x00000853 store *__funcptr_type_kind >|2| 0x00000851<, __funcptr_type_kind >|2| 0x00000852<
    0x00000854 call ag5 "openglGetProcAddress" (cstroflen 23 "glGenVertexArraysAPPLE") *s8
    0x00000855 gvar *__funcptr_type_kind 0x0000021A
    0x00000856 bc *s8 >|2| 0x00000854< to __funcptr_type_kind
    0x00000857 store *__funcptr_type_kind >|2| 0x00000855<, __funcptr_type_kind >|2| 0x00000856<
    0x00000858 call ag5 "openglGetProcAddress" (cstroflen 18 "glGenVertexArrays") *s8
    0x00000859 gvar *__funcptr_type_kind 0x0000021B
    0x0000085A bc *s8 >|2| 0x00000858< to __funcptr_type_kind
    0x0000085B store *__funcptr_type_kind >|2| 0x00000859<, __funcptr_type_kind >|2| 0x0000085A<
    0x0000085C call ag5 "openglGetProcAddress" (cstroflen 33 "glGetActiveAtomicCounterBufferiv") *s8
    0x0000085D gvar *__funcptr_type_kind 0x0000021C
    0x0000085E bc *s8 >|2| 0x0000085C< to __funcptr_type_kind
    0x0000085F store *__funcptr_type_kind >|2| 0x0000085D<, __funcptr_type_kind >|2| 0x0000085E<
    0x00000860 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetActiveAttribARB") *s8
    0x00000861 gvar *__funcptr_type_kind 0x0000021D
    0x00000862 bc *s8 >|2| 0x00000860< to __funcptr_type_kind
    0x00000863 store *__funcptr_type_kind >|2| 0x00000861<, __funcptr_type_kind >|2| 0x00000862<
    0x00000864 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetActiveAttrib") *s8
    0x00000865 gvar *__funcptr_type_kind 0x0000021E
    0x00000866 bc *s8 >|2| 0x00000864< to __funcptr_type_kind
    0x00000867 store *__funcptr_type_kind >|2| 0x00000865<, __funcptr_type_kind >|2| 0x00000866<
    0x00000868 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetActiveSubroutineName") *s8
    0x00000869 gvar *__funcptr_type_kind 0x0000021F
    0x0000086A bc *s8 >|2| 0x00000868< to __funcptr_type_kind
    0x0000086B store *__funcptr_type_kind >|2| 0x00000869<, __funcptr_type_kind >|2| 0x0000086A<
    0x0000086C call ag5 "openglGetProcAddress" (cstroflen 31 "glGetActiveSubroutineUniformiv") *s8
    0x0000086D gvar *__funcptr_type_kind 0x00000220
    0x0000086E bc *s8 >|2| 0x0000086C< to __funcptr_type_kind
    0x0000086F store *__funcptr_type_kind >|2| 0x0000086D<, __funcptr_type_kind >|2| 0x0000086E<
    0x00000870 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetActiveSubroutineUniformName") *s8
    0x00000871 gvar *__funcptr_type_kind 0x00000221
    0x00000872 bc *s8 >|2| 0x00000870< to __funcptr_type_kind
    0x00000873 store *__funcptr_type_kind >|2| 0x00000871<, __funcptr_type_kind >|2| 0x00000872<
    0x00000874 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetActiveUniformARB") *s8
    0x00000875 gvar *__funcptr_type_kind 0x00000222
    0x00000876 bc *s8 >|2| 0x00000874< to __funcptr_type_kind
    0x00000877 store *__funcptr_type_kind >|2| 0x00000875<, __funcptr_type_kind >|2| 0x00000876<
    0x00000878 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetActiveUniformBlockiv") *s8
    0x00000879 gvar *__funcptr_type_kind 0x00000223
    0x0000087A bc *s8 >|2| 0x00000878< to __funcptr_type_kind
    0x0000087B store *__funcptr_type_kind >|2| 0x00000879<, __funcptr_type_kind >|2| 0x0000087A<
    0x0000087C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetActiveUniformBlockName") *s8
    0x0000087D gvar *__funcptr_type_kind 0x00000224
    0x0000087E bc *s8 >|2| 0x0000087C< to __funcptr_type_kind
    0x0000087F store *__funcptr_type_kind >|2| 0x0000087D<, __funcptr_type_kind >|2| 0x0000087E<
    0x00000880 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetActiveUniformName") *s8
    0x00000881 gvar *__funcptr_type_kind 0x00000225
    0x00000882 bc *s8 >|2| 0x00000880< to __funcptr_type_kind
    0x00000883 store *__funcptr_type_kind >|2| 0x00000881<, __funcptr_type_kind >|2| 0x00000882<
    0x00000884 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetActiveUniform") *s8
    0x00000885 gvar *__funcptr_type_kind 0x00000226
    0x00000886 bc *s8 >|2| 0x00000884< to __funcptr_type_kind
    0x00000887 store *__funcptr_type_kind >|2| 0x00000885<, __funcptr_type_kind >|2| 0x00000886<
    0x00000888 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetActiveUniformsiv") *s8
    0x00000889 gvar *__funcptr_type_kind 0x00000227
    0x0000088A bc *s8 >|2| 0x00000888< to __funcptr_type_kind
    0x0000088B store *__funcptr_type_kind >|2| 0x00000889<, __funcptr_type_kind >|2| 0x0000088A<
    0x0000088C call ag5 "openglGetProcAddress" (cstroflen 21 "glGetActiveVaryingNV") *s8
    0x0000088D gvar *__funcptr_type_kind 0x00000228
    0x0000088E bc *s8 >|2| 0x0000088C< to __funcptr_type_kind
    0x0000088F store *__funcptr_type_kind >|2| 0x0000088D<, __funcptr_type_kind >|2| 0x0000088E<
    0x00000890 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetArrayObjectfvATI") *s8
    0x00000891 gvar *__funcptr_type_kind 0x00000229
    0x00000892 bc *s8 >|2| 0x00000890< to __funcptr_type_kind
    0x00000893 store *__funcptr_type_kind >|2| 0x00000891<, __funcptr_type_kind >|2| 0x00000892<
    0x00000894 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetArrayObjectivATI") *s8
    0x00000895 gvar *__funcptr_type_kind 0x0000022A
    0x00000896 bc *s8 >|2| 0x00000894< to __funcptr_type_kind
    0x00000897 store *__funcptr_type_kind >|2| 0x00000895<, __funcptr_type_kind >|2| 0x00000896<
    0x00000898 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetAttachedObjectsARB") *s8
    0x00000899 gvar *__funcptr_type_kind 0x0000022B
    0x0000089A bc *s8 >|2| 0x00000898< to __funcptr_type_kind
    0x0000089B store *__funcptr_type_kind >|2| 0x00000899<, __funcptr_type_kind >|2| 0x0000089A<
    0x0000089C call ag5 "openglGetProcAddress" (cstroflen 21 "glGetAttachedShaders") *s8
    0x0000089D gvar *__funcptr_type_kind 0x0000022C
    0x0000089E bc *s8 >|2| 0x0000089C< to __funcptr_type_kind
    0x0000089F store *__funcptr_type_kind >|2| 0x0000089D<, __funcptr_type_kind >|2| 0x0000089E<
    0x000008A0 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetBooleanIndexedvEXT") *s8
    0x000008A1 gvar *__funcptr_type_kind 0x0000022D
    0x000008A2 bc *s8 >|2| 0x000008A0< to __funcptr_type_kind
    0x000008A3 store *__funcptr_type_kind >|2| 0x000008A1<, __funcptr_type_kind >|2| 0x000008A2<
    0x000008A4 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetBooleani_v") *s8
    0x000008A5 gvar *__funcptr_type_kind 0x0000022E
    0x000008A6 bc *s8 >|2| 0x000008A4< to __funcptr_type_kind
    0x000008A7 store *__funcptr_type_kind >|2| 0x000008A5<, __funcptr_type_kind >|2| 0x000008A6<
    0x000008A8 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetBufferParameteri64v") *s8
    0x000008A9 gvar *__funcptr_type_kind 0x0000022F
    0x000008AA bc *s8 >|2| 0x000008A8< to __funcptr_type_kind
    0x000008AB store *__funcptr_type_kind >|2| 0x000008A9<, __funcptr_type_kind >|2| 0x000008AA<
    0x000008AC call ag5 "openglGetProcAddress" (cstroflen 26 "glGetBufferParameterivARB") *s8
    0x000008AD gvar *__funcptr_type_kind 0x00000230
    0x000008AE bc *s8 >|2| 0x000008AC< to __funcptr_type_kind
    0x000008AF store *__funcptr_type_kind >|2| 0x000008AD<, __funcptr_type_kind >|2| 0x000008AE<
    0x000008B0 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetBufferParameteriv") *s8
    0x000008B1 gvar *__funcptr_type_kind 0x00000231
    0x000008B2 bc *s8 >|2| 0x000008B0< to __funcptr_type_kind
    0x000008B3 store *__funcptr_type_kind >|2| 0x000008B1<, __funcptr_type_kind >|2| 0x000008B2<
    0x000008B4 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetBufferParameterui64vNV") *s8
    0x000008B5 gvar *__funcptr_type_kind 0x00000232
    0x000008B6 bc *s8 >|2| 0x000008B4< to __funcptr_type_kind
    0x000008B7 store *__funcptr_type_kind >|2| 0x000008B5<, __funcptr_type_kind >|2| 0x000008B6<
    0x000008B8 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetBufferPointervARB") *s8
    0x000008B9 gvar *__funcptr_type_kind 0x00000233
    0x000008BA bc *s8 >|2| 0x000008B8< to __funcptr_type_kind
    0x000008BB store *__funcptr_type_kind >|2| 0x000008B9<, __funcptr_type_kind >|2| 0x000008BA<
    0x000008BC call ag5 "openglGetProcAddress" (cstroflen 20 "glGetBufferPointerv") *s8
    0x000008BD gvar *__funcptr_type_kind 0x00000234
    0x000008BE bc *s8 >|2| 0x000008BC< to __funcptr_type_kind
    0x000008BF store *__funcptr_type_kind >|2| 0x000008BD<, __funcptr_type_kind >|2| 0x000008BE<
    0x000008C0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetBufferSubDataARB") *s8
    0x000008C1 gvar *__funcptr_type_kind 0x00000235
    0x000008C2 bc *s8 >|2| 0x000008C0< to __funcptr_type_kind
    0x000008C3 store *__funcptr_type_kind >|2| 0x000008C1<, __funcptr_type_kind >|2| 0x000008C2<
    0x000008C4 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetBufferSubData") *s8
    0x000008C5 gvar *__funcptr_type_kind 0x00000236
    0x000008C6 bc *s8 >|2| 0x000008C4< to __funcptr_type_kind
    0x000008C7 store *__funcptr_type_kind >|2| 0x000008C5<, __funcptr_type_kind >|2| 0x000008C6<
    0x000008C8 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetClipPlanefOES") *s8
    0x000008C9 gvar *__funcptr_type_kind 0x00000237
    0x000008CA bc *s8 >|2| 0x000008C8< to __funcptr_type_kind
    0x000008CB store *__funcptr_type_kind >|2| 0x000008C9<, __funcptr_type_kind >|2| 0x000008CA<
    0x000008CC call ag5 "openglGetProcAddress" (cstroflen 16 "glGetClipPlanef") *s8
    0x000008CD gvar *__funcptr_type_kind 0x00000238
    0x000008CE bc *s8 >|2| 0x000008CC< to __funcptr_type_kind
    0x000008CF store *__funcptr_type_kind >|2| 0x000008CD<, __funcptr_type_kind >|2| 0x000008CE<
    0x000008D0 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetColorTableEXT") *s8
    0x000008D1 gvar *__funcptr_type_kind 0x00000239
    0x000008D2 bc *s8 >|2| 0x000008D0< to __funcptr_type_kind
    0x000008D3 store *__funcptr_type_kind >|2| 0x000008D1<, __funcptr_type_kind >|2| 0x000008D2<
    0x000008D4 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetColorTableParameterfvEXT") *s8
    0x000008D5 gvar *__funcptr_type_kind 0x0000023A
    0x000008D6 bc *s8 >|2| 0x000008D4< to __funcptr_type_kind
    0x000008D7 store *__funcptr_type_kind >|2| 0x000008D5<, __funcptr_type_kind >|2| 0x000008D6<
    0x000008D8 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetColorTableParameterfv") *s8
    0x000008D9 gvar *__funcptr_type_kind 0x0000023B
    0x000008DA bc *s8 >|2| 0x000008D8< to __funcptr_type_kind
    0x000008DB store *__funcptr_type_kind >|2| 0x000008D9<, __funcptr_type_kind >|2| 0x000008DA<
    0x000008DC call ag5 "openglGetProcAddress" (cstroflen 30 "glGetColorTableParameterfvSGI") *s8
    0x000008DD gvar *__funcptr_type_kind 0x0000023C
    0x000008DE bc *s8 >|2| 0x000008DC< to __funcptr_type_kind
    0x000008DF store *__funcptr_type_kind >|2| 0x000008DD<, __funcptr_type_kind >|2| 0x000008DE<
    0x000008E0 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetColorTableParameterivEXT") *s8
    0x000008E1 gvar *__funcptr_type_kind 0x0000023D
    0x000008E2 bc *s8 >|2| 0x000008E0< to __funcptr_type_kind
    0x000008E3 store *__funcptr_type_kind >|2| 0x000008E1<, __funcptr_type_kind >|2| 0x000008E2<
    0x000008E4 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetColorTableParameteriv") *s8
    0x000008E5 gvar *__funcptr_type_kind 0x0000023E
    0x000008E6 bc *s8 >|2| 0x000008E4< to __funcptr_type_kind
    0x000008E7 store *__funcptr_type_kind >|2| 0x000008E5<, __funcptr_type_kind >|2| 0x000008E6<
    0x000008E8 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetColorTableParameterivSGI") *s8
    0x000008E9 gvar *__funcptr_type_kind 0x0000023F
    0x000008EA bc *s8 >|2| 0x000008E8< to __funcptr_type_kind
    0x000008EB store *__funcptr_type_kind >|2| 0x000008E9<, __funcptr_type_kind >|2| 0x000008EA<
    0x000008EC call ag5 "openglGetProcAddress" (cstroflen 16 "glGetColorTable") *s8
    0x000008ED gvar *__funcptr_type_kind 0x00000240
    0x000008EE bc *s8 >|2| 0x000008EC< to __funcptr_type_kind
    0x000008EF store *__funcptr_type_kind >|2| 0x000008ED<, __funcptr_type_kind >|2| 0x000008EE<
    0x000008F0 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetColorTableSGI") *s8
    0x000008F1 gvar *__funcptr_type_kind 0x00000241
    0x000008F2 bc *s8 >|2| 0x000008F0< to __funcptr_type_kind
    0x000008F3 store *__funcptr_type_kind >|2| 0x000008F1<, __funcptr_type_kind >|2| 0x000008F2<
    0x000008F4 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetCombinerInputParameterfvNV") *s8
    0x000008F5 gvar *__funcptr_type_kind 0x00000242
    0x000008F6 bc *s8 >|2| 0x000008F4< to __funcptr_type_kind
    0x000008F7 store *__funcptr_type_kind >|2| 0x000008F5<, __funcptr_type_kind >|2| 0x000008F6<
    0x000008F8 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetCombinerInputParameterivNV") *s8
    0x000008F9 gvar *__funcptr_type_kind 0x00000243
    0x000008FA bc *s8 >|2| 0x000008F8< to __funcptr_type_kind
    0x000008FB store *__funcptr_type_kind >|2| 0x000008F9<, __funcptr_type_kind >|2| 0x000008FA<
    0x000008FC call ag5 "openglGetProcAddress" (cstroflen 33 "glGetCombinerOutputParameterfvNV") *s8
    0x000008FD gvar *__funcptr_type_kind 0x00000244
    0x000008FE bc *s8 >|2| 0x000008FC< to __funcptr_type_kind
    0x000008FF store *__funcptr_type_kind >|2| 0x000008FD<, __funcptr_type_kind >|2| 0x000008FE<
    0x00000900 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetCombinerOutputParameterivNV") *s8
    0x00000901 gvar *__funcptr_type_kind 0x00000245
    0x00000902 bc *s8 >|2| 0x00000900< to __funcptr_type_kind
    0x00000903 store *__funcptr_type_kind >|2| 0x00000901<, __funcptr_type_kind >|2| 0x00000902<
    0x00000904 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetCombinerStageParameterfvNV") *s8
    0x00000905 gvar *__funcptr_type_kind 0x00000246
    0x00000906 bc *s8 >|2| 0x00000904< to __funcptr_type_kind
    0x00000907 store *__funcptr_type_kind >|2| 0x00000905<, __funcptr_type_kind >|2| 0x00000906<
    0x00000908 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetCompressedMultiTexImageEXT") *s8
    0x00000909 gvar *__funcptr_type_kind 0x00000247
    0x0000090A bc *s8 >|2| 0x00000908< to __funcptr_type_kind
    0x0000090B store *__funcptr_type_kind >|2| 0x00000909<, __funcptr_type_kind >|2| 0x0000090A<
    0x0000090C call ag5 "openglGetProcAddress" (cstroflen 27 "glGetCompressedTexImageARB") *s8
    0x0000090D gvar *__funcptr_type_kind 0x00000248
    0x0000090E bc *s8 >|2| 0x0000090C< to __funcptr_type_kind
    0x0000090F store *__funcptr_type_kind >|2| 0x0000090D<, __funcptr_type_kind >|2| 0x0000090E<
    0x00000910 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetCompressedTexImage") *s8
    0x00000911 gvar *__funcptr_type_kind 0x00000249
    0x00000912 bc *s8 >|2| 0x00000910< to __funcptr_type_kind
    0x00000913 store *__funcptr_type_kind >|2| 0x00000911<, __funcptr_type_kind >|2| 0x00000912<
    0x00000914 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetCompressedTextureImageEXT") *s8
    0x00000915 gvar *__funcptr_type_kind 0x0000024A
    0x00000916 bc *s8 >|2| 0x00000914< to __funcptr_type_kind
    0x00000917 store *__funcptr_type_kind >|2| 0x00000915<, __funcptr_type_kind >|2| 0x00000916<
    0x00000918 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetCompressedTextureImage") *s8
    0x00000919 gvar *__funcptr_type_kind 0x0000024B
    0x0000091A bc *s8 >|2| 0x00000918< to __funcptr_type_kind
    0x0000091B store *__funcptr_type_kind >|2| 0x00000919<, __funcptr_type_kind >|2| 0x0000091A<
    0x0000091C call ag5 "openglGetProcAddress" (cstroflen 31 "glGetCompressedTextureSubImage") *s8
    0x0000091D gvar *__funcptr_type_kind 0x0000024C
    0x0000091E bc *s8 >|2| 0x0000091C< to __funcptr_type_kind
    0x0000091F store *__funcptr_type_kind >|2| 0x0000091D<, __funcptr_type_kind >|2| 0x0000091E<
    0x00000920 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetConvolutionFilterEXT") *s8
    0x00000921 gvar *__funcptr_type_kind 0x0000024D
    0x00000922 bc *s8 >|2| 0x00000920< to __funcptr_type_kind
    0x00000923 store *__funcptr_type_kind >|2| 0x00000921<, __funcptr_type_kind >|2| 0x00000922<
    0x00000924 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetConvolutionFilter") *s8
    0x00000925 gvar *__funcptr_type_kind 0x0000024E
    0x00000926 bc *s8 >|2| 0x00000924< to __funcptr_type_kind
    0x00000927 store *__funcptr_type_kind >|2| 0x00000925<, __funcptr_type_kind >|2| 0x00000926<
    0x00000928 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetConvolutionParameterfvEXT") *s8
    0x00000929 gvar *__funcptr_type_kind 0x0000024F
    0x0000092A bc *s8 >|2| 0x00000928< to __funcptr_type_kind
    0x0000092B store *__funcptr_type_kind >|2| 0x00000929<, __funcptr_type_kind >|2| 0x0000092A<
    0x0000092C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetConvolutionParameterfv") *s8
    0x0000092D gvar *__funcptr_type_kind 0x00000250
    0x0000092E bc *s8 >|2| 0x0000092C< to __funcptr_type_kind
    0x0000092F store *__funcptr_type_kind >|2| 0x0000092D<, __funcptr_type_kind >|2| 0x0000092E<
    0x00000930 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetConvolutionParameterivEXT") *s8
    0x00000931 gvar *__funcptr_type_kind 0x00000251
    0x00000932 bc *s8 >|2| 0x00000930< to __funcptr_type_kind
    0x00000933 store *__funcptr_type_kind >|2| 0x00000931<, __funcptr_type_kind >|2| 0x00000932<
    0x00000934 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetConvolutionParameteriv") *s8
    0x00000935 gvar *__funcptr_type_kind 0x00000252
    0x00000936 bc *s8 >|2| 0x00000934< to __funcptr_type_kind
    0x00000937 store *__funcptr_type_kind >|2| 0x00000935<, __funcptr_type_kind >|2| 0x00000936<
    0x00000938 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetCoverageModulationTableNV") *s8
    0x00000939 gvar *__funcptr_type_kind 0x00000253
    0x0000093A bc *s8 >|2| 0x00000938< to __funcptr_type_kind
    0x0000093B store *__funcptr_type_kind >|2| 0x00000939<, __funcptr_type_kind >|2| 0x0000093A<
    0x0000093C call ag5 "openglGetProcAddress" (cstroflen 23 "glGetDetailTexFuncSGIS") *s8
    0x0000093D gvar *__funcptr_type_kind 0x00000254
    0x0000093E bc *s8 >|2| 0x0000093C< to __funcptr_type_kind
    0x0000093F store *__funcptr_type_kind >|2| 0x0000093D<, __funcptr_type_kind >|2| 0x0000093E<
    0x00000940 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetDoubleIndexedvEXT") *s8
    0x00000941 gvar *__funcptr_type_kind 0x00000255
    0x00000942 bc *s8 >|2| 0x00000940< to __funcptr_type_kind
    0x00000943 store *__funcptr_type_kind >|2| 0x00000941<, __funcptr_type_kind >|2| 0x00000942<
    0x00000944 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetDoublei_vEXT") *s8
    0x00000945 gvar *__funcptr_type_kind 0x00000256
    0x00000946 bc *s8 >|2| 0x00000944< to __funcptr_type_kind
    0x00000947 store *__funcptr_type_kind >|2| 0x00000945<, __funcptr_type_kind >|2| 0x00000946<
    0x00000948 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetDoublei_v") *s8
    0x00000949 gvar *__funcptr_type_kind 0x00000257
    0x0000094A bc *s8 >|2| 0x00000948< to __funcptr_type_kind
    0x0000094B store *__funcptr_type_kind >|2| 0x00000949<, __funcptr_type_kind >|2| 0x0000094A<
    0x0000094C call ag5 "openglGetProcAddress" (cstroflen 15 "glGetFenceivNV") *s8
    0x0000094D gvar *__funcptr_type_kind 0x00000258
    0x0000094E bc *s8 >|2| 0x0000094C< to __funcptr_type_kind
    0x0000094F store *__funcptr_type_kind >|2| 0x0000094D<, __funcptr_type_kind >|2| 0x0000094E<
    0x00000950 call ag5 "openglGetProcAddress" (cstroflen 37 "glGetFinalCombinerInputParameterfvNV") *s8
    0x00000951 gvar *__funcptr_type_kind 0x00000259
    0x00000952 bc *s8 >|2| 0x00000950< to __funcptr_type_kind
    0x00000953 store *__funcptr_type_kind >|2| 0x00000951<, __funcptr_type_kind >|2| 0x00000952<
    0x00000954 call ag5 "openglGetProcAddress" (cstroflen 37 "glGetFinalCombinerInputParameterivNV") *s8
    0x00000955 gvar *__funcptr_type_kind 0x0000025A
    0x00000956 bc *s8 >|2| 0x00000954< to __funcptr_type_kind
    0x00000957 store *__funcptr_type_kind >|2| 0x00000955<, __funcptr_type_kind >|2| 0x00000956<
    0x00000958 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetFirstPerfQueryIdINTEL") *s8
    0x00000959 gvar *__funcptr_type_kind 0x0000025B
    0x0000095A bc *s8 >|2| 0x00000958< to __funcptr_type_kind
    0x0000095B store *__funcptr_type_kind >|2| 0x00000959<, __funcptr_type_kind >|2| 0x0000095A<
    0x0000095C call ag5 "openglGetProcAddress" (cstroflen 12 "glGetFixedv") *s8
    0x0000095D gvar *__funcptr_type_kind 0x0000025C
    0x0000095E bc *s8 >|2| 0x0000095C< to __funcptr_type_kind
    0x0000095F store *__funcptr_type_kind >|2| 0x0000095D<, __funcptr_type_kind >|2| 0x0000095E<
    0x00000960 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetFloatIndexedvEXT") *s8
    0x00000961 gvar *__funcptr_type_kind 0x0000025D
    0x00000962 bc *s8 >|2| 0x00000960< to __funcptr_type_kind
    0x00000963 store *__funcptr_type_kind >|2| 0x00000961<, __funcptr_type_kind >|2| 0x00000962<
    0x00000964 call ag5 "openglGetProcAddress" (cstroflen 17 "glGetFloati_vEXT") *s8
    0x00000965 gvar *__funcptr_type_kind 0x0000025E
    0x00000966 bc *s8 >|2| 0x00000964< to __funcptr_type_kind
    0x00000967 store *__funcptr_type_kind >|2| 0x00000965<, __funcptr_type_kind >|2| 0x00000966<
    0x00000968 call ag5 "openglGetProcAddress" (cstroflen 14 "glGetFloati_v") *s8
    0x00000969 gvar *__funcptr_type_kind 0x0000025F
    0x0000096A bc *s8 >|2| 0x00000968< to __funcptr_type_kind
    0x0000096B store *__funcptr_type_kind >|2| 0x00000969<, __funcptr_type_kind >|2| 0x0000096A<
    0x0000096C call ag5 "openglGetProcAddress" (cstroflen 17 "glGetFogFuncSGIS") *s8
    0x0000096D gvar *__funcptr_type_kind 0x00000260
    0x0000096E bc *s8 >|2| 0x0000096C< to __funcptr_type_kind
    0x0000096F store *__funcptr_type_kind >|2| 0x0000096D<, __funcptr_type_kind >|2| 0x0000096E<
    0x00000970 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetFragmentLightfvEXT") *s8
    0x00000971 gvar *__funcptr_type_kind 0x00000261
    0x00000972 bc *s8 >|2| 0x00000970< to __funcptr_type_kind
    0x00000973 store *__funcptr_type_kind >|2| 0x00000971<, __funcptr_type_kind >|2| 0x00000972<
    0x00000974 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetFragmentLightfvSGIX") *s8
    0x00000975 gvar *__funcptr_type_kind 0x00000262
    0x00000976 bc *s8 >|2| 0x00000974< to __funcptr_type_kind
    0x00000977 store *__funcptr_type_kind >|2| 0x00000975<, __funcptr_type_kind >|2| 0x00000976<
    0x00000978 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetFragmentLightivEXT") *s8
    0x00000979 gvar *__funcptr_type_kind 0x00000263
    0x0000097A bc *s8 >|2| 0x00000978< to __funcptr_type_kind
    0x0000097B store *__funcptr_type_kind >|2| 0x00000979<, __funcptr_type_kind >|2| 0x0000097A<
    0x0000097C call ag5 "openglGetProcAddress" (cstroflen 25 "glGetFragmentLightivSGIX") *s8
    0x0000097D gvar *__funcptr_type_kind 0x00000264
    0x0000097E bc *s8 >|2| 0x0000097C< to __funcptr_type_kind
    0x0000097F store *__funcptr_type_kind >|2| 0x0000097D<, __funcptr_type_kind >|2| 0x0000097E<
    0x00000980 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetFragmentMaterialfvEXT") *s8
    0x00000981 gvar *__funcptr_type_kind 0x00000265
    0x00000982 bc *s8 >|2| 0x00000980< to __funcptr_type_kind
    0x00000983 store *__funcptr_type_kind >|2| 0x00000981<, __funcptr_type_kind >|2| 0x00000982<
    0x00000984 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetFragmentMaterialfvSGIX") *s8
    0x00000985 gvar *__funcptr_type_kind 0x00000266
    0x00000986 bc *s8 >|2| 0x00000984< to __funcptr_type_kind
    0x00000987 store *__funcptr_type_kind >|2| 0x00000985<, __funcptr_type_kind >|2| 0x00000986<
    0x00000988 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetFragmentMaterialivEXT") *s8
    0x00000989 gvar *__funcptr_type_kind 0x00000267
    0x0000098A bc *s8 >|2| 0x00000988< to __funcptr_type_kind
    0x0000098B store *__funcptr_type_kind >|2| 0x00000989<, __funcptr_type_kind >|2| 0x0000098A<
    0x0000098C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetFragmentMaterialivSGIX") *s8
    0x0000098D gvar *__funcptr_type_kind 0x00000268
    0x0000098E bc *s8 >|2| 0x0000098C< to __funcptr_type_kind
    0x0000098F store *__funcptr_type_kind >|2| 0x0000098D<, __funcptr_type_kind >|2| 0x0000098E<
    0x00000990 call ag5 "openglGetProcAddress" (cstroflen 41 "glGetFramebufferAttachmentParameterivEXT") *s8
    0x00000991 gvar *__funcptr_type_kind 0x00000269
    0x00000992 bc *s8 >|2| 0x00000990< to __funcptr_type_kind
    0x00000993 store *__funcptr_type_kind >|2| 0x00000991<, __funcptr_type_kind >|2| 0x00000992<
    0x00000994 call ag5 "openglGetProcAddress" (cstroflen 38 "glGetFramebufferAttachmentParameteriv") *s8
    0x00000995 gvar *__funcptr_type_kind 0x0000026A
    0x00000996 bc *s8 >|2| 0x00000994< to __funcptr_type_kind
    0x00000997 store *__funcptr_type_kind >|2| 0x00000995<, __funcptr_type_kind >|2| 0x00000996<
    0x00000998 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetFramebufferParameterivEXT") *s8
    0x00000999 gvar *__funcptr_type_kind 0x0000026B
    0x0000099A bc *s8 >|2| 0x00000998< to __funcptr_type_kind
    0x0000099B store *__funcptr_type_kind >|2| 0x00000999<, __funcptr_type_kind >|2| 0x0000099A<
    0x0000099C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetFramebufferParameteriv") *s8
    0x0000099D gvar *__funcptr_type_kind 0x0000026C
    0x0000099E bc *s8 >|2| 0x0000099C< to __funcptr_type_kind
    0x0000099F store *__funcptr_type_kind >|2| 0x0000099D<, __funcptr_type_kind >|2| 0x0000099E<
    0x000009A0 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetHistogramEXT") *s8
    0x000009A1 gvar *__funcptr_type_kind 0x0000026D
    0x000009A2 bc *s8 >|2| 0x000009A0< to __funcptr_type_kind
    0x000009A3 store *__funcptr_type_kind >|2| 0x000009A1<, __funcptr_type_kind >|2| 0x000009A2<
    0x000009A4 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetHistogramParameterfvEXT") *s8
    0x000009A5 gvar *__funcptr_type_kind 0x0000026E
    0x000009A6 bc *s8 >|2| 0x000009A4< to __funcptr_type_kind
    0x000009A7 store *__funcptr_type_kind >|2| 0x000009A5<, __funcptr_type_kind >|2| 0x000009A6<
    0x000009A8 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetHistogramParameterfv") *s8
    0x000009A9 gvar *__funcptr_type_kind 0x0000026F
    0x000009AA bc *s8 >|2| 0x000009A8< to __funcptr_type_kind
    0x000009AB store *__funcptr_type_kind >|2| 0x000009A9<, __funcptr_type_kind >|2| 0x000009AA<
    0x000009AC call ag5 "openglGetProcAddress" (cstroflen 29 "glGetHistogramParameterivEXT") *s8
    0x000009AD gvar *__funcptr_type_kind 0x00000270
    0x000009AE bc *s8 >|2| 0x000009AC< to __funcptr_type_kind
    0x000009AF store *__funcptr_type_kind >|2| 0x000009AD<, __funcptr_type_kind >|2| 0x000009AE<
    0x000009B0 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetHistogramParameteriv") *s8
    0x000009B1 gvar *__funcptr_type_kind 0x00000271
    0x000009B2 bc *s8 >|2| 0x000009B0< to __funcptr_type_kind
    0x000009B3 store *__funcptr_type_kind >|2| 0x000009B1<, __funcptr_type_kind >|2| 0x000009B2<
    0x000009B4 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetHistogram") *s8
    0x000009B5 gvar *__funcptr_type_kind 0x00000272
    0x000009B6 bc *s8 >|2| 0x000009B4< to __funcptr_type_kind
    0x000009B7 store *__funcptr_type_kind >|2| 0x000009B5<, __funcptr_type_kind >|2| 0x000009B6<
    0x000009B8 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetImageTransformParameterfvHP") *s8
    0x000009B9 gvar *__funcptr_type_kind 0x00000273
    0x000009BA bc *s8 >|2| 0x000009B8< to __funcptr_type_kind
    0x000009BB store *__funcptr_type_kind >|2| 0x000009B9<, __funcptr_type_kind >|2| 0x000009BA<
    0x000009BC call ag5 "openglGetProcAddress" (cstroflen 33 "glGetImageTransformParameterivHP") *s8
    0x000009BD gvar *__funcptr_type_kind 0x00000274
    0x000009BE bc *s8 >|2| 0x000009BC< to __funcptr_type_kind
    0x000009BF store *__funcptr_type_kind >|2| 0x000009BD<, __funcptr_type_kind >|2| 0x000009BE<
    0x000009C0 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetInfoLogARB") *s8
    0x000009C1 gvar *__funcptr_type_kind 0x00000275
    0x000009C2 bc *s8 >|2| 0x000009C0< to __funcptr_type_kind
    0x000009C3 store *__funcptr_type_kind >|2| 0x000009C1<, __funcptr_type_kind >|2| 0x000009C2<
    0x000009C4 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetInteger64i_v") *s8
    0x000009C5 gvar *__funcptr_type_kind 0x00000276
    0x000009C6 bc *s8 >|2| 0x000009C4< to __funcptr_type_kind
    0x000009C7 store *__funcptr_type_kind >|2| 0x000009C5<, __funcptr_type_kind >|2| 0x000009C6<
    0x000009C8 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetInteger64v") *s8
    0x000009C9 gvar *__funcptr_type_kind 0x00000277
    0x000009CA bc *s8 >|2| 0x000009C8< to __funcptr_type_kind
    0x000009CB store *__funcptr_type_kind >|2| 0x000009C9<, __funcptr_type_kind >|2| 0x000009CA<
    0x000009CC call ag5 "openglGetProcAddress" (cstroflen 24 "glGetIntegerIndexedvEXT") *s8
    0x000009CD gvar *__funcptr_type_kind 0x00000278
    0x000009CE bc *s8 >|2| 0x000009CC< to __funcptr_type_kind
    0x000009CF store *__funcptr_type_kind >|2| 0x000009CD<, __funcptr_type_kind >|2| 0x000009CE<
    0x000009D0 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetIntegeri_v") *s8
    0x000009D1 gvar *__funcptr_type_kind 0x00000279
    0x000009D2 bc *s8 >|2| 0x000009D0< to __funcptr_type_kind
    0x000009D3 store *__funcptr_type_kind >|2| 0x000009D1<, __funcptr_type_kind >|2| 0x000009D2<
    0x000009D4 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetIntegerui64i_vNV") *s8
    0x000009D5 gvar *__funcptr_type_kind 0x0000027A
    0x000009D6 bc *s8 >|2| 0x000009D4< to __funcptr_type_kind
    0x000009D7 store *__funcptr_type_kind >|2| 0x000009D5<, __funcptr_type_kind >|2| 0x000009D6<
    0x000009D8 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetIntegerui64vNV") *s8
    0x000009D9 gvar *__funcptr_type_kind 0x0000027B
    0x000009DA bc *s8 >|2| 0x000009D8< to __funcptr_type_kind
    0x000009DB store *__funcptr_type_kind >|2| 0x000009D9<, __funcptr_type_kind >|2| 0x000009DA<
    0x000009DC call ag5 "openglGetProcAddress" (cstroflen 24 "glGetInternalformati64v") *s8
    0x000009DD gvar *__funcptr_type_kind 0x0000027C
    0x000009DE bc *s8 >|2| 0x000009DC< to __funcptr_type_kind
    0x000009DF store *__funcptr_type_kind >|2| 0x000009DD<, __funcptr_type_kind >|2| 0x000009DE<
    0x000009E0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetInternalformativ") *s8
    0x000009E1 gvar *__funcptr_type_kind 0x0000027D
    0x000009E2 bc *s8 >|2| 0x000009E0< to __funcptr_type_kind
    0x000009E3 store *__funcptr_type_kind >|2| 0x000009E1<, __funcptr_type_kind >|2| 0x000009E2<
    0x000009E4 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetInternalformatSampleivNV") *s8
    0x000009E5 gvar *__funcptr_type_kind 0x0000027E
    0x000009E6 bc *s8 >|2| 0x000009E4< to __funcptr_type_kind
    0x000009E7 store *__funcptr_type_kind >|2| 0x000009E5<, __funcptr_type_kind >|2| 0x000009E6<
    0x000009E8 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetInvariantBooleanvEXT") *s8
    0x000009E9 gvar *__funcptr_type_kind 0x0000027F
    0x000009EA bc *s8 >|2| 0x000009E8< to __funcptr_type_kind
    0x000009EB store *__funcptr_type_kind >|2| 0x000009E9<, __funcptr_type_kind >|2| 0x000009EA<
    0x000009EC call ag5 "openglGetProcAddress" (cstroflen 24 "glGetInvariantFloatvEXT") *s8
    0x000009ED gvar *__funcptr_type_kind 0x00000280
    0x000009EE bc *s8 >|2| 0x000009EC< to __funcptr_type_kind
    0x000009EF store *__funcptr_type_kind >|2| 0x000009ED<, __funcptr_type_kind >|2| 0x000009EE<
    0x000009F0 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetInvariantIntegervEXT") *s8
    0x000009F1 gvar *__funcptr_type_kind 0x00000281
    0x000009F2 bc *s8 >|2| 0x000009F0< to __funcptr_type_kind
    0x000009F3 store *__funcptr_type_kind >|2| 0x000009F1<, __funcptr_type_kind >|2| 0x000009F2<
    0x000009F4 call ag5 "openglGetProcAddress" (cstroflen 13 "glGetLightxv") *s8
    0x000009F5 gvar *__funcptr_type_kind 0x00000282
    0x000009F6 bc *s8 >|2| 0x000009F4< to __funcptr_type_kind
    0x000009F7 store *__funcptr_type_kind >|2| 0x000009F5<, __funcptr_type_kind >|2| 0x000009F6<
    0x000009F8 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetLocalConstantBooleanvEXT") *s8
    0x000009F9 gvar *__funcptr_type_kind 0x00000283
    0x000009FA bc *s8 >|2| 0x000009F8< to __funcptr_type_kind
    0x000009FB store *__funcptr_type_kind >|2| 0x000009F9<, __funcptr_type_kind >|2| 0x000009FA<
    0x000009FC call ag5 "openglGetProcAddress" (cstroflen 28 "glGetLocalConstantFloatvEXT") *s8
    0x000009FD gvar *__funcptr_type_kind 0x00000284
    0x000009FE bc *s8 >|2| 0x000009FC< to __funcptr_type_kind
    0x000009FF store *__funcptr_type_kind >|2| 0x000009FD<, __funcptr_type_kind >|2| 0x000009FE<
    0x00000A00 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetLocalConstantIntegervEXT") *s8
    0x00000A01 gvar *__funcptr_type_kind 0x00000285
    0x00000A02 bc *s8 >|2| 0x00000A00< to __funcptr_type_kind
    0x00000A03 store *__funcptr_type_kind >|2| 0x00000A01<, __funcptr_type_kind >|2| 0x00000A02<
    0x00000A04 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetMapAttribParameterfvNV") *s8
    0x00000A05 gvar *__funcptr_type_kind 0x00000286
    0x00000A06 bc *s8 >|2| 0x00000A04< to __funcptr_type_kind
    0x00000A07 store *__funcptr_type_kind >|2| 0x00000A05<, __funcptr_type_kind >|2| 0x00000A06<
    0x00000A08 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetMapAttribParameterivNV") *s8
    0x00000A09 gvar *__funcptr_type_kind 0x00000287
    0x00000A0A bc *s8 >|2| 0x00000A08< to __funcptr_type_kind
    0x00000A0B store *__funcptr_type_kind >|2| 0x00000A09<, __funcptr_type_kind >|2| 0x00000A0A<
    0x00000A0C call ag5 "openglGetProcAddress" (cstroflen 24 "glGetMapControlPointsNV") *s8
    0x00000A0D gvar *__funcptr_type_kind 0x00000288
    0x00000A0E bc *s8 >|2| 0x00000A0C< to __funcptr_type_kind
    0x00000A0F store *__funcptr_type_kind >|2| 0x00000A0D<, __funcptr_type_kind >|2| 0x00000A0E<
    0x00000A10 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMapParameterfvNV") *s8
    0x00000A11 gvar *__funcptr_type_kind 0x00000289
    0x00000A12 bc *s8 >|2| 0x00000A10< to __funcptr_type_kind
    0x00000A13 store *__funcptr_type_kind >|2| 0x00000A11<, __funcptr_type_kind >|2| 0x00000A12<
    0x00000A14 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMapParameterivNV") *s8
    0x00000A15 gvar *__funcptr_type_kind 0x0000028A
    0x00000A16 bc *s8 >|2| 0x00000A14< to __funcptr_type_kind
    0x00000A17 store *__funcptr_type_kind >|2| 0x00000A15<, __funcptr_type_kind >|2| 0x00000A16<
    0x00000A18 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetMaterialxv") *s8
    0x00000A19 gvar *__funcptr_type_kind 0x0000028B
    0x00000A1A bc *s8 >|2| 0x00000A18< to __funcptr_type_kind
    0x00000A1B store *__funcptr_type_kind >|2| 0x00000A19<, __funcptr_type_kind >|2| 0x00000A1A<
    0x00000A1C call ag5 "openglGetProcAddress" (cstroflen 15 "glGetMinmaxEXT") *s8
    0x00000A1D gvar *__funcptr_type_kind 0x0000028C
    0x00000A1E bc *s8 >|2| 0x00000A1C< to __funcptr_type_kind
    0x00000A1F store *__funcptr_type_kind >|2| 0x00000A1D<, __funcptr_type_kind >|2| 0x00000A1E<
    0x00000A20 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetMinmaxParameterfvEXT") *s8
    0x00000A21 gvar *__funcptr_type_kind 0x0000028D
    0x00000A22 bc *s8 >|2| 0x00000A20< to __funcptr_type_kind
    0x00000A23 store *__funcptr_type_kind >|2| 0x00000A21<, __funcptr_type_kind >|2| 0x00000A22<
    0x00000A24 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetMinmaxParameterfv") *s8
    0x00000A25 gvar *__funcptr_type_kind 0x0000028E
    0x00000A26 bc *s8 >|2| 0x00000A24< to __funcptr_type_kind
    0x00000A27 store *__funcptr_type_kind >|2| 0x00000A25<, __funcptr_type_kind >|2| 0x00000A26<
    0x00000A28 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetMinmaxParameterivEXT") *s8
    0x00000A29 gvar *__funcptr_type_kind 0x0000028F
    0x00000A2A bc *s8 >|2| 0x00000A28< to __funcptr_type_kind
    0x00000A2B store *__funcptr_type_kind >|2| 0x00000A29<, __funcptr_type_kind >|2| 0x00000A2A<
    0x00000A2C call ag5 "openglGetProcAddress" (cstroflen 23 "glGetMinmaxParameteriv") *s8
    0x00000A2D gvar *__funcptr_type_kind 0x00000290
    0x00000A2E bc *s8 >|2| 0x00000A2C< to __funcptr_type_kind
    0x00000A2F store *__funcptr_type_kind >|2| 0x00000A2D<, __funcptr_type_kind >|2| 0x00000A2E<
    0x00000A30 call ag5 "openglGetProcAddress" (cstroflen 12 "glGetMinmax") *s8
    0x00000A31 gvar *__funcptr_type_kind 0x00000291
    0x00000A32 bc *s8 >|2| 0x00000A30< to __funcptr_type_kind
    0x00000A33 store *__funcptr_type_kind >|2| 0x00000A31<, __funcptr_type_kind >|2| 0x00000A32<
    0x00000A34 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetMultisamplefvNV") *s8
    0x00000A35 gvar *__funcptr_type_kind 0x00000292
    0x00000A36 bc *s8 >|2| 0x00000A34< to __funcptr_type_kind
    0x00000A37 store *__funcptr_type_kind >|2| 0x00000A35<, __funcptr_type_kind >|2| 0x00000A36<
    0x00000A38 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetMultisamplefv") *s8
    0x00000A39 gvar *__funcptr_type_kind 0x00000293
    0x00000A3A bc *s8 >|2| 0x00000A38< to __funcptr_type_kind
    0x00000A3B store *__funcptr_type_kind >|2| 0x00000A39<, __funcptr_type_kind >|2| 0x00000A3A<
    0x00000A3C call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMultiTexEnvfvEXT") *s8
    0x00000A3D gvar *__funcptr_type_kind 0x00000294
    0x00000A3E bc *s8 >|2| 0x00000A3C< to __funcptr_type_kind
    0x00000A3F store *__funcptr_type_kind >|2| 0x00000A3D<, __funcptr_type_kind >|2| 0x00000A3E<
    0x00000A40 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMultiTexEnvivEXT") *s8
    0x00000A41 gvar *__funcptr_type_kind 0x00000295
    0x00000A42 bc *s8 >|2| 0x00000A40< to __funcptr_type_kind
    0x00000A43 store *__funcptr_type_kind >|2| 0x00000A41<, __funcptr_type_kind >|2| 0x00000A42<
    0x00000A44 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMultiTexGendvEXT") *s8
    0x00000A45 gvar *__funcptr_type_kind 0x00000296
    0x00000A46 bc *s8 >|2| 0x00000A44< to __funcptr_type_kind
    0x00000A47 store *__funcptr_type_kind >|2| 0x00000A45<, __funcptr_type_kind >|2| 0x00000A46<
    0x00000A48 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMultiTexGenfvEXT") *s8
    0x00000A49 gvar *__funcptr_type_kind 0x00000297
    0x00000A4A bc *s8 >|2| 0x00000A48< to __funcptr_type_kind
    0x00000A4B store *__funcptr_type_kind >|2| 0x00000A49<, __funcptr_type_kind >|2| 0x00000A4A<
    0x00000A4C call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMultiTexGenivEXT") *s8
    0x00000A4D gvar *__funcptr_type_kind 0x00000298
    0x00000A4E bc *s8 >|2| 0x00000A4C< to __funcptr_type_kind
    0x00000A4F store *__funcptr_type_kind >|2| 0x00000A4D<, __funcptr_type_kind >|2| 0x00000A4E<
    0x00000A50 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetMultiTexImageEXT") *s8
    0x00000A51 gvar *__funcptr_type_kind 0x00000299
    0x00000A52 bc *s8 >|2| 0x00000A50< to __funcptr_type_kind
    0x00000A53 store *__funcptr_type_kind >|2| 0x00000A51<, __funcptr_type_kind >|2| 0x00000A52<
    0x00000A54 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetMultiTexLevelParameterfvEXT") *s8
    0x00000A55 gvar *__funcptr_type_kind 0x0000029A
    0x00000A56 bc *s8 >|2| 0x00000A54< to __funcptr_type_kind
    0x00000A57 store *__funcptr_type_kind >|2| 0x00000A55<, __funcptr_type_kind >|2| 0x00000A56<
    0x00000A58 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetMultiTexLevelParameterivEXT") *s8
    0x00000A59 gvar *__funcptr_type_kind 0x0000029B
    0x00000A5A bc *s8 >|2| 0x00000A58< to __funcptr_type_kind
    0x00000A5B store *__funcptr_type_kind >|2| 0x00000A59<, __funcptr_type_kind >|2| 0x00000A5A<
    0x00000A5C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetMultiTexParameterfvEXT") *s8
    0x00000A5D gvar *__funcptr_type_kind 0x0000029C
    0x00000A5E bc *s8 >|2| 0x00000A5C< to __funcptr_type_kind
    0x00000A5F store *__funcptr_type_kind >|2| 0x00000A5D<, __funcptr_type_kind >|2| 0x00000A5E<
    0x00000A60 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetMultiTexParameterIivEXT") *s8
    0x00000A61 gvar *__funcptr_type_kind 0x0000029D
    0x00000A62 bc *s8 >|2| 0x00000A60< to __funcptr_type_kind
    0x00000A63 store *__funcptr_type_kind >|2| 0x00000A61<, __funcptr_type_kind >|2| 0x00000A62<
    0x00000A64 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetMultiTexParameterIuivEXT") *s8
    0x00000A65 gvar *__funcptr_type_kind 0x0000029E
    0x00000A66 bc *s8 >|2| 0x00000A64< to __funcptr_type_kind
    0x00000A67 store *__funcptr_type_kind >|2| 0x00000A65<, __funcptr_type_kind >|2| 0x00000A66<
    0x00000A68 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetMultiTexParameterivEXT") *s8
    0x00000A69 gvar *__funcptr_type_kind 0x0000029F
    0x00000A6A bc *s8 >|2| 0x00000A68< to __funcptr_type_kind
    0x00000A6B store *__funcptr_type_kind >|2| 0x00000A69<, __funcptr_type_kind >|2| 0x00000A6A<
    0x00000A6C call ag5 "openglGetProcAddress" (cstroflen 30 "glGetNamedBufferParameteri64v") *s8
    0x00000A6D gvar *__funcptr_type_kind 0x000002A0
    0x00000A6E bc *s8 >|2| 0x00000A6C< to __funcptr_type_kind
    0x00000A6F store *__funcptr_type_kind >|2| 0x00000A6D<, __funcptr_type_kind >|2| 0x00000A6E<
    0x00000A70 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetNamedBufferParameterivEXT") *s8
    0x00000A71 gvar *__funcptr_type_kind 0x000002A1
    0x00000A72 bc *s8 >|2| 0x00000A70< to __funcptr_type_kind
    0x00000A73 store *__funcptr_type_kind >|2| 0x00000A71<, __funcptr_type_kind >|2| 0x00000A72<
    0x00000A74 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetNamedBufferParameteriv") *s8
    0x00000A75 gvar *__funcptr_type_kind 0x000002A2
    0x00000A76 bc *s8 >|2| 0x00000A74< to __funcptr_type_kind
    0x00000A77 store *__funcptr_type_kind >|2| 0x00000A75<, __funcptr_type_kind >|2| 0x00000A76<
    0x00000A78 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetNamedBufferParameterui64vNV") *s8
    0x00000A79 gvar *__funcptr_type_kind 0x000002A3
    0x00000A7A bc *s8 >|2| 0x00000A78< to __funcptr_type_kind
    0x00000A7B store *__funcptr_type_kind >|2| 0x00000A79<, __funcptr_type_kind >|2| 0x00000A7A<
    0x00000A7C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetNamedBufferPointervEXT") *s8
    0x00000A7D gvar *__funcptr_type_kind 0x000002A4
    0x00000A7E bc *s8 >|2| 0x00000A7C< to __funcptr_type_kind
    0x00000A7F store *__funcptr_type_kind >|2| 0x00000A7D<, __funcptr_type_kind >|2| 0x00000A7E<
    0x00000A80 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetNamedBufferPointerv") *s8
    0x00000A81 gvar *__funcptr_type_kind 0x000002A5
    0x00000A82 bc *s8 >|2| 0x00000A80< to __funcptr_type_kind
    0x00000A83 store *__funcptr_type_kind >|2| 0x00000A81<, __funcptr_type_kind >|2| 0x00000A82<
    0x00000A84 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetNamedBufferSubDataEXT") *s8
    0x00000A85 gvar *__funcptr_type_kind 0x000002A6
    0x00000A86 bc *s8 >|2| 0x00000A84< to __funcptr_type_kind
    0x00000A87 store *__funcptr_type_kind >|2| 0x00000A85<, __funcptr_type_kind >|2| 0x00000A86<
    0x00000A88 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetNamedBufferSubData") *s8
    0x00000A89 gvar *__funcptr_type_kind 0x000002A7
    0x00000A8A bc *s8 >|2| 0x00000A88< to __funcptr_type_kind
    0x00000A8B store *__funcptr_type_kind >|2| 0x00000A89<, __funcptr_type_kind >|2| 0x00000A8A<
    0x00000A8C call ag5 "openglGetProcAddress" (cstroflen 46 "glGetNamedFramebufferAttachmentParameterivEXT") *s8
    0x00000A8D gvar *__funcptr_type_kind 0x000002A8
    0x00000A8E bc *s8 >|2| 0x00000A8C< to __funcptr_type_kind
    0x00000A8F store *__funcptr_type_kind >|2| 0x00000A8D<, __funcptr_type_kind >|2| 0x00000A8E<
    0x00000A90 call ag5 "openglGetProcAddress" (cstroflen 43 "glGetNamedFramebufferAttachmentParameteriv") *s8
    0x00000A91 gvar *__funcptr_type_kind 0x000002A9
    0x00000A92 bc *s8 >|2| 0x00000A90< to __funcptr_type_kind
    0x00000A93 store *__funcptr_type_kind >|2| 0x00000A91<, __funcptr_type_kind >|2| 0x00000A92<
    0x00000A94 call ag5 "openglGetProcAddress" (cstroflen 36 "glGetNamedFramebufferParameterivEXT") *s8
    0x00000A95 gvar *__funcptr_type_kind 0x000002AA
    0x00000A96 bc *s8 >|2| 0x00000A94< to __funcptr_type_kind
    0x00000A97 store *__funcptr_type_kind >|2| 0x00000A95<, __funcptr_type_kind >|2| 0x00000A96<
    0x00000A98 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetNamedFramebufferParameteriv") *s8
    0x00000A99 gvar *__funcptr_type_kind 0x000002AB
    0x00000A9A bc *s8 >|2| 0x00000A98< to __funcptr_type_kind
    0x00000A9B store *__funcptr_type_kind >|2| 0x00000A99<, __funcptr_type_kind >|2| 0x00000A9A<
    0x00000A9C call ag5 "openglGetProcAddress" (cstroflen 23 "glGetNamedProgramivEXT") *s8
    0x00000A9D gvar *__funcptr_type_kind 0x000002AC
    0x00000A9E bc *s8 >|2| 0x00000A9C< to __funcptr_type_kind
    0x00000A9F store *__funcptr_type_kind >|2| 0x00000A9D<, __funcptr_type_kind >|2| 0x00000A9E<
    0x00000AA0 call ag5 "openglGetProcAddress" (cstroflen 37 "glGetNamedProgramLocalParameterdvEXT") *s8
    0x00000AA1 gvar *__funcptr_type_kind 0x000002AD
    0x00000AA2 bc *s8 >|2| 0x00000AA0< to __funcptr_type_kind
    0x00000AA3 store *__funcptr_type_kind >|2| 0x00000AA1<, __funcptr_type_kind >|2| 0x00000AA2<
    0x00000AA4 call ag5 "openglGetProcAddress" (cstroflen 37 "glGetNamedProgramLocalParameterfvEXT") *s8
    0x00000AA5 gvar *__funcptr_type_kind 0x000002AE
    0x00000AA6 bc *s8 >|2| 0x00000AA4< to __funcptr_type_kind
    0x00000AA7 store *__funcptr_type_kind >|2| 0x00000AA5<, __funcptr_type_kind >|2| 0x00000AA6<
    0x00000AA8 call ag5 "openglGetProcAddress" (cstroflen 38 "glGetNamedProgramLocalParameterIivEXT") *s8
    0x00000AA9 gvar *__funcptr_type_kind 0x000002AF
    0x00000AAA bc *s8 >|2| 0x00000AA8< to __funcptr_type_kind
    0x00000AAB store *__funcptr_type_kind >|2| 0x00000AA9<, __funcptr_type_kind >|2| 0x00000AAA<
    0x00000AAC call ag5 "openglGetProcAddress" (cstroflen 39 "glGetNamedProgramLocalParameterIuivEXT") *s8
    0x00000AAD gvar *__funcptr_type_kind 0x000002B0
    0x00000AAE bc *s8 >|2| 0x00000AAC< to __funcptr_type_kind
    0x00000AAF store *__funcptr_type_kind >|2| 0x00000AAD<, __funcptr_type_kind >|2| 0x00000AAE<
    0x00000AB0 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetNamedProgramStringEXT") *s8
    0x00000AB1 gvar *__funcptr_type_kind 0x000002B1
    0x00000AB2 bc *s8 >|2| 0x00000AB0< to __funcptr_type_kind
    0x00000AB3 store *__funcptr_type_kind >|2| 0x00000AB1<, __funcptr_type_kind >|2| 0x00000AB2<
    0x00000AB4 call ag5 "openglGetProcAddress" (cstroflen 37 "glGetNamedRenderbufferParameterivEXT") *s8
    0x00000AB5 gvar *__funcptr_type_kind 0x000002B2
    0x00000AB6 bc *s8 >|2| 0x00000AB4< to __funcptr_type_kind
    0x00000AB7 store *__funcptr_type_kind >|2| 0x00000AB5<, __funcptr_type_kind >|2| 0x00000AB6<
    0x00000AB8 call ag5 "openglGetProcAddress" (cstroflen 34 "glGetNamedRenderbufferParameteriv") *s8
    0x00000AB9 gvar *__funcptr_type_kind 0x000002B3
    0x00000ABA bc *s8 >|2| 0x00000AB8< to __funcptr_type_kind
    0x00000ABB store *__funcptr_type_kind >|2| 0x00000AB9<, __funcptr_type_kind >|2| 0x00000ABA<
    0x00000ABC call ag5 "openglGetProcAddress" (cstroflen 20 "glGetNamedStringARB") *s8
    0x00000ABD gvar *__funcptr_type_kind 0x000002B4
    0x00000ABE bc *s8 >|2| 0x00000ABC< to __funcptr_type_kind
    0x00000ABF store *__funcptr_type_kind >|2| 0x00000ABD<, __funcptr_type_kind >|2| 0x00000ABE<
    0x00000AC0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetNamedStringivARB") *s8
    0x00000AC1 gvar *__funcptr_type_kind 0x000002B5
    0x00000AC2 bc *s8 >|2| 0x00000AC0< to __funcptr_type_kind
    0x00000AC3 store *__funcptr_type_kind >|2| 0x00000AC1<, __funcptr_type_kind >|2| 0x00000AC2<
    0x00000AC4 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetnColorTableARB") *s8
    0x00000AC5 gvar *__funcptr_type_kind 0x000002B6
    0x00000AC6 bc *s8 >|2| 0x00000AC4< to __funcptr_type_kind
    0x00000AC7 store *__funcptr_type_kind >|2| 0x00000AC5<, __funcptr_type_kind >|2| 0x00000AC6<
    0x00000AC8 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetnCompressedTexImageARB") *s8
    0x00000AC9 gvar *__funcptr_type_kind 0x000002B7
    0x00000ACA bc *s8 >|2| 0x00000AC8< to __funcptr_type_kind
    0x00000ACB store *__funcptr_type_kind >|2| 0x00000AC9<, __funcptr_type_kind >|2| 0x00000ACA<
    0x00000ACC call ag5 "openglGetProcAddress" (cstroflen 25 "glGetnCompressedTexImage") *s8
    0x00000ACD gvar *__funcptr_type_kind 0x000002B8
    0x00000ACE bc *s8 >|2| 0x00000ACC< to __funcptr_type_kind
    0x00000ACF store *__funcptr_type_kind >|2| 0x00000ACD<, __funcptr_type_kind >|2| 0x00000ACE<
    0x00000AD0 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetnConvolutionFilterARB") *s8
    0x00000AD1 gvar *__funcptr_type_kind 0x000002B9
    0x00000AD2 bc *s8 >|2| 0x00000AD0< to __funcptr_type_kind
    0x00000AD3 store *__funcptr_type_kind >|2| 0x00000AD1<, __funcptr_type_kind >|2| 0x00000AD2<
    0x00000AD4 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetNextPerfQueryIdINTEL") *s8
    0x00000AD5 gvar *__funcptr_type_kind 0x000002BA
    0x00000AD6 bc *s8 >|2| 0x00000AD4< to __funcptr_type_kind
    0x00000AD7 store *__funcptr_type_kind >|2| 0x00000AD5<, __funcptr_type_kind >|2| 0x00000AD6<
    0x00000AD8 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetnHistogramARB") *s8
    0x00000AD9 gvar *__funcptr_type_kind 0x000002BB
    0x00000ADA bc *s8 >|2| 0x00000AD8< to __funcptr_type_kind
    0x00000ADB store *__funcptr_type_kind >|2| 0x00000AD9<, __funcptr_type_kind >|2| 0x00000ADA<
    0x00000ADC call ag5 "openglGetProcAddress" (cstroflen 15 "glGetnMapdvARB") *s8
    0x00000ADD gvar *__funcptr_type_kind 0x000002BC
    0x00000ADE bc *s8 >|2| 0x00000ADC< to __funcptr_type_kind
    0x00000ADF store *__funcptr_type_kind >|2| 0x00000ADD<, __funcptr_type_kind >|2| 0x00000ADE<
    0x00000AE0 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetnMapfvARB") *s8
    0x00000AE1 gvar *__funcptr_type_kind 0x000002BD
    0x00000AE2 bc *s8 >|2| 0x00000AE0< to __funcptr_type_kind
    0x00000AE3 store *__funcptr_type_kind >|2| 0x00000AE1<, __funcptr_type_kind >|2| 0x00000AE2<
    0x00000AE4 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetnMapivARB") *s8
    0x00000AE5 gvar *__funcptr_type_kind 0x000002BE
    0x00000AE6 bc *s8 >|2| 0x00000AE4< to __funcptr_type_kind
    0x00000AE7 store *__funcptr_type_kind >|2| 0x00000AE5<, __funcptr_type_kind >|2| 0x00000AE6<
    0x00000AE8 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetnMinmaxARB") *s8
    0x00000AE9 gvar *__funcptr_type_kind 0x000002BF
    0x00000AEA bc *s8 >|2| 0x00000AE8< to __funcptr_type_kind
    0x00000AEB store *__funcptr_type_kind >|2| 0x00000AE9<, __funcptr_type_kind >|2| 0x00000AEA<
    0x00000AEC call ag5 "openglGetProcAddress" (cstroflen 20 "glGetnPixelMapfvARB") *s8
    0x00000AED gvar *__funcptr_type_kind 0x000002C0
    0x00000AEE bc *s8 >|2| 0x00000AEC< to __funcptr_type_kind
    0x00000AEF store *__funcptr_type_kind >|2| 0x00000AED<, __funcptr_type_kind >|2| 0x00000AEE<
    0x00000AF0 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetnPixelMapuivARB") *s8
    0x00000AF1 gvar *__funcptr_type_kind 0x000002C1
    0x00000AF2 bc *s8 >|2| 0x00000AF0< to __funcptr_type_kind
    0x00000AF3 store *__funcptr_type_kind >|2| 0x00000AF1<, __funcptr_type_kind >|2| 0x00000AF2<
    0x00000AF4 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetnPixelMapusvARB") *s8
    0x00000AF5 gvar *__funcptr_type_kind 0x000002C2
    0x00000AF6 bc *s8 >|2| 0x00000AF4< to __funcptr_type_kind
    0x00000AF7 store *__funcptr_type_kind >|2| 0x00000AF5<, __funcptr_type_kind >|2| 0x00000AF6<
    0x00000AF8 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetnPolygonStippleARB") *s8
    0x00000AF9 gvar *__funcptr_type_kind 0x000002C3
    0x00000AFA bc *s8 >|2| 0x00000AF8< to __funcptr_type_kind
    0x00000AFB store *__funcptr_type_kind >|2| 0x00000AF9<, __funcptr_type_kind >|2| 0x00000AFA<
    0x00000AFC call ag5 "openglGetProcAddress" (cstroflen 25 "glGetnSeparableFilterARB") *s8
    0x00000AFD gvar *__funcptr_type_kind 0x000002C4
    0x00000AFE bc *s8 >|2| 0x00000AFC< to __funcptr_type_kind
    0x00000AFF store *__funcptr_type_kind >|2| 0x00000AFD<, __funcptr_type_kind >|2| 0x00000AFE<
    0x00000B00 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetnTexImageARB") *s8
    0x00000B01 gvar *__funcptr_type_kind 0x000002C5
    0x00000B02 bc *s8 >|2| 0x00000B00< to __funcptr_type_kind
    0x00000B03 store *__funcptr_type_kind >|2| 0x00000B01<, __funcptr_type_kind >|2| 0x00000B02<
    0x00000B04 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetnTexImage") *s8
    0x00000B05 gvar *__funcptr_type_kind 0x000002C6
    0x00000B06 bc *s8 >|2| 0x00000B04< to __funcptr_type_kind
    0x00000B07 store *__funcptr_type_kind >|2| 0x00000B05<, __funcptr_type_kind >|2| 0x00000B06<
    0x00000B08 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetnUniformdvARB") *s8
    0x00000B09 gvar *__funcptr_type_kind 0x000002C7
    0x00000B0A bc *s8 >|2| 0x00000B08< to __funcptr_type_kind
    0x00000B0B store *__funcptr_type_kind >|2| 0x00000B09<, __funcptr_type_kind >|2| 0x00000B0A<
    0x00000B0C call ag5 "openglGetProcAddress" (cstroflen 16 "glGetnUniformdv") *s8
    0x00000B0D gvar *__funcptr_type_kind 0x000002C8
    0x00000B0E bc *s8 >|2| 0x00000B0C< to __funcptr_type_kind
    0x00000B0F store *__funcptr_type_kind >|2| 0x00000B0D<, __funcptr_type_kind >|2| 0x00000B0E<
    0x00000B10 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetnUniformfvARB") *s8
    0x00000B11 gvar *__funcptr_type_kind 0x000002C9
    0x00000B12 bc *s8 >|2| 0x00000B10< to __funcptr_type_kind
    0x00000B13 store *__funcptr_type_kind >|2| 0x00000B11<, __funcptr_type_kind >|2| 0x00000B12<
    0x00000B14 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetnUniformfv") *s8
    0x00000B15 gvar *__funcptr_type_kind 0x000002CA
    0x00000B16 bc *s8 >|2| 0x00000B14< to __funcptr_type_kind
    0x00000B17 store *__funcptr_type_kind >|2| 0x00000B15<, __funcptr_type_kind >|2| 0x00000B16<
    0x00000B18 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetnUniformi64vARB") *s8
    0x00000B19 gvar *__funcptr_type_kind 0x000002CB
    0x00000B1A bc *s8 >|2| 0x00000B18< to __funcptr_type_kind
    0x00000B1B store *__funcptr_type_kind >|2| 0x00000B19<, __funcptr_type_kind >|2| 0x00000B1A<
    0x00000B1C call ag5 "openglGetProcAddress" (cstroflen 19 "glGetnUniformivARB") *s8
    0x00000B1D gvar *__funcptr_type_kind 0x000002CC
    0x00000B1E bc *s8 >|2| 0x00000B1C< to __funcptr_type_kind
    0x00000B1F store *__funcptr_type_kind >|2| 0x00000B1D<, __funcptr_type_kind >|2| 0x00000B1E<
    0x00000B20 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetnUniformiv") *s8
    0x00000B21 gvar *__funcptr_type_kind 0x000002CD
    0x00000B22 bc *s8 >|2| 0x00000B20< to __funcptr_type_kind
    0x00000B23 store *__funcptr_type_kind >|2| 0x00000B21<, __funcptr_type_kind >|2| 0x00000B22<
    0x00000B24 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetnUniformui64vARB") *s8
    0x00000B25 gvar *__funcptr_type_kind 0x000002CE
    0x00000B26 bc *s8 >|2| 0x00000B24< to __funcptr_type_kind
    0x00000B27 store *__funcptr_type_kind >|2| 0x00000B25<, __funcptr_type_kind >|2| 0x00000B26<
    0x00000B28 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetnUniformuivARB") *s8
    0x00000B29 gvar *__funcptr_type_kind 0x000002CF
    0x00000B2A bc *s8 >|2| 0x00000B28< to __funcptr_type_kind
    0x00000B2B store *__funcptr_type_kind >|2| 0x00000B29<, __funcptr_type_kind >|2| 0x00000B2A<
    0x00000B2C call ag5 "openglGetProcAddress" (cstroflen 17 "glGetnUniformuiv") *s8
    0x00000B2D gvar *__funcptr_type_kind 0x000002D0
    0x00000B2E bc *s8 >|2| 0x00000B2C< to __funcptr_type_kind
    0x00000B2F store *__funcptr_type_kind >|2| 0x00000B2D<, __funcptr_type_kind >|2| 0x00000B2E<
    0x00000B30 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetObjectBufferfvATI") *s8
    0x00000B31 gvar *__funcptr_type_kind 0x000002D1
    0x00000B32 bc *s8 >|2| 0x00000B30< to __funcptr_type_kind
    0x00000B33 store *__funcptr_type_kind >|2| 0x00000B31<, __funcptr_type_kind >|2| 0x00000B32<
    0x00000B34 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetObjectBufferivATI") *s8
    0x00000B35 gvar *__funcptr_type_kind 0x000002D2
    0x00000B36 bc *s8 >|2| 0x00000B34< to __funcptr_type_kind
    0x00000B37 store *__funcptr_type_kind >|2| 0x00000B35<, __funcptr_type_kind >|2| 0x00000B36<
    0x00000B38 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetObjectLabelEXT") *s8
    0x00000B39 gvar *__funcptr_type_kind 0x000002D3
    0x00000B3A bc *s8 >|2| 0x00000B38< to __funcptr_type_kind
    0x00000B3B store *__funcptr_type_kind >|2| 0x00000B39<, __funcptr_type_kind >|2| 0x00000B3A<
    0x00000B3C call ag5 "openglGetProcAddress" (cstroflen 17 "glGetObjectLabel") *s8
    0x00000B3D gvar *__funcptr_type_kind 0x000002D4
    0x00000B3E bc *s8 >|2| 0x00000B3C< to __funcptr_type_kind
    0x00000B3F store *__funcptr_type_kind >|2| 0x00000B3D<, __funcptr_type_kind >|2| 0x00000B3E<
    0x00000B40 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetObjectParameterfvARB") *s8
    0x00000B41 gvar *__funcptr_type_kind 0x000002D5
    0x00000B42 bc *s8 >|2| 0x00000B40< to __funcptr_type_kind
    0x00000B43 store *__funcptr_type_kind >|2| 0x00000B41<, __funcptr_type_kind >|2| 0x00000B42<
    0x00000B44 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetObjectParameterivAPPLE") *s8
    0x00000B45 gvar *__funcptr_type_kind 0x000002D6
    0x00000B46 bc *s8 >|2| 0x00000B44< to __funcptr_type_kind
    0x00000B47 store *__funcptr_type_kind >|2| 0x00000B45<, __funcptr_type_kind >|2| 0x00000B46<
    0x00000B48 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetObjectParameterivARB") *s8
    0x00000B49 gvar *__funcptr_type_kind 0x000002D7
    0x00000B4A bc *s8 >|2| 0x00000B48< to __funcptr_type_kind
    0x00000B4B store *__funcptr_type_kind >|2| 0x00000B49<, __funcptr_type_kind >|2| 0x00000B4A<
    0x00000B4C call ag5 "openglGetProcAddress" (cstroflen 20 "glGetObjectPtrLabel") *s8
    0x00000B4D gvar *__funcptr_type_kind 0x000002D8
    0x00000B4E bc *s8 >|2| 0x00000B4C< to __funcptr_type_kind
    0x00000B4F store *__funcptr_type_kind >|2| 0x00000B4D<, __funcptr_type_kind >|2| 0x00000B4E<
    0x00000B50 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetOcclusionQueryivNV") *s8
    0x00000B51 gvar *__funcptr_type_kind 0x000002D9
    0x00000B52 bc *s8 >|2| 0x00000B50< to __funcptr_type_kind
    0x00000B53 store *__funcptr_type_kind >|2| 0x00000B51<, __funcptr_type_kind >|2| 0x00000B52<
    0x00000B54 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetOcclusionQueryuivNV") *s8
    0x00000B55 gvar *__funcptr_type_kind 0x000002DA
    0x00000B56 bc *s8 >|2| 0x00000B54< to __funcptr_type_kind
    0x00000B57 store *__funcptr_type_kind >|2| 0x00000B55<, __funcptr_type_kind >|2| 0x00000B56<
    0x00000B58 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetPathColorGenfvNV") *s8
    0x00000B59 gvar *__funcptr_type_kind 0x000002DB
    0x00000B5A bc *s8 >|2| 0x00000B58< to __funcptr_type_kind
    0x00000B5B store *__funcptr_type_kind >|2| 0x00000B59<, __funcptr_type_kind >|2| 0x00000B5A<
    0x00000B5C call ag5 "openglGetProcAddress" (cstroflen 22 "glGetPathColorGenivNV") *s8
    0x00000B5D gvar *__funcptr_type_kind 0x000002DC
    0x00000B5E bc *s8 >|2| 0x00000B5C< to __funcptr_type_kind
    0x00000B5F store *__funcptr_type_kind >|2| 0x00000B5D<, __funcptr_type_kind >|2| 0x00000B5E<
    0x00000B60 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetPathCommandsNV") *s8
    0x00000B61 gvar *__funcptr_type_kind 0x000002DD
    0x00000B62 bc *s8 >|2| 0x00000B60< to __funcptr_type_kind
    0x00000B63 store *__funcptr_type_kind >|2| 0x00000B61<, __funcptr_type_kind >|2| 0x00000B62<
    0x00000B64 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetPathCoordsNV") *s8
    0x00000B65 gvar *__funcptr_type_kind 0x000002DE
    0x00000B66 bc *s8 >|2| 0x00000B64< to __funcptr_type_kind
    0x00000B67 store *__funcptr_type_kind >|2| 0x00000B65<, __funcptr_type_kind >|2| 0x00000B66<
    0x00000B68 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetPathDashArrayNV") *s8
    0x00000B69 gvar *__funcptr_type_kind 0x000002DF
    0x00000B6A bc *s8 >|2| 0x00000B68< to __funcptr_type_kind
    0x00000B6B store *__funcptr_type_kind >|2| 0x00000B69<, __funcptr_type_kind >|2| 0x00000B6A<
    0x00000B6C call ag5 "openglGetProcAddress" (cstroflen 23 "glGetPathMetricRangeNV") *s8
    0x00000B6D gvar *__funcptr_type_kind 0x000002E0
    0x00000B6E bc *s8 >|2| 0x00000B6C< to __funcptr_type_kind
    0x00000B6F store *__funcptr_type_kind >|2| 0x00000B6D<, __funcptr_type_kind >|2| 0x00000B6E<
    0x00000B70 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetPathMetricsNV") *s8
    0x00000B71 gvar *__funcptr_type_kind 0x000002E1
    0x00000B72 bc *s8 >|2| 0x00000B70< to __funcptr_type_kind
    0x00000B73 store *__funcptr_type_kind >|2| 0x00000B71<, __funcptr_type_kind >|2| 0x00000B72<
    0x00000B74 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetPathParameterfvNV") *s8
    0x00000B75 gvar *__funcptr_type_kind 0x000002E2
    0x00000B76 bc *s8 >|2| 0x00000B74< to __funcptr_type_kind
    0x00000B77 store *__funcptr_type_kind >|2| 0x00000B75<, __funcptr_type_kind >|2| 0x00000B76<
    0x00000B78 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetPathParameterivNV") *s8
    0x00000B79 gvar *__funcptr_type_kind 0x000002E3
    0x00000B7A bc *s8 >|2| 0x00000B78< to __funcptr_type_kind
    0x00000B7B store *__funcptr_type_kind >|2| 0x00000B79<, __funcptr_type_kind >|2| 0x00000B7A<
    0x00000B7C call ag5 "openglGetProcAddress" (cstroflen 19 "glGetPathSpacingNV") *s8
    0x00000B7D gvar *__funcptr_type_kind 0x000002E4
    0x00000B7E bc *s8 >|2| 0x00000B7C< to __funcptr_type_kind
    0x00000B7F store *__funcptr_type_kind >|2| 0x00000B7D<, __funcptr_type_kind >|2| 0x00000B7E<
    0x00000B80 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetPathTexGenfvNV") *s8
    0x00000B81 gvar *__funcptr_type_kind 0x000002E5
    0x00000B82 bc *s8 >|2| 0x00000B80< to __funcptr_type_kind
    0x00000B83 store *__funcptr_type_kind >|2| 0x00000B81<, __funcptr_type_kind >|2| 0x00000B82<
    0x00000B84 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetPathTexGenivNV") *s8
    0x00000B85 gvar *__funcptr_type_kind 0x000002E6
    0x00000B86 bc *s8 >|2| 0x00000B84< to __funcptr_type_kind
    0x00000B87 store *__funcptr_type_kind >|2| 0x00000B85<, __funcptr_type_kind >|2| 0x00000B86<
    0x00000B88 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetPerfCounterInfoINTEL") *s8
    0x00000B89 gvar *__funcptr_type_kind 0x000002E7
    0x00000B8A bc *s8 >|2| 0x00000B88< to __funcptr_type_kind
    0x00000B8B store *__funcptr_type_kind >|2| 0x00000B89<, __funcptr_type_kind >|2| 0x00000B8A<
    0x00000B8C call ag5 "openglGetProcAddress" (cstroflen 31 "glGetPerfMonitorCounterDataAMD") *s8
    0x00000B8D gvar *__funcptr_type_kind 0x000002E8
    0x00000B8E bc *s8 >|2| 0x00000B8C< to __funcptr_type_kind
    0x00000B8F store *__funcptr_type_kind >|2| 0x00000B8D<, __funcptr_type_kind >|2| 0x00000B8E<
    0x00000B90 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetPerfMonitorCounterInfoAMD") *s8
    0x00000B91 gvar *__funcptr_type_kind 0x000002E9
    0x00000B92 bc *s8 >|2| 0x00000B90< to __funcptr_type_kind
    0x00000B93 store *__funcptr_type_kind >|2| 0x00000B91<, __funcptr_type_kind >|2| 0x00000B92<
    0x00000B94 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetPerfMonitorCountersAMD") *s8
    0x00000B95 gvar *__funcptr_type_kind 0x000002EA
    0x00000B96 bc *s8 >|2| 0x00000B94< to __funcptr_type_kind
    0x00000B97 store *__funcptr_type_kind >|2| 0x00000B95<, __funcptr_type_kind >|2| 0x00000B96<
    0x00000B98 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetPerfMonitorCounterStringAMD") *s8
    0x00000B99 gvar *__funcptr_type_kind 0x000002EB
    0x00000B9A bc *s8 >|2| 0x00000B98< to __funcptr_type_kind
    0x00000B9B store *__funcptr_type_kind >|2| 0x00000B99<, __funcptr_type_kind >|2| 0x00000B9A<
    0x00000B9C call ag5 "openglGetProcAddress" (cstroflen 26 "glGetPerfMonitorGroupsAMD") *s8
    0x00000B9D gvar *__funcptr_type_kind 0x000002EC
    0x00000B9E bc *s8 >|2| 0x00000B9C< to __funcptr_type_kind
    0x00000B9F store *__funcptr_type_kind >|2| 0x00000B9D<, __funcptr_type_kind >|2| 0x00000B9E<
    0x00000BA0 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetPerfMonitorGroupStringAMD") *s8
    0x00000BA1 gvar *__funcptr_type_kind 0x000002ED
    0x00000BA2 bc *s8 >|2| 0x00000BA0< to __funcptr_type_kind
    0x00000BA3 store *__funcptr_type_kind >|2| 0x00000BA1<, __funcptr_type_kind >|2| 0x00000BA2<
    0x00000BA4 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetPerfQueryDataINTEL") *s8
    0x00000BA5 gvar *__funcptr_type_kind 0x000002EE
    0x00000BA6 bc *s8 >|2| 0x00000BA4< to __funcptr_type_kind
    0x00000BA7 store *__funcptr_type_kind >|2| 0x00000BA5<, __funcptr_type_kind >|2| 0x00000BA6<
    0x00000BA8 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetPerfQueryIdByNameINTEL") *s8
    0x00000BA9 gvar *__funcptr_type_kind 0x000002EF
    0x00000BAA bc *s8 >|2| 0x00000BA8< to __funcptr_type_kind
    0x00000BAB store *__funcptr_type_kind >|2| 0x00000BA9<, __funcptr_type_kind >|2| 0x00000BAA<
    0x00000BAC call ag5 "openglGetProcAddress" (cstroflen 24 "glGetPerfQueryInfoINTEL") *s8
    0x00000BAD gvar *__funcptr_type_kind 0x000002F0
    0x00000BAE bc *s8 >|2| 0x00000BAC< to __funcptr_type_kind
    0x00000BAF store *__funcptr_type_kind >|2| 0x00000BAD<, __funcptr_type_kind >|2| 0x00000BAE<
    0x00000BB0 call ag5 "openglGetProcAddress" (cstroflen 34 "glGetPixelTransformParameterfvEXT") *s8
    0x00000BB1 gvar *__funcptr_type_kind 0x000002F1
    0x00000BB2 bc *s8 >|2| 0x00000BB0< to __funcptr_type_kind
    0x00000BB3 store *__funcptr_type_kind >|2| 0x00000BB1<, __funcptr_type_kind >|2| 0x00000BB2<
    0x00000BB4 call ag5 "openglGetProcAddress" (cstroflen 34 "glGetPixelTransformParameterivEXT") *s8
    0x00000BB5 gvar *__funcptr_type_kind 0x000002F2
    0x00000BB6 bc *s8 >|2| 0x00000BB4< to __funcptr_type_kind
    0x00000BB7 store *__funcptr_type_kind >|2| 0x00000BB5<, __funcptr_type_kind >|2| 0x00000BB6<
    0x00000BB8 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetPointerIndexedvEXT") *s8
    0x00000BB9 gvar *__funcptr_type_kind 0x000002F3
    0x00000BBA bc *s8 >|2| 0x00000BB8< to __funcptr_type_kind
    0x00000BBB store *__funcptr_type_kind >|2| 0x00000BB9<, __funcptr_type_kind >|2| 0x00000BBA<
    0x00000BBC call ag5 "openglGetProcAddress" (cstroflen 19 "glGetPointeri_vEXT") *s8
    0x00000BBD gvar *__funcptr_type_kind 0x000002F4
    0x00000BBE bc *s8 >|2| 0x00000BBC< to __funcptr_type_kind
    0x00000BBF store *__funcptr_type_kind >|2| 0x00000BBD<, __funcptr_type_kind >|2| 0x00000BBE<
    0x00000BC0 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetProgramBinary") *s8
    0x00000BC1 gvar *__funcptr_type_kind 0x000002F5
    0x00000BC2 bc *s8 >|2| 0x00000BC0< to __funcptr_type_kind
    0x00000BC3 store *__funcptr_type_kind >|2| 0x00000BC1<, __funcptr_type_kind >|2| 0x00000BC2<
    0x00000BC4 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetProgramEnvParameterdvARB") *s8
    0x00000BC5 gvar *__funcptr_type_kind 0x000002F6
    0x00000BC6 bc *s8 >|2| 0x00000BC4< to __funcptr_type_kind
    0x00000BC7 store *__funcptr_type_kind >|2| 0x00000BC5<, __funcptr_type_kind >|2| 0x00000BC6<
    0x00000BC8 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetProgramEnvParameterfvARB") *s8
    0x00000BC9 gvar *__funcptr_type_kind 0x000002F7
    0x00000BCA bc *s8 >|2| 0x00000BC8< to __funcptr_type_kind
    0x00000BCB store *__funcptr_type_kind >|2| 0x00000BC9<, __funcptr_type_kind >|2| 0x00000BCA<
    0x00000BCC call ag5 "openglGetProcAddress" (cstroflen 20 "glGetProgramInfoLog") *s8
    0x00000BCD gvar *__funcptr_type_kind 0x000002F8
    0x00000BCE bc *s8 >|2| 0x00000BCC< to __funcptr_type_kind
    0x00000BCF store *__funcptr_type_kind >|2| 0x00000BCD<, __funcptr_type_kind >|2| 0x00000BCE<
    0x00000BD0 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetProgramInterfaceiv") *s8
    0x00000BD1 gvar *__funcptr_type_kind 0x000002F9
    0x00000BD2 bc *s8 >|2| 0x00000BD0< to __funcptr_type_kind
    0x00000BD3 store *__funcptr_type_kind >|2| 0x00000BD1<, __funcptr_type_kind >|2| 0x00000BD2<
    0x00000BD4 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetProgramivARB") *s8
    0x00000BD5 gvar *__funcptr_type_kind 0x000002FA
    0x00000BD6 bc *s8 >|2| 0x00000BD4< to __funcptr_type_kind
    0x00000BD7 store *__funcptr_type_kind >|2| 0x00000BD5<, __funcptr_type_kind >|2| 0x00000BD6<
    0x00000BD8 call ag5 "openglGetProcAddress" (cstroflen 17 "glGetProgramivNV") *s8
    0x00000BD9 gvar *__funcptr_type_kind 0x000002FB
    0x00000BDA bc *s8 >|2| 0x00000BD8< to __funcptr_type_kind
    0x00000BDB store *__funcptr_type_kind >|2| 0x00000BD9<, __funcptr_type_kind >|2| 0x00000BDA<
    0x00000BDC call ag5 "openglGetProcAddress" (cstroflen 15 "glGetProgramiv") *s8
    0x00000BDD gvar *__funcptr_type_kind 0x000002FC
    0x00000BDE bc *s8 >|2| 0x00000BDC< to __funcptr_type_kind
    0x00000BDF store *__funcptr_type_kind >|2| 0x00000BDD<, __funcptr_type_kind >|2| 0x00000BDE<
    0x00000BE0 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetProgramLocalParameterdvARB") *s8
    0x00000BE1 gvar *__funcptr_type_kind 0x000002FD
    0x00000BE2 bc *s8 >|2| 0x00000BE0< to __funcptr_type_kind
    0x00000BE3 store *__funcptr_type_kind >|2| 0x00000BE1<, __funcptr_type_kind >|2| 0x00000BE2<
    0x00000BE4 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetProgramLocalParameterfvARB") *s8
    0x00000BE5 gvar *__funcptr_type_kind 0x000002FE
    0x00000BE6 bc *s8 >|2| 0x00000BE4< to __funcptr_type_kind
    0x00000BE7 store *__funcptr_type_kind >|2| 0x00000BE5<, __funcptr_type_kind >|2| 0x00000BE6<
    0x00000BE8 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetProgramNamedParameterdvNV") *s8
    0x00000BE9 gvar *__funcptr_type_kind 0x000002FF
    0x00000BEA bc *s8 >|2| 0x00000BE8< to __funcptr_type_kind
    0x00000BEB store *__funcptr_type_kind >|2| 0x00000BE9<, __funcptr_type_kind >|2| 0x00000BEA<
    0x00000BEC call ag5 "openglGetProcAddress" (cstroflen 31 "glGetProgramNamedParameterfvNV") *s8
    0x00000BED gvar *__funcptr_type_kind 0x00000300
    0x00000BEE bc *s8 >|2| 0x00000BEC< to __funcptr_type_kind
    0x00000BEF store *__funcptr_type_kind >|2| 0x00000BED<, __funcptr_type_kind >|2| 0x00000BEE<
    0x00000BF0 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetProgramParameterdvNV") *s8
    0x00000BF1 gvar *__funcptr_type_kind 0x00000301
    0x00000BF2 bc *s8 >|2| 0x00000BF0< to __funcptr_type_kind
    0x00000BF3 store *__funcptr_type_kind >|2| 0x00000BF1<, __funcptr_type_kind >|2| 0x00000BF2<
    0x00000BF4 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetProgramParameterfvNV") *s8
    0x00000BF5 gvar *__funcptr_type_kind 0x00000302
    0x00000BF6 bc *s8 >|2| 0x00000BF4< to __funcptr_type_kind
    0x00000BF7 store *__funcptr_type_kind >|2| 0x00000BF5<, __funcptr_type_kind >|2| 0x00000BF6<
    0x00000BF8 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetProgramPipelineInfoLog") *s8
    0x00000BF9 gvar *__funcptr_type_kind 0x00000303
    0x00000BFA bc *s8 >|2| 0x00000BF8< to __funcptr_type_kind
    0x00000BFB store *__funcptr_type_kind >|2| 0x00000BF9<, __funcptr_type_kind >|2| 0x00000BFA<
    0x00000BFC call ag5 "openglGetProcAddress" (cstroflen 23 "glGetProgramPipelineiv") *s8
    0x00000BFD gvar *__funcptr_type_kind 0x00000304
    0x00000BFE bc *s8 >|2| 0x00000BFC< to __funcptr_type_kind
    0x00000BFF store *__funcptr_type_kind >|2| 0x00000BFD<, __funcptr_type_kind >|2| 0x00000BFE<
    0x00000C00 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetProgramResourcefvNV") *s8
    0x00000C01 gvar *__funcptr_type_kind 0x00000305
    0x00000C02 bc *s8 >|2| 0x00000C00< to __funcptr_type_kind
    0x00000C03 store *__funcptr_type_kind >|2| 0x00000C01<, __funcptr_type_kind >|2| 0x00000C02<
    0x00000C04 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetProgramResourceiv") *s8
    0x00000C05 gvar *__funcptr_type_kind 0x00000306
    0x00000C06 bc *s8 >|2| 0x00000C04< to __funcptr_type_kind
    0x00000C07 store *__funcptr_type_kind >|2| 0x00000C05<, __funcptr_type_kind >|2| 0x00000C06<
    0x00000C08 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetProgramResourceName") *s8
    0x00000C09 gvar *__funcptr_type_kind 0x00000307
    0x00000C0A bc *s8 >|2| 0x00000C08< to __funcptr_type_kind
    0x00000C0B store *__funcptr_type_kind >|2| 0x00000C09<, __funcptr_type_kind >|2| 0x00000C0A<
    0x00000C0C call ag5 "openglGetProcAddress" (cstroflen 20 "glGetProgramStageiv") *s8
    0x00000C0D gvar *__funcptr_type_kind 0x00000308
    0x00000C0E bc *s8 >|2| 0x00000C0C< to __funcptr_type_kind
    0x00000C0F store *__funcptr_type_kind >|2| 0x00000C0D<, __funcptr_type_kind >|2| 0x00000C0E<
    0x00000C10 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetProgramStringARB") *s8
    0x00000C11 gvar *__funcptr_type_kind 0x00000309
    0x00000C12 bc *s8 >|2| 0x00000C10< to __funcptr_type_kind
    0x00000C13 store *__funcptr_type_kind >|2| 0x00000C11<, __funcptr_type_kind >|2| 0x00000C12<
    0x00000C14 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetProgramStringNV") *s8
    0x00000C15 gvar *__funcptr_type_kind 0x0000030A
    0x00000C16 bc *s8 >|2| 0x00000C14< to __funcptr_type_kind
    0x00000C17 store *__funcptr_type_kind >|2| 0x00000C15<, __funcptr_type_kind >|2| 0x00000C16<
    0x00000C18 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetQueryBufferObjecti64v") *s8
    0x00000C19 gvar *__funcptr_type_kind 0x0000030B
    0x00000C1A bc *s8 >|2| 0x00000C18< to __funcptr_type_kind
    0x00000C1B store *__funcptr_type_kind >|2| 0x00000C19<, __funcptr_type_kind >|2| 0x00000C1A<
    0x00000C1C call ag5 "openglGetProcAddress" (cstroflen 25 "glGetQueryBufferObjectiv") *s8
    0x00000C1D gvar *__funcptr_type_kind 0x0000030C
    0x00000C1E bc *s8 >|2| 0x00000C1C< to __funcptr_type_kind
    0x00000C1F store *__funcptr_type_kind >|2| 0x00000C1D<, __funcptr_type_kind >|2| 0x00000C1E<
    0x00000C20 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetQueryBufferObjectui64v") *s8
    0x00000C21 gvar *__funcptr_type_kind 0x0000030D
    0x00000C22 bc *s8 >|2| 0x00000C20< to __funcptr_type_kind
    0x00000C23 store *__funcptr_type_kind >|2| 0x00000C21<, __funcptr_type_kind >|2| 0x00000C22<
    0x00000C24 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetQueryBufferObjectuiv") *s8
    0x00000C25 gvar *__funcptr_type_kind 0x0000030E
    0x00000C26 bc *s8 >|2| 0x00000C24< to __funcptr_type_kind
    0x00000C27 store *__funcptr_type_kind >|2| 0x00000C25<, __funcptr_type_kind >|2| 0x00000C26<
    0x00000C28 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetQueryIndexediv") *s8
    0x00000C29 gvar *__funcptr_type_kind 0x0000030F
    0x00000C2A bc *s8 >|2| 0x00000C28< to __funcptr_type_kind
    0x00000C2B store *__funcptr_type_kind >|2| 0x00000C29<, __funcptr_type_kind >|2| 0x00000C2A<
    0x00000C2C call ag5 "openglGetProcAddress" (cstroflen 18 "glGetQueryivANGLE") *s8
    0x00000C2D gvar *__funcptr_type_kind 0x00000310
    0x00000C2E bc *s8 >|2| 0x00000C2C< to __funcptr_type_kind
    0x00000C2F store *__funcptr_type_kind >|2| 0x00000C2D<, __funcptr_type_kind >|2| 0x00000C2E<
    0x00000C30 call ag5 "openglGetProcAddress" (cstroflen 16 "glGetQueryivARB") *s8
    0x00000C31 gvar *__funcptr_type_kind 0x00000311
    0x00000C32 bc *s8 >|2| 0x00000C30< to __funcptr_type_kind
    0x00000C33 store *__funcptr_type_kind >|2| 0x00000C31<, __funcptr_type_kind >|2| 0x00000C32<
    0x00000C34 call ag5 "openglGetProcAddress" (cstroflen 13 "glGetQueryiv") *s8
    0x00000C35 gvar *__funcptr_type_kind 0x00000312
    0x00000C36 bc *s8 >|2| 0x00000C34< to __funcptr_type_kind
    0x00000C37 store *__funcptr_type_kind >|2| 0x00000C35<, __funcptr_type_kind >|2| 0x00000C36<
    0x00000C38 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetQueryObjecti64vANGLE") *s8
    0x00000C39 gvar *__funcptr_type_kind 0x00000313
    0x00000C3A bc *s8 >|2| 0x00000C38< to __funcptr_type_kind
    0x00000C3B store *__funcptr_type_kind >|2| 0x00000C39<, __funcptr_type_kind >|2| 0x00000C3A<
    0x00000C3C call ag5 "openglGetProcAddress" (cstroflen 24 "glGetQueryObjecti64vEXT") *s8
    0x00000C3D gvar *__funcptr_type_kind 0x00000314
    0x00000C3E bc *s8 >|2| 0x00000C3C< to __funcptr_type_kind
    0x00000C3F store *__funcptr_type_kind >|2| 0x00000C3D<, __funcptr_type_kind >|2| 0x00000C3E<
    0x00000C40 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetQueryObjecti64v") *s8
    0x00000C41 gvar *__funcptr_type_kind 0x00000315
    0x00000C42 bc *s8 >|2| 0x00000C40< to __funcptr_type_kind
    0x00000C43 store *__funcptr_type_kind >|2| 0x00000C41<, __funcptr_type_kind >|2| 0x00000C42<
    0x00000C44 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetQueryObjectivANGLE") *s8
    0x00000C45 gvar *__funcptr_type_kind 0x00000316
    0x00000C46 bc *s8 >|2| 0x00000C44< to __funcptr_type_kind
    0x00000C47 store *__funcptr_type_kind >|2| 0x00000C45<, __funcptr_type_kind >|2| 0x00000C46<
    0x00000C48 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetQueryObjectivARB") *s8
    0x00000C49 gvar *__funcptr_type_kind 0x00000317
    0x00000C4A bc *s8 >|2| 0x00000C48< to __funcptr_type_kind
    0x00000C4B store *__funcptr_type_kind >|2| 0x00000C49<, __funcptr_type_kind >|2| 0x00000C4A<
    0x00000C4C call ag5 "openglGetProcAddress" (cstroflen 19 "glGetQueryObjectiv") *s8
    0x00000C4D gvar *__funcptr_type_kind 0x00000318
    0x00000C4E bc *s8 >|2| 0x00000C4C< to __funcptr_type_kind
    0x00000C4F store *__funcptr_type_kind >|2| 0x00000C4D<, __funcptr_type_kind >|2| 0x00000C4E<
    0x00000C50 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetQueryObjectui64vANGLE") *s8
    0x00000C51 gvar *__funcptr_type_kind 0x00000319
    0x00000C52 bc *s8 >|2| 0x00000C50< to __funcptr_type_kind
    0x00000C53 store *__funcptr_type_kind >|2| 0x00000C51<, __funcptr_type_kind >|2| 0x00000C52<
    0x00000C54 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetQueryObjectui64vEXT") *s8
    0x00000C55 gvar *__funcptr_type_kind 0x0000031A
    0x00000C56 bc *s8 >|2| 0x00000C54< to __funcptr_type_kind
    0x00000C57 store *__funcptr_type_kind >|2| 0x00000C55<, __funcptr_type_kind >|2| 0x00000C56<
    0x00000C58 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetQueryObjectui64v") *s8
    0x00000C59 gvar *__funcptr_type_kind 0x0000031B
    0x00000C5A bc *s8 >|2| 0x00000C58< to __funcptr_type_kind
    0x00000C5B store *__funcptr_type_kind >|2| 0x00000C59<, __funcptr_type_kind >|2| 0x00000C5A<
    0x00000C5C call ag5 "openglGetProcAddress" (cstroflen 25 "glGetQueryObjectuivANGLE") *s8
    0x00000C5D gvar *__funcptr_type_kind 0x0000031C
    0x00000C5E bc *s8 >|2| 0x00000C5C< to __funcptr_type_kind
    0x00000C5F store *__funcptr_type_kind >|2| 0x00000C5D<, __funcptr_type_kind >|2| 0x00000C5E<
    0x00000C60 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetQueryObjectuivARB") *s8
    0x00000C61 gvar *__funcptr_type_kind 0x0000031D
    0x00000C62 bc *s8 >|2| 0x00000C60< to __funcptr_type_kind
    0x00000C63 store *__funcptr_type_kind >|2| 0x00000C61<, __funcptr_type_kind >|2| 0x00000C62<
    0x00000C64 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetQueryObjectuiv") *s8
    0x00000C65 gvar *__funcptr_type_kind 0x0000031E
    0x00000C66 bc *s8 >|2| 0x00000C64< to __funcptr_type_kind
    0x00000C67 store *__funcptr_type_kind >|2| 0x00000C65<, __funcptr_type_kind >|2| 0x00000C66<
    0x00000C68 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetRenderbufferParameterivEXT") *s8
    0x00000C69 gvar *__funcptr_type_kind 0x0000031F
    0x00000C6A bc *s8 >|2| 0x00000C68< to __funcptr_type_kind
    0x00000C6B store *__funcptr_type_kind >|2| 0x00000C69<, __funcptr_type_kind >|2| 0x00000C6A<
    0x00000C6C call ag5 "openglGetProcAddress" (cstroflen 29 "glGetRenderbufferParameteriv") *s8
    0x00000C6D gvar *__funcptr_type_kind 0x00000320
    0x00000C6E bc *s8 >|2| 0x00000C6C< to __funcptr_type_kind
    0x00000C6F store *__funcptr_type_kind >|2| 0x00000C6D<, __funcptr_type_kind >|2| 0x00000C6E<
    0x00000C70 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetSamplerParameterfv") *s8
    0x00000C71 gvar *__funcptr_type_kind 0x00000321
    0x00000C72 bc *s8 >|2| 0x00000C70< to __funcptr_type_kind
    0x00000C73 store *__funcptr_type_kind >|2| 0x00000C71<, __funcptr_type_kind >|2| 0x00000C72<
    0x00000C74 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetSamplerParameterIiv") *s8
    0x00000C75 gvar *__funcptr_type_kind 0x00000322
    0x00000C76 bc *s8 >|2| 0x00000C74< to __funcptr_type_kind
    0x00000C77 store *__funcptr_type_kind >|2| 0x00000C75<, __funcptr_type_kind >|2| 0x00000C76<
    0x00000C78 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetSamplerParameterIuiv") *s8
    0x00000C79 gvar *__funcptr_type_kind 0x00000323
    0x00000C7A bc *s8 >|2| 0x00000C78< to __funcptr_type_kind
    0x00000C7B store *__funcptr_type_kind >|2| 0x00000C79<, __funcptr_type_kind >|2| 0x00000C7A<
    0x00000C7C call ag5 "openglGetProcAddress" (cstroflen 24 "glGetSamplerParameteriv") *s8
    0x00000C7D gvar *__funcptr_type_kind 0x00000324
    0x00000C7E bc *s8 >|2| 0x00000C7C< to __funcptr_type_kind
    0x00000C7F store *__funcptr_type_kind >|2| 0x00000C7D<, __funcptr_type_kind >|2| 0x00000C7E<
    0x00000C80 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetSeparableFilterEXT") *s8
    0x00000C81 gvar *__funcptr_type_kind 0x00000325
    0x00000C82 bc *s8 >|2| 0x00000C80< to __funcptr_type_kind
    0x00000C83 store *__funcptr_type_kind >|2| 0x00000C81<, __funcptr_type_kind >|2| 0x00000C82<
    0x00000C84 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetSeparableFilter") *s8
    0x00000C85 gvar *__funcptr_type_kind 0x00000326
    0x00000C86 bc *s8 >|2| 0x00000C84< to __funcptr_type_kind
    0x00000C87 store *__funcptr_type_kind >|2| 0x00000C85<, __funcptr_type_kind >|2| 0x00000C86<
    0x00000C88 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetShaderInfoLog") *s8
    0x00000C89 gvar *__funcptr_type_kind 0x00000327
    0x00000C8A bc *s8 >|2| 0x00000C88< to __funcptr_type_kind
    0x00000C8B store *__funcptr_type_kind >|2| 0x00000C89<, __funcptr_type_kind >|2| 0x00000C8A<
    0x00000C8C call ag5 "openglGetProcAddress" (cstroflen 14 "glGetShaderiv") *s8
    0x00000C8D gvar *__funcptr_type_kind 0x00000328
    0x00000C8E bc *s8 >|2| 0x00000C8C< to __funcptr_type_kind
    0x00000C8F store *__funcptr_type_kind >|2| 0x00000C8D<, __funcptr_type_kind >|2| 0x00000C8E<
    0x00000C90 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetShaderPrecisionFormat") *s8
    0x00000C91 gvar *__funcptr_type_kind 0x00000329
    0x00000C92 bc *s8 >|2| 0x00000C90< to __funcptr_type_kind
    0x00000C93 store *__funcptr_type_kind >|2| 0x00000C91<, __funcptr_type_kind >|2| 0x00000C92<
    0x00000C94 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetShaderSourceARB") *s8
    0x00000C95 gvar *__funcptr_type_kind 0x0000032A
    0x00000C96 bc *s8 >|2| 0x00000C94< to __funcptr_type_kind
    0x00000C97 store *__funcptr_type_kind >|2| 0x00000C95<, __funcptr_type_kind >|2| 0x00000C96<
    0x00000C98 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetShaderSource") *s8
    0x00000C99 gvar *__funcptr_type_kind 0x0000032B
    0x00000C9A bc *s8 >|2| 0x00000C98< to __funcptr_type_kind
    0x00000C9B store *__funcptr_type_kind >|2| 0x00000C99<, __funcptr_type_kind >|2| 0x00000C9A<
    0x00000C9C call ag5 "openglGetProcAddress" (cstroflen 24 "glGetSharpenTexFuncSGIS") *s8
    0x00000C9D gvar *__funcptr_type_kind 0x0000032C
    0x00000C9E bc *s8 >|2| 0x00000C9C< to __funcptr_type_kind
    0x00000C9F store *__funcptr_type_kind >|2| 0x00000C9D<, __funcptr_type_kind >|2| 0x00000C9E<
    0x00000CA0 call ag5 "openglGetProcAddress" (cstroflen 12 "glGetSynciv") *s8
    0x00000CA1 gvar *__funcptr_type_kind 0x0000032D
    0x00000CA2 bc *s8 >|2| 0x00000CA0< to __funcptr_type_kind
    0x00000CA3 store *__funcptr_type_kind >|2| 0x00000CA1<, __funcptr_type_kind >|2| 0x00000CA2<
    0x00000CA4 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetTexBumpParameterfvATI") *s8
    0x00000CA5 gvar *__funcptr_type_kind 0x0000032E
    0x00000CA6 bc *s8 >|2| 0x00000CA4< to __funcptr_type_kind
    0x00000CA7 store *__funcptr_type_kind >|2| 0x00000CA5<, __funcptr_type_kind >|2| 0x00000CA6<
    0x00000CA8 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetTexBumpParameterivATI") *s8
    0x00000CA9 gvar *__funcptr_type_kind 0x0000032F
    0x00000CAA bc *s8 >|2| 0x00000CA8< to __funcptr_type_kind
    0x00000CAB store *__funcptr_type_kind >|2| 0x00000CA9<, __funcptr_type_kind >|2| 0x00000CAA<
    0x00000CAC call ag5 "openglGetProcAddress" (cstroflen 14 "glGetTexEnvxv") *s8
    0x00000CAD gvar *__funcptr_type_kind 0x00000330
    0x00000CAE bc *s8 >|2| 0x00000CAC< to __funcptr_type_kind
    0x00000CAF store *__funcptr_type_kind >|2| 0x00000CAD<, __funcptr_type_kind >|2| 0x00000CAE<
    0x00000CB0 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetTexFilterFuncSGIS") *s8
    0x00000CB1 gvar *__funcptr_type_kind 0x00000331
    0x00000CB2 bc *s8 >|2| 0x00000CB0< to __funcptr_type_kind
    0x00000CB3 store *__funcptr_type_kind >|2| 0x00000CB1<, __funcptr_type_kind >|2| 0x00000CB2<
    0x00000CB4 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetTexParameterIivEXT") *s8
    0x00000CB5 gvar *__funcptr_type_kind 0x00000332
    0x00000CB6 bc *s8 >|2| 0x00000CB4< to __funcptr_type_kind
    0x00000CB7 store *__funcptr_type_kind >|2| 0x00000CB5<, __funcptr_type_kind >|2| 0x00000CB6<
    0x00000CB8 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetTexParameterIiv") *s8
    0x00000CB9 gvar *__funcptr_type_kind 0x00000333
    0x00000CBA bc *s8 >|2| 0x00000CB8< to __funcptr_type_kind
    0x00000CBB store *__funcptr_type_kind >|2| 0x00000CB9<, __funcptr_type_kind >|2| 0x00000CBA<
    0x00000CBC call ag5 "openglGetProcAddress" (cstroflen 25 "glGetTexParameterIuivEXT") *s8
    0x00000CBD gvar *__funcptr_type_kind 0x00000334
    0x00000CBE bc *s8 >|2| 0x00000CBC< to __funcptr_type_kind
    0x00000CBF store *__funcptr_type_kind >|2| 0x00000CBD<, __funcptr_type_kind >|2| 0x00000CBE<
    0x00000CC0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetTexParameterIuiv") *s8
    0x00000CC1 gvar *__funcptr_type_kind 0x00000335
    0x00000CC2 bc *s8 >|2| 0x00000CC0< to __funcptr_type_kind
    0x00000CC3 store *__funcptr_type_kind >|2| 0x00000CC1<, __funcptr_type_kind >|2| 0x00000CC2<
    0x00000CC4 call ag5 "openglGetProcAddress" (cstroflen 31 "glGetTexParameterPointervAPPLE") *s8
    0x00000CC5 gvar *__funcptr_type_kind 0x00000336
    0x00000CC6 bc *s8 >|2| 0x00000CC4< to __funcptr_type_kind
    0x00000CC7 store *__funcptr_type_kind >|2| 0x00000CC5<, __funcptr_type_kind >|2| 0x00000CC6<
    0x00000CC8 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetTexParameterxv") *s8
    0x00000CC9 gvar *__funcptr_type_kind 0x00000337
    0x00000CCA bc *s8 >|2| 0x00000CC8< to __funcptr_type_kind
    0x00000CCB store *__funcptr_type_kind >|2| 0x00000CC9<, __funcptr_type_kind >|2| 0x00000CCA<
    0x00000CCC call ag5 "openglGetProcAddress" (cstroflen 21 "glGetTextureImageEXT") *s8
    0x00000CCD gvar *__funcptr_type_kind 0x00000338
    0x00000CCE bc *s8 >|2| 0x00000CCC< to __funcptr_type_kind
    0x00000CCF store *__funcptr_type_kind >|2| 0x00000CCD<, __funcptr_type_kind >|2| 0x00000CCE<
    0x00000CD0 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetTextureImage") *s8
    0x00000CD1 gvar *__funcptr_type_kind 0x00000339
    0x00000CD2 bc *s8 >|2| 0x00000CD0< to __funcptr_type_kind
    0x00000CD3 store *__funcptr_type_kind >|2| 0x00000CD1<, __funcptr_type_kind >|2| 0x00000CD2<
    0x00000CD4 call ag5 "openglGetProcAddress" (cstroflen 32 "glGetTextureLevelParameterfvEXT") *s8
    0x00000CD5 gvar *__funcptr_type_kind 0x0000033A
    0x00000CD6 bc *s8 >|2| 0x00000CD4< to __funcptr_type_kind
    0x00000CD7 store *__funcptr_type_kind >|2| 0x00000CD5<, __funcptr_type_kind >|2| 0x00000CD6<
    0x00000CD8 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetTextureLevelParameterfv") *s8
    0x00000CD9 gvar *__funcptr_type_kind 0x0000033B
    0x00000CDA bc *s8 >|2| 0x00000CD8< to __funcptr_type_kind
    0x00000CDB store *__funcptr_type_kind >|2| 0x00000CD9<, __funcptr_type_kind >|2| 0x00000CDA<
    0x00000CDC call ag5 "openglGetProcAddress" (cstroflen 32 "glGetTextureLevelParameterivEXT") *s8
    0x00000CDD gvar *__funcptr_type_kind 0x0000033C
    0x00000CDE bc *s8 >|2| 0x00000CDC< to __funcptr_type_kind
    0x00000CDF store *__funcptr_type_kind >|2| 0x00000CDD<, __funcptr_type_kind >|2| 0x00000CDE<
    0x00000CE0 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetTextureLevelParameteriv") *s8
    0x00000CE1 gvar *__funcptr_type_kind 0x0000033D
    0x00000CE2 bc *s8 >|2| 0x00000CE0< to __funcptr_type_kind
    0x00000CE3 store *__funcptr_type_kind >|2| 0x00000CE1<, __funcptr_type_kind >|2| 0x00000CE2<
    0x00000CE4 call ag5 "openglGetProcAddress" (cstroflen 27 "glGetTextureParameterfvEXT") *s8
    0x00000CE5 gvar *__funcptr_type_kind 0x0000033E
    0x00000CE6 bc *s8 >|2| 0x00000CE4< to __funcptr_type_kind
    0x00000CE7 store *__funcptr_type_kind >|2| 0x00000CE5<, __funcptr_type_kind >|2| 0x00000CE6<
    0x00000CE8 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetTextureParameterfv") *s8
    0x00000CE9 gvar *__funcptr_type_kind 0x0000033F
    0x00000CEA bc *s8 >|2| 0x00000CE8< to __funcptr_type_kind
    0x00000CEB store *__funcptr_type_kind >|2| 0x00000CE9<, __funcptr_type_kind >|2| 0x00000CEA<
    0x00000CEC call ag5 "openglGetProcAddress" (cstroflen 28 "glGetTextureParameterIivEXT") *s8
    0x00000CED gvar *__funcptr_type_kind 0x00000340
    0x00000CEE bc *s8 >|2| 0x00000CEC< to __funcptr_type_kind
    0x00000CEF store *__funcptr_type_kind >|2| 0x00000CED<, __funcptr_type_kind >|2| 0x00000CEE<
    0x00000CF0 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetTextureParameterIiv") *s8
    0x00000CF1 gvar *__funcptr_type_kind 0x00000341
    0x00000CF2 bc *s8 >|2| 0x00000CF0< to __funcptr_type_kind
    0x00000CF3 store *__funcptr_type_kind >|2| 0x00000CF1<, __funcptr_type_kind >|2| 0x00000CF2<
    0x00000CF4 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetTextureParameterIuivEXT") *s8
    0x00000CF5 gvar *__funcptr_type_kind 0x00000342
    0x00000CF6 bc *s8 >|2| 0x00000CF4< to __funcptr_type_kind
    0x00000CF7 store *__funcptr_type_kind >|2| 0x00000CF5<, __funcptr_type_kind >|2| 0x00000CF6<
    0x00000CF8 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetTextureParameterIuiv") *s8
    0x00000CF9 gvar *__funcptr_type_kind 0x00000343
    0x00000CFA bc *s8 >|2| 0x00000CF8< to __funcptr_type_kind
    0x00000CFB store *__funcptr_type_kind >|2| 0x00000CF9<, __funcptr_type_kind >|2| 0x00000CFA<
    0x00000CFC call ag5 "openglGetProcAddress" (cstroflen 27 "glGetTextureParameterivEXT") *s8
    0x00000CFD gvar *__funcptr_type_kind 0x00000344
    0x00000CFE bc *s8 >|2| 0x00000CFC< to __funcptr_type_kind
    0x00000CFF store *__funcptr_type_kind >|2| 0x00000CFD<, __funcptr_type_kind >|2| 0x00000CFE<
    0x00000D00 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetTextureParameteriv") *s8
    0x00000D01 gvar *__funcptr_type_kind 0x00000345
    0x00000D02 bc *s8 >|2| 0x00000D00< to __funcptr_type_kind
    0x00000D03 store *__funcptr_type_kind >|2| 0x00000D01<, __funcptr_type_kind >|2| 0x00000D02<
    0x00000D04 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetTextureSubImage") *s8
    0x00000D05 gvar *__funcptr_type_kind 0x00000346
    0x00000D06 bc *s8 >|2| 0x00000D04< to __funcptr_type_kind
    0x00000D07 store *__funcptr_type_kind >|2| 0x00000D05<, __funcptr_type_kind >|2| 0x00000D06<
    0x00000D08 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetTrackMatrixivNV") *s8
    0x00000D09 gvar *__funcptr_type_kind 0x00000347
    0x00000D0A bc *s8 >|2| 0x00000D08< to __funcptr_type_kind
    0x00000D0B store *__funcptr_type_kind >|2| 0x00000D09<, __funcptr_type_kind >|2| 0x00000D0A<
    0x00000D0C call ag5 "openglGetProcAddress" (cstroflen 28 "glGetTransformFeedbacki64_v") *s8
    0x00000D0D gvar *__funcptr_type_kind 0x00000348
    0x00000D0E bc *s8 >|2| 0x00000D0C< to __funcptr_type_kind
    0x00000D0F store *__funcptr_type_kind >|2| 0x00000D0D<, __funcptr_type_kind >|2| 0x00000D0E<
    0x00000D10 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetTransformFeedbackiv") *s8
    0x00000D11 gvar *__funcptr_type_kind 0x00000349
    0x00000D12 bc *s8 >|2| 0x00000D10< to __funcptr_type_kind
    0x00000D13 store *__funcptr_type_kind >|2| 0x00000D11<, __funcptr_type_kind >|2| 0x00000D12<
    0x00000D14 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetTransformFeedbacki_v") *s8
    0x00000D15 gvar *__funcptr_type_kind 0x0000034A
    0x00000D16 bc *s8 >|2| 0x00000D14< to __funcptr_type_kind
    0x00000D17 store *__funcptr_type_kind >|2| 0x00000D15<, __funcptr_type_kind >|2| 0x00000D16<
    0x00000D18 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetTransformFeedbackVaryingEXT") *s8
    0x00000D19 gvar *__funcptr_type_kind 0x0000034B
    0x00000D1A bc *s8 >|2| 0x00000D18< to __funcptr_type_kind
    0x00000D1B store *__funcptr_type_kind >|2| 0x00000D19<, __funcptr_type_kind >|2| 0x00000D1A<
    0x00000D1C call ag5 "openglGetProcAddress" (cstroflen 32 "glGetTransformFeedbackVaryingNV") *s8
    0x00000D1D gvar *__funcptr_type_kind 0x0000034C
    0x00000D1E bc *s8 >|2| 0x00000D1C< to __funcptr_type_kind
    0x00000D1F store *__funcptr_type_kind >|2| 0x00000D1D<, __funcptr_type_kind >|2| 0x00000D1E<
    0x00000D20 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetTransformFeedbackVarying") *s8
    0x00000D21 gvar *__funcptr_type_kind 0x0000034D
    0x00000D22 bc *s8 >|2| 0x00000D20< to __funcptr_type_kind
    0x00000D23 store *__funcptr_type_kind >|2| 0x00000D21<, __funcptr_type_kind >|2| 0x00000D22<
    0x00000D24 call ag5 "openglGetProcAddress" (cstroflen 33 "glGetTranslatedShaderSourceANGLE") *s8
    0x00000D25 gvar *__funcptr_type_kind 0x0000034E
    0x00000D26 bc *s8 >|2| 0x00000D24< to __funcptr_type_kind
    0x00000D27 store *__funcptr_type_kind >|2| 0x00000D25<, __funcptr_type_kind >|2| 0x00000D26<
    0x00000D28 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetUniformLocation") *s8
    0x00000D29 gvar *__funcptr_type_kind 0x0000034F
    0x00000D2A bc *s8 >|2| 0x00000D28< to __funcptr_type_kind
    0x00000D2B store *__funcptr_type_kind >|2| 0x00000D29<, __funcptr_type_kind >|2| 0x00000D2A<
    0x00000D2C call ag5 "openglGetProcAddress" (cstroflen 15 "glGetUniformdv") *s8
    0x00000D2D gvar *__funcptr_type_kind 0x00000350
    0x00000D2E bc *s8 >|2| 0x00000D2C< to __funcptr_type_kind
    0x00000D2F store *__funcptr_type_kind >|2| 0x00000D2D<, __funcptr_type_kind >|2| 0x00000D2E<
    0x00000D30 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetUniformfvARB") *s8
    0x00000D31 gvar *__funcptr_type_kind 0x00000351
    0x00000D32 bc *s8 >|2| 0x00000D30< to __funcptr_type_kind
    0x00000D33 store *__funcptr_type_kind >|2| 0x00000D31<, __funcptr_type_kind >|2| 0x00000D32<
    0x00000D34 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetUniformfv") *s8
    0x00000D35 gvar *__funcptr_type_kind 0x00000352
    0x00000D36 bc *s8 >|2| 0x00000D34< to __funcptr_type_kind
    0x00000D37 store *__funcptr_type_kind >|2| 0x00000D35<, __funcptr_type_kind >|2| 0x00000D36<
    0x00000D38 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetUniformi64vARB") *s8
    0x00000D39 gvar *__funcptr_type_kind 0x00000353
    0x00000D3A bc *s8 >|2| 0x00000D38< to __funcptr_type_kind
    0x00000D3B store *__funcptr_type_kind >|2| 0x00000D39<, __funcptr_type_kind >|2| 0x00000D3A<
    0x00000D3C call ag5 "openglGetProcAddress" (cstroflen 19 "glGetUniformi64vNV") *s8
    0x00000D3D gvar *__funcptr_type_kind 0x00000354
    0x00000D3E bc *s8 >|2| 0x00000D3C< to __funcptr_type_kind
    0x00000D3F store *__funcptr_type_kind >|2| 0x00000D3D<, __funcptr_type_kind >|2| 0x00000D3E<
    0x00000D40 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetUniformIndices") *s8
    0x00000D41 gvar *__funcptr_type_kind 0x00000355
    0x00000D42 bc *s8 >|2| 0x00000D40< to __funcptr_type_kind
    0x00000D43 store *__funcptr_type_kind >|2| 0x00000D41<, __funcptr_type_kind >|2| 0x00000D42<
    0x00000D44 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetUniformivARB") *s8
    0x00000D45 gvar *__funcptr_type_kind 0x00000356
    0x00000D46 bc *s8 >|2| 0x00000D44< to __funcptr_type_kind
    0x00000D47 store *__funcptr_type_kind >|2| 0x00000D45<, __funcptr_type_kind >|2| 0x00000D46<
    0x00000D48 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetUniformiv") *s8
    0x00000D49 gvar *__funcptr_type_kind 0x00000357
    0x00000D4A bc *s8 >|2| 0x00000D48< to __funcptr_type_kind
    0x00000D4B store *__funcptr_type_kind >|2| 0x00000D49<, __funcptr_type_kind >|2| 0x00000D4A<
    0x00000D4C call ag5 "openglGetProcAddress" (cstroflen 26 "glGetUniformSubroutineuiv") *s8
    0x00000D4D gvar *__funcptr_type_kind 0x00000358
    0x00000D4E bc *s8 >|2| 0x00000D4C< to __funcptr_type_kind
    0x00000D4F store *__funcptr_type_kind >|2| 0x00000D4D<, __funcptr_type_kind >|2| 0x00000D4E<
    0x00000D50 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetUniformui64vARB") *s8
    0x00000D51 gvar *__funcptr_type_kind 0x00000359
    0x00000D52 bc *s8 >|2| 0x00000D50< to __funcptr_type_kind
    0x00000D53 store *__funcptr_type_kind >|2| 0x00000D51<, __funcptr_type_kind >|2| 0x00000D52<
    0x00000D54 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetUniformui64vNV") *s8
    0x00000D55 gvar *__funcptr_type_kind 0x0000035A
    0x00000D56 bc *s8 >|2| 0x00000D54< to __funcptr_type_kind
    0x00000D57 store *__funcptr_type_kind >|2| 0x00000D55<, __funcptr_type_kind >|2| 0x00000D56<
    0x00000D58 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetUniformuivEXT") *s8
    0x00000D59 gvar *__funcptr_type_kind 0x0000035B
    0x00000D5A bc *s8 >|2| 0x00000D58< to __funcptr_type_kind
    0x00000D5B store *__funcptr_type_kind >|2| 0x00000D59<, __funcptr_type_kind >|2| 0x00000D5A<
    0x00000D5C call ag5 "openglGetProcAddress" (cstroflen 16 "glGetUniformuiv") *s8
    0x00000D5D gvar *__funcptr_type_kind 0x0000035C
    0x00000D5E bc *s8 >|2| 0x00000D5C< to __funcptr_type_kind
    0x00000D5F store *__funcptr_type_kind >|2| 0x00000D5D<, __funcptr_type_kind >|2| 0x00000D5E<
    0x00000D60 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetVariantArrayObjectfvATI") *s8
    0x00000D61 gvar *__funcptr_type_kind 0x0000035D
    0x00000D62 bc *s8 >|2| 0x00000D60< to __funcptr_type_kind
    0x00000D63 store *__funcptr_type_kind >|2| 0x00000D61<, __funcptr_type_kind >|2| 0x00000D62<
    0x00000D64 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetVariantArrayObjectivATI") *s8
    0x00000D65 gvar *__funcptr_type_kind 0x0000035E
    0x00000D66 bc *s8 >|2| 0x00000D64< to __funcptr_type_kind
    0x00000D67 store *__funcptr_type_kind >|2| 0x00000D65<, __funcptr_type_kind >|2| 0x00000D66<
    0x00000D68 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetVariantBooleanvEXT") *s8
    0x00000D69 gvar *__funcptr_type_kind 0x0000035F
    0x00000D6A bc *s8 >|2| 0x00000D68< to __funcptr_type_kind
    0x00000D6B store *__funcptr_type_kind >|2| 0x00000D69<, __funcptr_type_kind >|2| 0x00000D6A<
    0x00000D6C call ag5 "openglGetProcAddress" (cstroflen 22 "glGetVariantFloatvEXT") *s8
    0x00000D6D gvar *__funcptr_type_kind 0x00000360
    0x00000D6E bc *s8 >|2| 0x00000D6C< to __funcptr_type_kind
    0x00000D6F store *__funcptr_type_kind >|2| 0x00000D6D<, __funcptr_type_kind >|2| 0x00000D6E<
    0x00000D70 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetVariantIntegervEXT") *s8
    0x00000D71 gvar *__funcptr_type_kind 0x00000361
    0x00000D72 bc *s8 >|2| 0x00000D70< to __funcptr_type_kind
    0x00000D73 store *__funcptr_type_kind >|2| 0x00000D71<, __funcptr_type_kind >|2| 0x00000D72<
    0x00000D74 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetVariantPointervEXT") *s8
    0x00000D75 gvar *__funcptr_type_kind 0x00000362
    0x00000D76 bc *s8 >|2| 0x00000D74< to __funcptr_type_kind
    0x00000D77 store *__funcptr_type_kind >|2| 0x00000D75<, __funcptr_type_kind >|2| 0x00000D76<
    0x00000D78 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVertexArrayIndexed64iv") *s8
    0x00000D79 gvar *__funcptr_type_kind 0x00000363
    0x00000D7A bc *s8 >|2| 0x00000D78< to __funcptr_type_kind
    0x00000D7B store *__funcptr_type_kind >|2| 0x00000D79<, __funcptr_type_kind >|2| 0x00000D7A<
    0x00000D7C call ag5 "openglGetProcAddress" (cstroflen 26 "glGetVertexArrayIndexediv") *s8
    0x00000D7D gvar *__funcptr_type_kind 0x00000364
    0x00000D7E bc *s8 >|2| 0x00000D7C< to __funcptr_type_kind
    0x00000D7F store *__funcptr_type_kind >|2| 0x00000D7D<, __funcptr_type_kind >|2| 0x00000D7E<
    0x00000D80 call ag5 "openglGetProcAddress" (cstroflen 30 "glGetVertexArrayIntegeri_vEXT") *s8
    0x00000D81 gvar *__funcptr_type_kind 0x00000365
    0x00000D82 bc *s8 >|2| 0x00000D80< to __funcptr_type_kind
    0x00000D83 store *__funcptr_type_kind >|2| 0x00000D81<, __funcptr_type_kind >|2| 0x00000D82<
    0x00000D84 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVertexArrayIntegervEXT") *s8
    0x00000D85 gvar *__funcptr_type_kind 0x00000366
    0x00000D86 bc *s8 >|2| 0x00000D84< to __funcptr_type_kind
    0x00000D87 store *__funcptr_type_kind >|2| 0x00000D85<, __funcptr_type_kind >|2| 0x00000D86<
    0x00000D88 call ag5 "openglGetProcAddress" (cstroflen 19 "glGetVertexArrayiv") *s8
    0x00000D89 gvar *__funcptr_type_kind 0x00000367
    0x00000D8A bc *s8 >|2| 0x00000D88< to __funcptr_type_kind
    0x00000D8B store *__funcptr_type_kind >|2| 0x00000D89<, __funcptr_type_kind >|2| 0x00000D8A<
    0x00000D8C call ag5 "openglGetProcAddress" (cstroflen 30 "glGetVertexArrayPointeri_vEXT") *s8
    0x00000D8D gvar *__funcptr_type_kind 0x00000368
    0x00000D8E bc *s8 >|2| 0x00000D8C< to __funcptr_type_kind
    0x00000D8F store *__funcptr_type_kind >|2| 0x00000D8D<, __funcptr_type_kind >|2| 0x00000D8E<
    0x00000D90 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVertexArrayPointervEXT") *s8
    0x00000D91 gvar *__funcptr_type_kind 0x00000369
    0x00000D92 bc *s8 >|2| 0x00000D90< to __funcptr_type_kind
    0x00000D93 store *__funcptr_type_kind >|2| 0x00000D91<, __funcptr_type_kind >|2| 0x00000D92<
    0x00000D94 call ag5 "openglGetProcAddress" (cstroflen 34 "glGetVertexAttribArrayObjectfvATI") *s8
    0x00000D95 gvar *__funcptr_type_kind 0x0000036A
    0x00000D96 bc *s8 >|2| 0x00000D94< to __funcptr_type_kind
    0x00000D97 store *__funcptr_type_kind >|2| 0x00000D95<, __funcptr_type_kind >|2| 0x00000D96<
    0x00000D98 call ag5 "openglGetProcAddress" (cstroflen 34 "glGetVertexAttribArrayObjectivATI") *s8
    0x00000D99 gvar *__funcptr_type_kind 0x0000036B
    0x00000D9A bc *s8 >|2| 0x00000D98< to __funcptr_type_kind
    0x00000D9B store *__funcptr_type_kind >|2| 0x00000D99<, __funcptr_type_kind >|2| 0x00000D9A<
    0x00000D9C call ag5 "openglGetProcAddress" (cstroflen 23 "glGetVertexAttribdvARB") *s8
    0x00000D9D gvar *__funcptr_type_kind 0x0000036C
    0x00000D9E bc *s8 >|2| 0x00000D9C< to __funcptr_type_kind
    0x00000D9F store *__funcptr_type_kind >|2| 0x00000D9D<, __funcptr_type_kind >|2| 0x00000D9E<
    0x00000DA0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetVertexAttribdvNV") *s8
    0x00000DA1 gvar *__funcptr_type_kind 0x0000036D
    0x00000DA2 bc *s8 >|2| 0x00000DA0< to __funcptr_type_kind
    0x00000DA3 store *__funcptr_type_kind >|2| 0x00000DA1<, __funcptr_type_kind >|2| 0x00000DA2<
    0x00000DA4 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetVertexAttribdv") *s8
    0x00000DA5 gvar *__funcptr_type_kind 0x0000036E
    0x00000DA6 bc *s8 >|2| 0x00000DA4< to __funcptr_type_kind
    0x00000DA7 store *__funcptr_type_kind >|2| 0x00000DA5<, __funcptr_type_kind >|2| 0x00000DA6<
    0x00000DA8 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetVertexAttribfvARB") *s8
    0x00000DA9 gvar *__funcptr_type_kind 0x0000036F
    0x00000DAA bc *s8 >|2| 0x00000DA8< to __funcptr_type_kind
    0x00000DAB store *__funcptr_type_kind >|2| 0x00000DA9<, __funcptr_type_kind >|2| 0x00000DAA<
    0x00000DAC call ag5 "openglGetProcAddress" (cstroflen 22 "glGetVertexAttribfvNV") *s8
    0x00000DAD gvar *__funcptr_type_kind 0x00000370
    0x00000DAE bc *s8 >|2| 0x00000DAC< to __funcptr_type_kind
    0x00000DAF store *__funcptr_type_kind >|2| 0x00000DAD<, __funcptr_type_kind >|2| 0x00000DAE<
    0x00000DB0 call ag5 "openglGetProcAddress" (cstroflen 20 "glGetVertexAttribfv") *s8
    0x00000DB1 gvar *__funcptr_type_kind 0x00000371
    0x00000DB2 bc *s8 >|2| 0x00000DB0< to __funcptr_type_kind
    0x00000DB3 store *__funcptr_type_kind >|2| 0x00000DB1<, __funcptr_type_kind >|2| 0x00000DB2<
    0x00000DB4 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetVertexAttribIivEXT") *s8
    0x00000DB5 gvar *__funcptr_type_kind 0x00000372
    0x00000DB6 bc *s8 >|2| 0x00000DB4< to __funcptr_type_kind
    0x00000DB7 store *__funcptr_type_kind >|2| 0x00000DB5<, __funcptr_type_kind >|2| 0x00000DB6<
    0x00000DB8 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetVertexAttribIiv") *s8
    0x00000DB9 gvar *__funcptr_type_kind 0x00000373
    0x00000DBA bc *s8 >|2| 0x00000DB8< to __funcptr_type_kind
    0x00000DBB store *__funcptr_type_kind >|2| 0x00000DB9<, __funcptr_type_kind >|2| 0x00000DBA<
    0x00000DBC call ag5 "openglGetProcAddress" (cstroflen 25 "glGetVertexAttribIuivEXT") *s8
    0x00000DBD gvar *__funcptr_type_kind 0x00000374
    0x00000DBE bc *s8 >|2| 0x00000DBC< to __funcptr_type_kind
    0x00000DBF store *__funcptr_type_kind >|2| 0x00000DBD<, __funcptr_type_kind >|2| 0x00000DBE<
    0x00000DC0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetVertexAttribIuiv") *s8
    0x00000DC1 gvar *__funcptr_type_kind 0x00000375
    0x00000DC2 bc *s8 >|2| 0x00000DC0< to __funcptr_type_kind
    0x00000DC3 store *__funcptr_type_kind >|2| 0x00000DC1<, __funcptr_type_kind >|2| 0x00000DC2<
    0x00000DC4 call ag5 "openglGetProcAddress" (cstroflen 23 "glGetVertexAttribivARB") *s8
    0x00000DC5 gvar *__funcptr_type_kind 0x00000376
    0x00000DC6 bc *s8 >|2| 0x00000DC4< to __funcptr_type_kind
    0x00000DC7 store *__funcptr_type_kind >|2| 0x00000DC5<, __funcptr_type_kind >|2| 0x00000DC6<
    0x00000DC8 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetVertexAttribivNV") *s8
    0x00000DC9 gvar *__funcptr_type_kind 0x00000377
    0x00000DCA bc *s8 >|2| 0x00000DC8< to __funcptr_type_kind
    0x00000DCB store *__funcptr_type_kind >|2| 0x00000DC9<, __funcptr_type_kind >|2| 0x00000DCA<
    0x00000DCC call ag5 "openglGetProcAddress" (cstroflen 20 "glGetVertexAttribiv") *s8
    0x00000DCD gvar *__funcptr_type_kind 0x00000378
    0x00000DCE bc *s8 >|2| 0x00000DCC< to __funcptr_type_kind
    0x00000DCF store *__funcptr_type_kind >|2| 0x00000DCD<, __funcptr_type_kind >|2| 0x00000DCE<
    0x00000DD0 call ag5 "openglGetProcAddress" (cstroflen 24 "glGetVertexAttribLdvEXT") *s8
    0x00000DD1 gvar *__funcptr_type_kind 0x00000379
    0x00000DD2 bc *s8 >|2| 0x00000DD0< to __funcptr_type_kind
    0x00000DD3 store *__funcptr_type_kind >|2| 0x00000DD1<, __funcptr_type_kind >|2| 0x00000DD2<
    0x00000DD4 call ag5 "openglGetProcAddress" (cstroflen 21 "glGetVertexAttribLdv") *s8
    0x00000DD5 gvar *__funcptr_type_kind 0x0000037A
    0x00000DD6 bc *s8 >|2| 0x00000DD4< to __funcptr_type_kind
    0x00000DD7 store *__funcptr_type_kind >|2| 0x00000DD5<, __funcptr_type_kind >|2| 0x00000DD6<
    0x00000DD8 call ag5 "openglGetProcAddress" (cstroflen 25 "glGetVertexAttribLi64vNV") *s8
    0x00000DD9 gvar *__funcptr_type_kind 0x0000037B
    0x00000DDA bc *s8 >|2| 0x00000DD8< to __funcptr_type_kind
    0x00000DDB store *__funcptr_type_kind >|2| 0x00000DD9<, __funcptr_type_kind >|2| 0x00000DDA<
    0x00000DDC call ag5 "openglGetProcAddress" (cstroflen 27 "glGetVertexAttribLui64vARB") *s8
    0x00000DDD gvar *__funcptr_type_kind 0x0000037C
    0x00000DDE bc *s8 >|2| 0x00000DDC< to __funcptr_type_kind
    0x00000DDF store *__funcptr_type_kind >|2| 0x00000DDD<, __funcptr_type_kind >|2| 0x00000DDE<
    0x00000DE0 call ag5 "openglGetProcAddress" (cstroflen 26 "glGetVertexAttribLui64vNV") *s8
    0x00000DE1 gvar *__funcptr_type_kind 0x0000037D
    0x00000DE2 bc *s8 >|2| 0x00000DE0< to __funcptr_type_kind
    0x00000DE3 store *__funcptr_type_kind >|2| 0x00000DE1<, __funcptr_type_kind >|2| 0x00000DE2<
    0x00000DE4 call ag5 "openglGetProcAddress" (cstroflen 29 "glGetVertexAttribPointervARB") *s8
    0x00000DE5 gvar *__funcptr_type_kind 0x0000037E
    0x00000DE6 bc *s8 >|2| 0x00000DE4< to __funcptr_type_kind
    0x00000DE7 store *__funcptr_type_kind >|2| 0x00000DE5<, __funcptr_type_kind >|2| 0x00000DE6<
    0x00000DE8 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVertexAttribPointervNV") *s8
    0x00000DE9 gvar *__funcptr_type_kind 0x0000037F
    0x00000DEA bc *s8 >|2| 0x00000DE8< to __funcptr_type_kind
    0x00000DEB store *__funcptr_type_kind >|2| 0x00000DE9<, __funcptr_type_kind >|2| 0x00000DEA<
    0x00000DEC call ag5 "openglGetProcAddress" (cstroflen 26 "glGetVertexAttribPointerv") *s8
    0x00000DED gvar *__funcptr_type_kind 0x00000380
    0x00000DEE bc *s8 >|2| 0x00000DEC< to __funcptr_type_kind
    0x00000DEF store *__funcptr_type_kind >|2| 0x00000DED<, __funcptr_type_kind >|2| 0x00000DEE<
    0x00000DF0 call ag5 "openglGetProcAddress" (cstroflen 22 "glGetVideoCaptureivNV") *s8
    0x00000DF1 gvar *__funcptr_type_kind 0x00000381
    0x00000DF2 bc *s8 >|2| 0x00000DF0< to __funcptr_type_kind
    0x00000DF3 store *__funcptr_type_kind >|2| 0x00000DF1<, __funcptr_type_kind >|2| 0x00000DF2<
    0x00000DF4 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVideoCaptureStreamdvNV") *s8
    0x00000DF5 gvar *__funcptr_type_kind 0x00000382
    0x00000DF6 bc *s8 >|2| 0x00000DF4< to __funcptr_type_kind
    0x00000DF7 store *__funcptr_type_kind >|2| 0x00000DF5<, __funcptr_type_kind >|2| 0x00000DF6<
    0x00000DF8 call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVideoCaptureStreamfvNV") *s8
    0x00000DF9 gvar *__funcptr_type_kind 0x00000383
    0x00000DFA bc *s8 >|2| 0x00000DF8< to __funcptr_type_kind
    0x00000DFB store *__funcptr_type_kind >|2| 0x00000DF9<, __funcptr_type_kind >|2| 0x00000DFA<
    0x00000DFC call ag5 "openglGetProcAddress" (cstroflen 28 "glGetVideoCaptureStreamivNV") *s8
    0x00000DFD gvar *__funcptr_type_kind 0x00000384
    0x00000DFE bc *s8 >|2| 0x00000DFC< to __funcptr_type_kind
    0x00000DFF store *__funcptr_type_kind >|2| 0x00000DFD<, __funcptr_type_kind >|2| 0x00000DFE<
    0x00000E00 call ag5 "openglGetProcAddress" (cstroflen 17 "glGetVideoi64vNV") *s8
    0x00000E01 gvar *__funcptr_type_kind 0x00000385
    0x00000E02 bc *s8 >|2| 0x00000E00< to __funcptr_type_kind
    0x00000E03 store *__funcptr_type_kind >|2| 0x00000E01<, __funcptr_type_kind >|2| 0x00000E02<
    0x00000E04 call ag5 "openglGetProcAddress" (cstroflen 15 "glGetVideoivNV") *s8
    0x00000E05 gvar *__funcptr_type_kind 0x00000386
    0x00000E06 bc *s8 >|2| 0x00000E04< to __funcptr_type_kind
    0x00000E07 store *__funcptr_type_kind >|2| 0x00000E05<, __funcptr_type_kind >|2| 0x00000E06<
    0x00000E08 call ag5 "openglGetProcAddress" (cstroflen 18 "glGetVideoui64vNV") *s8
    0x00000E09 gvar *__funcptr_type_kind 0x00000387
    0x00000E0A bc *s8 >|2| 0x00000E08< to __funcptr_type_kind
    0x00000E0B store *__funcptr_type_kind >|2| 0x00000E09<, __funcptr_type_kind >|2| 0x00000E0A<
    0x00000E0C call ag5 "openglGetProcAddress" (cstroflen 16 "glGetVideouivNV") *s8
    0x00000E0D gvar *__funcptr_type_kind 0x00000388
    0x00000E0E bc *s8 >|2| 0x00000E0C< to __funcptr_type_kind
    0x00000E0F store *__funcptr_type_kind >|2| 0x00000E0D<, __funcptr_type_kind >|2| 0x00000E0E<
    0x00000E10 call ag5 "openglGetProcAddress" (cstroflen 24 "glGlobalAlphaFactorbSUN") *s8
    0x00000E11 gvar *__funcptr_type_kind 0x00000389
    0x00000E12 bc *s8 >|2| 0x00000E10< to __funcptr_type_kind
    0x00000E13 store *__funcptr_type_kind >|2| 0x00000E11<, __funcptr_type_kind >|2| 0x00000E12<
    0x00000E14 call ag5 "openglGetProcAddress" (cstroflen 24 "glGlobalAlphaFactordSUN") *s8
    0x00000E15 gvar *__funcptr_type_kind 0x0000038A
    0x00000E16 bc *s8 >|2| 0x00000E14< to __funcptr_type_kind
    0x00000E17 store *__funcptr_type_kind >|2| 0x00000E15<, __funcptr_type_kind >|2| 0x00000E16<
    0x00000E18 call ag5 "openglGetProcAddress" (cstroflen 24 "glGlobalAlphaFactorfSUN") *s8
    0x00000E19 gvar *__funcptr_type_kind 0x0000038B
    0x00000E1A bc *s8 >|2| 0x00000E18< to __funcptr_type_kind
    0x00000E1B store *__funcptr_type_kind >|2| 0x00000E19<, __funcptr_type_kind >|2| 0x00000E1A<
    0x00000E1C call ag5 "openglGetProcAddress" (cstroflen 24 "glGlobalAlphaFactoriSUN") *s8
    0x00000E1D gvar *__funcptr_type_kind 0x0000038C
    0x00000E1E bc *s8 >|2| 0x00000E1C< to __funcptr_type_kind
    0x00000E1F store *__funcptr_type_kind >|2| 0x00000E1D<, __funcptr_type_kind >|2| 0x00000E1E<
    0x00000E20 call ag5 "openglGetProcAddress" (cstroflen 24 "glGlobalAlphaFactorsSUN") *s8
    0x00000E21 gvar *__funcptr_type_kind 0x0000038D
    0x00000E22 bc *s8 >|2| 0x00000E20< to __funcptr_type_kind
    0x00000E23 store *__funcptr_type_kind >|2| 0x00000E21<, __funcptr_type_kind >|2| 0x00000E22<
    0x00000E24 call ag5 "openglGetProcAddress" (cstroflen 25 "glGlobalAlphaFactorubSUN") *s8
    0x00000E25 gvar *__funcptr_type_kind 0x0000038E
    0x00000E26 bc *s8 >|2| 0x00000E24< to __funcptr_type_kind
    0x00000E27 store *__funcptr_type_kind >|2| 0x00000E25<, __funcptr_type_kind >|2| 0x00000E26<
    0x00000E28 call ag5 "openglGetProcAddress" (cstroflen 25 "glGlobalAlphaFactoruiSUN") *s8
    0x00000E29 gvar *__funcptr_type_kind 0x0000038F
    0x00000E2A bc *s8 >|2| 0x00000E28< to __funcptr_type_kind
    0x00000E2B store *__funcptr_type_kind >|2| 0x00000E29<, __funcptr_type_kind >|2| 0x00000E2A<
    0x00000E2C call ag5 "openglGetProcAddress" (cstroflen 25 "glGlobalAlphaFactorusSUN") *s8
    0x00000E2D gvar *__funcptr_type_kind 0x00000390
    0x00000E2E bc *s8 >|2| 0x00000E2C< to __funcptr_type_kind
    0x00000E2F store *__funcptr_type_kind >|2| 0x00000E2D<, __funcptr_type_kind >|2| 0x00000E2E<
    0x00000E30 call ag5 "openglGetProcAddress" (cstroflen 15 "glHistogramEXT") *s8
    0x00000E31 gvar *__funcptr_type_kind 0x00000391
    0x00000E32 bc *s8 >|2| 0x00000E30< to __funcptr_type_kind
    0x00000E33 store *__funcptr_type_kind >|2| 0x00000E31<, __funcptr_type_kind >|2| 0x00000E32<
    0x00000E34 call ag5 "openglGetProcAddress" (cstroflen 12 "glHistogram") *s8
    0x00000E35 gvar *__funcptr_type_kind 0x00000392
    0x00000E36 bc *s8 >|2| 0x00000E34< to __funcptr_type_kind
    0x00000E37 store *__funcptr_type_kind >|2| 0x00000E35<, __funcptr_type_kind >|2| 0x00000E36<
    0x00000E38 call ag5 "openglGetProcAddress" (cstroflen 29 "glImageTransformParameterfHP") *s8
    0x00000E39 gvar *__funcptr_type_kind 0x00000393
    0x00000E3A bc *s8 >|2| 0x00000E38< to __funcptr_type_kind
    0x00000E3B store *__funcptr_type_kind >|2| 0x00000E39<, __funcptr_type_kind >|2| 0x00000E3A<
    0x00000E3C call ag5 "openglGetProcAddress" (cstroflen 30 "glImageTransformParameterfvHP") *s8
    0x00000E3D gvar *__funcptr_type_kind 0x00000394
    0x00000E3E bc *s8 >|2| 0x00000E3C< to __funcptr_type_kind
    0x00000E3F store *__funcptr_type_kind >|2| 0x00000E3D<, __funcptr_type_kind >|2| 0x00000E3E<
    0x00000E40 call ag5 "openglGetProcAddress" (cstroflen 29 "glImageTransformParameteriHP") *s8
    0x00000E41 gvar *__funcptr_type_kind 0x00000395
    0x00000E42 bc *s8 >|2| 0x00000E40< to __funcptr_type_kind
    0x00000E43 store *__funcptr_type_kind >|2| 0x00000E41<, __funcptr_type_kind >|2| 0x00000E42<
    0x00000E44 call ag5 "openglGetProcAddress" (cstroflen 30 "glImageTransformParameterivHP") *s8
    0x00000E45 gvar *__funcptr_type_kind 0x00000396
    0x00000E46 bc *s8 >|2| 0x00000E44< to __funcptr_type_kind
    0x00000E47 store *__funcptr_type_kind >|2| 0x00000E45<, __funcptr_type_kind >|2| 0x00000E46<
    0x00000E48 call ag5 "openglGetProcAddress" (cstroflen 15 "glIndexFuncEXT") *s8
    0x00000E49 gvar *__funcptr_type_kind 0x00000397
    0x00000E4A bc *s8 >|2| 0x00000E48< to __funcptr_type_kind
    0x00000E4B store *__funcptr_type_kind >|2| 0x00000E49<, __funcptr_type_kind >|2| 0x00000E4A<
    0x00000E4C call ag5 "openglGetProcAddress" (cstroflen 19 "glIndexMaterialEXT") *s8
    0x00000E4D gvar *__funcptr_type_kind 0x00000398
    0x00000E4E bc *s8 >|2| 0x00000E4C< to __funcptr_type_kind
    0x00000E4F store *__funcptr_type_kind >|2| 0x00000E4D<, __funcptr_type_kind >|2| 0x00000E4E<
    0x00000E50 call ag5 "openglGetProcAddress" (cstroflen 18 "glIndexPointerEXT") *s8
    0x00000E51 gvar *__funcptr_type_kind 0x00000399
    0x00000E52 bc *s8 >|2| 0x00000E50< to __funcptr_type_kind
    0x00000E53 store *__funcptr_type_kind >|2| 0x00000E51<, __funcptr_type_kind >|2| 0x00000E52<
    0x00000E54 call ag5 "openglGetProcAddress" (cstroflen 22 "glIndexPointerListIBM") *s8
    0x00000E55 gvar *__funcptr_type_kind 0x0000039A
    0x00000E56 bc *s8 >|2| 0x00000E54< to __funcptr_type_kind
    0x00000E57 store *__funcptr_type_kind >|2| 0x00000E55<, __funcptr_type_kind >|2| 0x00000E56<
    0x00000E58 call ag5 "openglGetProcAddress" (cstroflen 21 "glInsertComponentEXT") *s8
    0x00000E59 gvar *__funcptr_type_kind 0x0000039B
    0x00000E5A bc *s8 >|2| 0x00000E58< to __funcptr_type_kind
    0x00000E5B store *__funcptr_type_kind >|2| 0x00000E59<, __funcptr_type_kind >|2| 0x00000E5A<
    0x00000E5C call ag5 "openglGetProcAddress" (cstroflen 23 "glInsertEventMarkerEXT") *s8
    0x00000E5D gvar *__funcptr_type_kind 0x0000039C
    0x00000E5E bc *s8 >|2| 0x00000E5C< to __funcptr_type_kind
    0x00000E5F store *__funcptr_type_kind >|2| 0x00000E5D<, __funcptr_type_kind >|2| 0x00000E5E<
    0x00000E60 call ag5 "openglGetProcAddress" (cstroflen 21 "glInterpolatePathsNV") *s8
    0x00000E61 gvar *__funcptr_type_kind 0x0000039D
    0x00000E62 bc *s8 >|2| 0x00000E60< to __funcptr_type_kind
    0x00000E63 store *__funcptr_type_kind >|2| 0x00000E61<, __funcptr_type_kind >|2| 0x00000E62<
    0x00000E64 call ag5 "openglGetProcAddress" (cstroflen 23 "glInvalidateBufferData") *s8
    0x00000E65 gvar *__funcptr_type_kind 0x0000039E
    0x00000E66 bc *s8 >|2| 0x00000E64< to __funcptr_type_kind
    0x00000E67 store *__funcptr_type_kind >|2| 0x00000E65<, __funcptr_type_kind >|2| 0x00000E66<
    0x00000E68 call ag5 "openglGetProcAddress" (cstroflen 26 "glInvalidateBufferSubData") *s8
    0x00000E69 gvar *__funcptr_type_kind 0x0000039F
    0x00000E6A bc *s8 >|2| 0x00000E68< to __funcptr_type_kind
    0x00000E6B store *__funcptr_type_kind >|2| 0x00000E69<, __funcptr_type_kind >|2| 0x00000E6A<
    0x00000E6C call ag5 "openglGetProcAddress" (cstroflen 24 "glInvalidateFramebuffer") *s8
    0x00000E6D gvar *__funcptr_type_kind 0x000003A0
    0x00000E6E bc *s8 >|2| 0x00000E6C< to __funcptr_type_kind
    0x00000E6F store *__funcptr_type_kind >|2| 0x00000E6D<, __funcptr_type_kind >|2| 0x00000E6E<
    0x00000E70 call ag5 "openglGetProcAddress" (cstroflen 33 "glInvalidateNamedFramebufferData") *s8
    0x00000E71 gvar *__funcptr_type_kind 0x000003A1
    0x00000E72 bc *s8 >|2| 0x00000E70< to __funcptr_type_kind
    0x00000E73 store *__funcptr_type_kind >|2| 0x00000E71<, __funcptr_type_kind >|2| 0x00000E72<
    0x00000E74 call ag5 "openglGetProcAddress" (cstroflen 36 "glInvalidateNamedFramebufferSubData") *s8
    0x00000E75 gvar *__funcptr_type_kind 0x000003A2
    0x00000E76 bc *s8 >|2| 0x00000E74< to __funcptr_type_kind
    0x00000E77 store *__funcptr_type_kind >|2| 0x00000E75<, __funcptr_type_kind >|2| 0x00000E76<
    0x00000E78 call ag5 "openglGetProcAddress" (cstroflen 27 "glInvalidateSubFramebuffer") *s8
    0x00000E79 gvar *__funcptr_type_kind 0x000003A3
    0x00000E7A bc *s8 >|2| 0x00000E78< to __funcptr_type_kind
    0x00000E7B store *__funcptr_type_kind >|2| 0x00000E79<, __funcptr_type_kind >|2| 0x00000E7A<
    0x00000E7C call ag5 "openglGetProcAddress" (cstroflen 21 "glInvalidateTexImage") *s8
    0x00000E7D gvar *__funcptr_type_kind 0x000003A4
    0x00000E7E bc *s8 >|2| 0x00000E7C< to __funcptr_type_kind
    0x00000E7F store *__funcptr_type_kind >|2| 0x00000E7D<, __funcptr_type_kind >|2| 0x00000E7E<
    0x00000E80 call ag5 "openglGetProcAddress" (cstroflen 24 "glInvalidateTexSubImage") *s8
    0x00000E81 gvar *__funcptr_type_kind 0x000003A5
    0x00000E82 bc *s8 >|2| 0x00000E80< to __funcptr_type_kind
    0x00000E83 store *__funcptr_type_kind >|2| 0x00000E81<, __funcptr_type_kind >|2| 0x00000E82<
    0x00000E84 call ag5 "openglGetProcAddress" (cstroflen 17 "glLabelObjectEXT") *s8
    0x00000E85 gvar *__funcptr_type_kind 0x000003A6
    0x00000E86 bc *s8 >|2| 0x00000E84< to __funcptr_type_kind
    0x00000E87 store *__funcptr_type_kind >|2| 0x00000E85<, __funcptr_type_kind >|2| 0x00000E86<
    0x00000E88 call ag5 "openglGetProcAddress" (cstroflen 15 "glLightEnviEXT") *s8
    0x00000E89 gvar *__funcptr_type_kind 0x000003A7
    0x00000E8A bc *s8 >|2| 0x00000E88< to __funcptr_type_kind
    0x00000E8B store *__funcptr_type_kind >|2| 0x00000E89<, __funcptr_type_kind >|2| 0x00000E8A<
    0x00000E8C call ag5 "openglGetProcAddress" (cstroflen 14 "glLightModelx") *s8
    0x00000E8D gvar *__funcptr_type_kind 0x000003A8
    0x00000E8E bc *s8 >|2| 0x00000E8C< to __funcptr_type_kind
    0x00000E8F store *__funcptr_type_kind >|2| 0x00000E8D<, __funcptr_type_kind >|2| 0x00000E8E<
    0x00000E90 call ag5 "openglGetProcAddress" (cstroflen 15 "glLightModelxv") *s8
    0x00000E91 gvar *__funcptr_type_kind 0x000003A9
    0x00000E92 bc *s8 >|2| 0x00000E90< to __funcptr_type_kind
    0x00000E93 store *__funcptr_type_kind >|2| 0x00000E91<, __funcptr_type_kind >|2| 0x00000E92<
    0x00000E94 call ag5 "openglGetProcAddress" (cstroflen 9 "glLightx") *s8
    0x00000E95 gvar *__funcptr_type_kind 0x000003AA
    0x00000E96 bc *s8 >|2| 0x00000E94< to __funcptr_type_kind
    0x00000E97 store *__funcptr_type_kind >|2| 0x00000E95<, __funcptr_type_kind >|2| 0x00000E96<
    0x00000E98 call ag5 "openglGetProcAddress" (cstroflen 10 "glLightxv") *s8
    0x00000E99 gvar *__funcptr_type_kind 0x000003AB
    0x00000E9A bc *s8 >|2| 0x00000E98< to __funcptr_type_kind
    0x00000E9B store *__funcptr_type_kind >|2| 0x00000E99<, __funcptr_type_kind >|2| 0x00000E9A<
    0x00000E9C call ag5 "openglGetProcAddress" (cstroflen 13 "glLineWidthx") *s8
    0x00000E9D gvar *__funcptr_type_kind 0x000003AC
    0x00000E9E bc *s8 >|2| 0x00000E9C< to __funcptr_type_kind
    0x00000E9F store *__funcptr_type_kind >|2| 0x00000E9D<, __funcptr_type_kind >|2| 0x00000E9E<
    0x00000EA0 call ag5 "openglGetProcAddress" (cstroflen 17 "glLinkProgramARB") *s8
    0x00000EA1 gvar *__funcptr_type_kind 0x000003AD
    0x00000EA2 bc *s8 >|2| 0x00000EA0< to __funcptr_type_kind
    0x00000EA3 store *__funcptr_type_kind >|2| 0x00000EA1<, __funcptr_type_kind >|2| 0x00000EA2<
    0x00000EA4 call ag5 "openglGetProcAddress" (cstroflen 14 "glLinkProgram") *s8
    0x00000EA5 gvar *__funcptr_type_kind 0x000003AE
    0x00000EA6 bc *s8 >|2| 0x00000EA4< to __funcptr_type_kind
    0x00000EA7 store *__funcptr_type_kind >|2| 0x00000EA5<, __funcptr_type_kind >|2| 0x00000EA6<
    0x00000EA8 call ag5 "openglGetProcAddress" (cstroflen 14 "glLoadMatrixx") *s8
    0x00000EA9 gvar *__funcptr_type_kind 0x000003AF
    0x00000EAA bc *s8 >|2| 0x00000EA8< to __funcptr_type_kind
    0x00000EAB store *__funcptr_type_kind >|2| 0x00000EA9<, __funcptr_type_kind >|2| 0x00000EAA<
    0x00000EAC call ag5 "openglGetProcAddress" (cstroflen 16 "glLoadProgramNV") *s8
    0x00000EAD gvar *__funcptr_type_kind 0x000003B0
    0x00000EAE bc *s8 >|2| 0x00000EAC< to __funcptr_type_kind
    0x00000EAF store *__funcptr_type_kind >|2| 0x00000EAD<, __funcptr_type_kind >|2| 0x00000EAE<
    0x00000EB0 call ag5 "openglGetProcAddress" (cstroflen 26 "glLoadTransposeMatrixdARB") *s8
    0x00000EB1 gvar *__funcptr_type_kind 0x000003B1
    0x00000EB2 bc *s8 >|2| 0x00000EB0< to __funcptr_type_kind
    0x00000EB3 store *__funcptr_type_kind >|2| 0x00000EB1<, __funcptr_type_kind >|2| 0x00000EB2<
    0x00000EB4 call ag5 "openglGetProcAddress" (cstroflen 23 "glLoadTransposeMatrixd") *s8
    0x00000EB5 gvar *__funcptr_type_kind 0x000003B2
    0x00000EB6 bc *s8 >|2| 0x00000EB4< to __funcptr_type_kind
    0x00000EB7 store *__funcptr_type_kind >|2| 0x00000EB5<, __funcptr_type_kind >|2| 0x00000EB6<
    0x00000EB8 call ag5 "openglGetProcAddress" (cstroflen 16 "glLockArraysEXT") *s8
    0x00000EB9 gvar *__funcptr_type_kind 0x000003B3
    0x00000EBA bc *s8 >|2| 0x00000EB8< to __funcptr_type_kind
    0x00000EBB store *__funcptr_type_kind >|2| 0x00000EB9<, __funcptr_type_kind >|2| 0x00000EBA<
    0x00000EBC call ag5 "openglGetProcAddress" (cstroflen 26 "glLogMessageCallbackREGAL") *s8
    0x00000EBD gvar *__funcptr_type_kind 0x000003B4
    0x00000EBE bc *s8 >|2| 0x00000EBC< to __funcptr_type_kind
    0x00000EBF store *__funcptr_type_kind >|2| 0x00000EBD<, __funcptr_type_kind >|2| 0x00000EBE<
    0x00000EC0 call ag5 "openglGetProcAddress" (cstroflen 26 "glMakeBufferNonResidentNV") *s8
    0x00000EC1 gvar *__funcptr_type_kind 0x000003B5
    0x00000EC2 bc *s8 >|2| 0x00000EC0< to __funcptr_type_kind
    0x00000EC3 store *__funcptr_type_kind >|2| 0x00000EC1<, __funcptr_type_kind >|2| 0x00000EC2<
    0x00000EC4 call ag5 "openglGetProcAddress" (cstroflen 23 "glMakeBufferResidentNV") *s8
    0x00000EC5 gvar *__funcptr_type_kind 0x000003B6
    0x00000EC6 bc *s8 >|2| 0x00000EC4< to __funcptr_type_kind
    0x00000EC7 store *__funcptr_type_kind >|2| 0x00000EC5<, __funcptr_type_kind >|2| 0x00000EC6<
    0x00000EC8 call ag5 "openglGetProcAddress" (cstroflen 32 "glMakeImageHandleNonResidentARB") *s8
    0x00000EC9 gvar *__funcptr_type_kind 0x000003B7
    0x00000ECA bc *s8 >|2| 0x00000EC8< to __funcptr_type_kind
    0x00000ECB store *__funcptr_type_kind >|2| 0x00000EC9<, __funcptr_type_kind >|2| 0x00000ECA<
    0x00000ECC call ag5 "openglGetProcAddress" (cstroflen 31 "glMakeImageHandleNonResidentNV") *s8
    0x00000ECD gvar *__funcptr_type_kind 0x000003B8
    0x00000ECE bc *s8 >|2| 0x00000ECC< to __funcptr_type_kind
    0x00000ECF store *__funcptr_type_kind >|2| 0x00000ECD<, __funcptr_type_kind >|2| 0x00000ECE<
    0x00000ED0 call ag5 "openglGetProcAddress" (cstroflen 29 "glMakeImageHandleResidentARB") *s8
    0x00000ED1 gvar *__funcptr_type_kind 0x000003B9
    0x00000ED2 bc *s8 >|2| 0x00000ED0< to __funcptr_type_kind
    0x00000ED3 store *__funcptr_type_kind >|2| 0x00000ED1<, __funcptr_type_kind >|2| 0x00000ED2<
    0x00000ED4 call ag5 "openglGetProcAddress" (cstroflen 28 "glMakeImageHandleResidentNV") *s8
    0x00000ED5 gvar *__funcptr_type_kind 0x000003BA
    0x00000ED6 bc *s8 >|2| 0x00000ED4< to __funcptr_type_kind
    0x00000ED7 store *__funcptr_type_kind >|2| 0x00000ED5<, __funcptr_type_kind >|2| 0x00000ED6<
    0x00000ED8 call ag5 "openglGetProcAddress" (cstroflen 31 "glMakeNamedBufferNonResidentNV") *s8
    0x00000ED9 gvar *__funcptr_type_kind 0x000003BB
    0x00000EDA bc *s8 >|2| 0x00000ED8< to __funcptr_type_kind
    0x00000EDB store *__funcptr_type_kind >|2| 0x00000ED9<, __funcptr_type_kind >|2| 0x00000EDA<
    0x00000EDC call ag5 "openglGetProcAddress" (cstroflen 28 "glMakeNamedBufferResidentNV") *s8
    0x00000EDD gvar *__funcptr_type_kind 0x000003BC
    0x00000EDE bc *s8 >|2| 0x00000EDC< to __funcptr_type_kind
    0x00000EDF store *__funcptr_type_kind >|2| 0x00000EDD<, __funcptr_type_kind >|2| 0x00000EDE<
    0x00000EE0 call ag5 "openglGetProcAddress" (cstroflen 34 "glMakeTextureHandleNonResidentARB") *s8
    0x00000EE1 gvar *__funcptr_type_kind 0x000003BD
    0x00000EE2 bc *s8 >|2| 0x00000EE0< to __funcptr_type_kind
    0x00000EE3 store *__funcptr_type_kind >|2| 0x00000EE1<, __funcptr_type_kind >|2| 0x00000EE2<
    0x00000EE4 call ag5 "openglGetProcAddress" (cstroflen 33 "glMakeTextureHandleNonResidentNV") *s8
    0x00000EE5 gvar *__funcptr_type_kind 0x000003BE
    0x00000EE6 bc *s8 >|2| 0x00000EE4< to __funcptr_type_kind
    0x00000EE7 store *__funcptr_type_kind >|2| 0x00000EE5<, __funcptr_type_kind >|2| 0x00000EE6<
    0x00000EE8 call ag5 "openglGetProcAddress" (cstroflen 31 "glMakeTextureHandleResidentARB") *s8
    0x00000EE9 gvar *__funcptr_type_kind 0x000003BF
    0x00000EEA bc *s8 >|2| 0x00000EE8< to __funcptr_type_kind
    0x00000EEB store *__funcptr_type_kind >|2| 0x00000EE9<, __funcptr_type_kind >|2| 0x00000EEA<
    0x00000EEC call ag5 "openglGetProcAddress" (cstroflen 30 "glMakeTextureHandleResidentNV") *s8
    0x00000EED gvar *__funcptr_type_kind 0x000003C0
    0x00000EEE bc *s8 >|2| 0x00000EEC< to __funcptr_type_kind
    0x00000EEF store *__funcptr_type_kind >|2| 0x00000EED<, __funcptr_type_kind >|2| 0x00000EEE<
    0x00000EF0 call ag5 "openglGetProcAddress" (cstroflen 21 "glMapControlPointsNV") *s8
    0x00000EF1 gvar *__funcptr_type_kind 0x000003C1
    0x00000EF2 bc *s8 >|2| 0x00000EF0< to __funcptr_type_kind
    0x00000EF3 store *__funcptr_type_kind >|2| 0x00000EF1<, __funcptr_type_kind >|2| 0x00000EF2<
    0x00000EF4 call ag5 "openglGetProcAddress" (cstroflen 19 "glMapParameterfvNV") *s8
    0x00000EF5 gvar *__funcptr_type_kind 0x000003C2
    0x00000EF6 bc *s8 >|2| 0x00000EF4< to __funcptr_type_kind
    0x00000EF7 store *__funcptr_type_kind >|2| 0x00000EF5<, __funcptr_type_kind >|2| 0x00000EF6<
    0x00000EF8 call ag5 "openglGetProcAddress" (cstroflen 19 "glMapParameterivNV") *s8
    0x00000EF9 gvar *__funcptr_type_kind 0x000003C3
    0x00000EFA bc *s8 >|2| 0x00000EF8< to __funcptr_type_kind
    0x00000EFB store *__funcptr_type_kind >|2| 0x00000EF9<, __funcptr_type_kind >|2| 0x00000EFA<
    0x00000EFC call ag5 "openglGetProcAddress" (cstroflen 25 "glMapVertexAttrib1dAPPLE") *s8
    0x00000EFD gvar *__funcptr_type_kind 0x000003C4
    0x00000EFE bc *s8 >|2| 0x00000EFC< to __funcptr_type_kind
    0x00000EFF store *__funcptr_type_kind >|2| 0x00000EFD<, __funcptr_type_kind >|2| 0x00000EFE<
    0x00000F00 call ag5 "openglGetProcAddress" (cstroflen 25 "glMapVertexAttrib1fAPPLE") *s8
    0x00000F01 gvar *__funcptr_type_kind 0x000003C5
    0x00000F02 bc *s8 >|2| 0x00000F00< to __funcptr_type_kind
    0x00000F03 store *__funcptr_type_kind >|2| 0x00000F01<, __funcptr_type_kind >|2| 0x00000F02<
    0x00000F04 call ag5 "openglGetProcAddress" (cstroflen 25 "glMapVertexAttrib2dAPPLE") *s8
    0x00000F05 gvar *__funcptr_type_kind 0x000003C6
    0x00000F06 bc *s8 >|2| 0x00000F04< to __funcptr_type_kind
    0x00000F07 store *__funcptr_type_kind >|2| 0x00000F05<, __funcptr_type_kind >|2| 0x00000F06<
    0x00000F08 call ag5 "openglGetProcAddress" (cstroflen 25 "glMapVertexAttrib2fAPPLE") *s8
    0x00000F09 gvar *__funcptr_type_kind 0x000003C7
    0x00000F0A bc *s8 >|2| 0x00000F08< to __funcptr_type_kind
    0x00000F0B store *__funcptr_type_kind >|2| 0x00000F09<, __funcptr_type_kind >|2| 0x00000F0A<
    0x00000F0C call ag5 "openglGetProcAddress" (cstroflen 12 "glMaterialx") *s8
    0x00000F0D gvar *__funcptr_type_kind 0x000003C8
    0x00000F0E bc *s8 >|2| 0x00000F0C< to __funcptr_type_kind
    0x00000F0F store *__funcptr_type_kind >|2| 0x00000F0D<, __funcptr_type_kind >|2| 0x00000F0E<
    0x00000F10 call ag5 "openglGetProcAddress" (cstroflen 13 "glMaterialxv") *s8
    0x00000F11 gvar *__funcptr_type_kind 0x000003C9
    0x00000F12 bc *s8 >|2| 0x00000F10< to __funcptr_type_kind
    0x00000F13 store *__funcptr_type_kind >|2| 0x00000F11<, __funcptr_type_kind >|2| 0x00000F12<
    0x00000F14 call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixFrustumEXT") *s8
    0x00000F15 gvar *__funcptr_type_kind 0x000003CA
    0x00000F16 bc *s8 >|2| 0x00000F14< to __funcptr_type_kind
    0x00000F17 store *__funcptr_type_kind >|2| 0x00000F15<, __funcptr_type_kind >|2| 0x00000F16<
    0x00000F18 call ag5 "openglGetProcAddress" (cstroflen 24 "glMatrixIndexPointerARB") *s8
    0x00000F19 gvar *__funcptr_type_kind 0x000003CB
    0x00000F1A bc *s8 >|2| 0x00000F18< to __funcptr_type_kind
    0x00000F1B store *__funcptr_type_kind >|2| 0x00000F19<, __funcptr_type_kind >|2| 0x00000F1A<
    0x00000F1C call ag5 "openglGetProcAddress" (cstroflen 20 "glMatrixIndexubvARB") *s8
    0x00000F1D gvar *__funcptr_type_kind 0x000003CC
    0x00000F1E bc *s8 >|2| 0x00000F1C< to __funcptr_type_kind
    0x00000F1F store *__funcptr_type_kind >|2| 0x00000F1D<, __funcptr_type_kind >|2| 0x00000F1E<
    0x00000F20 call ag5 "openglGetProcAddress" (cstroflen 20 "glMatrixIndexuivARB") *s8
    0x00000F21 gvar *__funcptr_type_kind 0x000003CD
    0x00000F22 bc *s8 >|2| 0x00000F20< to __funcptr_type_kind
    0x00000F23 store *__funcptr_type_kind >|2| 0x00000F21<, __funcptr_type_kind >|2| 0x00000F22<
    0x00000F24 call ag5 "openglGetProcAddress" (cstroflen 20 "glMatrixIndexusvARB") *s8
    0x00000F25 gvar *__funcptr_type_kind 0x000003CE
    0x00000F26 bc *s8 >|2| 0x00000F24< to __funcptr_type_kind
    0x00000F27 store *__funcptr_type_kind >|2| 0x00000F25<, __funcptr_type_kind >|2| 0x00000F26<
    0x00000F28 call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixLoad3x2fNV") *s8
    0x00000F29 gvar *__funcptr_type_kind 0x000003CF
    0x00000F2A bc *s8 >|2| 0x00000F28< to __funcptr_type_kind
    0x00000F2B store *__funcptr_type_kind >|2| 0x00000F29<, __funcptr_type_kind >|2| 0x00000F2A<
    0x00000F2C call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixLoad3x3fNV") *s8
    0x00000F2D gvar *__funcptr_type_kind 0x000003D0
    0x00000F2E bc *s8 >|2| 0x00000F2C< to __funcptr_type_kind
    0x00000F2F store *__funcptr_type_kind >|2| 0x00000F2D<, __funcptr_type_kind >|2| 0x00000F2E<
    0x00000F30 call ag5 "openglGetProcAddress" (cstroflen 17 "glMatrixLoaddEXT") *s8
    0x00000F31 gvar *__funcptr_type_kind 0x000003D1
    0x00000F32 bc *s8 >|2| 0x00000F30< to __funcptr_type_kind
    0x00000F33 store *__funcptr_type_kind >|2| 0x00000F31<, __funcptr_type_kind >|2| 0x00000F32<
    0x00000F34 call ag5 "openglGetProcAddress" (cstroflen 17 "glMatrixLoadfEXT") *s8
    0x00000F35 gvar *__funcptr_type_kind 0x000003D2
    0x00000F36 bc *s8 >|2| 0x00000F34< to __funcptr_type_kind
    0x00000F37 store *__funcptr_type_kind >|2| 0x00000F35<, __funcptr_type_kind >|2| 0x00000F36<
    0x00000F38 call ag5 "openglGetProcAddress" (cstroflen 24 "glMatrixLoadIdentityEXT") *s8
    0x00000F39 gvar *__funcptr_type_kind 0x000003D3
    0x00000F3A bc *s8 >|2| 0x00000F38< to __funcptr_type_kind
    0x00000F3B store *__funcptr_type_kind >|2| 0x00000F39<, __funcptr_type_kind >|2| 0x00000F3A<
    0x00000F3C call ag5 "openglGetProcAddress" (cstroflen 28 "glMatrixLoadTranspose3x3fNV") *s8
    0x00000F3D gvar *__funcptr_type_kind 0x000003D4
    0x00000F3E bc *s8 >|2| 0x00000F3C< to __funcptr_type_kind
    0x00000F3F store *__funcptr_type_kind >|2| 0x00000F3D<, __funcptr_type_kind >|2| 0x00000F3E<
    0x00000F40 call ag5 "openglGetProcAddress" (cstroflen 26 "glMatrixLoadTransposedEXT") *s8
    0x00000F41 gvar *__funcptr_type_kind 0x000003D5
    0x00000F42 bc *s8 >|2| 0x00000F40< to __funcptr_type_kind
    0x00000F43 store *__funcptr_type_kind >|2| 0x00000F41<, __funcptr_type_kind >|2| 0x00000F42<
    0x00000F44 call ag5 "openglGetProcAddress" (cstroflen 26 "glMatrixLoadTransposefEXT") *s8
    0x00000F45 gvar *__funcptr_type_kind 0x000003D6
    0x00000F46 bc *s8 >|2| 0x00000F44< to __funcptr_type_kind
    0x00000F47 store *__funcptr_type_kind >|2| 0x00000F45<, __funcptr_type_kind >|2| 0x00000F46<
    0x00000F48 call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixMult3x2fNV") *s8
    0x00000F49 gvar *__funcptr_type_kind 0x000003D7
    0x00000F4A bc *s8 >|2| 0x00000F48< to __funcptr_type_kind
    0x00000F4B store *__funcptr_type_kind >|2| 0x00000F49<, __funcptr_type_kind >|2| 0x00000F4A<
    0x00000F4C call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixMult3x3fNV") *s8
    0x00000F4D gvar *__funcptr_type_kind 0x000003D8
    0x00000F4E bc *s8 >|2| 0x00000F4C< to __funcptr_type_kind
    0x00000F4F store *__funcptr_type_kind >|2| 0x00000F4D<, __funcptr_type_kind >|2| 0x00000F4E<
    0x00000F50 call ag5 "openglGetProcAddress" (cstroflen 17 "glMatrixMultdEXT") *s8
    0x00000F51 gvar *__funcptr_type_kind 0x000003D9
    0x00000F52 bc *s8 >|2| 0x00000F50< to __funcptr_type_kind
    0x00000F53 store *__funcptr_type_kind >|2| 0x00000F51<, __funcptr_type_kind >|2| 0x00000F52<
    0x00000F54 call ag5 "openglGetProcAddress" (cstroflen 17 "glMatrixMultfEXT") *s8
    0x00000F55 gvar *__funcptr_type_kind 0x000003DA
    0x00000F56 bc *s8 >|2| 0x00000F54< to __funcptr_type_kind
    0x00000F57 store *__funcptr_type_kind >|2| 0x00000F55<, __funcptr_type_kind >|2| 0x00000F56<
    0x00000F58 call ag5 "openglGetProcAddress" (cstroflen 28 "glMatrixMultTranspose3x3fNV") *s8
    0x00000F59 gvar *__funcptr_type_kind 0x000003DB
    0x00000F5A bc *s8 >|2| 0x00000F58< to __funcptr_type_kind
    0x00000F5B store *__funcptr_type_kind >|2| 0x00000F59<, __funcptr_type_kind >|2| 0x00000F5A<
    0x00000F5C call ag5 "openglGetProcAddress" (cstroflen 26 "glMatrixMultTransposedEXT") *s8
    0x00000F5D gvar *__funcptr_type_kind 0x000003DC
    0x00000F5E bc *s8 >|2| 0x00000F5C< to __funcptr_type_kind
    0x00000F5F store *__funcptr_type_kind >|2| 0x00000F5D<, __funcptr_type_kind >|2| 0x00000F5E<
    0x00000F60 call ag5 "openglGetProcAddress" (cstroflen 26 "glMatrixMultTransposefEXT") *s8
    0x00000F61 gvar *__funcptr_type_kind 0x000003DD
    0x00000F62 bc *s8 >|2| 0x00000F60< to __funcptr_type_kind
    0x00000F63 store *__funcptr_type_kind >|2| 0x00000F61<, __funcptr_type_kind >|2| 0x00000F62<
    0x00000F64 call ag5 "openglGetProcAddress" (cstroflen 17 "glMatrixOrthoEXT") *s8
    0x00000F65 gvar *__funcptr_type_kind 0x000003DE
    0x00000F66 bc *s8 >|2| 0x00000F64< to __funcptr_type_kind
    0x00000F67 store *__funcptr_type_kind >|2| 0x00000F65<, __funcptr_type_kind >|2| 0x00000F66<
    0x00000F68 call ag5 "openglGetProcAddress" (cstroflen 15 "glMatrixPopEXT") *s8
    0x00000F69 gvar *__funcptr_type_kind 0x000003DF
    0x00000F6A bc *s8 >|2| 0x00000F68< to __funcptr_type_kind
    0x00000F6B store *__funcptr_type_kind >|2| 0x00000F69<, __funcptr_type_kind >|2| 0x00000F6A<
    0x00000F6C call ag5 "openglGetProcAddress" (cstroflen 16 "glMatrixPushEXT") *s8
    0x00000F6D gvar *__funcptr_type_kind 0x000003E0
    0x00000F6E bc *s8 >|2| 0x00000F6C< to __funcptr_type_kind
    0x00000F6F store *__funcptr_type_kind >|2| 0x00000F6D<, __funcptr_type_kind >|2| 0x00000F6E<
    0x00000F70 call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixRotatedEXT") *s8
    0x00000F71 gvar *__funcptr_type_kind 0x000003E1
    0x00000F72 bc *s8 >|2| 0x00000F70< to __funcptr_type_kind
    0x00000F73 store *__funcptr_type_kind >|2| 0x00000F71<, __funcptr_type_kind >|2| 0x00000F72<
    0x00000F74 call ag5 "openglGetProcAddress" (cstroflen 19 "glMatrixRotatefEXT") *s8
    0x00000F75 gvar *__funcptr_type_kind 0x000003E2
    0x00000F76 bc *s8 >|2| 0x00000F74< to __funcptr_type_kind
    0x00000F77 store *__funcptr_type_kind >|2| 0x00000F75<, __funcptr_type_kind >|2| 0x00000F76<
    0x00000F78 call ag5 "openglGetProcAddress" (cstroflen 18 "glMatrixScaledEXT") *s8
    0x00000F79 gvar *__funcptr_type_kind 0x000003E3
    0x00000F7A bc *s8 >|2| 0x00000F78< to __funcptr_type_kind
    0x00000F7B store *__funcptr_type_kind >|2| 0x00000F79<, __funcptr_type_kind >|2| 0x00000F7A<
    0x00000F7C call ag5 "openglGetProcAddress" (cstroflen 18 "glMatrixScalefEXT") *s8
    0x00000F7D gvar *__funcptr_type_kind 0x000003E4
    0x00000F7E bc *s8 >|2| 0x00000F7C< to __funcptr_type_kind
    0x00000F7F store *__funcptr_type_kind >|2| 0x00000F7D<, __funcptr_type_kind >|2| 0x00000F7E<
    0x00000F80 call ag5 "openglGetProcAddress" (cstroflen 22 "glMatrixTranslatedEXT") *s8
    0x00000F81 gvar *__funcptr_type_kind 0x000003E5
    0x00000F82 bc *s8 >|2| 0x00000F80< to __funcptr_type_kind
    0x00000F83 store *__funcptr_type_kind >|2| 0x00000F81<, __funcptr_type_kind >|2| 0x00000F82<
    0x00000F84 call ag5 "openglGetProcAddress" (cstroflen 22 "glMatrixTranslatefEXT") *s8
    0x00000F85 gvar *__funcptr_type_kind 0x000003E6
    0x00000F86 bc *s8 >|2| 0x00000F84< to __funcptr_type_kind
    0x00000F87 store *__funcptr_type_kind >|2| 0x00000F85<, __funcptr_type_kind >|2| 0x00000F86<
    0x00000F88 call ag5 "openglGetProcAddress" (cstroflen 30 "glMaxShaderCompilerThreadsARB") *s8
    0x00000F89 gvar *__funcptr_type_kind 0x000003E7
    0x00000F8A bc *s8 >|2| 0x00000F88< to __funcptr_type_kind
    0x00000F8B store *__funcptr_type_kind >|2| 0x00000F89<, __funcptr_type_kind >|2| 0x00000F8A<
    0x00000F8C call ag5 "openglGetProcAddress" (cstroflen 24 "glMemoryBarrierByRegion") *s8
    0x00000F8D gvar *__funcptr_type_kind 0x000003E8
    0x00000F8E bc *s8 >|2| 0x00000F8C< to __funcptr_type_kind
    0x00000F8F store *__funcptr_type_kind >|2| 0x00000F8D<, __funcptr_type_kind >|2| 0x00000F8E<
    0x00000F90 call ag5 "openglGetProcAddress" (cstroflen 19 "glMemoryBarrierEXT") *s8
    0x00000F91 gvar *__funcptr_type_kind 0x000003E9
    0x00000F92 bc *s8 >|2| 0x00000F90< to __funcptr_type_kind
    0x00000F93 store *__funcptr_type_kind >|2| 0x00000F91<, __funcptr_type_kind >|2| 0x00000F92<
    0x00000F94 call ag5 "openglGetProcAddress" (cstroflen 16 "glMemoryBarrier") *s8
    0x00000F95 gvar *__funcptr_type_kind 0x000003EA
    0x00000F96 bc *s8 >|2| 0x00000F94< to __funcptr_type_kind
    0x00000F97 store *__funcptr_type_kind >|2| 0x00000F95<, __funcptr_type_kind >|2| 0x00000F96<
    0x00000F98 call ag5 "openglGetProcAddress" (cstroflen 12 "glMinmaxEXT") *s8
    0x00000F99 gvar *__funcptr_type_kind 0x000003EB
    0x00000F9A bc *s8 >|2| 0x00000F98< to __funcptr_type_kind
    0x00000F9B store *__funcptr_type_kind >|2| 0x00000F99<, __funcptr_type_kind >|2| 0x00000F9A<
    0x00000F9C call ag5 "openglGetProcAddress" (cstroflen 9 "glMinmax") *s8
    0x00000F9D gvar *__funcptr_type_kind 0x000003EC
    0x00000F9E bc *s8 >|2| 0x00000F9C< to __funcptr_type_kind
    0x00000F9F store *__funcptr_type_kind >|2| 0x00000F9D<, __funcptr_type_kind >|2| 0x00000F9E<
    0x00000FA0 call ag5 "openglGetProcAddress" (cstroflen 22 "glMinSampleShadingARB") *s8
    0x00000FA1 gvar *__funcptr_type_kind 0x000003ED
    0x00000FA2 bc *s8 >|2| 0x00000FA0< to __funcptr_type_kind
    0x00000FA3 store *__funcptr_type_kind >|2| 0x00000FA1<, __funcptr_type_kind >|2| 0x00000FA2<
    0x00000FA4 call ag5 "openglGetProcAddress" (cstroflen 19 "glMinSampleShading") *s8
    0x00000FA5 gvar *__funcptr_type_kind 0x000003EE
    0x00000FA6 bc *s8 >|2| 0x00000FA4< to __funcptr_type_kind
    0x00000FA7 store *__funcptr_type_kind >|2| 0x00000FA5<, __funcptr_type_kind >|2| 0x00000FA6<
    0x00000FA8 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiDrawArraysEXT") *s8
    0x00000FA9 gvar *__funcptr_type_kind 0x000003EF
    0x00000FAA bc *s8 >|2| 0x00000FA8< to __funcptr_type_kind
    0x00000FAB store *__funcptr_type_kind >|2| 0x00000FA9<, __funcptr_type_kind >|2| 0x00000FAA<
    0x00000FAC call ag5 "openglGetProcAddress" (cstroflen 29 "glMultiDrawArraysIndirectAMD") *s8
    0x00000FAD gvar *__funcptr_type_kind 0x000003F0
    0x00000FAE bc *s8 >|2| 0x00000FAC< to __funcptr_type_kind
    0x00000FAF store *__funcptr_type_kind >|2| 0x00000FAD<, __funcptr_type_kind >|2| 0x00000FAE<
    0x00000FB0 call ag5 "openglGetProcAddress" (cstroflen 41 "glMultiDrawArraysIndirectBindlessCountNV") *s8
    0x00000FB1 gvar *__funcptr_type_kind 0x000003F1
    0x00000FB2 bc *s8 >|2| 0x00000FB0< to __funcptr_type_kind
    0x00000FB3 store *__funcptr_type_kind >|2| 0x00000FB1<, __funcptr_type_kind >|2| 0x00000FB2<
    0x00000FB4 call ag5 "openglGetProcAddress" (cstroflen 36 "glMultiDrawArraysIndirectBindlessNV") *s8
    0x00000FB5 gvar *__funcptr_type_kind 0x000003F2
    0x00000FB6 bc *s8 >|2| 0x00000FB4< to __funcptr_type_kind
    0x00000FB7 store *__funcptr_type_kind >|2| 0x00000FB5<, __funcptr_type_kind >|2| 0x00000FB6<
    0x00000FB8 call ag5 "openglGetProcAddress" (cstroflen 34 "glMultiDrawArraysIndirectCountARB") *s8
    0x00000FB9 gvar *__funcptr_type_kind 0x000003F3
    0x00000FBA bc *s8 >|2| 0x00000FB8< to __funcptr_type_kind
    0x00000FBB store *__funcptr_type_kind >|2| 0x00000FB9<, __funcptr_type_kind >|2| 0x00000FBA<
    0x00000FBC call ag5 "openglGetProcAddress" (cstroflen 26 "glMultiDrawArraysIndirect") *s8
    0x00000FBD gvar *__funcptr_type_kind 0x000003F4
    0x00000FBE bc *s8 >|2| 0x00000FBC< to __funcptr_type_kind
    0x00000FBF store *__funcptr_type_kind >|2| 0x00000FBD<, __funcptr_type_kind >|2| 0x00000FBE<
    0x00000FC0 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiDrawArrays") *s8
    0x00000FC1 gvar *__funcptr_type_kind 0x000003F5
    0x00000FC2 bc *s8 >|2| 0x00000FC0< to __funcptr_type_kind
    0x00000FC3 store *__funcptr_type_kind >|2| 0x00000FC1<, __funcptr_type_kind >|2| 0x00000FC2<
    0x00000FC4 call ag5 "openglGetProcAddress" (cstroflen 29 "glMultiDrawElementArrayAPPLE") *s8
    0x00000FC5 gvar *__funcptr_type_kind 0x000003F6
    0x00000FC6 bc *s8 >|2| 0x00000FC4< to __funcptr_type_kind
    0x00000FC7 store *__funcptr_type_kind >|2| 0x00000FC5<, __funcptr_type_kind >|2| 0x00000FC6<
    0x00000FC8 call ag5 "openglGetProcAddress" (cstroflen 30 "glMultiDrawElementsBaseVertex") *s8
    0x00000FC9 gvar *__funcptr_type_kind 0x000003F7
    0x00000FCA bc *s8 >|2| 0x00000FC8< to __funcptr_type_kind
    0x00000FCB store *__funcptr_type_kind >|2| 0x00000FC9<, __funcptr_type_kind >|2| 0x00000FCA<
    0x00000FCC call ag5 "openglGetProcAddress" (cstroflen 23 "glMultiDrawElementsEXT") *s8
    0x00000FCD gvar *__funcptr_type_kind 0x000003F8
    0x00000FCE bc *s8 >|2| 0x00000FCC< to __funcptr_type_kind
    0x00000FCF store *__funcptr_type_kind >|2| 0x00000FCD<, __funcptr_type_kind >|2| 0x00000FCE<
    0x00000FD0 call ag5 "openglGetProcAddress" (cstroflen 31 "glMultiDrawElementsIndirectAMD") *s8
    0x00000FD1 gvar *__funcptr_type_kind 0x000003F9
    0x00000FD2 bc *s8 >|2| 0x00000FD0< to __funcptr_type_kind
    0x00000FD3 store *__funcptr_type_kind >|2| 0x00000FD1<, __funcptr_type_kind >|2| 0x00000FD2<
    0x00000FD4 call ag5 "openglGetProcAddress" (cstroflen 43 "glMultiDrawElementsIndirectBindlessCountNV") *s8
    0x00000FD5 gvar *__funcptr_type_kind 0x000003FA
    0x00000FD6 bc *s8 >|2| 0x00000FD4< to __funcptr_type_kind
    0x00000FD7 store *__funcptr_type_kind >|2| 0x00000FD5<, __funcptr_type_kind >|2| 0x00000FD6<
    0x00000FD8 call ag5 "openglGetProcAddress" (cstroflen 38 "glMultiDrawElementsIndirectBindlessNV") *s8
    0x00000FD9 gvar *__funcptr_type_kind 0x000003FB
    0x00000FDA bc *s8 >|2| 0x00000FD8< to __funcptr_type_kind
    0x00000FDB store *__funcptr_type_kind >|2| 0x00000FD9<, __funcptr_type_kind >|2| 0x00000FDA<
    0x00000FDC call ag5 "openglGetProcAddress" (cstroflen 36 "glMultiDrawElementsIndirectCountARB") *s8
    0x00000FDD gvar *__funcptr_type_kind 0x000003FC
    0x00000FDE bc *s8 >|2| 0x00000FDC< to __funcptr_type_kind
    0x00000FDF store *__funcptr_type_kind >|2| 0x00000FDD<, __funcptr_type_kind >|2| 0x00000FDE<
    0x00000FE0 call ag5 "openglGetProcAddress" (cstroflen 28 "glMultiDrawElementsIndirect") *s8
    0x00000FE1 gvar *__funcptr_type_kind 0x000003FD
    0x00000FE2 bc *s8 >|2| 0x00000FE0< to __funcptr_type_kind
    0x00000FE3 store *__funcptr_type_kind >|2| 0x00000FE1<, __funcptr_type_kind >|2| 0x00000FE2<
    0x00000FE4 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiDrawElements") *s8
    0x00000FE5 gvar *__funcptr_type_kind 0x000003FE
    0x00000FE6 bc *s8 >|2| 0x00000FE4< to __funcptr_type_kind
    0x00000FE7 store *__funcptr_type_kind >|2| 0x00000FE5<, __funcptr_type_kind >|2| 0x00000FE6<
    0x00000FE8 call ag5 "openglGetProcAddress" (cstroflen 34 "glMultiDrawRangeElementArrayAPPLE") *s8
    0x00000FE9 gvar *__funcptr_type_kind 0x000003FF
    0x00000FEA bc *s8 >|2| 0x00000FE8< to __funcptr_type_kind
    0x00000FEB store *__funcptr_type_kind >|2| 0x00000FE9<, __funcptr_type_kind >|2| 0x00000FEA<
    0x00000FEC call ag5 "openglGetProcAddress" (cstroflen 25 "glMultiModeDrawArraysIBM") *s8
    0x00000FED gvar *__funcptr_type_kind 0x00000400
    0x00000FEE bc *s8 >|2| 0x00000FEC< to __funcptr_type_kind
    0x00000FEF store *__funcptr_type_kind >|2| 0x00000FED<, __funcptr_type_kind >|2| 0x00000FEE<
    0x00000FF0 call ag5 "openglGetProcAddress" (cstroflen 27 "glMultiModeDrawElementsIBM") *s8
    0x00000FF1 gvar *__funcptr_type_kind 0x00000401
    0x00000FF2 bc *s8 >|2| 0x00000FF0< to __funcptr_type_kind
    0x00000FF3 store *__funcptr_type_kind >|2| 0x00000FF1<, __funcptr_type_kind >|2| 0x00000FF2<
    0x00000FF4 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexBufferEXT") *s8
    0x00000FF5 gvar *__funcptr_type_kind 0x00000402
    0x00000FF6 bc *s8 >|2| 0x00000FF4< to __funcptr_type_kind
    0x00000FF7 store *__funcptr_type_kind >|2| 0x00000FF5<, __funcptr_type_kind >|2| 0x00000FF6<
    0x00000FF8 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord1dARB") *s8
    0x00000FF9 gvar *__funcptr_type_kind 0x00000403
    0x00000FFA bc *s8 >|2| 0x00000FF8< to __funcptr_type_kind
    0x00000FFB store *__funcptr_type_kind >|2| 0x00000FF9<, __funcptr_type_kind >|2| 0x00000FFA<
    0x00000FFC call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord1d") *s8
    0x00000FFD gvar *__funcptr_type_kind 0x00000404
    0x00000FFE bc *s8 >|2| 0x00000FFC< to __funcptr_type_kind
    0x00000FFF store *__funcptr_type_kind >|2| 0x00000FFD<, __funcptr_type_kind >|2| 0x00000FFE<
    0x00001000 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord1dvARB") *s8
    0x00001001 gvar *__funcptr_type_kind 0x00000405
    0x00001002 bc *s8 >|2| 0x00001000< to __funcptr_type_kind
    0x00001003 store *__funcptr_type_kind >|2| 0x00001001<, __funcptr_type_kind >|2| 0x00001002<
    0x00001004 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord1dv") *s8
    0x00001005 gvar *__funcptr_type_kind 0x00000406
    0x00001006 bc *s8 >|2| 0x00001004< to __funcptr_type_kind
    0x00001007 store *__funcptr_type_kind >|2| 0x00001005<, __funcptr_type_kind >|2| 0x00001006<
    0x00001008 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord1fARB") *s8
    0x00001009 gvar *__funcptr_type_kind 0x00000407
    0x0000100A bc *s8 >|2| 0x00001008< to __funcptr_type_kind
    0x0000100B store *__funcptr_type_kind >|2| 0x00001009<, __funcptr_type_kind >|2| 0x0000100A<
    0x0000100C call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord1f") *s8
    0x0000100D gvar *__funcptr_type_kind 0x00000408
    0x0000100E bc *s8 >|2| 0x0000100C< to __funcptr_type_kind
    0x0000100F store *__funcptr_type_kind >|2| 0x0000100D<, __funcptr_type_kind >|2| 0x0000100E<
    0x00001010 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord1fvARB") *s8
    0x00001011 gvar *__funcptr_type_kind 0x00000409
    0x00001012 bc *s8 >|2| 0x00001010< to __funcptr_type_kind
    0x00001013 store *__funcptr_type_kind >|2| 0x00001011<, __funcptr_type_kind >|2| 0x00001012<
    0x00001014 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord1fv") *s8
    0x00001015 gvar *__funcptr_type_kind 0x0000040A
    0x00001016 bc *s8 >|2| 0x00001014< to __funcptr_type_kind
    0x00001017 store *__funcptr_type_kind >|2| 0x00001015<, __funcptr_type_kind >|2| 0x00001016<
    0x00001018 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoord1hNV") *s8
    0x00001019 gvar *__funcptr_type_kind 0x0000040B
    0x0000101A bc *s8 >|2| 0x00001018< to __funcptr_type_kind
    0x0000101B store *__funcptr_type_kind >|2| 0x00001019<, __funcptr_type_kind >|2| 0x0000101A<
    0x0000101C call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord1hvNV") *s8
    0x0000101D gvar *__funcptr_type_kind 0x0000040C
    0x0000101E bc *s8 >|2| 0x0000101C< to __funcptr_type_kind
    0x0000101F store *__funcptr_type_kind >|2| 0x0000101D<, __funcptr_type_kind >|2| 0x0000101E<
    0x00001020 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord1iARB") *s8
    0x00001021 gvar *__funcptr_type_kind 0x0000040D
    0x00001022 bc *s8 >|2| 0x00001020< to __funcptr_type_kind
    0x00001023 store *__funcptr_type_kind >|2| 0x00001021<, __funcptr_type_kind >|2| 0x00001022<
    0x00001024 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord1i") *s8
    0x00001025 gvar *__funcptr_type_kind 0x0000040E
    0x00001026 bc *s8 >|2| 0x00001024< to __funcptr_type_kind
    0x00001027 store *__funcptr_type_kind >|2| 0x00001025<, __funcptr_type_kind >|2| 0x00001026<
    0x00001028 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord1ivARB") *s8
    0x00001029 gvar *__funcptr_type_kind 0x0000040F
    0x0000102A bc *s8 >|2| 0x00001028< to __funcptr_type_kind
    0x0000102B store *__funcptr_type_kind >|2| 0x00001029<, __funcptr_type_kind >|2| 0x0000102A<
    0x0000102C call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord1iv") *s8
    0x0000102D gvar *__funcptr_type_kind 0x00000410
    0x0000102E bc *s8 >|2| 0x0000102C< to __funcptr_type_kind
    0x0000102F store *__funcptr_type_kind >|2| 0x0000102D<, __funcptr_type_kind >|2| 0x0000102E<
    0x00001030 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord1sARB") *s8
    0x00001031 gvar *__funcptr_type_kind 0x00000411
    0x00001032 bc *s8 >|2| 0x00001030< to __funcptr_type_kind
    0x00001033 store *__funcptr_type_kind >|2| 0x00001031<, __funcptr_type_kind >|2| 0x00001032<
    0x00001034 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord1s") *s8
    0x00001035 gvar *__funcptr_type_kind 0x00000412
    0x00001036 bc *s8 >|2| 0x00001034< to __funcptr_type_kind
    0x00001037 store *__funcptr_type_kind >|2| 0x00001035<, __funcptr_type_kind >|2| 0x00001036<
    0x00001038 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord1svARB") *s8
    0x00001039 gvar *__funcptr_type_kind 0x00000413
    0x0000103A bc *s8 >|2| 0x00001038< to __funcptr_type_kind
    0x0000103B store *__funcptr_type_kind >|2| 0x00001039<, __funcptr_type_kind >|2| 0x0000103A<
    0x0000103C call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord1sv") *s8
    0x0000103D gvar *__funcptr_type_kind 0x00000414
    0x0000103E bc *s8 >|2| 0x0000103C< to __funcptr_type_kind
    0x0000103F store *__funcptr_type_kind >|2| 0x0000103D<, __funcptr_type_kind >|2| 0x0000103E<
    0x00001040 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord2dARB") *s8
    0x00001041 gvar *__funcptr_type_kind 0x00000415
    0x00001042 bc *s8 >|2| 0x00001040< to __funcptr_type_kind
    0x00001043 store *__funcptr_type_kind >|2| 0x00001041<, __funcptr_type_kind >|2| 0x00001042<
    0x00001044 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord2d") *s8
    0x00001045 gvar *__funcptr_type_kind 0x00000416
    0x00001046 bc *s8 >|2| 0x00001044< to __funcptr_type_kind
    0x00001047 store *__funcptr_type_kind >|2| 0x00001045<, __funcptr_type_kind >|2| 0x00001046<
    0x00001048 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord2dvARB") *s8
    0x00001049 gvar *__funcptr_type_kind 0x00000417
    0x0000104A bc *s8 >|2| 0x00001048< to __funcptr_type_kind
    0x0000104B store *__funcptr_type_kind >|2| 0x00001049<, __funcptr_type_kind >|2| 0x0000104A<
    0x0000104C call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord2dv") *s8
    0x0000104D gvar *__funcptr_type_kind 0x00000418
    0x0000104E bc *s8 >|2| 0x0000104C< to __funcptr_type_kind
    0x0000104F store *__funcptr_type_kind >|2| 0x0000104D<, __funcptr_type_kind >|2| 0x0000104E<
    0x00001050 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord2fARB") *s8
    0x00001051 gvar *__funcptr_type_kind 0x00000419
    0x00001052 bc *s8 >|2| 0x00001050< to __funcptr_type_kind
    0x00001053 store *__funcptr_type_kind >|2| 0x00001051<, __funcptr_type_kind >|2| 0x00001052<
    0x00001054 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord2f") *s8
    0x00001055 gvar *__funcptr_type_kind 0x0000041A
    0x00001056 bc *s8 >|2| 0x00001054< to __funcptr_type_kind
    0x00001057 store *__funcptr_type_kind >|2| 0x00001055<, __funcptr_type_kind >|2| 0x00001056<
    0x00001058 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord2fvARB") *s8
    0x00001059 gvar *__funcptr_type_kind 0x0000041B
    0x0000105A bc *s8 >|2| 0x00001058< to __funcptr_type_kind
    0x0000105B store *__funcptr_type_kind >|2| 0x00001059<, __funcptr_type_kind >|2| 0x0000105A<
    0x0000105C call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord2fv") *s8
    0x0000105D gvar *__funcptr_type_kind 0x0000041C
    0x0000105E bc *s8 >|2| 0x0000105C< to __funcptr_type_kind
    0x0000105F store *__funcptr_type_kind >|2| 0x0000105D<, __funcptr_type_kind >|2| 0x0000105E<
    0x00001060 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoord2hNV") *s8
    0x00001061 gvar *__funcptr_type_kind 0x0000041D
    0x00001062 bc *s8 >|2| 0x00001060< to __funcptr_type_kind
    0x00001063 store *__funcptr_type_kind >|2| 0x00001061<, __funcptr_type_kind >|2| 0x00001062<
    0x00001064 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord2hvNV") *s8
    0x00001065 gvar *__funcptr_type_kind 0x0000041E
    0x00001066 bc *s8 >|2| 0x00001064< to __funcptr_type_kind
    0x00001067 store *__funcptr_type_kind >|2| 0x00001065<, __funcptr_type_kind >|2| 0x00001066<
    0x00001068 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord2iARB") *s8
    0x00001069 gvar *__funcptr_type_kind 0x0000041F
    0x0000106A bc *s8 >|2| 0x00001068< to __funcptr_type_kind
    0x0000106B store *__funcptr_type_kind >|2| 0x00001069<, __funcptr_type_kind >|2| 0x0000106A<
    0x0000106C call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord2i") *s8
    0x0000106D gvar *__funcptr_type_kind 0x00000420
    0x0000106E bc *s8 >|2| 0x0000106C< to __funcptr_type_kind
    0x0000106F store *__funcptr_type_kind >|2| 0x0000106D<, __funcptr_type_kind >|2| 0x0000106E<
    0x00001070 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord2ivARB") *s8
    0x00001071 gvar *__funcptr_type_kind 0x00000421
    0x00001072 bc *s8 >|2| 0x00001070< to __funcptr_type_kind
    0x00001073 store *__funcptr_type_kind >|2| 0x00001071<, __funcptr_type_kind >|2| 0x00001072<
    0x00001074 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord2iv") *s8
    0x00001075 gvar *__funcptr_type_kind 0x00000422
    0x00001076 bc *s8 >|2| 0x00001074< to __funcptr_type_kind
    0x00001077 store *__funcptr_type_kind >|2| 0x00001075<, __funcptr_type_kind >|2| 0x00001076<
    0x00001078 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord2sARB") *s8
    0x00001079 gvar *__funcptr_type_kind 0x00000423
    0x0000107A bc *s8 >|2| 0x00001078< to __funcptr_type_kind
    0x0000107B store *__funcptr_type_kind >|2| 0x00001079<, __funcptr_type_kind >|2| 0x0000107A<
    0x0000107C call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord2s") *s8
    0x0000107D gvar *__funcptr_type_kind 0x00000424
    0x0000107E bc *s8 >|2| 0x0000107C< to __funcptr_type_kind
    0x0000107F store *__funcptr_type_kind >|2| 0x0000107D<, __funcptr_type_kind >|2| 0x0000107E<
    0x00001080 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord2svARB") *s8
    0x00001081 gvar *__funcptr_type_kind 0x00000425
    0x00001082 bc *s8 >|2| 0x00001080< to __funcptr_type_kind
    0x00001083 store *__funcptr_type_kind >|2| 0x00001081<, __funcptr_type_kind >|2| 0x00001082<
    0x00001084 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord2sv") *s8
    0x00001085 gvar *__funcptr_type_kind 0x00000426
    0x00001086 bc *s8 >|2| 0x00001084< to __funcptr_type_kind
    0x00001087 store *__funcptr_type_kind >|2| 0x00001085<, __funcptr_type_kind >|2| 0x00001086<
    0x00001088 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord3dARB") *s8
    0x00001089 gvar *__funcptr_type_kind 0x00000427
    0x0000108A bc *s8 >|2| 0x00001088< to __funcptr_type_kind
    0x0000108B store *__funcptr_type_kind >|2| 0x00001089<, __funcptr_type_kind >|2| 0x0000108A<
    0x0000108C call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord3d") *s8
    0x0000108D gvar *__funcptr_type_kind 0x00000428
    0x0000108E bc *s8 >|2| 0x0000108C< to __funcptr_type_kind
    0x0000108F store *__funcptr_type_kind >|2| 0x0000108D<, __funcptr_type_kind >|2| 0x0000108E<
    0x00001090 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord3dvARB") *s8
    0x00001091 gvar *__funcptr_type_kind 0x00000429
    0x00001092 bc *s8 >|2| 0x00001090< to __funcptr_type_kind
    0x00001093 store *__funcptr_type_kind >|2| 0x00001091<, __funcptr_type_kind >|2| 0x00001092<
    0x00001094 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord3dv") *s8
    0x00001095 gvar *__funcptr_type_kind 0x0000042A
    0x00001096 bc *s8 >|2| 0x00001094< to __funcptr_type_kind
    0x00001097 store *__funcptr_type_kind >|2| 0x00001095<, __funcptr_type_kind >|2| 0x00001096<
    0x00001098 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord3fARB") *s8
    0x00001099 gvar *__funcptr_type_kind 0x0000042B
    0x0000109A bc *s8 >|2| 0x00001098< to __funcptr_type_kind
    0x0000109B store *__funcptr_type_kind >|2| 0x00001099<, __funcptr_type_kind >|2| 0x0000109A<
    0x0000109C call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord3f") *s8
    0x0000109D gvar *__funcptr_type_kind 0x0000042C
    0x0000109E bc *s8 >|2| 0x0000109C< to __funcptr_type_kind
    0x0000109F store *__funcptr_type_kind >|2| 0x0000109D<, __funcptr_type_kind >|2| 0x0000109E<
    0x000010A0 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord3fvARB") *s8
    0x000010A1 gvar *__funcptr_type_kind 0x0000042D
    0x000010A2 bc *s8 >|2| 0x000010A0< to __funcptr_type_kind
    0x000010A3 store *__funcptr_type_kind >|2| 0x000010A1<, __funcptr_type_kind >|2| 0x000010A2<
    0x000010A4 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord3fv") *s8
    0x000010A5 gvar *__funcptr_type_kind 0x0000042E
    0x000010A6 bc *s8 >|2| 0x000010A4< to __funcptr_type_kind
    0x000010A7 store *__funcptr_type_kind >|2| 0x000010A5<, __funcptr_type_kind >|2| 0x000010A6<
    0x000010A8 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoord3hNV") *s8
    0x000010A9 gvar *__funcptr_type_kind 0x0000042F
    0x000010AA bc *s8 >|2| 0x000010A8< to __funcptr_type_kind
    0x000010AB store *__funcptr_type_kind >|2| 0x000010A9<, __funcptr_type_kind >|2| 0x000010AA<
    0x000010AC call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord3hvNV") *s8
    0x000010AD gvar *__funcptr_type_kind 0x00000430
    0x000010AE bc *s8 >|2| 0x000010AC< to __funcptr_type_kind
    0x000010AF store *__funcptr_type_kind >|2| 0x000010AD<, __funcptr_type_kind >|2| 0x000010AE<
    0x000010B0 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord3iARB") *s8
    0x000010B1 gvar *__funcptr_type_kind 0x00000431
    0x000010B2 bc *s8 >|2| 0x000010B0< to __funcptr_type_kind
    0x000010B3 store *__funcptr_type_kind >|2| 0x000010B1<, __funcptr_type_kind >|2| 0x000010B2<
    0x000010B4 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord3i") *s8
    0x000010B5 gvar *__funcptr_type_kind 0x00000432
    0x000010B6 bc *s8 >|2| 0x000010B4< to __funcptr_type_kind
    0x000010B7 store *__funcptr_type_kind >|2| 0x000010B5<, __funcptr_type_kind >|2| 0x000010B6<
    0x000010B8 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord3ivARB") *s8
    0x000010B9 gvar *__funcptr_type_kind 0x00000433
    0x000010BA bc *s8 >|2| 0x000010B8< to __funcptr_type_kind
    0x000010BB store *__funcptr_type_kind >|2| 0x000010B9<, __funcptr_type_kind >|2| 0x000010BA<
    0x000010BC call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord3iv") *s8
    0x000010BD gvar *__funcptr_type_kind 0x00000434
    0x000010BE bc *s8 >|2| 0x000010BC< to __funcptr_type_kind
    0x000010BF store *__funcptr_type_kind >|2| 0x000010BD<, __funcptr_type_kind >|2| 0x000010BE<
    0x000010C0 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord3sARB") *s8
    0x000010C1 gvar *__funcptr_type_kind 0x00000435
    0x000010C2 bc *s8 >|2| 0x000010C0< to __funcptr_type_kind
    0x000010C3 store *__funcptr_type_kind >|2| 0x000010C1<, __funcptr_type_kind >|2| 0x000010C2<
    0x000010C4 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord3s") *s8
    0x000010C5 gvar *__funcptr_type_kind 0x00000436
    0x000010C6 bc *s8 >|2| 0x000010C4< to __funcptr_type_kind
    0x000010C7 store *__funcptr_type_kind >|2| 0x000010C5<, __funcptr_type_kind >|2| 0x000010C6<
    0x000010C8 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord3svARB") *s8
    0x000010C9 gvar *__funcptr_type_kind 0x00000437
    0x000010CA bc *s8 >|2| 0x000010C8< to __funcptr_type_kind
    0x000010CB store *__funcptr_type_kind >|2| 0x000010C9<, __funcptr_type_kind >|2| 0x000010CA<
    0x000010CC call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord3sv") *s8
    0x000010CD gvar *__funcptr_type_kind 0x00000438
    0x000010CE bc *s8 >|2| 0x000010CC< to __funcptr_type_kind
    0x000010CF store *__funcptr_type_kind >|2| 0x000010CD<, __funcptr_type_kind >|2| 0x000010CE<
    0x000010D0 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord4dARB") *s8
    0x000010D1 gvar *__funcptr_type_kind 0x00000439
    0x000010D2 bc *s8 >|2| 0x000010D0< to __funcptr_type_kind
    0x000010D3 store *__funcptr_type_kind >|2| 0x000010D1<, __funcptr_type_kind >|2| 0x000010D2<
    0x000010D4 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord4d") *s8
    0x000010D5 gvar *__funcptr_type_kind 0x0000043A
    0x000010D6 bc *s8 >|2| 0x000010D4< to __funcptr_type_kind
    0x000010D7 store *__funcptr_type_kind >|2| 0x000010D5<, __funcptr_type_kind >|2| 0x000010D6<
    0x000010D8 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord4dvARB") *s8
    0x000010D9 gvar *__funcptr_type_kind 0x0000043B
    0x000010DA bc *s8 >|2| 0x000010D8< to __funcptr_type_kind
    0x000010DB store *__funcptr_type_kind >|2| 0x000010D9<, __funcptr_type_kind >|2| 0x000010DA<
    0x000010DC call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord4dv") *s8
    0x000010DD gvar *__funcptr_type_kind 0x0000043C
    0x000010DE bc *s8 >|2| 0x000010DC< to __funcptr_type_kind
    0x000010DF store *__funcptr_type_kind >|2| 0x000010DD<, __funcptr_type_kind >|2| 0x000010DE<
    0x000010E0 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord4fARB") *s8
    0x000010E1 gvar *__funcptr_type_kind 0x0000043D
    0x000010E2 bc *s8 >|2| 0x000010E0< to __funcptr_type_kind
    0x000010E3 store *__funcptr_type_kind >|2| 0x000010E1<, __funcptr_type_kind >|2| 0x000010E2<
    0x000010E4 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord4f") *s8
    0x000010E5 gvar *__funcptr_type_kind 0x0000043E
    0x000010E6 bc *s8 >|2| 0x000010E4< to __funcptr_type_kind
    0x000010E7 store *__funcptr_type_kind >|2| 0x000010E5<, __funcptr_type_kind >|2| 0x000010E6<
    0x000010E8 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord4fvARB") *s8
    0x000010E9 gvar *__funcptr_type_kind 0x0000043F
    0x000010EA bc *s8 >|2| 0x000010E8< to __funcptr_type_kind
    0x000010EB store *__funcptr_type_kind >|2| 0x000010E9<, __funcptr_type_kind >|2| 0x000010EA<
    0x000010EC call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord4fv") *s8
    0x000010ED gvar *__funcptr_type_kind 0x00000440
    0x000010EE bc *s8 >|2| 0x000010EC< to __funcptr_type_kind
    0x000010EF store *__funcptr_type_kind >|2| 0x000010ED<, __funcptr_type_kind >|2| 0x000010EE<
    0x000010F0 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoord4hNV") *s8
    0x000010F1 gvar *__funcptr_type_kind 0x00000441
    0x000010F2 bc *s8 >|2| 0x000010F0< to __funcptr_type_kind
    0x000010F3 store *__funcptr_type_kind >|2| 0x000010F1<, __funcptr_type_kind >|2| 0x000010F2<
    0x000010F4 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord4hvNV") *s8
    0x000010F5 gvar *__funcptr_type_kind 0x00000442
    0x000010F6 bc *s8 >|2| 0x000010F4< to __funcptr_type_kind
    0x000010F7 store *__funcptr_type_kind >|2| 0x000010F5<, __funcptr_type_kind >|2| 0x000010F6<
    0x000010F8 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord4iARB") *s8
    0x000010F9 gvar *__funcptr_type_kind 0x00000443
    0x000010FA bc *s8 >|2| 0x000010F8< to __funcptr_type_kind
    0x000010FB store *__funcptr_type_kind >|2| 0x000010F9<, __funcptr_type_kind >|2| 0x000010FA<
    0x000010FC call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord4i") *s8
    0x000010FD gvar *__funcptr_type_kind 0x00000444
    0x000010FE bc *s8 >|2| 0x000010FC< to __funcptr_type_kind
    0x000010FF store *__funcptr_type_kind >|2| 0x000010FD<, __funcptr_type_kind >|2| 0x000010FE<
    0x00001100 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord4ivARB") *s8
    0x00001101 gvar *__funcptr_type_kind 0x00000445
    0x00001102 bc *s8 >|2| 0x00001100< to __funcptr_type_kind
    0x00001103 store *__funcptr_type_kind >|2| 0x00001101<, __funcptr_type_kind >|2| 0x00001102<
    0x00001104 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord4iv") *s8
    0x00001105 gvar *__funcptr_type_kind 0x00000446
    0x00001106 bc *s8 >|2| 0x00001104< to __funcptr_type_kind
    0x00001107 store *__funcptr_type_kind >|2| 0x00001105<, __funcptr_type_kind >|2| 0x00001106<
    0x00001108 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoord4sARB") *s8
    0x00001109 gvar *__funcptr_type_kind 0x00000447
    0x0000110A bc *s8 >|2| 0x00001108< to __funcptr_type_kind
    0x0000110B store *__funcptr_type_kind >|2| 0x00001109<, __funcptr_type_kind >|2| 0x0000110A<
    0x0000110C call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord4s") *s8
    0x0000110D gvar *__funcptr_type_kind 0x00000448
    0x0000110E bc *s8 >|2| 0x0000110C< to __funcptr_type_kind
    0x0000110F store *__funcptr_type_kind >|2| 0x0000110D<, __funcptr_type_kind >|2| 0x0000110E<
    0x00001110 call ag5 "openglGetProcAddress" (cstroflen 22 "glMultiTexCoord4svARB") *s8
    0x00001111 gvar *__funcptr_type_kind 0x00000449
    0x00001112 bc *s8 >|2| 0x00001110< to __funcptr_type_kind
    0x00001113 store *__funcptr_type_kind >|2| 0x00001111<, __funcptr_type_kind >|2| 0x00001112<
    0x00001114 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexCoord4sv") *s8
    0x00001115 gvar *__funcptr_type_kind 0x0000044A
    0x00001116 bc *s8 >|2| 0x00001114< to __funcptr_type_kind
    0x00001117 store *__funcptr_type_kind >|2| 0x00001115<, __funcptr_type_kind >|2| 0x00001116<
    0x00001118 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexCoord4x") *s8
    0x00001119 gvar *__funcptr_type_kind 0x0000044B
    0x0000111A bc *s8 >|2| 0x00001118< to __funcptr_type_kind
    0x0000111B store *__funcptr_type_kind >|2| 0x00001119<, __funcptr_type_kind >|2| 0x0000111A<
    0x0000111C call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoordP1ui") *s8
    0x0000111D gvar *__funcptr_type_kind 0x0000044C
    0x0000111E bc *s8 >|2| 0x0000111C< to __funcptr_type_kind
    0x0000111F store *__funcptr_type_kind >|2| 0x0000111D<, __funcptr_type_kind >|2| 0x0000111E<
    0x00001120 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoordP1uiv") *s8
    0x00001121 gvar *__funcptr_type_kind 0x0000044D
    0x00001122 bc *s8 >|2| 0x00001120< to __funcptr_type_kind
    0x00001123 store *__funcptr_type_kind >|2| 0x00001121<, __funcptr_type_kind >|2| 0x00001122<
    0x00001124 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoordP2ui") *s8
    0x00001125 gvar *__funcptr_type_kind 0x0000044E
    0x00001126 bc *s8 >|2| 0x00001124< to __funcptr_type_kind
    0x00001127 store *__funcptr_type_kind >|2| 0x00001125<, __funcptr_type_kind >|2| 0x00001126<
    0x00001128 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoordP2uiv") *s8
    0x00001129 gvar *__funcptr_type_kind 0x0000044F
    0x0000112A bc *s8 >|2| 0x00001128< to __funcptr_type_kind
    0x0000112B store *__funcptr_type_kind >|2| 0x00001129<, __funcptr_type_kind >|2| 0x0000112A<
    0x0000112C call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoordP3ui") *s8
    0x0000112D gvar *__funcptr_type_kind 0x00000450
    0x0000112E bc *s8 >|2| 0x0000112C< to __funcptr_type_kind
    0x0000112F store *__funcptr_type_kind >|2| 0x0000112D<, __funcptr_type_kind >|2| 0x0000112E<
    0x00001130 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoordP3uiv") *s8
    0x00001131 gvar *__funcptr_type_kind 0x00000451
    0x00001132 bc *s8 >|2| 0x00001130< to __funcptr_type_kind
    0x00001133 store *__funcptr_type_kind >|2| 0x00001131<, __funcptr_type_kind >|2| 0x00001132<
    0x00001134 call ag5 "openglGetProcAddress" (cstroflen 20 "glMultiTexCoordP4ui") *s8
    0x00001135 gvar *__funcptr_type_kind 0x00000452
    0x00001136 bc *s8 >|2| 0x00001134< to __funcptr_type_kind
    0x00001137 store *__funcptr_type_kind >|2| 0x00001135<, __funcptr_type_kind >|2| 0x00001136<
    0x00001138 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexCoordP4uiv") *s8
    0x00001139 gvar *__funcptr_type_kind 0x00000453
    0x0000113A bc *s8 >|2| 0x00001138< to __funcptr_type_kind
    0x0000113B store *__funcptr_type_kind >|2| 0x00001139<, __funcptr_type_kind >|2| 0x0000113A<
    0x0000113C call ag5 "openglGetProcAddress" (cstroflen 26 "glMultiTexCoordPointerEXT") *s8
    0x0000113D gvar *__funcptr_type_kind 0x00000454
    0x0000113E bc *s8 >|2| 0x0000113C< to __funcptr_type_kind
    0x0000113F store *__funcptr_type_kind >|2| 0x0000113D<, __funcptr_type_kind >|2| 0x0000113E<
    0x00001140 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexEnvfEXT") *s8
    0x00001141 gvar *__funcptr_type_kind 0x00000455
    0x00001142 bc *s8 >|2| 0x00001140< to __funcptr_type_kind
    0x00001143 store *__funcptr_type_kind >|2| 0x00001141<, __funcptr_type_kind >|2| 0x00001142<
    0x00001144 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexEnvfvEXT") *s8
    0x00001145 gvar *__funcptr_type_kind 0x00000456
    0x00001146 bc *s8 >|2| 0x00001144< to __funcptr_type_kind
    0x00001147 store *__funcptr_type_kind >|2| 0x00001145<, __funcptr_type_kind >|2| 0x00001146<
    0x00001148 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexEnviEXT") *s8
    0x00001149 gvar *__funcptr_type_kind 0x00000457
    0x0000114A bc *s8 >|2| 0x00001148< to __funcptr_type_kind
    0x0000114B store *__funcptr_type_kind >|2| 0x00001149<, __funcptr_type_kind >|2| 0x0000114A<
    0x0000114C call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexEnvivEXT") *s8
    0x0000114D gvar *__funcptr_type_kind 0x00000458
    0x0000114E bc *s8 >|2| 0x0000114C< to __funcptr_type_kind
    0x0000114F store *__funcptr_type_kind >|2| 0x0000114D<, __funcptr_type_kind >|2| 0x0000114E<
    0x00001150 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexGendEXT") *s8
    0x00001151 gvar *__funcptr_type_kind 0x00000459
    0x00001152 bc *s8 >|2| 0x00001150< to __funcptr_type_kind
    0x00001153 store *__funcptr_type_kind >|2| 0x00001151<, __funcptr_type_kind >|2| 0x00001152<
    0x00001154 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexGendvEXT") *s8
    0x00001155 gvar *__funcptr_type_kind 0x0000045A
    0x00001156 bc *s8 >|2| 0x00001154< to __funcptr_type_kind
    0x00001157 store *__funcptr_type_kind >|2| 0x00001155<, __funcptr_type_kind >|2| 0x00001156<
    0x00001158 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexGenfEXT") *s8
    0x00001159 gvar *__funcptr_type_kind 0x0000045B
    0x0000115A bc *s8 >|2| 0x00001158< to __funcptr_type_kind
    0x0000115B store *__funcptr_type_kind >|2| 0x00001159<, __funcptr_type_kind >|2| 0x0000115A<
    0x0000115C call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexGenfvEXT") *s8
    0x0000115D gvar *__funcptr_type_kind 0x0000045C
    0x0000115E bc *s8 >|2| 0x0000115C< to __funcptr_type_kind
    0x0000115F store *__funcptr_type_kind >|2| 0x0000115D<, __funcptr_type_kind >|2| 0x0000115E<
    0x00001160 call ag5 "openglGetProcAddress" (cstroflen 18 "glMultiTexGeniEXT") *s8
    0x00001161 gvar *__funcptr_type_kind 0x0000045D
    0x00001162 bc *s8 >|2| 0x00001160< to __funcptr_type_kind
    0x00001163 store *__funcptr_type_kind >|2| 0x00001161<, __funcptr_type_kind >|2| 0x00001162<
    0x00001164 call ag5 "openglGetProcAddress" (cstroflen 19 "glMultiTexGenivEXT") *s8
    0x00001165 gvar *__funcptr_type_kind 0x0000045E
    0x00001166 bc *s8 >|2| 0x00001164< to __funcptr_type_kind
    0x00001167 store *__funcptr_type_kind >|2| 0x00001165<, __funcptr_type_kind >|2| 0x00001166<
    0x00001168 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexImage1DEXT") *s8
    0x00001169 gvar *__funcptr_type_kind 0x0000045F
    0x0000116A bc *s8 >|2| 0x00001168< to __funcptr_type_kind
    0x0000116B store *__funcptr_type_kind >|2| 0x00001169<, __funcptr_type_kind >|2| 0x0000116A<
    0x0000116C call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexImage2DEXT") *s8
    0x0000116D gvar *__funcptr_type_kind 0x00000460
    0x0000116E bc *s8 >|2| 0x0000116C< to __funcptr_type_kind
    0x0000116F store *__funcptr_type_kind >|2| 0x0000116D<, __funcptr_type_kind >|2| 0x0000116E<
    0x00001170 call ag5 "openglGetProcAddress" (cstroflen 21 "glMultiTexImage3DEXT") *s8
    0x00001171 gvar *__funcptr_type_kind 0x00000461
    0x00001172 bc *s8 >|2| 0x00001170< to __funcptr_type_kind
    0x00001173 store *__funcptr_type_kind >|2| 0x00001171<, __funcptr_type_kind >|2| 0x00001172<
    0x00001174 call ag5 "openglGetProcAddress" (cstroflen 24 "glMultiTexParameterfEXT") *s8
    0x00001175 gvar *__funcptr_type_kind 0x00000462
    0x00001176 bc *s8 >|2| 0x00001174< to __funcptr_type_kind
    0x00001177 store *__funcptr_type_kind >|2| 0x00001175<, __funcptr_type_kind >|2| 0x00001176<
    0x00001178 call ag5 "openglGetProcAddress" (cstroflen 25 "glMultiTexParameterfvEXT") *s8
    0x00001179 gvar *__funcptr_type_kind 0x00000463
    0x0000117A bc *s8 >|2| 0x00001178< to __funcptr_type_kind
    0x0000117B store *__funcptr_type_kind >|2| 0x00001179<, __funcptr_type_kind >|2| 0x0000117A<
    0x0000117C call ag5 "openglGetProcAddress" (cstroflen 24 "glMultiTexParameteriEXT") *s8
    0x0000117D gvar *__funcptr_type_kind 0x00000464
    0x0000117E bc *s8 >|2| 0x0000117C< to __funcptr_type_kind
    0x0000117F store *__funcptr_type_kind >|2| 0x0000117D<, __funcptr_type_kind >|2| 0x0000117E<
    0x00001180 call ag5 "openglGetProcAddress" (cstroflen 26 "glMultiTexParameterIivEXT") *s8
    0x00001181 gvar *__funcptr_type_kind 0x00000465
    0x00001182 bc *s8 >|2| 0x00001180< to __funcptr_type_kind
    0x00001183 store *__funcptr_type_kind >|2| 0x00001181<, __funcptr_type_kind >|2| 0x00001182<
    0x00001184 call ag5 "openglGetProcAddress" (cstroflen 27 "glMultiTexParameterIuivEXT") *s8
    0x00001185 gvar *__funcptr_type_kind 0x00000466
    0x00001186 bc *s8 >|2| 0x00001184< to __funcptr_type_kind
    0x00001187 store *__funcptr_type_kind >|2| 0x00001185<, __funcptr_type_kind >|2| 0x00001186<
    0x00001188 call ag5 "openglGetProcAddress" (cstroflen 25 "glMultiTexParameterivEXT") *s8
    0x00001189 gvar *__funcptr_type_kind 0x00000467
    0x0000118A bc *s8 >|2| 0x00001188< to __funcptr_type_kind
    0x0000118B store *__funcptr_type_kind >|2| 0x00001189<, __funcptr_type_kind >|2| 0x0000118A<
    0x0000118C call ag5 "openglGetProcAddress" (cstroflen 26 "glMultiTexRenderbufferEXT") *s8
    0x0000118D gvar *__funcptr_type_kind 0x00000468
    0x0000118E bc *s8 >|2| 0x0000118C< to __funcptr_type_kind
    0x0000118F store *__funcptr_type_kind >|2| 0x0000118D<, __funcptr_type_kind >|2| 0x0000118E<
    0x00001190 call ag5 "openglGetProcAddress" (cstroflen 24 "glMultiTexSubImage1DEXT") *s8
    0x00001191 gvar *__funcptr_type_kind 0x00000469
    0x00001192 bc *s8 >|2| 0x00001190< to __funcptr_type_kind
    0x00001193 store *__funcptr_type_kind >|2| 0x00001191<, __funcptr_type_kind >|2| 0x00001192<
    0x00001194 call ag5 "openglGetProcAddress" (cstroflen 24 "glMultiTexSubImage2DEXT") *s8
    0x00001195 gvar *__funcptr_type_kind 0x0000046A
    0x00001196 bc *s8 >|2| 0x00001194< to __funcptr_type_kind
    0x00001197 store *__funcptr_type_kind >|2| 0x00001195<, __funcptr_type_kind >|2| 0x00001196<
    0x00001198 call ag5 "openglGetProcAddress" (cstroflen 24 "glMultiTexSubImage3DEXT") *s8
    0x00001199 gvar *__funcptr_type_kind 0x0000046B
    0x0000119A bc *s8 >|2| 0x00001198< to __funcptr_type_kind
    0x0000119B store *__funcptr_type_kind >|2| 0x00001199<, __funcptr_type_kind >|2| 0x0000119A<
    0x0000119C call ag5 "openglGetProcAddress" (cstroflen 14 "glMultMatrixx") *s8
    0x0000119D gvar *__funcptr_type_kind 0x0000046C
    0x0000119E bc *s8 >|2| 0x0000119C< to __funcptr_type_kind
    0x0000119F store *__funcptr_type_kind >|2| 0x0000119D<, __funcptr_type_kind >|2| 0x0000119E<
    0x000011A0 call ag5 "openglGetProcAddress" (cstroflen 26 "glMultTransposeMatrixdARB") *s8
    0x000011A1 gvar *__funcptr_type_kind 0x0000046D
    0x000011A2 bc *s8 >|2| 0x000011A0< to __funcptr_type_kind
    0x000011A3 store *__funcptr_type_kind >|2| 0x000011A1<, __funcptr_type_kind >|2| 0x000011A2<
    0x000011A4 call ag5 "openglGetProcAddress" (cstroflen 23 "glMultTransposeMatrixd") *s8
    0x000011A5 gvar *__funcptr_type_kind 0x0000046E
    0x000011A6 bc *s8 >|2| 0x000011A4< to __funcptr_type_kind
    0x000011A7 store *__funcptr_type_kind >|2| 0x000011A5<, __funcptr_type_kind >|2| 0x000011A6<
    0x000011A8 call ag5 "openglGetProcAddress" (cstroflen 21 "glNamedBufferDataEXT") *s8
    0x000011A9 gvar *__funcptr_type_kind 0x0000046F
    0x000011AA bc *s8 >|2| 0x000011A8< to __funcptr_type_kind
    0x000011AB store *__funcptr_type_kind >|2| 0x000011A9<, __funcptr_type_kind >|2| 0x000011AA<
    0x000011AC call ag5 "openglGetProcAddress" (cstroflen 18 "glNamedBufferData") *s8
    0x000011AD gvar *__funcptr_type_kind 0x00000470
    0x000011AE bc *s8 >|2| 0x000011AC< to __funcptr_type_kind
    0x000011AF store *__funcptr_type_kind >|2| 0x000011AD<, __funcptr_type_kind >|2| 0x000011AE<
    0x000011B0 call ag5 "openglGetProcAddress" (cstroflen 24 "glNamedBufferStorageEXT") *s8
    0x000011B1 gvar *__funcptr_type_kind 0x00000471
    0x000011B2 bc *s8 >|2| 0x000011B0< to __funcptr_type_kind
    0x000011B3 store *__funcptr_type_kind >|2| 0x000011B1<, __funcptr_type_kind >|2| 0x000011B2<
    0x000011B4 call ag5 "openglGetProcAddress" (cstroflen 21 "glNamedBufferStorage") *s8
    0x000011B5 gvar *__funcptr_type_kind 0x00000472
    0x000011B6 bc *s8 >|2| 0x000011B4< to __funcptr_type_kind
    0x000011B7 store *__funcptr_type_kind >|2| 0x000011B5<, __funcptr_type_kind >|2| 0x000011B6<
    0x000011B8 call ag5 "openglGetProcAddress" (cstroflen 24 "glNamedBufferSubDataEXT") *s8
    0x000011B9 gvar *__funcptr_type_kind 0x00000473
    0x000011BA bc *s8 >|2| 0x000011B8< to __funcptr_type_kind
    0x000011BB store *__funcptr_type_kind >|2| 0x000011B9<, __funcptr_type_kind >|2| 0x000011BA<
    0x000011BC call ag5 "openglGetProcAddress" (cstroflen 21 "glNamedBufferSubData") *s8
    0x000011BD gvar *__funcptr_type_kind 0x00000474
    0x000011BE bc *s8 >|2| 0x000011BC< to __funcptr_type_kind
    0x000011BF store *__funcptr_type_kind >|2| 0x000011BD<, __funcptr_type_kind >|2| 0x000011BE<
    0x000011C0 call ag5 "openglGetProcAddress" (cstroflen 28 "glNamedCopyBufferSubDataEXT") *s8
    0x000011C1 gvar *__funcptr_type_kind 0x00000475
    0x000011C2 bc *s8 >|2| 0x000011C0< to __funcptr_type_kind
    0x000011C3 store *__funcptr_type_kind >|2| 0x000011C1<, __funcptr_type_kind >|2| 0x000011C2<
    0x000011C4 call ag5 "openglGetProcAddress" (cstroflen 29 "glNamedFramebufferDrawBuffer") *s8
    0x000011C5 gvar *__funcptr_type_kind 0x00000476
    0x000011C6 bc *s8 >|2| 0x000011C4< to __funcptr_type_kind
    0x000011C7 store *__funcptr_type_kind >|2| 0x000011C5<, __funcptr_type_kind >|2| 0x000011C6<
    0x000011C8 call ag5 "openglGetProcAddress" (cstroflen 30 "glNamedFramebufferDrawBuffers") *s8
    0x000011C9 gvar *__funcptr_type_kind 0x00000477
    0x000011CA bc *s8 >|2| 0x000011C8< to __funcptr_type_kind
    0x000011CB store *__funcptr_type_kind >|2| 0x000011C9<, __funcptr_type_kind >|2| 0x000011CA<
    0x000011CC call ag5 "openglGetProcAddress" (cstroflen 32 "glNamedFramebufferParameteriEXT") *s8
    0x000011CD gvar *__funcptr_type_kind 0x00000478
    0x000011CE bc *s8 >|2| 0x000011CC< to __funcptr_type_kind
    0x000011CF store *__funcptr_type_kind >|2| 0x000011CD<, __funcptr_type_kind >|2| 0x000011CE<
    0x000011D0 call ag5 "openglGetProcAddress" (cstroflen 29 "glNamedFramebufferParameteri") *s8
    0x000011D1 gvar *__funcptr_type_kind 0x00000479
    0x000011D2 bc *s8 >|2| 0x000011D0< to __funcptr_type_kind
    0x000011D3 store *__funcptr_type_kind >|2| 0x000011D1<, __funcptr_type_kind >|2| 0x000011D2<
    0x000011D4 call ag5 "openglGetProcAddress" (cstroflen 29 "glNamedFramebufferReadBuffer") *s8
    0x000011D5 gvar *__funcptr_type_kind 0x0000047A
    0x000011D6 bc *s8 >|2| 0x000011D4< to __funcptr_type_kind
    0x000011D7 store *__funcptr_type_kind >|2| 0x000011D5<, __funcptr_type_kind >|2| 0x000011D6<
    0x000011D8 call ag5 "openglGetProcAddress" (cstroflen 34 "glNamedFramebufferRenderbufferEXT") *s8
    0x000011D9 gvar *__funcptr_type_kind 0x0000047B
    0x000011DA bc *s8 >|2| 0x000011D8< to __funcptr_type_kind
    0x000011DB store *__funcptr_type_kind >|2| 0x000011D9<, __funcptr_type_kind >|2| 0x000011DA<
    0x000011DC call ag5 "openglGetProcAddress" (cstroflen 31 "glNamedFramebufferRenderbuffer") *s8
    0x000011DD gvar *__funcptr_type_kind 0x0000047C
    0x000011DE bc *s8 >|2| 0x000011DC< to __funcptr_type_kind
    0x000011DF store *__funcptr_type_kind >|2| 0x000011DD<, __funcptr_type_kind >|2| 0x000011DE<
    0x000011E0 call ag5 "openglGetProcAddress" (cstroflen 39 "glNamedFramebufferSampleLocationsfvARB") *s8
    0x000011E1 gvar *__funcptr_type_kind 0x0000047D
    0x000011E2 bc *s8 >|2| 0x000011E0< to __funcptr_type_kind
    0x000011E3 store *__funcptr_type_kind >|2| 0x000011E1<, __funcptr_type_kind >|2| 0x000011E2<
    0x000011E4 call ag5 "openglGetProcAddress" (cstroflen 38 "glNamedFramebufferSampleLocationsfvNV") *s8
    0x000011E5 gvar *__funcptr_type_kind 0x0000047E
    0x000011E6 bc *s8 >|2| 0x000011E4< to __funcptr_type_kind
    0x000011E7 store *__funcptr_type_kind >|2| 0x000011E5<, __funcptr_type_kind >|2| 0x000011E6<
    0x000011E8 call ag5 "openglGetProcAddress" (cstroflen 31 "glNamedFramebufferTexture1DEXT") *s8
    0x000011E9 gvar *__funcptr_type_kind 0x0000047F
    0x000011EA bc *s8 >|2| 0x000011E8< to __funcptr_type_kind
    0x000011EB store *__funcptr_type_kind >|2| 0x000011E9<, __funcptr_type_kind >|2| 0x000011EA<
    0x000011EC call ag5 "openglGetProcAddress" (cstroflen 31 "glNamedFramebufferTexture2DEXT") *s8
    0x000011ED gvar *__funcptr_type_kind 0x00000480
    0x000011EE bc *s8 >|2| 0x000011EC< to __funcptr_type_kind
    0x000011EF store *__funcptr_type_kind >|2| 0x000011ED<, __funcptr_type_kind >|2| 0x000011EE<
    0x000011F0 call ag5 "openglGetProcAddress" (cstroflen 31 "glNamedFramebufferTexture3DEXT") *s8
    0x000011F1 gvar *__funcptr_type_kind 0x00000481
    0x000011F2 bc *s8 >|2| 0x000011F0< to __funcptr_type_kind
    0x000011F3 store *__funcptr_type_kind >|2| 0x000011F1<, __funcptr_type_kind >|2| 0x000011F2<
    0x000011F4 call ag5 "openglGetProcAddress" (cstroflen 29 "glNamedFramebufferTextureEXT") *s8
    0x000011F5 gvar *__funcptr_type_kind 0x00000482
    0x000011F6 bc *s8 >|2| 0x000011F4< to __funcptr_type_kind
    0x000011F7 store *__funcptr_type_kind >|2| 0x000011F5<, __funcptr_type_kind >|2| 0x000011F6<
    0x000011F8 call ag5 "openglGetProcAddress" (cstroflen 33 "glNamedFramebufferTextureFaceEXT") *s8
    0x000011F9 gvar *__funcptr_type_kind 0x00000483
    0x000011FA bc *s8 >|2| 0x000011F8< to __funcptr_type_kind
    0x000011FB store *__funcptr_type_kind >|2| 0x000011F9<, __funcptr_type_kind >|2| 0x000011FA<
    0x000011FC call ag5 "openglGetProcAddress" (cstroflen 34 "glNamedFramebufferTextureLayerEXT") *s8
    0x000011FD gvar *__funcptr_type_kind 0x00000484
    0x000011FE bc *s8 >|2| 0x000011FC< to __funcptr_type_kind
    0x000011FF store *__funcptr_type_kind >|2| 0x000011FD<, __funcptr_type_kind >|2| 0x000011FE<
    0x00001200 call ag5 "openglGetProcAddress" (cstroflen 31 "glNamedFramebufferTextureLayer") *s8
    0x00001201 gvar *__funcptr_type_kind 0x00000485
    0x00001202 bc *s8 >|2| 0x00001200< to __funcptr_type_kind
    0x00001203 store *__funcptr_type_kind >|2| 0x00001201<, __funcptr_type_kind >|2| 0x00001202<
    0x00001204 call ag5 "openglGetProcAddress" (cstroflen 26 "glNamedFramebufferTexture") *s8
    0x00001205 gvar *__funcptr_type_kind 0x00000486
    0x00001206 bc *s8 >|2| 0x00001204< to __funcptr_type_kind
    0x00001207 store *__funcptr_type_kind >|2| 0x00001205<, __funcptr_type_kind >|2| 0x00001206<
    0x00001208 call ag5 "openglGetProcAddress" (cstroflen 34 "glNamedProgramLocalParameter4dEXT") *s8
    0x00001209 gvar *__funcptr_type_kind 0x00000487
    0x0000120A bc *s8 >|2| 0x00001208< to __funcptr_type_kind
    0x0000120B store *__funcptr_type_kind >|2| 0x00001209<, __funcptr_type_kind >|2| 0x0000120A<
    0x0000120C call ag5 "openglGetProcAddress" (cstroflen 35 "glNamedProgramLocalParameter4dvEXT") *s8
    0x0000120D gvar *__funcptr_type_kind 0x00000488
    0x0000120E bc *s8 >|2| 0x0000120C< to __funcptr_type_kind
    0x0000120F store *__funcptr_type_kind >|2| 0x0000120D<, __funcptr_type_kind >|2| 0x0000120E<
    0x00001210 call ag5 "openglGetProcAddress" (cstroflen 34 "glNamedProgramLocalParameter4fEXT") *s8
    0x00001211 gvar *__funcptr_type_kind 0x00000489
    0x00001212 bc *s8 >|2| 0x00001210< to __funcptr_type_kind
    0x00001213 store *__funcptr_type_kind >|2| 0x00001211<, __funcptr_type_kind >|2| 0x00001212<
    0x00001214 call ag5 "openglGetProcAddress" (cstroflen 35 "glNamedProgramLocalParameter4fvEXT") *s8
    0x00001215 gvar *__funcptr_type_kind 0x0000048A
    0x00001216 bc *s8 >|2| 0x00001214< to __funcptr_type_kind
    0x00001217 store *__funcptr_type_kind >|2| 0x00001215<, __funcptr_type_kind >|2| 0x00001216<
    0x00001218 call ag5 "openglGetProcAddress" (cstroflen 35 "glNamedProgramLocalParameterI4iEXT") *s8
    0x00001219 gvar *__funcptr_type_kind 0x0000048B
    0x0000121A bc *s8 >|2| 0x00001218< to __funcptr_type_kind
    0x0000121B store *__funcptr_type_kind >|2| 0x00001219<, __funcptr_type_kind >|2| 0x0000121A<
    0x0000121C call ag5 "openglGetProcAddress" (cstroflen 36 "glNamedProgramLocalParameterI4ivEXT") *s8
    0x0000121D gvar *__funcptr_type_kind 0x0000048C
    0x0000121E bc *s8 >|2| 0x0000121C< to __funcptr_type_kind
    0x0000121F store *__funcptr_type_kind >|2| 0x0000121D<, __funcptr_type_kind >|2| 0x0000121E<
    0x00001220 call ag5 "openglGetProcAddress" (cstroflen 36 "glNamedProgramLocalParameterI4uiEXT") *s8
    0x00001221 gvar *__funcptr_type_kind 0x0000048D
    0x00001222 bc *s8 >|2| 0x00001220< to __funcptr_type_kind
    0x00001223 store *__funcptr_type_kind >|2| 0x00001221<, __funcptr_type_kind >|2| 0x00001222<
    0x00001224 call ag5 "openglGetProcAddress" (cstroflen 37 "glNamedProgramLocalParameterI4uivEXT") *s8
    0x00001225 gvar *__funcptr_type_kind 0x0000048E
    0x00001226 bc *s8 >|2| 0x00001224< to __funcptr_type_kind
    0x00001227 store *__funcptr_type_kind >|2| 0x00001225<, __funcptr_type_kind >|2| 0x00001226<
    0x00001228 call ag5 "openglGetProcAddress" (cstroflen 36 "glNamedProgramLocalParameters4fvEXT") *s8
    0x00001229 gvar *__funcptr_type_kind 0x0000048F
    0x0000122A bc *s8 >|2| 0x00001228< to __funcptr_type_kind
    0x0000122B store *__funcptr_type_kind >|2| 0x00001229<, __funcptr_type_kind >|2| 0x0000122A<
    0x0000122C call ag5 "openglGetProcAddress" (cstroflen 37 "glNamedProgramLocalParametersI4ivEXT") *s8
    0x0000122D gvar *__funcptr_type_kind 0x00000490
    0x0000122E bc *s8 >|2| 0x0000122C< to __funcptr_type_kind
    0x0000122F store *__funcptr_type_kind >|2| 0x0000122D<, __funcptr_type_kind >|2| 0x0000122E<
    0x00001230 call ag5 "openglGetProcAddress" (cstroflen 38 "glNamedProgramLocalParametersI4uivEXT") *s8
    0x00001231 gvar *__funcptr_type_kind 0x00000491
    0x00001232 bc *s8 >|2| 0x00001230< to __funcptr_type_kind
    0x00001233 store *__funcptr_type_kind >|2| 0x00001231<, __funcptr_type_kind >|2| 0x00001232<
    0x00001234 call ag5 "openglGetProcAddress" (cstroflen 24 "glNamedProgramStringEXT") *s8
    0x00001235 gvar *__funcptr_type_kind 0x00000492
    0x00001236 bc *s8 >|2| 0x00001234< to __funcptr_type_kind
    0x00001237 store *__funcptr_type_kind >|2| 0x00001235<, __funcptr_type_kind >|2| 0x00001236<
    0x00001238 call ag5 "openglGetProcAddress" (cstroflen 30 "glNamedRenderbufferStorageEXT") *s8
    0x00001239 gvar *__funcptr_type_kind 0x00000493
    0x0000123A bc *s8 >|2| 0x00001238< to __funcptr_type_kind
    0x0000123B store *__funcptr_type_kind >|2| 0x00001239<, __funcptr_type_kind >|2| 0x0000123A<
    0x0000123C call ag5 "openglGetProcAddress" (cstroflen 49 "glNamedRenderbufferStorageMultisampleCoverageEXT") *s8
    0x0000123D gvar *__funcptr_type_kind 0x00000494
    0x0000123E bc *s8 >|2| 0x0000123C< to __funcptr_type_kind
    0x0000123F store *__funcptr_type_kind >|2| 0x0000123D<, __funcptr_type_kind >|2| 0x0000123E<
    0x00001240 call ag5 "openglGetProcAddress" (cstroflen 41 "glNamedRenderbufferStorageMultisampleEXT") *s8
    0x00001241 gvar *__funcptr_type_kind 0x00000495
    0x00001242 bc *s8 >|2| 0x00001240< to __funcptr_type_kind
    0x00001243 store *__funcptr_type_kind >|2| 0x00001241<, __funcptr_type_kind >|2| 0x00001242<
    0x00001244 call ag5 "openglGetProcAddress" (cstroflen 38 "glNamedRenderbufferStorageMultisample") *s8
    0x00001245 gvar *__funcptr_type_kind 0x00000496
    0x00001246 bc *s8 >|2| 0x00001244< to __funcptr_type_kind
    0x00001247 store *__funcptr_type_kind >|2| 0x00001245<, __funcptr_type_kind >|2| 0x00001246<
    0x00001248 call ag5 "openglGetProcAddress" (cstroflen 27 "glNamedRenderbufferStorage") *s8
    0x00001249 gvar *__funcptr_type_kind 0x00000497
    0x0000124A bc *s8 >|2| 0x00001248< to __funcptr_type_kind
    0x0000124B store *__funcptr_type_kind >|2| 0x00001249<, __funcptr_type_kind >|2| 0x0000124A<
    0x0000124C call ag5 "openglGetProcAddress" (cstroflen 17 "glNamedStringARB") *s8
    0x0000124D gvar *__funcptr_type_kind 0x00000498
    0x0000124E bc *s8 >|2| 0x0000124C< to __funcptr_type_kind
    0x0000124F store *__funcptr_type_kind >|2| 0x0000124D<, __funcptr_type_kind >|2| 0x0000124E<
    0x00001250 call ag5 "openglGetProcAddress" (cstroflen 22 "glNormal3fVertex3fSUN") *s8
    0x00001251 gvar *__funcptr_type_kind 0x00000499
    0x00001252 bc *s8 >|2| 0x00001250< to __funcptr_type_kind
    0x00001253 store *__funcptr_type_kind >|2| 0x00001251<, __funcptr_type_kind >|2| 0x00001252<
    0x00001254 call ag5 "openglGetProcAddress" (cstroflen 23 "glNormal3fVertex3fvSUN") *s8
    0x00001255 gvar *__funcptr_type_kind 0x0000049A
    0x00001256 bc *s8 >|2| 0x00001254< to __funcptr_type_kind
    0x00001257 store *__funcptr_type_kind >|2| 0x00001255<, __funcptr_type_kind >|2| 0x00001256<
    0x00001258 call ag5 "openglGetProcAddress" (cstroflen 13 "glNormal3hNV") *s8
    0x00001259 gvar *__funcptr_type_kind 0x0000049B
    0x0000125A bc *s8 >|2| 0x00001258< to __funcptr_type_kind
    0x0000125B store *__funcptr_type_kind >|2| 0x00001259<, __funcptr_type_kind >|2| 0x0000125A<
    0x0000125C call ag5 "openglGetProcAddress" (cstroflen 14 "glNormal3hvNV") *s8
    0x0000125D gvar *__funcptr_type_kind 0x0000049C
    0x0000125E bc *s8 >|2| 0x0000125C< to __funcptr_type_kind
    0x0000125F store *__funcptr_type_kind >|2| 0x0000125D<, __funcptr_type_kind >|2| 0x0000125E<
    0x00001260 call ag5 "openglGetProcAddress" (cstroflen 11 "glNormal3x") *s8
    0x00001261 gvar *__funcptr_type_kind 0x0000049D
    0x00001262 bc *s8 >|2| 0x00001260< to __funcptr_type_kind
    0x00001263 store *__funcptr_type_kind >|2| 0x00001261<, __funcptr_type_kind >|2| 0x00001262<
    0x00001264 call ag5 "openglGetProcAddress" (cstroflen 17 "glNormalFormatNV") *s8
    0x00001265 gvar *__funcptr_type_kind 0x0000049E
    0x00001266 bc *s8 >|2| 0x00001264< to __funcptr_type_kind
    0x00001267 store *__funcptr_type_kind >|2| 0x00001265<, __funcptr_type_kind >|2| 0x00001266<
    0x00001268 call ag5 "openglGetProcAddress" (cstroflen 13 "glNormalP3ui") *s8
    0x00001269 gvar *__funcptr_type_kind 0x0000049F
    0x0000126A bc *s8 >|2| 0x00001268< to __funcptr_type_kind
    0x0000126B store *__funcptr_type_kind >|2| 0x00001269<, __funcptr_type_kind >|2| 0x0000126A<
    0x0000126C call ag5 "openglGetProcAddress" (cstroflen 14 "glNormalP3uiv") *s8
    0x0000126D gvar *__funcptr_type_kind 0x000004A0
    0x0000126E bc *s8 >|2| 0x0000126C< to __funcptr_type_kind
    0x0000126F store *__funcptr_type_kind >|2| 0x0000126D<, __funcptr_type_kind >|2| 0x0000126E<
    0x00001270 call ag5 "openglGetProcAddress" (cstroflen 19 "glNormalPointerEXT") *s8
    0x00001271 gvar *__funcptr_type_kind 0x000004A1
    0x00001272 bc *s8 >|2| 0x00001270< to __funcptr_type_kind
    0x00001273 store *__funcptr_type_kind >|2| 0x00001271<, __funcptr_type_kind >|2| 0x00001272<
    0x00001274 call ag5 "openglGetProcAddress" (cstroflen 23 "glNormalPointerListIBM") *s8
    0x00001275 gvar *__funcptr_type_kind 0x000004A2
    0x00001276 bc *s8 >|2| 0x00001274< to __funcptr_type_kind
    0x00001277 store *__funcptr_type_kind >|2| 0x00001275<, __funcptr_type_kind >|2| 0x00001276<
    0x00001278 call ag5 "openglGetProcAddress" (cstroflen 22 "glNormalPointervINTEL") *s8
    0x00001279 gvar *__funcptr_type_kind 0x000004A3
    0x0000127A bc *s8 >|2| 0x00001278< to __funcptr_type_kind
    0x0000127B store *__funcptr_type_kind >|2| 0x00001279<, __funcptr_type_kind >|2| 0x0000127A<
    0x0000127C call ag5 "openglGetProcAddress" (cstroflen 20 "glNormalStream3bATI") *s8
    0x0000127D gvar *__funcptr_type_kind 0x000004A4
    0x0000127E bc *s8 >|2| 0x0000127C< to __funcptr_type_kind
    0x0000127F store *__funcptr_type_kind >|2| 0x0000127D<, __funcptr_type_kind >|2| 0x0000127E<
    0x00001280 call ag5 "openglGetProcAddress" (cstroflen 21 "glNormalStream3bvATI") *s8
    0x00001281 gvar *__funcptr_type_kind 0x000004A5
    0x00001282 bc *s8 >|2| 0x00001280< to __funcptr_type_kind
    0x00001283 store *__funcptr_type_kind >|2| 0x00001281<, __funcptr_type_kind >|2| 0x00001282<
    0x00001284 call ag5 "openglGetProcAddress" (cstroflen 20 "glNormalStream3dATI") *s8
    0x00001285 gvar *__funcptr_type_kind 0x000004A6
    0x00001286 bc *s8 >|2| 0x00001284< to __funcptr_type_kind
    0x00001287 store *__funcptr_type_kind >|2| 0x00001285<, __funcptr_type_kind >|2| 0x00001286<
    0x00001288 call ag5 "openglGetProcAddress" (cstroflen 21 "glNormalStream3dvATI") *s8
    0x00001289 gvar *__funcptr_type_kind 0x000004A7
    0x0000128A bc *s8 >|2| 0x00001288< to __funcptr_type_kind
    0x0000128B store *__funcptr_type_kind >|2| 0x00001289<, __funcptr_type_kind >|2| 0x0000128A<
    0x0000128C call ag5 "openglGetProcAddress" (cstroflen 20 "glNormalStream3fATI") *s8
    0x0000128D gvar *__funcptr_type_kind 0x000004A8
    0x0000128E bc *s8 >|2| 0x0000128C< to __funcptr_type_kind
    0x0000128F store *__funcptr_type_kind >|2| 0x0000128D<, __funcptr_type_kind >|2| 0x0000128E<
    0x00001290 call ag5 "openglGetProcAddress" (cstroflen 21 "glNormalStream3fvATI") *s8
    0x00001291 gvar *__funcptr_type_kind 0x000004A9
    0x00001292 bc *s8 >|2| 0x00001290< to __funcptr_type_kind
    0x00001293 store *__funcptr_type_kind >|2| 0x00001291<, __funcptr_type_kind >|2| 0x00001292<
    0x00001294 call ag5 "openglGetProcAddress" (cstroflen 20 "glNormalStream3iATI") *s8
    0x00001295 gvar *__funcptr_type_kind 0x000004AA
    0x00001296 bc *s8 >|2| 0x00001294< to __funcptr_type_kind
    0x00001297 store *__funcptr_type_kind >|2| 0x00001295<, __funcptr_type_kind >|2| 0x00001296<
    0x00001298 call ag5 "openglGetProcAddress" (cstroflen 21 "glNormalStream3ivATI") *s8
    0x00001299 gvar *__funcptr_type_kind 0x000004AB
    0x0000129A bc *s8 >|2| 0x00001298< to __funcptr_type_kind
    0x0000129B store *__funcptr_type_kind >|2| 0x00001299<, __funcptr_type_kind >|2| 0x0000129A<
    0x0000129C call ag5 "openglGetProcAddress" (cstroflen 20 "glNormalStream3sATI") *s8
    0x0000129D gvar *__funcptr_type_kind 0x000004AC
    0x0000129E bc *s8 >|2| 0x0000129C< to __funcptr_type_kind
    0x0000129F store *__funcptr_type_kind >|2| 0x0000129D<, __funcptr_type_kind >|2| 0x0000129E<
    0x000012A0 call ag5 "openglGetProcAddress" (cstroflen 21 "glNormalStream3svATI") *s8
    0x000012A1 gvar *__funcptr_type_kind 0x000004AD
    0x000012A2 bc *s8 >|2| 0x000012A0< to __funcptr_type_kind
    0x000012A3 store *__funcptr_type_kind >|2| 0x000012A1<, __funcptr_type_kind >|2| 0x000012A2<
    0x000012A4 call ag5 "openglGetProcAddress" (cstroflen 14 "glObjectLabel") *s8
    0x000012A5 gvar *__funcptr_type_kind 0x000004AE
    0x000012A6 bc *s8 >|2| 0x000012A4< to __funcptr_type_kind
    0x000012A7 store *__funcptr_type_kind >|2| 0x000012A5<, __funcptr_type_kind >|2| 0x000012A6<
    0x000012A8 call ag5 "openglGetProcAddress" (cstroflen 17 "glObjectPtrLabel") *s8
    0x000012A9 gvar *__funcptr_type_kind 0x000004AF
    0x000012AA bc *s8 >|2| 0x000012A8< to __funcptr_type_kind
    0x000012AB store *__funcptr_type_kind >|2| 0x000012A9<, __funcptr_type_kind >|2| 0x000012AA<
    0x000012AC call ag5 "openglGetProcAddress" (cstroflen 12 "glOrthofOES") *s8
    0x000012AD gvar *__funcptr_type_kind 0x000004B0
    0x000012AE bc *s8 >|2| 0x000012AC< to __funcptr_type_kind
    0x000012AF store *__funcptr_type_kind >|2| 0x000012AD<, __funcptr_type_kind >|2| 0x000012AE<
    0x000012B0 call ag5 "openglGetProcAddress" (cstroflen 9 "glOrthof") *s8
    0x000012B1 gvar *__funcptr_type_kind 0x000004B1
    0x000012B2 bc *s8 >|2| 0x000012B0< to __funcptr_type_kind
    0x000012B3 store *__funcptr_type_kind >|2| 0x000012B1<, __funcptr_type_kind >|2| 0x000012B2<
    0x000012B4 call ag5 "openglGetProcAddress" (cstroflen 9 "glOrthox") *s8
    0x000012B5 gvar *__funcptr_type_kind 0x000004B2
    0x000012B6 bc *s8 >|2| 0x000012B4< to __funcptr_type_kind
    0x000012B7 store *__funcptr_type_kind >|2| 0x000012B5<, __funcptr_type_kind >|2| 0x000012B6<
    0x000012B8 call ag5 "openglGetProcAddress" (cstroflen 18 "glPassTexCoordATI") *s8
    0x000012B9 gvar *__funcptr_type_kind 0x000004B3
    0x000012BA bc *s8 >|2| 0x000012B8< to __funcptr_type_kind
    0x000012BB store *__funcptr_type_kind >|2| 0x000012B9<, __funcptr_type_kind >|2| 0x000012BA<
    0x000012BC call ag5 "openglGetProcAddress" (cstroflen 19 "glPatchParameterfv") *s8
    0x000012BD gvar *__funcptr_type_kind 0x000004B4
    0x000012BE bc *s8 >|2| 0x000012BC< to __funcptr_type_kind
    0x000012BF store *__funcptr_type_kind >|2| 0x000012BD<, __funcptr_type_kind >|2| 0x000012BE<
    0x000012C0 call ag5 "openglGetProcAddress" (cstroflen 18 "glPatchParameteri") *s8
    0x000012C1 gvar *__funcptr_type_kind 0x000004B5
    0x000012C2 bc *s8 >|2| 0x000012C0< to __funcptr_type_kind
    0x000012C3 store *__funcptr_type_kind >|2| 0x000012C1<, __funcptr_type_kind >|2| 0x000012C2<
    0x000012C4 call ag5 "openglGetProcAddress" (cstroflen 17 "glPathColorGenNV") *s8
    0x000012C5 gvar *__funcptr_type_kind 0x000004B6
    0x000012C6 bc *s8 >|2| 0x000012C4< to __funcptr_type_kind
    0x000012C7 store *__funcptr_type_kind >|2| 0x000012C5<, __funcptr_type_kind >|2| 0x000012C6<
    0x000012C8 call ag5 "openglGetProcAddress" (cstroflen 17 "glPathCommandsNV") *s8
    0x000012C9 gvar *__funcptr_type_kind 0x000004B7
    0x000012CA bc *s8 >|2| 0x000012C8< to __funcptr_type_kind
    0x000012CB store *__funcptr_type_kind >|2| 0x000012C9<, __funcptr_type_kind >|2| 0x000012CA<
    0x000012CC call ag5 "openglGetProcAddress" (cstroflen 15 "glPathCoordsNV") *s8
    0x000012CD gvar *__funcptr_type_kind 0x000004B8
    0x000012CE bc *s8 >|2| 0x000012CC< to __funcptr_type_kind
    0x000012CF store *__funcptr_type_kind >|2| 0x000012CD<, __funcptr_type_kind >|2| 0x000012CE<
    0x000012D0 call ag5 "openglGetProcAddress" (cstroflen 23 "glPathCoverDepthFuncNV") *s8
    0x000012D1 gvar *__funcptr_type_kind 0x000004B9
    0x000012D2 bc *s8 >|2| 0x000012D0< to __funcptr_type_kind
    0x000012D3 store *__funcptr_type_kind >|2| 0x000012D1<, __funcptr_type_kind >|2| 0x000012D2<
    0x000012D4 call ag5 "openglGetProcAddress" (cstroflen 18 "glPathDashArrayNV") *s8
    0x000012D5 gvar *__funcptr_type_kind 0x000004BA
    0x000012D6 bc *s8 >|2| 0x000012D4< to __funcptr_type_kind
    0x000012D7 store *__funcptr_type_kind >|2| 0x000012D5<, __funcptr_type_kind >|2| 0x000012D6<
    0x000012D8 call ag5 "openglGetProcAddress" (cstroflen 15 "glPathFogGenNV") *s8
    0x000012D9 gvar *__funcptr_type_kind 0x000004BB
    0x000012DA bc *s8 >|2| 0x000012D8< to __funcptr_type_kind
    0x000012DB store *__funcptr_type_kind >|2| 0x000012D9<, __funcptr_type_kind >|2| 0x000012DA<
    0x000012DC call ag5 "openglGetProcAddress" (cstroflen 19 "glPathGlyphRangeNV") *s8
    0x000012DD gvar *__funcptr_type_kind 0x000004BC
    0x000012DE bc *s8 >|2| 0x000012DC< to __funcptr_type_kind
    0x000012DF store *__funcptr_type_kind >|2| 0x000012DD<, __funcptr_type_kind >|2| 0x000012DE<
    0x000012E0 call ag5 "openglGetProcAddress" (cstroflen 15 "glPathGlyphsNV") *s8
    0x000012E1 gvar *__funcptr_type_kind 0x000004BD
    0x000012E2 bc *s8 >|2| 0x000012E0< to __funcptr_type_kind
    0x000012E3 store *__funcptr_type_kind >|2| 0x000012E1<, __funcptr_type_kind >|2| 0x000012E2<
    0x000012E4 call ag5 "openglGetProcAddress" (cstroflen 19 "glPathParameterfNV") *s8
    0x000012E5 gvar *__funcptr_type_kind 0x000004BE
    0x000012E6 bc *s8 >|2| 0x000012E4< to __funcptr_type_kind
    0x000012E7 store *__funcptr_type_kind >|2| 0x000012E5<, __funcptr_type_kind >|2| 0x000012E6<
    0x000012E8 call ag5 "openglGetProcAddress" (cstroflen 20 "glPathParameterfvNV") *s8
    0x000012E9 gvar *__funcptr_type_kind 0x000004BF
    0x000012EA bc *s8 >|2| 0x000012E8< to __funcptr_type_kind
    0x000012EB store *__funcptr_type_kind >|2| 0x000012E9<, __funcptr_type_kind >|2| 0x000012EA<
    0x000012EC call ag5 "openglGetProcAddress" (cstroflen 19 "glPathParameteriNV") *s8
    0x000012ED gvar *__funcptr_type_kind 0x000004C0
    0x000012EE bc *s8 >|2| 0x000012EC< to __funcptr_type_kind
    0x000012EF store *__funcptr_type_kind >|2| 0x000012ED<, __funcptr_type_kind >|2| 0x000012EE<
    0x000012F0 call ag5 "openglGetProcAddress" (cstroflen 20 "glPathParameterivNV") *s8
    0x000012F1 gvar *__funcptr_type_kind 0x000004C1
    0x000012F2 bc *s8 >|2| 0x000012F0< to __funcptr_type_kind
    0x000012F3 store *__funcptr_type_kind >|2| 0x000012F1<, __funcptr_type_kind >|2| 0x000012F2<
    0x000012F4 call ag5 "openglGetProcAddress" (cstroflen 27 "glPathStencilDepthOffsetNV") *s8
    0x000012F5 gvar *__funcptr_type_kind 0x000004C2
    0x000012F6 bc *s8 >|2| 0x000012F4< to __funcptr_type_kind
    0x000012F7 store *__funcptr_type_kind >|2| 0x000012F5<, __funcptr_type_kind >|2| 0x000012F6<
    0x000012F8 call ag5 "openglGetProcAddress" (cstroflen 20 "glPathStencilFuncNV") *s8
    0x000012F9 gvar *__funcptr_type_kind 0x000004C3
    0x000012FA bc *s8 >|2| 0x000012F8< to __funcptr_type_kind
    0x000012FB store *__funcptr_type_kind >|2| 0x000012F9<, __funcptr_type_kind >|2| 0x000012FA<
    0x000012FC call ag5 "openglGetProcAddress" (cstroflen 15 "glPathStringNV") *s8
    0x000012FD gvar *__funcptr_type_kind 0x000004C4
    0x000012FE bc *s8 >|2| 0x000012FC< to __funcptr_type_kind
    0x000012FF store *__funcptr_type_kind >|2| 0x000012FD<, __funcptr_type_kind >|2| 0x000012FE<
    0x00001300 call ag5 "openglGetProcAddress" (cstroflen 20 "glPathSubCommandsNV") *s8
    0x00001301 gvar *__funcptr_type_kind 0x000004C5
    0x00001302 bc *s8 >|2| 0x00001300< to __funcptr_type_kind
    0x00001303 store *__funcptr_type_kind >|2| 0x00001301<, __funcptr_type_kind >|2| 0x00001302<
    0x00001304 call ag5 "openglGetProcAddress" (cstroflen 18 "glPathSubCoordsNV") *s8
    0x00001305 gvar *__funcptr_type_kind 0x000004C6
    0x00001306 bc *s8 >|2| 0x00001304< to __funcptr_type_kind
    0x00001307 store *__funcptr_type_kind >|2| 0x00001305<, __funcptr_type_kind >|2| 0x00001306<
    0x00001308 call ag5 "openglGetProcAddress" (cstroflen 15 "glPathTexGenNV") *s8
    0x00001309 gvar *__funcptr_type_kind 0x000004C7
    0x0000130A bc *s8 >|2| 0x00001308< to __funcptr_type_kind
    0x0000130B store *__funcptr_type_kind >|2| 0x00001309<, __funcptr_type_kind >|2| 0x0000130A<
    0x0000130C call ag5 "openglGetProcAddress" (cstroflen 27 "glPauseTransformFeedbackNV") *s8
    0x0000130D gvar *__funcptr_type_kind 0x000004C8
    0x0000130E bc *s8 >|2| 0x0000130C< to __funcptr_type_kind
    0x0000130F store *__funcptr_type_kind >|2| 0x0000130D<, __funcptr_type_kind >|2| 0x0000130E<
    0x00001310 call ag5 "openglGetProcAddress" (cstroflen 25 "glPauseTransformFeedback") *s8
    0x00001311 gvar *__funcptr_type_kind 0x000004C9
    0x00001312 bc *s8 >|2| 0x00001310< to __funcptr_type_kind
    0x00001313 store *__funcptr_type_kind >|2| 0x00001311<, __funcptr_type_kind >|2| 0x00001312<
    0x00001314 call ag5 "openglGetProcAddress" (cstroflen 19 "glPixelDataRangeNV") *s8
    0x00001315 gvar *__funcptr_type_kind 0x000004CA
    0x00001316 bc *s8 >|2| 0x00001314< to __funcptr_type_kind
    0x00001317 store *__funcptr_type_kind >|2| 0x00001315<, __funcptr_type_kind >|2| 0x00001316<
    0x00001318 call ag5 "openglGetProcAddress" (cstroflen 18 "glPixelTexGenSGIX") *s8
    0x00001319 gvar *__funcptr_type_kind 0x000004CB
    0x0000131A bc *s8 >|2| 0x00001318< to __funcptr_type_kind
    0x0000131B store *__funcptr_type_kind >|2| 0x00001319<, __funcptr_type_kind >|2| 0x0000131A<
    0x0000131C call ag5 "openglGetProcAddress" (cstroflen 30 "glPixelTransformParameterfEXT") *s8
    0x0000131D gvar *__funcptr_type_kind 0x000004CC
    0x0000131E bc *s8 >|2| 0x0000131C< to __funcptr_type_kind
    0x0000131F store *__funcptr_type_kind >|2| 0x0000131D<, __funcptr_type_kind >|2| 0x0000131E<
    0x00001320 call ag5 "openglGetProcAddress" (cstroflen 31 "glPixelTransformParameterfvEXT") *s8
    0x00001321 gvar *__funcptr_type_kind 0x000004CD
    0x00001322 bc *s8 >|2| 0x00001320< to __funcptr_type_kind
    0x00001323 store *__funcptr_type_kind >|2| 0x00001321<, __funcptr_type_kind >|2| 0x00001322<
    0x00001324 call ag5 "openglGetProcAddress" (cstroflen 30 "glPixelTransformParameteriEXT") *s8
    0x00001325 gvar *__funcptr_type_kind 0x000004CE
    0x00001326 bc *s8 >|2| 0x00001324< to __funcptr_type_kind
    0x00001327 store *__funcptr_type_kind >|2| 0x00001325<, __funcptr_type_kind >|2| 0x00001326<
    0x00001328 call ag5 "openglGetProcAddress" (cstroflen 31 "glPixelTransformParameterivEXT") *s8
    0x00001329 gvar *__funcptr_type_kind 0x000004CF
    0x0000132A bc *s8 >|2| 0x00001328< to __funcptr_type_kind
    0x0000132B store *__funcptr_type_kind >|2| 0x00001329<, __funcptr_type_kind >|2| 0x0000132A<
    0x0000132C call ag5 "openglGetProcAddress" (cstroflen 18 "glPNTrianglesfATI") *s8
    0x0000132D gvar *__funcptr_type_kind 0x000004D0
    0x0000132E bc *s8 >|2| 0x0000132C< to __funcptr_type_kind
    0x0000132F store *__funcptr_type_kind >|2| 0x0000132D<, __funcptr_type_kind >|2| 0x0000132E<
    0x00001330 call ag5 "openglGetProcAddress" (cstroflen 18 "glPNTrianglesiATI") *s8
    0x00001331 gvar *__funcptr_type_kind 0x000004D1
    0x00001332 bc *s8 >|2| 0x00001330< to __funcptr_type_kind
    0x00001333 store *__funcptr_type_kind >|2| 0x00001331<, __funcptr_type_kind >|2| 0x00001332<
    0x00001334 call ag5 "openglGetProcAddress" (cstroflen 21 "glPointParameterfARB") *s8
    0x00001335 gvar *__funcptr_type_kind 0x000004D2
    0x00001336 bc *s8 >|2| 0x00001334< to __funcptr_type_kind
    0x00001337 store *__funcptr_type_kind >|2| 0x00001335<, __funcptr_type_kind >|2| 0x00001336<
    0x00001338 call ag5 "openglGetProcAddress" (cstroflen 21 "glPointParameterfEXT") *s8
    0x00001339 gvar *__funcptr_type_kind 0x000004D3
    0x0000133A bc *s8 >|2| 0x00001338< to __funcptr_type_kind
    0x0000133B store *__funcptr_type_kind >|2| 0x00001339<, __funcptr_type_kind >|2| 0x0000133A<
    0x0000133C call ag5 "openglGetProcAddress" (cstroflen 18 "glPointParameterf") *s8
    0x0000133D gvar *__funcptr_type_kind 0x000004D4
    0x0000133E bc *s8 >|2| 0x0000133C< to __funcptr_type_kind
    0x0000133F store *__funcptr_type_kind >|2| 0x0000133D<, __funcptr_type_kind >|2| 0x0000133E<
    0x00001340 call ag5 "openglGetProcAddress" (cstroflen 22 "glPointParameterfvARB") *s8
    0x00001341 gvar *__funcptr_type_kind 0x000004D5
    0x00001342 bc *s8 >|2| 0x00001340< to __funcptr_type_kind
    0x00001343 store *__funcptr_type_kind >|2| 0x00001341<, __funcptr_type_kind >|2| 0x00001342<
    0x00001344 call ag5 "openglGetProcAddress" (cstroflen 22 "glPointParameterfvEXT") *s8
    0x00001345 gvar *__funcptr_type_kind 0x000004D6
    0x00001346 bc *s8 >|2| 0x00001344< to __funcptr_type_kind
    0x00001347 store *__funcptr_type_kind >|2| 0x00001345<, __funcptr_type_kind >|2| 0x00001346<
    0x00001348 call ag5 "openglGetProcAddress" (cstroflen 19 "glPointParameterfv") *s8
    0x00001349 gvar *__funcptr_type_kind 0x000004D7
    0x0000134A bc *s8 >|2| 0x00001348< to __funcptr_type_kind
    0x0000134B store *__funcptr_type_kind >|2| 0x00001349<, __funcptr_type_kind >|2| 0x0000134A<
    0x0000134C call ag5 "openglGetProcAddress" (cstroflen 20 "glPointParameteriNV") *s8
    0x0000134D gvar *__funcptr_type_kind 0x000004D8
    0x0000134E bc *s8 >|2| 0x0000134C< to __funcptr_type_kind
    0x0000134F store *__funcptr_type_kind >|2| 0x0000134D<, __funcptr_type_kind >|2| 0x0000134E<
    0x00001350 call ag5 "openglGetProcAddress" (cstroflen 18 "glPointParameteri") *s8
    0x00001351 gvar *__funcptr_type_kind 0x000004D9
    0x00001352 bc *s8 >|2| 0x00001350< to __funcptr_type_kind
    0x00001353 store *__funcptr_type_kind >|2| 0x00001351<, __funcptr_type_kind >|2| 0x00001352<
    0x00001354 call ag5 "openglGetProcAddress" (cstroflen 21 "glPointParameterivNV") *s8
    0x00001355 gvar *__funcptr_type_kind 0x000004DA
    0x00001356 bc *s8 >|2| 0x00001354< to __funcptr_type_kind
    0x00001357 store *__funcptr_type_kind >|2| 0x00001355<, __funcptr_type_kind >|2| 0x00001356<
    0x00001358 call ag5 "openglGetProcAddress" (cstroflen 19 "glPointParameteriv") *s8
    0x00001359 gvar *__funcptr_type_kind 0x000004DB
    0x0000135A bc *s8 >|2| 0x00001358< to __funcptr_type_kind
    0x0000135B store *__funcptr_type_kind >|2| 0x00001359<, __funcptr_type_kind >|2| 0x0000135A<
    0x0000135C call ag5 "openglGetProcAddress" (cstroflen 18 "glPointParameterx") *s8
    0x0000135D gvar *__funcptr_type_kind 0x000004DC
    0x0000135E bc *s8 >|2| 0x0000135C< to __funcptr_type_kind
    0x0000135F store *__funcptr_type_kind >|2| 0x0000135D<, __funcptr_type_kind >|2| 0x0000135E<
    0x00001360 call ag5 "openglGetProcAddress" (cstroflen 19 "glPointParameterxv") *s8
    0x00001361 gvar *__funcptr_type_kind 0x000004DD
    0x00001362 bc *s8 >|2| 0x00001360< to __funcptr_type_kind
    0x00001363 store *__funcptr_type_kind >|2| 0x00001361<, __funcptr_type_kind >|2| 0x00001362<
    0x00001364 call ag5 "openglGetProcAddress" (cstroflen 22 "glPointSizePointerOES") *s8
    0x00001365 gvar *__funcptr_type_kind 0x000004DE
    0x00001366 bc *s8 >|2| 0x00001364< to __funcptr_type_kind
    0x00001367 store *__funcptr_type_kind >|2| 0x00001365<, __funcptr_type_kind >|2| 0x00001366<
    0x00001368 call ag5 "openglGetProcAddress" (cstroflen 13 "glPointSizex") *s8
    0x00001369 gvar *__funcptr_type_kind 0x000004DF
    0x0000136A bc *s8 >|2| 0x00001368< to __funcptr_type_kind
    0x0000136B store *__funcptr_type_kind >|2| 0x00001369<, __funcptr_type_kind >|2| 0x0000136A<
    0x0000136C call ag5 "openglGetProcAddress" (cstroflen 24 "glPolygonOffsetClampEXT") *s8
    0x0000136D gvar *__funcptr_type_kind 0x000004E0
    0x0000136E bc *s8 >|2| 0x0000136C< to __funcptr_type_kind
    0x0000136F store *__funcptr_type_kind >|2| 0x0000136D<, __funcptr_type_kind >|2| 0x0000136E<
    0x00001370 call ag5 "openglGetProcAddress" (cstroflen 19 "glPolygonOffsetEXT") *s8
    0x00001371 gvar *__funcptr_type_kind 0x000004E1
    0x00001372 bc *s8 >|2| 0x00001370< to __funcptr_type_kind
    0x00001373 store *__funcptr_type_kind >|2| 0x00001371<, __funcptr_type_kind >|2| 0x00001372<
    0x00001374 call ag5 "openglGetProcAddress" (cstroflen 17 "glPolygonOffsetx") *s8
    0x00001375 gvar *__funcptr_type_kind 0x000004E2
    0x00001376 bc *s8 >|2| 0x00001374< to __funcptr_type_kind
    0x00001377 store *__funcptr_type_kind >|2| 0x00001375<, __funcptr_type_kind >|2| 0x00001376<
    0x00001378 call ag5 "openglGetProcAddress" (cstroflen 16 "glPopDebugGroup") *s8
    0x00001379 gvar *__funcptr_type_kind 0x000004E3
    0x0000137A bc *s8 >|2| 0x00001378< to __funcptr_type_kind
    0x0000137B store *__funcptr_type_kind >|2| 0x00001379<, __funcptr_type_kind >|2| 0x0000137A<
    0x0000137C call ag5 "openglGetProcAddress" (cstroflen 20 "glPopGroupMarkerEXT") *s8
    0x0000137D gvar *__funcptr_type_kind 0x000004E4
    0x0000137E bc *s8 >|2| 0x0000137C< to __funcptr_type_kind
    0x0000137F store *__funcptr_type_kind >|2| 0x0000137D<, __funcptr_type_kind >|2| 0x0000137E<
    0x00001380 call ag5 "openglGetProcAddress" (cstroflen 25 "glPresentFrameDualFillNV") *s8
    0x00001381 gvar *__funcptr_type_kind 0x000004E5
    0x00001382 bc *s8 >|2| 0x00001380< to __funcptr_type_kind
    0x00001383 store *__funcptr_type_kind >|2| 0x00001381<, __funcptr_type_kind >|2| 0x00001382<
    0x00001384 call ag5 "openglGetProcAddress" (cstroflen 22 "glPresentFrameKeyedNV") *s8
    0x00001385 gvar *__funcptr_type_kind 0x000004E6
    0x00001386 bc *s8 >|2| 0x00001384< to __funcptr_type_kind
    0x00001387 store *__funcptr_type_kind >|2| 0x00001385<, __funcptr_type_kind >|2| 0x00001386<
    0x00001388 call ag5 "openglGetProcAddress" (cstroflen 26 "glPrimitiveBoundingBoxARB") *s8
    0x00001389 gvar *__funcptr_type_kind 0x000004E7
    0x0000138A bc *s8 >|2| 0x00001388< to __funcptr_type_kind
    0x0000138B store *__funcptr_type_kind >|2| 0x00001389<, __funcptr_type_kind >|2| 0x0000138A<
    0x0000138C call ag5 "openglGetProcAddress" (cstroflen 26 "glPrimitiveRestartIndexNV") *s8
    0x0000138D gvar *__funcptr_type_kind 0x000004E8
    0x0000138E bc *s8 >|2| 0x0000138C< to __funcptr_type_kind
    0x0000138F store *__funcptr_type_kind >|2| 0x0000138D<, __funcptr_type_kind >|2| 0x0000138E<
    0x00001390 call ag5 "openglGetProcAddress" (cstroflen 24 "glPrimitiveRestartIndex") *s8
    0x00001391 gvar *__funcptr_type_kind 0x000004E9
    0x00001392 bc *s8 >|2| 0x00001390< to __funcptr_type_kind
    0x00001393 store *__funcptr_type_kind >|2| 0x00001391<, __funcptr_type_kind >|2| 0x00001392<
    0x00001394 call ag5 "openglGetProcAddress" (cstroflen 21 "glPrimitiveRestartNV") *s8
    0x00001395 gvar *__funcptr_type_kind 0x000004EA
    0x00001396 bc *s8 >|2| 0x00001394< to __funcptr_type_kind
    0x00001397 store *__funcptr_type_kind >|2| 0x00001395<, __funcptr_type_kind >|2| 0x00001396<
    0x00001398 call ag5 "openglGetProcAddress" (cstroflen 24 "glPrioritizeTexturesEXT") *s8
    0x00001399 gvar *__funcptr_type_kind 0x000004EB
    0x0000139A bc *s8 >|2| 0x00001398< to __funcptr_type_kind
    0x0000139B store *__funcptr_type_kind >|2| 0x00001399<, __funcptr_type_kind >|2| 0x0000139A<
    0x0000139C call ag5 "openglGetProcAddress" (cstroflen 16 "glProgramBinary") *s8
    0x0000139D gvar *__funcptr_type_kind 0x000004EC
    0x0000139E bc *s8 >|2| 0x0000139C< to __funcptr_type_kind
    0x0000139F store *__funcptr_type_kind >|2| 0x0000139D<, __funcptr_type_kind >|2| 0x0000139E<
    0x000013A0 call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramBufferParametersfvNV") *s8
    0x000013A1 gvar *__funcptr_type_kind 0x000004ED
    0x000013A2 bc *s8 >|2| 0x000013A0< to __funcptr_type_kind
    0x000013A3 store *__funcptr_type_kind >|2| 0x000013A1<, __funcptr_type_kind >|2| 0x000013A2<
    0x000013A4 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramBufferParametersIivNV") *s8
    0x000013A5 gvar *__funcptr_type_kind 0x000004EE
    0x000013A6 bc *s8 >|2| 0x000013A4< to __funcptr_type_kind
    0x000013A7 store *__funcptr_type_kind >|2| 0x000013A5<, __funcptr_type_kind >|2| 0x000013A6<
    0x000013A8 call ag5 "openglGetProcAddress" (cstroflen 32 "glProgramBufferParametersIuivNV") *s8
    0x000013A9 gvar *__funcptr_type_kind 0x000004EF
    0x000013AA bc *s8 >|2| 0x000013A8< to __funcptr_type_kind
    0x000013AB store *__funcptr_type_kind >|2| 0x000013A9<, __funcptr_type_kind >|2| 0x000013AA<
    0x000013AC call ag5 "openglGetProcAddress" (cstroflen 27 "glProgramEnvParameter4dARB") *s8
    0x000013AD gvar *__funcptr_type_kind 0x000004F0
    0x000013AE bc *s8 >|2| 0x000013AC< to __funcptr_type_kind
    0x000013AF store *__funcptr_type_kind >|2| 0x000013AD<, __funcptr_type_kind >|2| 0x000013AE<
    0x000013B0 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramEnvParameter4dvARB") *s8
    0x000013B1 gvar *__funcptr_type_kind 0x000004F1
    0x000013B2 bc *s8 >|2| 0x000013B0< to __funcptr_type_kind
    0x000013B3 store *__funcptr_type_kind >|2| 0x000013B1<, __funcptr_type_kind >|2| 0x000013B2<
    0x000013B4 call ag5 "openglGetProcAddress" (cstroflen 27 "glProgramEnvParameter4fARB") *s8
    0x000013B5 gvar *__funcptr_type_kind 0x000004F2
    0x000013B6 bc *s8 >|2| 0x000013B4< to __funcptr_type_kind
    0x000013B7 store *__funcptr_type_kind >|2| 0x000013B5<, __funcptr_type_kind >|2| 0x000013B6<
    0x000013B8 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramEnvParameter4fvARB") *s8
    0x000013B9 gvar *__funcptr_type_kind 0x000004F3
    0x000013BA bc *s8 >|2| 0x000013B8< to __funcptr_type_kind
    0x000013BB store *__funcptr_type_kind >|2| 0x000013B9<, __funcptr_type_kind >|2| 0x000013BA<
    0x000013BC call ag5 "openglGetProcAddress" (cstroflen 27 "glProgramEnvParameterI4iNV") *s8
    0x000013BD gvar *__funcptr_type_kind 0x000004F4
    0x000013BE bc *s8 >|2| 0x000013BC< to __funcptr_type_kind
    0x000013BF store *__funcptr_type_kind >|2| 0x000013BD<, __funcptr_type_kind >|2| 0x000013BE<
    0x000013C0 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramEnvParameterI4ivNV") *s8
    0x000013C1 gvar *__funcptr_type_kind 0x000004F5
    0x000013C2 bc *s8 >|2| 0x000013C0< to __funcptr_type_kind
    0x000013C3 store *__funcptr_type_kind >|2| 0x000013C1<, __funcptr_type_kind >|2| 0x000013C2<
    0x000013C4 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramEnvParameterI4uiNV") *s8
    0x000013C5 gvar *__funcptr_type_kind 0x000004F6
    0x000013C6 bc *s8 >|2| 0x000013C4< to __funcptr_type_kind
    0x000013C7 store *__funcptr_type_kind >|2| 0x000013C5<, __funcptr_type_kind >|2| 0x000013C6<
    0x000013C8 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramEnvParameterI4uivNV") *s8
    0x000013C9 gvar *__funcptr_type_kind 0x000004F7
    0x000013CA bc *s8 >|2| 0x000013C8< to __funcptr_type_kind
    0x000013CB store *__funcptr_type_kind >|2| 0x000013C9<, __funcptr_type_kind >|2| 0x000013CA<
    0x000013CC call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramEnvParameters4fvEXT") *s8
    0x000013CD gvar *__funcptr_type_kind 0x000004F8
    0x000013CE bc *s8 >|2| 0x000013CC< to __funcptr_type_kind
    0x000013CF store *__funcptr_type_kind >|2| 0x000013CD<, __funcptr_type_kind >|2| 0x000013CE<
    0x000013D0 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramEnvParametersI4ivNV") *s8
    0x000013D1 gvar *__funcptr_type_kind 0x000004F9
    0x000013D2 bc *s8 >|2| 0x000013D0< to __funcptr_type_kind
    0x000013D3 store *__funcptr_type_kind >|2| 0x000013D1<, __funcptr_type_kind >|2| 0x000013D2<
    0x000013D4 call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramEnvParametersI4uivNV") *s8
    0x000013D5 gvar *__funcptr_type_kind 0x000004FA
    0x000013D6 bc *s8 >|2| 0x000013D4< to __funcptr_type_kind
    0x000013D7 store *__funcptr_type_kind >|2| 0x000013D5<, __funcptr_type_kind >|2| 0x000013D6<
    0x000013D8 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramLocalParameter4dARB") *s8
    0x000013D9 gvar *__funcptr_type_kind 0x000004FB
    0x000013DA bc *s8 >|2| 0x000013D8< to __funcptr_type_kind
    0x000013DB store *__funcptr_type_kind >|2| 0x000013D9<, __funcptr_type_kind >|2| 0x000013DA<
    0x000013DC call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramLocalParameter4dvARB") *s8
    0x000013DD gvar *__funcptr_type_kind 0x000004FC
    0x000013DE bc *s8 >|2| 0x000013DC< to __funcptr_type_kind
    0x000013DF store *__funcptr_type_kind >|2| 0x000013DD<, __funcptr_type_kind >|2| 0x000013DE<
    0x000013E0 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramLocalParameter4fARB") *s8
    0x000013E1 gvar *__funcptr_type_kind 0x000004FD
    0x000013E2 bc *s8 >|2| 0x000013E0< to __funcptr_type_kind
    0x000013E3 store *__funcptr_type_kind >|2| 0x000013E1<, __funcptr_type_kind >|2| 0x000013E2<
    0x000013E4 call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramLocalParameter4fvARB") *s8
    0x000013E5 gvar *__funcptr_type_kind 0x000004FE
    0x000013E6 bc *s8 >|2| 0x000013E4< to __funcptr_type_kind
    0x000013E7 store *__funcptr_type_kind >|2| 0x000013E5<, __funcptr_type_kind >|2| 0x000013E6<
    0x000013E8 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramLocalParameterI4iNV") *s8
    0x000013E9 gvar *__funcptr_type_kind 0x000004FF
    0x000013EA bc *s8 >|2| 0x000013E8< to __funcptr_type_kind
    0x000013EB store *__funcptr_type_kind >|2| 0x000013E9<, __funcptr_type_kind >|2| 0x000013EA<
    0x000013EC call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramLocalParameterI4ivNV") *s8
    0x000013ED gvar *__funcptr_type_kind 0x00000500
    0x000013EE bc *s8 >|2| 0x000013EC< to __funcptr_type_kind
    0x000013EF store *__funcptr_type_kind >|2| 0x000013ED<, __funcptr_type_kind >|2| 0x000013EE<
    0x000013F0 call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramLocalParameterI4uiNV") *s8
    0x000013F1 gvar *__funcptr_type_kind 0x00000501
    0x000013F2 bc *s8 >|2| 0x000013F0< to __funcptr_type_kind
    0x000013F3 store *__funcptr_type_kind >|2| 0x000013F1<, __funcptr_type_kind >|2| 0x000013F2<
    0x000013F4 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramLocalParameterI4uivNV") *s8
    0x000013F5 gvar *__funcptr_type_kind 0x00000502
    0x000013F6 bc *s8 >|2| 0x000013F4< to __funcptr_type_kind
    0x000013F7 store *__funcptr_type_kind >|2| 0x000013F5<, __funcptr_type_kind >|2| 0x000013F6<
    0x000013F8 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramLocalParameters4fvEXT") *s8
    0x000013F9 gvar *__funcptr_type_kind 0x00000503
    0x000013FA bc *s8 >|2| 0x000013F8< to __funcptr_type_kind
    0x000013FB store *__funcptr_type_kind >|2| 0x000013F9<, __funcptr_type_kind >|2| 0x000013FA<
    0x000013FC call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramLocalParametersI4ivNV") *s8
    0x000013FD gvar *__funcptr_type_kind 0x00000504
    0x000013FE bc *s8 >|2| 0x000013FC< to __funcptr_type_kind
    0x000013FF store *__funcptr_type_kind >|2| 0x000013FD<, __funcptr_type_kind >|2| 0x000013FE<
    0x00001400 call ag5 "openglGetProcAddress" (cstroflen 32 "glProgramLocalParametersI4uivNV") *s8
    0x00001401 gvar *__funcptr_type_kind 0x00000505
    0x00001402 bc *s8 >|2| 0x00001400< to __funcptr_type_kind
    0x00001403 store *__funcptr_type_kind >|2| 0x00001401<, __funcptr_type_kind >|2| 0x00001402<
    0x00001404 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramNamedParameter4dNV") *s8
    0x00001405 gvar *__funcptr_type_kind 0x00000506
    0x00001406 bc *s8 >|2| 0x00001404< to __funcptr_type_kind
    0x00001407 store *__funcptr_type_kind >|2| 0x00001405<, __funcptr_type_kind >|2| 0x00001406<
    0x00001408 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramNamedParameter4dvNV") *s8
    0x00001409 gvar *__funcptr_type_kind 0x00000507
    0x0000140A bc *s8 >|2| 0x00001408< to __funcptr_type_kind
    0x0000140B store *__funcptr_type_kind >|2| 0x00001409<, __funcptr_type_kind >|2| 0x0000140A<
    0x0000140C call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramNamedParameter4fvNV") *s8
    0x0000140D gvar *__funcptr_type_kind 0x00000508
    0x0000140E bc *s8 >|2| 0x0000140C< to __funcptr_type_kind
    0x0000140F store *__funcptr_type_kind >|2| 0x0000140D<, __funcptr_type_kind >|2| 0x0000140E<
    0x00001410 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramParameter4dNV") *s8
    0x00001411 gvar *__funcptr_type_kind 0x00000509
    0x00001412 bc *s8 >|2| 0x00001410< to __funcptr_type_kind
    0x00001413 store *__funcptr_type_kind >|2| 0x00001411<, __funcptr_type_kind >|2| 0x00001412<
    0x00001414 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramParameter4dvNV") *s8
    0x00001415 gvar *__funcptr_type_kind 0x0000050A
    0x00001416 bc *s8 >|2| 0x00001414< to __funcptr_type_kind
    0x00001417 store *__funcptr_type_kind >|2| 0x00001415<, __funcptr_type_kind >|2| 0x00001416<
    0x00001418 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramParameter4fNV") *s8
    0x00001419 gvar *__funcptr_type_kind 0x0000050B
    0x0000141A bc *s8 >|2| 0x00001418< to __funcptr_type_kind
    0x0000141B store *__funcptr_type_kind >|2| 0x00001419<, __funcptr_type_kind >|2| 0x0000141A<
    0x0000141C call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramParameter4fvNV") *s8
    0x0000141D gvar *__funcptr_type_kind 0x0000050C
    0x0000141E bc *s8 >|2| 0x0000141C< to __funcptr_type_kind
    0x0000141F store *__funcptr_type_kind >|2| 0x0000141D<, __funcptr_type_kind >|2| 0x0000141E<
    0x00001420 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramParameteriARB") *s8
    0x00001421 gvar *__funcptr_type_kind 0x0000050D
    0x00001422 bc *s8 >|2| 0x00001420< to __funcptr_type_kind
    0x00001423 store *__funcptr_type_kind >|2| 0x00001421<, __funcptr_type_kind >|2| 0x00001422<
    0x00001424 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramParameteriEXT") *s8
    0x00001425 gvar *__funcptr_type_kind 0x0000050E
    0x00001426 bc *s8 >|2| 0x00001424< to __funcptr_type_kind
    0x00001427 store *__funcptr_type_kind >|2| 0x00001425<, __funcptr_type_kind >|2| 0x00001426<
    0x00001428 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramParameteri") *s8
    0x00001429 gvar *__funcptr_type_kind 0x0000050F
    0x0000142A bc *s8 >|2| 0x00001428< to __funcptr_type_kind
    0x0000142B store *__funcptr_type_kind >|2| 0x00001429<, __funcptr_type_kind >|2| 0x0000142A<
    0x0000142C call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramParameters4dvNV") *s8
    0x0000142D gvar *__funcptr_type_kind 0x00000510
    0x0000142E bc *s8 >|2| 0x0000142C< to __funcptr_type_kind
    0x0000142F store *__funcptr_type_kind >|2| 0x0000142D<, __funcptr_type_kind >|2| 0x0000142E<
    0x00001430 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramParameters4fvNV") *s8
    0x00001431 gvar *__funcptr_type_kind 0x00000511
    0x00001432 bc *s8 >|2| 0x00001430< to __funcptr_type_kind
    0x00001433 store *__funcptr_type_kind >|2| 0x00001431<, __funcptr_type_kind >|2| 0x00001432<
    0x00001434 call ag5 "openglGetProcAddress" (cstroflen 32 "glProgramPathFragmentInputGenNV") *s8
    0x00001435 gvar *__funcptr_type_kind 0x00000512
    0x00001436 bc *s8 >|2| 0x00001434< to __funcptr_type_kind
    0x00001437 store *__funcptr_type_kind >|2| 0x00001435<, __funcptr_type_kind >|2| 0x00001436<
    0x00001438 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramStringARB") *s8
    0x00001439 gvar *__funcptr_type_kind 0x00000513
    0x0000143A bc *s8 >|2| 0x00001438< to __funcptr_type_kind
    0x0000143B store *__funcptr_type_kind >|2| 0x00001439<, __funcptr_type_kind >|2| 0x0000143A<
    0x0000143C call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform1d") *s8
    0x0000143D gvar *__funcptr_type_kind 0x00000514
    0x0000143E bc *s8 >|2| 0x0000143C< to __funcptr_type_kind
    0x0000143F store *__funcptr_type_kind >|2| 0x0000143D<, __funcptr_type_kind >|2| 0x0000143E<
    0x00001440 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform1dv") *s8
    0x00001441 gvar *__funcptr_type_kind 0x00000515
    0x00001442 bc *s8 >|2| 0x00001440< to __funcptr_type_kind
    0x00001443 store *__funcptr_type_kind >|2| 0x00001441<, __funcptr_type_kind >|2| 0x00001442<
    0x00001444 call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform1fEXT") *s8
    0x00001445 gvar *__funcptr_type_kind 0x00000516
    0x00001446 bc *s8 >|2| 0x00001444< to __funcptr_type_kind
    0x00001447 store *__funcptr_type_kind >|2| 0x00001445<, __funcptr_type_kind >|2| 0x00001446<
    0x00001448 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform1f") *s8
    0x00001449 gvar *__funcptr_type_kind 0x00000517
    0x0000144A bc *s8 >|2| 0x00001448< to __funcptr_type_kind
    0x0000144B store *__funcptr_type_kind >|2| 0x00001449<, __funcptr_type_kind >|2| 0x0000144A<
    0x0000144C call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform1fvEXT") *s8
    0x0000144D gvar *__funcptr_type_kind 0x00000518
    0x0000144E bc *s8 >|2| 0x0000144C< to __funcptr_type_kind
    0x0000144F store *__funcptr_type_kind >|2| 0x0000144D<, __funcptr_type_kind >|2| 0x0000144E<
    0x00001450 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform1fv") *s8
    0x00001451 gvar *__funcptr_type_kind 0x00000519
    0x00001452 bc *s8 >|2| 0x00001450< to __funcptr_type_kind
    0x00001453 store *__funcptr_type_kind >|2| 0x00001451<, __funcptr_type_kind >|2| 0x00001452<
    0x00001454 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform1i64ARB") *s8
    0x00001455 gvar *__funcptr_type_kind 0x0000051A
    0x00001456 bc *s8 >|2| 0x00001454< to __funcptr_type_kind
    0x00001457 store *__funcptr_type_kind >|2| 0x00001455<, __funcptr_type_kind >|2| 0x00001456<
    0x00001458 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform1i64NV") *s8
    0x00001459 gvar *__funcptr_type_kind 0x0000051B
    0x0000145A bc *s8 >|2| 0x00001458< to __funcptr_type_kind
    0x0000145B store *__funcptr_type_kind >|2| 0x00001459<, __funcptr_type_kind >|2| 0x0000145A<
    0x0000145C call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform1i64vARB") *s8
    0x0000145D gvar *__funcptr_type_kind 0x0000051C
    0x0000145E bc *s8 >|2| 0x0000145C< to __funcptr_type_kind
    0x0000145F store *__funcptr_type_kind >|2| 0x0000145D<, __funcptr_type_kind >|2| 0x0000145E<
    0x00001460 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform1i64vNV") *s8
    0x00001461 gvar *__funcptr_type_kind 0x0000051D
    0x00001462 bc *s8 >|2| 0x00001460< to __funcptr_type_kind
    0x00001463 store *__funcptr_type_kind >|2| 0x00001461<, __funcptr_type_kind >|2| 0x00001462<
    0x00001464 call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform1iEXT") *s8
    0x00001465 gvar *__funcptr_type_kind 0x0000051E
    0x00001466 bc *s8 >|2| 0x00001464< to __funcptr_type_kind
    0x00001467 store *__funcptr_type_kind >|2| 0x00001465<, __funcptr_type_kind >|2| 0x00001466<
    0x00001468 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform1i") *s8
    0x00001469 gvar *__funcptr_type_kind 0x0000051F
    0x0000146A bc *s8 >|2| 0x00001468< to __funcptr_type_kind
    0x0000146B store *__funcptr_type_kind >|2| 0x00001469<, __funcptr_type_kind >|2| 0x0000146A<
    0x0000146C call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform1ivEXT") *s8
    0x0000146D gvar *__funcptr_type_kind 0x00000520
    0x0000146E bc *s8 >|2| 0x0000146C< to __funcptr_type_kind
    0x0000146F store *__funcptr_type_kind >|2| 0x0000146D<, __funcptr_type_kind >|2| 0x0000146E<
    0x00001470 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform1iv") *s8
    0x00001471 gvar *__funcptr_type_kind 0x00000521
    0x00001472 bc *s8 >|2| 0x00001470< to __funcptr_type_kind
    0x00001473 store *__funcptr_type_kind >|2| 0x00001471<, __funcptr_type_kind >|2| 0x00001472<
    0x00001474 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform1ui64ARB") *s8
    0x00001475 gvar *__funcptr_type_kind 0x00000522
    0x00001476 bc *s8 >|2| 0x00001474< to __funcptr_type_kind
    0x00001477 store *__funcptr_type_kind >|2| 0x00001475<, __funcptr_type_kind >|2| 0x00001476<
    0x00001478 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform1ui64NV") *s8
    0x00001479 gvar *__funcptr_type_kind 0x00000523
    0x0000147A bc *s8 >|2| 0x00001478< to __funcptr_type_kind
    0x0000147B store *__funcptr_type_kind >|2| 0x00001479<, __funcptr_type_kind >|2| 0x0000147A<
    0x0000147C call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniform1ui64vARB") *s8
    0x0000147D gvar *__funcptr_type_kind 0x00000524
    0x0000147E bc *s8 >|2| 0x0000147C< to __funcptr_type_kind
    0x0000147F store *__funcptr_type_kind >|2| 0x0000147D<, __funcptr_type_kind >|2| 0x0000147E<
    0x00001480 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform1ui64vNV") *s8
    0x00001481 gvar *__funcptr_type_kind 0x00000525
    0x00001482 bc *s8 >|2| 0x00001480< to __funcptr_type_kind
    0x00001483 store *__funcptr_type_kind >|2| 0x00001481<, __funcptr_type_kind >|2| 0x00001482<
    0x00001484 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform1uiEXT") *s8
    0x00001485 gvar *__funcptr_type_kind 0x00000526
    0x00001486 bc *s8 >|2| 0x00001484< to __funcptr_type_kind
    0x00001487 store *__funcptr_type_kind >|2| 0x00001485<, __funcptr_type_kind >|2| 0x00001486<
    0x00001488 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform1ui") *s8
    0x00001489 gvar *__funcptr_type_kind 0x00000527
    0x0000148A bc *s8 >|2| 0x00001488< to __funcptr_type_kind
    0x0000148B store *__funcptr_type_kind >|2| 0x00001489<, __funcptr_type_kind >|2| 0x0000148A<
    0x0000148C call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform1uivEXT") *s8
    0x0000148D gvar *__funcptr_type_kind 0x00000528
    0x0000148E bc *s8 >|2| 0x0000148C< to __funcptr_type_kind
    0x0000148F store *__funcptr_type_kind >|2| 0x0000148D<, __funcptr_type_kind >|2| 0x0000148E<
    0x00001490 call ag5 "openglGetProcAddress" (cstroflen 21 "glProgramUniform1uiv") *s8
    0x00001491 gvar *__funcptr_type_kind 0x00000529
    0x00001492 bc *s8 >|2| 0x00001490< to __funcptr_type_kind
    0x00001493 store *__funcptr_type_kind >|2| 0x00001491<, __funcptr_type_kind >|2| 0x00001492<
    0x00001494 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform2d") *s8
    0x00001495 gvar *__funcptr_type_kind 0x0000052A
    0x00001496 bc *s8 >|2| 0x00001494< to __funcptr_type_kind
    0x00001497 store *__funcptr_type_kind >|2| 0x00001495<, __funcptr_type_kind >|2| 0x00001496<
    0x00001498 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform2dv") *s8
    0x00001499 gvar *__funcptr_type_kind 0x0000052B
    0x0000149A bc *s8 >|2| 0x00001498< to __funcptr_type_kind
    0x0000149B store *__funcptr_type_kind >|2| 0x00001499<, __funcptr_type_kind >|2| 0x0000149A<
    0x0000149C call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform2fEXT") *s8
    0x0000149D gvar *__funcptr_type_kind 0x0000052C
    0x0000149E bc *s8 >|2| 0x0000149C< to __funcptr_type_kind
    0x0000149F store *__funcptr_type_kind >|2| 0x0000149D<, __funcptr_type_kind >|2| 0x0000149E<
    0x000014A0 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform2f") *s8
    0x000014A1 gvar *__funcptr_type_kind 0x0000052D
    0x000014A2 bc *s8 >|2| 0x000014A0< to __funcptr_type_kind
    0x000014A3 store *__funcptr_type_kind >|2| 0x000014A1<, __funcptr_type_kind >|2| 0x000014A2<
    0x000014A4 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform2fvEXT") *s8
    0x000014A5 gvar *__funcptr_type_kind 0x0000052E
    0x000014A6 bc *s8 >|2| 0x000014A4< to __funcptr_type_kind
    0x000014A7 store *__funcptr_type_kind >|2| 0x000014A5<, __funcptr_type_kind >|2| 0x000014A6<
    0x000014A8 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform2fv") *s8
    0x000014A9 gvar *__funcptr_type_kind 0x0000052F
    0x000014AA bc *s8 >|2| 0x000014A8< to __funcptr_type_kind
    0x000014AB store *__funcptr_type_kind >|2| 0x000014A9<, __funcptr_type_kind >|2| 0x000014AA<
    0x000014AC call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform2i64ARB") *s8
    0x000014AD gvar *__funcptr_type_kind 0x00000530
    0x000014AE bc *s8 >|2| 0x000014AC< to __funcptr_type_kind
    0x000014AF store *__funcptr_type_kind >|2| 0x000014AD<, __funcptr_type_kind >|2| 0x000014AE<
    0x000014B0 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform2i64NV") *s8
    0x000014B1 gvar *__funcptr_type_kind 0x00000531
    0x000014B2 bc *s8 >|2| 0x000014B0< to __funcptr_type_kind
    0x000014B3 store *__funcptr_type_kind >|2| 0x000014B1<, __funcptr_type_kind >|2| 0x000014B2<
    0x000014B4 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform2i64vARB") *s8
    0x000014B5 gvar *__funcptr_type_kind 0x00000532
    0x000014B6 bc *s8 >|2| 0x000014B4< to __funcptr_type_kind
    0x000014B7 store *__funcptr_type_kind >|2| 0x000014B5<, __funcptr_type_kind >|2| 0x000014B6<
    0x000014B8 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform2i64vNV") *s8
    0x000014B9 gvar *__funcptr_type_kind 0x00000533
    0x000014BA bc *s8 >|2| 0x000014B8< to __funcptr_type_kind
    0x000014BB store *__funcptr_type_kind >|2| 0x000014B9<, __funcptr_type_kind >|2| 0x000014BA<
    0x000014BC call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform2iEXT") *s8
    0x000014BD gvar *__funcptr_type_kind 0x00000534
    0x000014BE bc *s8 >|2| 0x000014BC< to __funcptr_type_kind
    0x000014BF store *__funcptr_type_kind >|2| 0x000014BD<, __funcptr_type_kind >|2| 0x000014BE<
    0x000014C0 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform2i") *s8
    0x000014C1 gvar *__funcptr_type_kind 0x00000535
    0x000014C2 bc *s8 >|2| 0x000014C0< to __funcptr_type_kind
    0x000014C3 store *__funcptr_type_kind >|2| 0x000014C1<, __funcptr_type_kind >|2| 0x000014C2<
    0x000014C4 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform2ivEXT") *s8
    0x000014C5 gvar *__funcptr_type_kind 0x00000536
    0x000014C6 bc *s8 >|2| 0x000014C4< to __funcptr_type_kind
    0x000014C7 store *__funcptr_type_kind >|2| 0x000014C5<, __funcptr_type_kind >|2| 0x000014C6<
    0x000014C8 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform2iv") *s8
    0x000014C9 gvar *__funcptr_type_kind 0x00000537
    0x000014CA bc *s8 >|2| 0x000014C8< to __funcptr_type_kind
    0x000014CB store *__funcptr_type_kind >|2| 0x000014C9<, __funcptr_type_kind >|2| 0x000014CA<
    0x000014CC call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform2ui64ARB") *s8
    0x000014CD gvar *__funcptr_type_kind 0x00000538
    0x000014CE bc *s8 >|2| 0x000014CC< to __funcptr_type_kind
    0x000014CF store *__funcptr_type_kind >|2| 0x000014CD<, __funcptr_type_kind >|2| 0x000014CE<
    0x000014D0 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform2ui64NV") *s8
    0x000014D1 gvar *__funcptr_type_kind 0x00000539
    0x000014D2 bc *s8 >|2| 0x000014D0< to __funcptr_type_kind
    0x000014D3 store *__funcptr_type_kind >|2| 0x000014D1<, __funcptr_type_kind >|2| 0x000014D2<
    0x000014D4 call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniform2ui64vARB") *s8
    0x000014D5 gvar *__funcptr_type_kind 0x0000053A
    0x000014D6 bc *s8 >|2| 0x000014D4< to __funcptr_type_kind
    0x000014D7 store *__funcptr_type_kind >|2| 0x000014D5<, __funcptr_type_kind >|2| 0x000014D6<
    0x000014D8 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform2ui64vNV") *s8
    0x000014D9 gvar *__funcptr_type_kind 0x0000053B
    0x000014DA bc *s8 >|2| 0x000014D8< to __funcptr_type_kind
    0x000014DB store *__funcptr_type_kind >|2| 0x000014D9<, __funcptr_type_kind >|2| 0x000014DA<
    0x000014DC call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform2uiEXT") *s8
    0x000014DD gvar *__funcptr_type_kind 0x0000053C
    0x000014DE bc *s8 >|2| 0x000014DC< to __funcptr_type_kind
    0x000014DF store *__funcptr_type_kind >|2| 0x000014DD<, __funcptr_type_kind >|2| 0x000014DE<
    0x000014E0 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform2ui") *s8
    0x000014E1 gvar *__funcptr_type_kind 0x0000053D
    0x000014E2 bc *s8 >|2| 0x000014E0< to __funcptr_type_kind
    0x000014E3 store *__funcptr_type_kind >|2| 0x000014E1<, __funcptr_type_kind >|2| 0x000014E2<
    0x000014E4 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform2uivEXT") *s8
    0x000014E5 gvar *__funcptr_type_kind 0x0000053E
    0x000014E6 bc *s8 >|2| 0x000014E4< to __funcptr_type_kind
    0x000014E7 store *__funcptr_type_kind >|2| 0x000014E5<, __funcptr_type_kind >|2| 0x000014E6<
    0x000014E8 call ag5 "openglGetProcAddress" (cstroflen 21 "glProgramUniform2uiv") *s8
    0x000014E9 gvar *__funcptr_type_kind 0x0000053F
    0x000014EA bc *s8 >|2| 0x000014E8< to __funcptr_type_kind
    0x000014EB store *__funcptr_type_kind >|2| 0x000014E9<, __funcptr_type_kind >|2| 0x000014EA<
    0x000014EC call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform3d") *s8
    0x000014ED gvar *__funcptr_type_kind 0x00000540
    0x000014EE bc *s8 >|2| 0x000014EC< to __funcptr_type_kind
    0x000014EF store *__funcptr_type_kind >|2| 0x000014ED<, __funcptr_type_kind >|2| 0x000014EE<
    0x000014F0 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform3dv") *s8
    0x000014F1 gvar *__funcptr_type_kind 0x00000541
    0x000014F2 bc *s8 >|2| 0x000014F0< to __funcptr_type_kind
    0x000014F3 store *__funcptr_type_kind >|2| 0x000014F1<, __funcptr_type_kind >|2| 0x000014F2<
    0x000014F4 call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform3fEXT") *s8
    0x000014F5 gvar *__funcptr_type_kind 0x00000542
    0x000014F6 bc *s8 >|2| 0x000014F4< to __funcptr_type_kind
    0x000014F7 store *__funcptr_type_kind >|2| 0x000014F5<, __funcptr_type_kind >|2| 0x000014F6<
    0x000014F8 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform3f") *s8
    0x000014F9 gvar *__funcptr_type_kind 0x00000543
    0x000014FA bc *s8 >|2| 0x000014F8< to __funcptr_type_kind
    0x000014FB store *__funcptr_type_kind >|2| 0x000014F9<, __funcptr_type_kind >|2| 0x000014FA<
    0x000014FC call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform3fvEXT") *s8
    0x000014FD gvar *__funcptr_type_kind 0x00000544
    0x000014FE bc *s8 >|2| 0x000014FC< to __funcptr_type_kind
    0x000014FF store *__funcptr_type_kind >|2| 0x000014FD<, __funcptr_type_kind >|2| 0x000014FE<
    0x00001500 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform3fv") *s8
    0x00001501 gvar *__funcptr_type_kind 0x00000545
    0x00001502 bc *s8 >|2| 0x00001500< to __funcptr_type_kind
    0x00001503 store *__funcptr_type_kind >|2| 0x00001501<, __funcptr_type_kind >|2| 0x00001502<
    0x00001504 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform3i64ARB") *s8
    0x00001505 gvar *__funcptr_type_kind 0x00000546
    0x00001506 bc *s8 >|2| 0x00001504< to __funcptr_type_kind
    0x00001507 store *__funcptr_type_kind >|2| 0x00001505<, __funcptr_type_kind >|2| 0x00001506<
    0x00001508 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform3i64NV") *s8
    0x00001509 gvar *__funcptr_type_kind 0x00000547
    0x0000150A bc *s8 >|2| 0x00001508< to __funcptr_type_kind
    0x0000150B store *__funcptr_type_kind >|2| 0x00001509<, __funcptr_type_kind >|2| 0x0000150A<
    0x0000150C call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform3i64vARB") *s8
    0x0000150D gvar *__funcptr_type_kind 0x00000548
    0x0000150E bc *s8 >|2| 0x0000150C< to __funcptr_type_kind
    0x0000150F store *__funcptr_type_kind >|2| 0x0000150D<, __funcptr_type_kind >|2| 0x0000150E<
    0x00001510 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform3i64vNV") *s8
    0x00001511 gvar *__funcptr_type_kind 0x00000549
    0x00001512 bc *s8 >|2| 0x00001510< to __funcptr_type_kind
    0x00001513 store *__funcptr_type_kind >|2| 0x00001511<, __funcptr_type_kind >|2| 0x00001512<
    0x00001514 call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform3iEXT") *s8
    0x00001515 gvar *__funcptr_type_kind 0x0000054A
    0x00001516 bc *s8 >|2| 0x00001514< to __funcptr_type_kind
    0x00001517 store *__funcptr_type_kind >|2| 0x00001515<, __funcptr_type_kind >|2| 0x00001516<
    0x00001518 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform3i") *s8
    0x00001519 gvar *__funcptr_type_kind 0x0000054B
    0x0000151A bc *s8 >|2| 0x00001518< to __funcptr_type_kind
    0x0000151B store *__funcptr_type_kind >|2| 0x00001519<, __funcptr_type_kind >|2| 0x0000151A<
    0x0000151C call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform3ivEXT") *s8
    0x0000151D gvar *__funcptr_type_kind 0x0000054C
    0x0000151E bc *s8 >|2| 0x0000151C< to __funcptr_type_kind
    0x0000151F store *__funcptr_type_kind >|2| 0x0000151D<, __funcptr_type_kind >|2| 0x0000151E<
    0x00001520 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform3iv") *s8
    0x00001521 gvar *__funcptr_type_kind 0x0000054D
    0x00001522 bc *s8 >|2| 0x00001520< to __funcptr_type_kind
    0x00001523 store *__funcptr_type_kind >|2| 0x00001521<, __funcptr_type_kind >|2| 0x00001522<
    0x00001524 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform3ui64ARB") *s8
    0x00001525 gvar *__funcptr_type_kind 0x0000054E
    0x00001526 bc *s8 >|2| 0x00001524< to __funcptr_type_kind
    0x00001527 store *__funcptr_type_kind >|2| 0x00001525<, __funcptr_type_kind >|2| 0x00001526<
    0x00001528 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform3ui64NV") *s8
    0x00001529 gvar *__funcptr_type_kind 0x0000054F
    0x0000152A bc *s8 >|2| 0x00001528< to __funcptr_type_kind
    0x0000152B store *__funcptr_type_kind >|2| 0x00001529<, __funcptr_type_kind >|2| 0x0000152A<
    0x0000152C call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniform3ui64vARB") *s8
    0x0000152D gvar *__funcptr_type_kind 0x00000550
    0x0000152E bc *s8 >|2| 0x0000152C< to __funcptr_type_kind
    0x0000152F store *__funcptr_type_kind >|2| 0x0000152D<, __funcptr_type_kind >|2| 0x0000152E<
    0x00001530 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform3ui64vNV") *s8
    0x00001531 gvar *__funcptr_type_kind 0x00000551
    0x00001532 bc *s8 >|2| 0x00001530< to __funcptr_type_kind
    0x00001533 store *__funcptr_type_kind >|2| 0x00001531<, __funcptr_type_kind >|2| 0x00001532<
    0x00001534 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform3uiEXT") *s8
    0x00001535 gvar *__funcptr_type_kind 0x00000552
    0x00001536 bc *s8 >|2| 0x00001534< to __funcptr_type_kind
    0x00001537 store *__funcptr_type_kind >|2| 0x00001535<, __funcptr_type_kind >|2| 0x00001536<
    0x00001538 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform3ui") *s8
    0x00001539 gvar *__funcptr_type_kind 0x00000553
    0x0000153A bc *s8 >|2| 0x00001538< to __funcptr_type_kind
    0x0000153B store *__funcptr_type_kind >|2| 0x00001539<, __funcptr_type_kind >|2| 0x0000153A<
    0x0000153C call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform3uivEXT") *s8
    0x0000153D gvar *__funcptr_type_kind 0x00000554
    0x0000153E bc *s8 >|2| 0x0000153C< to __funcptr_type_kind
    0x0000153F store *__funcptr_type_kind >|2| 0x0000153D<, __funcptr_type_kind >|2| 0x0000153E<
    0x00001540 call ag5 "openglGetProcAddress" (cstroflen 21 "glProgramUniform3uiv") *s8
    0x00001541 gvar *__funcptr_type_kind 0x00000555
    0x00001542 bc *s8 >|2| 0x00001540< to __funcptr_type_kind
    0x00001543 store *__funcptr_type_kind >|2| 0x00001541<, __funcptr_type_kind >|2| 0x00001542<
    0x00001544 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform4d") *s8
    0x00001545 gvar *__funcptr_type_kind 0x00000556
    0x00001546 bc *s8 >|2| 0x00001544< to __funcptr_type_kind
    0x00001547 store *__funcptr_type_kind >|2| 0x00001545<, __funcptr_type_kind >|2| 0x00001546<
    0x00001548 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform4dv") *s8
    0x00001549 gvar *__funcptr_type_kind 0x00000557
    0x0000154A bc *s8 >|2| 0x00001548< to __funcptr_type_kind
    0x0000154B store *__funcptr_type_kind >|2| 0x00001549<, __funcptr_type_kind >|2| 0x0000154A<
    0x0000154C call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform4fEXT") *s8
    0x0000154D gvar *__funcptr_type_kind 0x00000558
    0x0000154E bc *s8 >|2| 0x0000154C< to __funcptr_type_kind
    0x0000154F store *__funcptr_type_kind >|2| 0x0000154D<, __funcptr_type_kind >|2| 0x0000154E<
    0x00001550 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform4f") *s8
    0x00001551 gvar *__funcptr_type_kind 0x00000559
    0x00001552 bc *s8 >|2| 0x00001550< to __funcptr_type_kind
    0x00001553 store *__funcptr_type_kind >|2| 0x00001551<, __funcptr_type_kind >|2| 0x00001552<
    0x00001554 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform4fvEXT") *s8
    0x00001555 gvar *__funcptr_type_kind 0x0000055A
    0x00001556 bc *s8 >|2| 0x00001554< to __funcptr_type_kind
    0x00001557 store *__funcptr_type_kind >|2| 0x00001555<, __funcptr_type_kind >|2| 0x00001556<
    0x00001558 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform4fv") *s8
    0x00001559 gvar *__funcptr_type_kind 0x0000055B
    0x0000155A bc *s8 >|2| 0x00001558< to __funcptr_type_kind
    0x0000155B store *__funcptr_type_kind >|2| 0x00001559<, __funcptr_type_kind >|2| 0x0000155A<
    0x0000155C call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform4i64ARB") *s8
    0x0000155D gvar *__funcptr_type_kind 0x0000055C
    0x0000155E bc *s8 >|2| 0x0000155C< to __funcptr_type_kind
    0x0000155F store *__funcptr_type_kind >|2| 0x0000155D<, __funcptr_type_kind >|2| 0x0000155E<
    0x00001560 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform4i64NV") *s8
    0x00001561 gvar *__funcptr_type_kind 0x0000055D
    0x00001562 bc *s8 >|2| 0x00001560< to __funcptr_type_kind
    0x00001563 store *__funcptr_type_kind >|2| 0x00001561<, __funcptr_type_kind >|2| 0x00001562<
    0x00001564 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform4i64vARB") *s8
    0x00001565 gvar *__funcptr_type_kind 0x0000055E
    0x00001566 bc *s8 >|2| 0x00001564< to __funcptr_type_kind
    0x00001567 store *__funcptr_type_kind >|2| 0x00001565<, __funcptr_type_kind >|2| 0x00001566<
    0x00001568 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform4i64vNV") *s8
    0x00001569 gvar *__funcptr_type_kind 0x0000055F
    0x0000156A bc *s8 >|2| 0x00001568< to __funcptr_type_kind
    0x0000156B store *__funcptr_type_kind >|2| 0x00001569<, __funcptr_type_kind >|2| 0x0000156A<
    0x0000156C call ag5 "openglGetProcAddress" (cstroflen 22 "glProgramUniform4iEXT") *s8
    0x0000156D gvar *__funcptr_type_kind 0x00000560
    0x0000156E bc *s8 >|2| 0x0000156C< to __funcptr_type_kind
    0x0000156F store *__funcptr_type_kind >|2| 0x0000156D<, __funcptr_type_kind >|2| 0x0000156E<
    0x00001570 call ag5 "openglGetProcAddress" (cstroflen 19 "glProgramUniform4i") *s8
    0x00001571 gvar *__funcptr_type_kind 0x00000561
    0x00001572 bc *s8 >|2| 0x00001570< to __funcptr_type_kind
    0x00001573 store *__funcptr_type_kind >|2| 0x00001571<, __funcptr_type_kind >|2| 0x00001572<
    0x00001574 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform4ivEXT") *s8
    0x00001575 gvar *__funcptr_type_kind 0x00000562
    0x00001576 bc *s8 >|2| 0x00001574< to __funcptr_type_kind
    0x00001577 store *__funcptr_type_kind >|2| 0x00001575<, __funcptr_type_kind >|2| 0x00001576<
    0x00001578 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform4iv") *s8
    0x00001579 gvar *__funcptr_type_kind 0x00000563
    0x0000157A bc *s8 >|2| 0x00001578< to __funcptr_type_kind
    0x0000157B store *__funcptr_type_kind >|2| 0x00001579<, __funcptr_type_kind >|2| 0x0000157A<
    0x0000157C call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform4ui64ARB") *s8
    0x0000157D gvar *__funcptr_type_kind 0x00000564
    0x0000157E bc *s8 >|2| 0x0000157C< to __funcptr_type_kind
    0x0000157F store *__funcptr_type_kind >|2| 0x0000157D<, __funcptr_type_kind >|2| 0x0000157E<
    0x00001580 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform4ui64NV") *s8
    0x00001581 gvar *__funcptr_type_kind 0x00000565
    0x00001582 bc *s8 >|2| 0x00001580< to __funcptr_type_kind
    0x00001583 store *__funcptr_type_kind >|2| 0x00001581<, __funcptr_type_kind >|2| 0x00001582<
    0x00001584 call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniform4ui64vARB") *s8
    0x00001585 gvar *__funcptr_type_kind 0x00000566
    0x00001586 bc *s8 >|2| 0x00001584< to __funcptr_type_kind
    0x00001587 store *__funcptr_type_kind >|2| 0x00001585<, __funcptr_type_kind >|2| 0x00001586<
    0x00001588 call ag5 "openglGetProcAddress" (cstroflen 25 "glProgramUniform4ui64vNV") *s8
    0x00001589 gvar *__funcptr_type_kind 0x00000567
    0x0000158A bc *s8 >|2| 0x00001588< to __funcptr_type_kind
    0x0000158B store *__funcptr_type_kind >|2| 0x00001589<, __funcptr_type_kind >|2| 0x0000158A<
    0x0000158C call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniform4uiEXT") *s8
    0x0000158D gvar *__funcptr_type_kind 0x00000568
    0x0000158E bc *s8 >|2| 0x0000158C< to __funcptr_type_kind
    0x0000158F store *__funcptr_type_kind >|2| 0x0000158D<, __funcptr_type_kind >|2| 0x0000158E<
    0x00001590 call ag5 "openglGetProcAddress" (cstroflen 20 "glProgramUniform4ui") *s8
    0x00001591 gvar *__funcptr_type_kind 0x00000569
    0x00001592 bc *s8 >|2| 0x00001590< to __funcptr_type_kind
    0x00001593 store *__funcptr_type_kind >|2| 0x00001591<, __funcptr_type_kind >|2| 0x00001592<
    0x00001594 call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniform4uivEXT") *s8
    0x00001595 gvar *__funcptr_type_kind 0x0000056A
    0x00001596 bc *s8 >|2| 0x00001594< to __funcptr_type_kind
    0x00001597 store *__funcptr_type_kind >|2| 0x00001595<, __funcptr_type_kind >|2| 0x00001596<
    0x00001598 call ag5 "openglGetProcAddress" (cstroflen 21 "glProgramUniform4uiv") *s8
    0x00001599 gvar *__funcptr_type_kind 0x0000056B
    0x0000159A bc *s8 >|2| 0x00001598< to __funcptr_type_kind
    0x0000159B store *__funcptr_type_kind >|2| 0x00001599<, __funcptr_type_kind >|2| 0x0000159A<
    0x0000159C call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramUniformHandleui64ARB") *s8
    0x0000159D gvar *__funcptr_type_kind 0x0000056C
    0x0000159E bc *s8 >|2| 0x0000159C< to __funcptr_type_kind
    0x0000159F store *__funcptr_type_kind >|2| 0x0000159D<, __funcptr_type_kind >|2| 0x0000159E<
    0x000015A0 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramUniformHandleui64NV") *s8
    0x000015A1 gvar *__funcptr_type_kind 0x0000056D
    0x000015A2 bc *s8 >|2| 0x000015A0< to __funcptr_type_kind
    0x000015A3 store *__funcptr_type_kind >|2| 0x000015A1<, __funcptr_type_kind >|2| 0x000015A2<
    0x000015A4 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformHandleui64vARB") *s8
    0x000015A5 gvar *__funcptr_type_kind 0x0000056E
    0x000015A6 bc *s8 >|2| 0x000015A4< to __funcptr_type_kind
    0x000015A7 store *__funcptr_type_kind >|2| 0x000015A5<, __funcptr_type_kind >|2| 0x000015A6<
    0x000015A8 call ag5 "openglGetProcAddress" (cstroflen 30 "glProgramUniformHandleui64vNV") *s8
    0x000015A9 gvar *__funcptr_type_kind 0x0000056F
    0x000015AA bc *s8 >|2| 0x000015A8< to __funcptr_type_kind
    0x000015AB store *__funcptr_type_kind >|2| 0x000015A9<, __funcptr_type_kind >|2| 0x000015AA<
    0x000015AC call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniformMatrix2dv") *s8
    0x000015AD gvar *__funcptr_type_kind 0x00000570
    0x000015AE bc *s8 >|2| 0x000015AC< to __funcptr_type_kind
    0x000015AF store *__funcptr_type_kind >|2| 0x000015AD<, __funcptr_type_kind >|2| 0x000015AE<
    0x000015B0 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramUniformMatrix2fvEXT") *s8
    0x000015B1 gvar *__funcptr_type_kind 0x00000571
    0x000015B2 bc *s8 >|2| 0x000015B0< to __funcptr_type_kind
    0x000015B3 store *__funcptr_type_kind >|2| 0x000015B1<, __funcptr_type_kind >|2| 0x000015B2<
    0x000015B4 call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniformMatrix2fv") *s8
    0x000015B5 gvar *__funcptr_type_kind 0x00000572
    0x000015B6 bc *s8 >|2| 0x000015B4< to __funcptr_type_kind
    0x000015B7 store *__funcptr_type_kind >|2| 0x000015B5<, __funcptr_type_kind >|2| 0x000015B6<
    0x000015B8 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix2x3dv") *s8
    0x000015B9 gvar *__funcptr_type_kind 0x00000573
    0x000015BA bc *s8 >|2| 0x000015B8< to __funcptr_type_kind
    0x000015BB store *__funcptr_type_kind >|2| 0x000015B9<, __funcptr_type_kind >|2| 0x000015BA<
    0x000015BC call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformMatrix2x3fvEXT") *s8
    0x000015BD gvar *__funcptr_type_kind 0x00000574
    0x000015BE bc *s8 >|2| 0x000015BC< to __funcptr_type_kind
    0x000015BF store *__funcptr_type_kind >|2| 0x000015BD<, __funcptr_type_kind >|2| 0x000015BE<
    0x000015C0 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix2x3fv") *s8
    0x000015C1 gvar *__funcptr_type_kind 0x00000575
    0x000015C2 bc *s8 >|2| 0x000015C0< to __funcptr_type_kind
    0x000015C3 store *__funcptr_type_kind >|2| 0x000015C1<, __funcptr_type_kind >|2| 0x000015C2<
    0x000015C4 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix2x4dv") *s8
    0x000015C5 gvar *__funcptr_type_kind 0x00000576
    0x000015C6 bc *s8 >|2| 0x000015C4< to __funcptr_type_kind
    0x000015C7 store *__funcptr_type_kind >|2| 0x000015C5<, __funcptr_type_kind >|2| 0x000015C6<
    0x000015C8 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformMatrix2x4fvEXT") *s8
    0x000015C9 gvar *__funcptr_type_kind 0x00000577
    0x000015CA bc *s8 >|2| 0x000015C8< to __funcptr_type_kind
    0x000015CB store *__funcptr_type_kind >|2| 0x000015C9<, __funcptr_type_kind >|2| 0x000015CA<
    0x000015CC call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix2x4fv") *s8
    0x000015CD gvar *__funcptr_type_kind 0x00000578
    0x000015CE bc *s8 >|2| 0x000015CC< to __funcptr_type_kind
    0x000015CF store *__funcptr_type_kind >|2| 0x000015CD<, __funcptr_type_kind >|2| 0x000015CE<
    0x000015D0 call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniformMatrix3dv") *s8
    0x000015D1 gvar *__funcptr_type_kind 0x00000579
    0x000015D2 bc *s8 >|2| 0x000015D0< to __funcptr_type_kind
    0x000015D3 store *__funcptr_type_kind >|2| 0x000015D1<, __funcptr_type_kind >|2| 0x000015D2<
    0x000015D4 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramUniformMatrix3fvEXT") *s8
    0x000015D5 gvar *__funcptr_type_kind 0x0000057A
    0x000015D6 bc *s8 >|2| 0x000015D4< to __funcptr_type_kind
    0x000015D7 store *__funcptr_type_kind >|2| 0x000015D5<, __funcptr_type_kind >|2| 0x000015D6<
    0x000015D8 call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniformMatrix3fv") *s8
    0x000015D9 gvar *__funcptr_type_kind 0x0000057B
    0x000015DA bc *s8 >|2| 0x000015D8< to __funcptr_type_kind
    0x000015DB store *__funcptr_type_kind >|2| 0x000015D9<, __funcptr_type_kind >|2| 0x000015DA<
    0x000015DC call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix3x2dv") *s8
    0x000015DD gvar *__funcptr_type_kind 0x0000057C
    0x000015DE bc *s8 >|2| 0x000015DC< to __funcptr_type_kind
    0x000015DF store *__funcptr_type_kind >|2| 0x000015DD<, __funcptr_type_kind >|2| 0x000015DE<
    0x000015E0 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformMatrix3x2fvEXT") *s8
    0x000015E1 gvar *__funcptr_type_kind 0x0000057D
    0x000015E2 bc *s8 >|2| 0x000015E0< to __funcptr_type_kind
    0x000015E3 store *__funcptr_type_kind >|2| 0x000015E1<, __funcptr_type_kind >|2| 0x000015E2<
    0x000015E4 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix3x2fv") *s8
    0x000015E5 gvar *__funcptr_type_kind 0x0000057E
    0x000015E6 bc *s8 >|2| 0x000015E4< to __funcptr_type_kind
    0x000015E7 store *__funcptr_type_kind >|2| 0x000015E5<, __funcptr_type_kind >|2| 0x000015E6<
    0x000015E8 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix3x4dv") *s8
    0x000015E9 gvar *__funcptr_type_kind 0x0000057F
    0x000015EA bc *s8 >|2| 0x000015E8< to __funcptr_type_kind
    0x000015EB store *__funcptr_type_kind >|2| 0x000015E9<, __funcptr_type_kind >|2| 0x000015EA<
    0x000015EC call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformMatrix3x4fvEXT") *s8
    0x000015ED gvar *__funcptr_type_kind 0x00000580
    0x000015EE bc *s8 >|2| 0x000015EC< to __funcptr_type_kind
    0x000015EF store *__funcptr_type_kind >|2| 0x000015ED<, __funcptr_type_kind >|2| 0x000015EE<
    0x000015F0 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix3x4fv") *s8
    0x000015F1 gvar *__funcptr_type_kind 0x00000581
    0x000015F2 bc *s8 >|2| 0x000015F0< to __funcptr_type_kind
    0x000015F3 store *__funcptr_type_kind >|2| 0x000015F1<, __funcptr_type_kind >|2| 0x000015F2<
    0x000015F4 call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniformMatrix4dv") *s8
    0x000015F5 gvar *__funcptr_type_kind 0x00000582
    0x000015F6 bc *s8 >|2| 0x000015F4< to __funcptr_type_kind
    0x000015F7 store *__funcptr_type_kind >|2| 0x000015F5<, __funcptr_type_kind >|2| 0x000015F6<
    0x000015F8 call ag5 "openglGetProcAddress" (cstroflen 29 "glProgramUniformMatrix4fvEXT") *s8
    0x000015F9 gvar *__funcptr_type_kind 0x00000583
    0x000015FA bc *s8 >|2| 0x000015F8< to __funcptr_type_kind
    0x000015FB store *__funcptr_type_kind >|2| 0x000015F9<, __funcptr_type_kind >|2| 0x000015FA<
    0x000015FC call ag5 "openglGetProcAddress" (cstroflen 26 "glProgramUniformMatrix4fv") *s8
    0x000015FD gvar *__funcptr_type_kind 0x00000584
    0x000015FE bc *s8 >|2| 0x000015FC< to __funcptr_type_kind
    0x000015FF store *__funcptr_type_kind >|2| 0x000015FD<, __funcptr_type_kind >|2| 0x000015FE<
    0x00001600 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix4x2dv") *s8
    0x00001601 gvar *__funcptr_type_kind 0x00000585
    0x00001602 bc *s8 >|2| 0x00001600< to __funcptr_type_kind
    0x00001603 store *__funcptr_type_kind >|2| 0x00001601<, __funcptr_type_kind >|2| 0x00001602<
    0x00001604 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformMatrix4x2fvEXT") *s8
    0x00001605 gvar *__funcptr_type_kind 0x00000586
    0x00001606 bc *s8 >|2| 0x00001604< to __funcptr_type_kind
    0x00001607 store *__funcptr_type_kind >|2| 0x00001605<, __funcptr_type_kind >|2| 0x00001606<
    0x00001608 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix4x2fv") *s8
    0x00001609 gvar *__funcptr_type_kind 0x00000587
    0x0000160A bc *s8 >|2| 0x00001608< to __funcptr_type_kind
    0x0000160B store *__funcptr_type_kind >|2| 0x00001609<, __funcptr_type_kind >|2| 0x0000160A<
    0x0000160C call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix4x3dv") *s8
    0x0000160D gvar *__funcptr_type_kind 0x00000588
    0x0000160E bc *s8 >|2| 0x0000160C< to __funcptr_type_kind
    0x0000160F store *__funcptr_type_kind >|2| 0x0000160D<, __funcptr_type_kind >|2| 0x0000160E<
    0x00001610 call ag5 "openglGetProcAddress" (cstroflen 31 "glProgramUniformMatrix4x3fvEXT") *s8
    0x00001611 gvar *__funcptr_type_kind 0x00000589
    0x00001612 bc *s8 >|2| 0x00001610< to __funcptr_type_kind
    0x00001613 store *__funcptr_type_kind >|2| 0x00001611<, __funcptr_type_kind >|2| 0x00001612<
    0x00001614 call ag5 "openglGetProcAddress" (cstroflen 28 "glProgramUniformMatrix4x3fv") *s8
    0x00001615 gvar *__funcptr_type_kind 0x0000058A
    0x00001616 bc *s8 >|2| 0x00001614< to __funcptr_type_kind
    0x00001617 store *__funcptr_type_kind >|2| 0x00001615<, __funcptr_type_kind >|2| 0x00001616<
    0x00001618 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramUniformui64NV") *s8
    0x00001619 gvar *__funcptr_type_kind 0x0000058B
    0x0000161A bc *s8 >|2| 0x00001618< to __funcptr_type_kind
    0x0000161B store *__funcptr_type_kind >|2| 0x00001619<, __funcptr_type_kind >|2| 0x0000161A<
    0x0000161C call ag5 "openglGetProcAddress" (cstroflen 24 "glProgramUniformui64vNV") *s8
    0x0000161D gvar *__funcptr_type_kind 0x0000058C
    0x0000161E bc *s8 >|2| 0x0000161C< to __funcptr_type_kind
    0x0000161F store *__funcptr_type_kind >|2| 0x0000161D<, __funcptr_type_kind >|2| 0x0000161E<
    0x00001620 call ag5 "openglGetProcAddress" (cstroflen 23 "glProgramVertexLimitNV") *s8
    0x00001621 gvar *__funcptr_type_kind 0x0000058D
    0x00001622 bc *s8 >|2| 0x00001620< to __funcptr_type_kind
    0x00001623 store *__funcptr_type_kind >|2| 0x00001621<, __funcptr_type_kind >|2| 0x00001622<
    0x00001624 call ag5 "openglGetProcAddress" (cstroflen 21 "glProvokingVertexEXT") *s8
    0x00001625 gvar *__funcptr_type_kind 0x0000058E
    0x00001626 bc *s8 >|2| 0x00001624< to __funcptr_type_kind
    0x00001627 store *__funcptr_type_kind >|2| 0x00001625<, __funcptr_type_kind >|2| 0x00001626<
    0x00001628 call ag5 "openglGetProcAddress" (cstroflen 18 "glProvokingVertex") *s8
    0x00001629 gvar *__funcptr_type_kind 0x0000058F
    0x0000162A bc *s8 >|2| 0x00001628< to __funcptr_type_kind
    0x0000162B store *__funcptr_type_kind >|2| 0x00001629<, __funcptr_type_kind >|2| 0x0000162A<
    0x0000162C call ag5 "openglGetProcAddress" (cstroflen 29 "glPushClientAttribDefaultEXT") *s8
    0x0000162D gvar *__funcptr_type_kind 0x00000590
    0x0000162E bc *s8 >|2| 0x0000162C< to __funcptr_type_kind
    0x0000162F store *__funcptr_type_kind >|2| 0x0000162D<, __funcptr_type_kind >|2| 0x0000162E<
    0x00001630 call ag5 "openglGetProcAddress" (cstroflen 17 "glPushDebugGroup") *s8
    0x00001631 gvar *__funcptr_type_kind 0x00000591
    0x00001632 bc *s8 >|2| 0x00001630< to __funcptr_type_kind
    0x00001633 store *__funcptr_type_kind >|2| 0x00001631<, __funcptr_type_kind >|2| 0x00001632<
    0x00001634 call ag5 "openglGetProcAddress" (cstroflen 21 "glPushGroupMarkerEXT") *s8
    0x00001635 gvar *__funcptr_type_kind 0x00000592
    0x00001636 bc *s8 >|2| 0x00001634< to __funcptr_type_kind
    0x00001637 store *__funcptr_type_kind >|2| 0x00001635<, __funcptr_type_kind >|2| 0x00001636<
    0x00001638 call ag5 "openglGetProcAddress" (cstroflen 20 "glQueryCounterANGLE") *s8
    0x00001639 gvar *__funcptr_type_kind 0x00000593
    0x0000163A bc *s8 >|2| 0x00001638< to __funcptr_type_kind
    0x0000163B store *__funcptr_type_kind >|2| 0x00001639<, __funcptr_type_kind >|2| 0x0000163A<
    0x0000163C call ag5 "openglGetProcAddress" (cstroflen 15 "glQueryCounter") *s8
    0x0000163D gvar *__funcptr_type_kind 0x00000594
    0x0000163E bc *s8 >|2| 0x0000163C< to __funcptr_type_kind
    0x0000163F store *__funcptr_type_kind >|2| 0x0000163D<, __funcptr_type_kind >|2| 0x0000163E<
    0x00001640 call ag5 "openglGetProcAddress" (cstroflen 28 "glQueryObjectParameteruiAMD") *s8
    0x00001641 gvar *__funcptr_type_kind 0x00000595
    0x00001642 bc *s8 >|2| 0x00001640< to __funcptr_type_kind
    0x00001643 store *__funcptr_type_kind >|2| 0x00001641<, __funcptr_type_kind >|2| 0x00001642<
    0x00001644 call ag5 "openglGetProcAddress" (cstroflen 19 "glRasterSamplesEXT") *s8
    0x00001645 gvar *__funcptr_type_kind 0x00000596
    0x00001646 bc *s8 >|2| 0x00001644< to __funcptr_type_kind
    0x00001647 store *__funcptr_type_kind >|2| 0x00001645<, __funcptr_type_kind >|2| 0x00001646<
    0x00001648 call ag5 "openglGetProcAddress" (cstroflen 19 "glReadBufferRegion") *s8
    0x00001649 gvar *__funcptr_type_kind 0x00000597
    0x0000164A bc *s8 >|2| 0x00001648< to __funcptr_type_kind
    0x0000164B store *__funcptr_type_kind >|2| 0x00001649<, __funcptr_type_kind >|2| 0x0000164A<
    0x0000164C call ag5 "openglGetProcAddress" (cstroflen 17 "glReadnPixelsARB") *s8
    0x0000164D gvar *__funcptr_type_kind 0x00000598
    0x0000164E bc *s8 >|2| 0x0000164C< to __funcptr_type_kind
    0x0000164F store *__funcptr_type_kind >|2| 0x0000164D<, __funcptr_type_kind >|2| 0x0000164E<
    0x00001650 call ag5 "openglGetProcAddress" (cstroflen 14 "glReadnPixels") *s8
    0x00001651 gvar *__funcptr_type_kind 0x00000599
    0x00001652 bc *s8 >|2| 0x00001650< to __funcptr_type_kind
    0x00001653 store *__funcptr_type_kind >|2| 0x00001651<, __funcptr_type_kind >|2| 0x00001652<
    0x00001654 call ag5 "openglGetProcAddress" (cstroflen 21 "glReadVideoPixelsSUN") *s8
    0x00001655 gvar *__funcptr_type_kind 0x0000059A
    0x00001656 bc *s8 >|2| 0x00001654< to __funcptr_type_kind
    0x00001657 store *__funcptr_type_kind >|2| 0x00001655<, __funcptr_type_kind >|2| 0x00001656<
    0x00001658 call ag5 "openglGetProcAddress" (cstroflen 21 "glReferencePlaneSGIX") *s8
    0x00001659 gvar *__funcptr_type_kind 0x0000059B
    0x0000165A bc *s8 >|2| 0x00001658< to __funcptr_type_kind
    0x0000165B store *__funcptr_type_kind >|2| 0x00001659<, __funcptr_type_kind >|2| 0x0000165A<
    0x0000165C call ag5 "openglGetProcAddress" (cstroflen 24 "glReleaseShaderCompiler") *s8
    0x0000165D gvar *__funcptr_type_kind 0x0000059C
    0x0000165E bc *s8 >|2| 0x0000165C< to __funcptr_type_kind
    0x0000165F store *__funcptr_type_kind >|2| 0x0000165D<, __funcptr_type_kind >|2| 0x0000165E<
    0x00001660 call ag5 "openglGetProcAddress" (cstroflen 25 "glRenderbufferStorageEXT") *s8
    0x00001661 gvar *__funcptr_type_kind 0x0000059D
    0x00001662 bc *s8 >|2| 0x00001660< to __funcptr_type_kind
    0x00001663 store *__funcptr_type_kind >|2| 0x00001661<, __funcptr_type_kind >|2| 0x00001662<
    0x00001664 call ag5 "openglGetProcAddress" (cstroflen 38 "glRenderbufferStorageMultisampleANGLE") *s8
    0x00001665 gvar *__funcptr_type_kind 0x0000059E
    0x00001666 bc *s8 >|2| 0x00001664< to __funcptr_type_kind
    0x00001667 store *__funcptr_type_kind >|2| 0x00001665<, __funcptr_type_kind >|2| 0x00001666<
    0x00001668 call ag5 "openglGetProcAddress" (cstroflen 43 "glRenderbufferStorageMultisampleCoverageNV") *s8
    0x00001669 gvar *__funcptr_type_kind 0x0000059F
    0x0000166A bc *s8 >|2| 0x00001668< to __funcptr_type_kind
    0x0000166B store *__funcptr_type_kind >|2| 0x00001669<, __funcptr_type_kind >|2| 0x0000166A<
    0x0000166C call ag5 "openglGetProcAddress" (cstroflen 36 "glRenderbufferStorageMultisampleEXT") *s8
    0x0000166D gvar *__funcptr_type_kind 0x000005A0
    0x0000166E bc *s8 >|2| 0x0000166C< to __funcptr_type_kind
    0x0000166F store *__funcptr_type_kind >|2| 0x0000166D<, __funcptr_type_kind >|2| 0x0000166E<
    0x00001670 call ag5 "openglGetProcAddress" (cstroflen 33 "glRenderbufferStorageMultisample") *s8
    0x00001671 gvar *__funcptr_type_kind 0x000005A1
    0x00001672 bc *s8 >|2| 0x00001670< to __funcptr_type_kind
    0x00001673 store *__funcptr_type_kind >|2| 0x00001671<, __funcptr_type_kind >|2| 0x00001672<
    0x00001674 call ag5 "openglGetProcAddress" (cstroflen 22 "glRenderbufferStorage") *s8
    0x00001675 gvar *__funcptr_type_kind 0x000005A2
    0x00001676 bc *s8 >|2| 0x00001674< to __funcptr_type_kind
    0x00001677 store *__funcptr_type_kind >|2| 0x00001675<, __funcptr_type_kind >|2| 0x00001676<
    0x00001678 call ag5 "openglGetProcAddress" (cstroflen 28 "glReplacementCodePointerSUN") *s8
    0x00001679 gvar *__funcptr_type_kind 0x000005A3
    0x0000167A bc *s8 >|2| 0x00001678< to __funcptr_type_kind
    0x0000167B store *__funcptr_type_kind >|2| 0x00001679<, __funcptr_type_kind >|2| 0x0000167A<
    0x0000167C call ag5 "openglGetProcAddress" (cstroflen 23 "glReplacementCodeubSUN") *s8
    0x0000167D gvar *__funcptr_type_kind 0x000005A4
    0x0000167E bc *s8 >|2| 0x0000167C< to __funcptr_type_kind
    0x0000167F store *__funcptr_type_kind >|2| 0x0000167D<, __funcptr_type_kind >|2| 0x0000167E<
    0x00001680 call ag5 "openglGetProcAddress" (cstroflen 24 "glReplacementCodeubvSUN") *s8
    0x00001681 gvar *__funcptr_type_kind 0x000005A5
    0x00001682 bc *s8 >|2| 0x00001680< to __funcptr_type_kind
    0x00001683 store *__funcptr_type_kind >|2| 0x00001681<, __funcptr_type_kind >|2| 0x00001682<
    0x00001684 call ag5 "openglGetProcAddress" (cstroflen 38 "glReplacementCodeuiColor3fVertex3fSUN") *s8
    0x00001685 gvar *__funcptr_type_kind 0x000005A6
    0x00001686 bc *s8 >|2| 0x00001684< to __funcptr_type_kind
    0x00001687 store *__funcptr_type_kind >|2| 0x00001685<, __funcptr_type_kind >|2| 0x00001686<
    0x00001688 call ag5 "openglGetProcAddress" (cstroflen 39 "glReplacementCodeuiColor3fVertex3fvSUN") *s8
    0x00001689 gvar *__funcptr_type_kind 0x000005A7
    0x0000168A bc *s8 >|2| 0x00001688< to __funcptr_type_kind
    0x0000168B store *__funcptr_type_kind >|2| 0x00001689<, __funcptr_type_kind >|2| 0x0000168A<
    0x0000168C call ag5 "openglGetProcAddress" (cstroflen 46 "glReplacementCodeuiColor4fNormal3fVertex3fSUN") *s8
    0x0000168D gvar *__funcptr_type_kind 0x000005A8
    0x0000168E bc *s8 >|2| 0x0000168C< to __funcptr_type_kind
    0x0000168F store *__funcptr_type_kind >|2| 0x0000168D<, __funcptr_type_kind >|2| 0x0000168E<
    0x00001690 call ag5 "openglGetProcAddress" (cstroflen 47 "glReplacementCodeuiColor4fNormal3fVertex3fvSUN") *s8
    0x00001691 gvar *__funcptr_type_kind 0x000005A9
    0x00001692 bc *s8 >|2| 0x00001690< to __funcptr_type_kind
    0x00001693 store *__funcptr_type_kind >|2| 0x00001691<, __funcptr_type_kind >|2| 0x00001692<
    0x00001694 call ag5 "openglGetProcAddress" (cstroflen 39 "glReplacementCodeuiColor4ubVertex3fSUN") *s8
    0x00001695 gvar *__funcptr_type_kind 0x000005AA
    0x00001696 bc *s8 >|2| 0x00001694< to __funcptr_type_kind
    0x00001697 store *__funcptr_type_kind >|2| 0x00001695<, __funcptr_type_kind >|2| 0x00001696<
    0x00001698 call ag5 "openglGetProcAddress" (cstroflen 40 "glReplacementCodeuiColor4ubVertex3fvSUN") *s8
    0x00001699 gvar *__funcptr_type_kind 0x000005AB
    0x0000169A bc *s8 >|2| 0x00001698< to __funcptr_type_kind
    0x0000169B store *__funcptr_type_kind >|2| 0x00001699<, __funcptr_type_kind >|2| 0x0000169A<
    0x0000169C call ag5 "openglGetProcAddress" (cstroflen 39 "glReplacementCodeuiNormal3fVertex3fSUN") *s8
    0x0000169D gvar *__funcptr_type_kind 0x000005AC
    0x0000169E bc *s8 >|2| 0x0000169C< to __funcptr_type_kind
    0x0000169F store *__funcptr_type_kind >|2| 0x0000169D<, __funcptr_type_kind >|2| 0x0000169E<
    0x000016A0 call ag5 "openglGetProcAddress" (cstroflen 40 "glReplacementCodeuiNormal3fVertex3fvSUN") *s8
    0x000016A1 gvar *__funcptr_type_kind 0x000005AD
    0x000016A2 bc *s8 >|2| 0x000016A0< to __funcptr_type_kind
    0x000016A3 store *__funcptr_type_kind >|2| 0x000016A1<, __funcptr_type_kind >|2| 0x000016A2<
    0x000016A4 call ag5 "openglGetProcAddress" (cstroflen 23 "glReplacementCodeuiSUN") *s8
    0x000016A5 gvar *__funcptr_type_kind 0x000005AE
    0x000016A6 bc *s8 >|2| 0x000016A4< to __funcptr_type_kind
    0x000016A7 store *__funcptr_type_kind >|2| 0x000016A5<, __funcptr_type_kind >|2| 0x000016A6<
    0x000016A8 call ag5 "openglGetProcAddress" (cstroflen 56 "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN") *s8
    0x000016A9 gvar *__funcptr_type_kind 0x000005AF
    0x000016AA bc *s8 >|2| 0x000016A8< to __funcptr_type_kind
    0x000016AB store *__funcptr_type_kind >|2| 0x000016A9<, __funcptr_type_kind >|2| 0x000016AA<
    0x000016AC call ag5 "openglGetProcAddress" (cstroflen 57 "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN") *s8
    0x000016AD gvar *__funcptr_type_kind 0x000005B0
    0x000016AE bc *s8 >|2| 0x000016AC< to __funcptr_type_kind
    0x000016AF store *__funcptr_type_kind >|2| 0x000016AD<, __funcptr_type_kind >|2| 0x000016AE<
    0x000016B0 call ag5 "openglGetProcAddress" (cstroflen 49 "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN") *s8
    0x000016B1 gvar *__funcptr_type_kind 0x000005B1
    0x000016B2 bc *s8 >|2| 0x000016B0< to __funcptr_type_kind
    0x000016B3 store *__funcptr_type_kind >|2| 0x000016B1<, __funcptr_type_kind >|2| 0x000016B2<
    0x000016B4 call ag5 "openglGetProcAddress" (cstroflen 50 "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN") *s8
    0x000016B5 gvar *__funcptr_type_kind 0x000005B2
    0x000016B6 bc *s8 >|2| 0x000016B4< to __funcptr_type_kind
    0x000016B7 store *__funcptr_type_kind >|2| 0x000016B5<, __funcptr_type_kind >|2| 0x000016B6<
    0x000016B8 call ag5 "openglGetProcAddress" (cstroflen 41 "glReplacementCodeuiTexCoord2fVertex3fSUN") *s8
    0x000016B9 gvar *__funcptr_type_kind 0x000005B3
    0x000016BA bc *s8 >|2| 0x000016B8< to __funcptr_type_kind
    0x000016BB store *__funcptr_type_kind >|2| 0x000016B9<, __funcptr_type_kind >|2| 0x000016BA<
    0x000016BC call ag5 "openglGetProcAddress" (cstroflen 42 "glReplacementCodeuiTexCoord2fVertex3fvSUN") *s8
    0x000016BD gvar *__funcptr_type_kind 0x000005B4
    0x000016BE bc *s8 >|2| 0x000016BC< to __funcptr_type_kind
    0x000016BF store *__funcptr_type_kind >|2| 0x000016BD<, __funcptr_type_kind >|2| 0x000016BE<
    0x000016C0 call ag5 "openglGetProcAddress" (cstroflen 31 "glReplacementCodeuiVertex3fSUN") *s8
    0x000016C1 gvar *__funcptr_type_kind 0x000005B5
    0x000016C2 bc *s8 >|2| 0x000016C0< to __funcptr_type_kind
    0x000016C3 store *__funcptr_type_kind >|2| 0x000016C1<, __funcptr_type_kind >|2| 0x000016C2<
    0x000016C4 call ag5 "openglGetProcAddress" (cstroflen 32 "glReplacementCodeuiVertex3fvSUN") *s8
    0x000016C5 gvar *__funcptr_type_kind 0x000005B6
    0x000016C6 bc *s8 >|2| 0x000016C4< to __funcptr_type_kind
    0x000016C7 store *__funcptr_type_kind >|2| 0x000016C5<, __funcptr_type_kind >|2| 0x000016C6<
    0x000016C8 call ag5 "openglGetProcAddress" (cstroflen 24 "glReplacementCodeuivSUN") *s8
    0x000016C9 gvar *__funcptr_type_kind 0x000005B7
    0x000016CA bc *s8 >|2| 0x000016C8< to __funcptr_type_kind
    0x000016CB store *__funcptr_type_kind >|2| 0x000016C9<, __funcptr_type_kind >|2| 0x000016CA<
    0x000016CC call ag5 "openglGetProcAddress" (cstroflen 23 "glReplacementCodeusSUN") *s8
    0x000016CD gvar *__funcptr_type_kind 0x000005B8
    0x000016CE bc *s8 >|2| 0x000016CC< to __funcptr_type_kind
    0x000016CF store *__funcptr_type_kind >|2| 0x000016CD<, __funcptr_type_kind >|2| 0x000016CE<
    0x000016D0 call ag5 "openglGetProcAddress" (cstroflen 24 "glReplacementCodeusvSUN") *s8
    0x000016D1 gvar *__funcptr_type_kind 0x000005B9
    0x000016D2 bc *s8 >|2| 0x000016D0< to __funcptr_type_kind
    0x000016D3 store *__funcptr_type_kind >|2| 0x000016D1<, __funcptr_type_kind >|2| 0x000016D2<
    0x000016D4 call ag5 "openglGetProcAddress" (cstroflen 28 "glRequestResidentProgramsNV") *s8
    0x000016D5 gvar *__funcptr_type_kind 0x000005BA
    0x000016D6 bc *s8 >|2| 0x000016D4< to __funcptr_type_kind
    0x000016D7 store *__funcptr_type_kind >|2| 0x000016D5<, __funcptr_type_kind >|2| 0x000016D6<
    0x000016D8 call ag5 "openglGetProcAddress" (cstroflen 20 "glResetHistogramEXT") *s8
    0x000016D9 gvar *__funcptr_type_kind 0x000005BB
    0x000016DA bc *s8 >|2| 0x000016D8< to __funcptr_type_kind
    0x000016DB store *__funcptr_type_kind >|2| 0x000016D9<, __funcptr_type_kind >|2| 0x000016DA<
    0x000016DC call ag5 "openglGetProcAddress" (cstroflen 17 "glResetHistogram") *s8
    0x000016DD gvar *__funcptr_type_kind 0x000005BC
    0x000016DE bc *s8 >|2| 0x000016DC< to __funcptr_type_kind
    0x000016DF store *__funcptr_type_kind >|2| 0x000016DD<, __funcptr_type_kind >|2| 0x000016DE<
    0x000016E0 call ag5 "openglGetProcAddress" (cstroflen 17 "glResetMinmaxEXT") *s8
    0x000016E1 gvar *__funcptr_type_kind 0x000005BD
    0x000016E2 bc *s8 >|2| 0x000016E0< to __funcptr_type_kind
    0x000016E3 store *__funcptr_type_kind >|2| 0x000016E1<, __funcptr_type_kind >|2| 0x000016E2<
    0x000016E4 call ag5 "openglGetProcAddress" (cstroflen 14 "glResetMinmax") *s8
    0x000016E5 gvar *__funcptr_type_kind 0x000005BE
    0x000016E6 bc *s8 >|2| 0x000016E4< to __funcptr_type_kind
    0x000016E7 store *__funcptr_type_kind >|2| 0x000016E5<, __funcptr_type_kind >|2| 0x000016E6<
    0x000016E8 call ag5 "openglGetProcAddress" (cstroflen 20 "glResizeBuffersMESA") *s8
    0x000016E9 gvar *__funcptr_type_kind 0x000005BF
    0x000016EA bc *s8 >|2| 0x000016E8< to __funcptr_type_kind
    0x000016EB store *__funcptr_type_kind >|2| 0x000016E9<, __funcptr_type_kind >|2| 0x000016EA<
    0x000016EC call ag5 "openglGetProcAddress" (cstroflen 28 "glResumeTransformFeedbackNV") *s8
    0x000016ED gvar *__funcptr_type_kind 0x000005C0
    0x000016EE bc *s8 >|2| 0x000016EC< to __funcptr_type_kind
    0x000016EF store *__funcptr_type_kind >|2| 0x000016ED<, __funcptr_type_kind >|2| 0x000016EE<
    0x000016F0 call ag5 "openglGetProcAddress" (cstroflen 26 "glResumeTransformFeedback") *s8
    0x000016F1 gvar *__funcptr_type_kind 0x000005C1
    0x000016F2 bc *s8 >|2| 0x000016F0< to __funcptr_type_kind
    0x000016F3 store *__funcptr_type_kind >|2| 0x000016F1<, __funcptr_type_kind >|2| 0x000016F2<
    0x000016F4 call ag5 "openglGetProcAddress" (cstroflen 10 "glRotatex") *s8
    0x000016F5 gvar *__funcptr_type_kind 0x000005C2
    0x000016F6 bc *s8 >|2| 0x000016F4< to __funcptr_type_kind
    0x000016F7 store *__funcptr_type_kind >|2| 0x000016F5<, __funcptr_type_kind >|2| 0x000016F6<
    0x000016F8 call ag5 "openglGetProcAddress" (cstroflen 20 "glSampleCoverageARB") *s8
    0x000016F9 gvar *__funcptr_type_kind 0x000005C3
    0x000016FA bc *s8 >|2| 0x000016F8< to __funcptr_type_kind
    0x000016FB store *__funcptr_type_kind >|2| 0x000016F9<, __funcptr_type_kind >|2| 0x000016FA<
    0x000016FC call ag5 "openglGetProcAddress" (cstroflen 17 "glSampleCoverage") *s8
    0x000016FD gvar *__funcptr_type_kind 0x000005C4
    0x000016FE bc *s8 >|2| 0x000016FC< to __funcptr_type_kind
    0x000016FF store *__funcptr_type_kind >|2| 0x000016FD<, __funcptr_type_kind >|2| 0x000016FE<
    0x00001700 call ag5 "openglGetProcAddress" (cstroflen 18 "glSampleCoveragex") *s8
    0x00001701 gvar *__funcptr_type_kind 0x000005C5
    0x00001702 bc *s8 >|2| 0x00001700< to __funcptr_type_kind
    0x00001703 store *__funcptr_type_kind >|2| 0x00001701<, __funcptr_type_kind >|2| 0x00001702<
    0x00001704 call ag5 "openglGetProcAddress" (cstroflen 15 "glSampleMapATI") *s8
    0x00001705 gvar *__funcptr_type_kind 0x000005C6
    0x00001706 bc *s8 >|2| 0x00001704< to __funcptr_type_kind
    0x00001707 store *__funcptr_type_kind >|2| 0x00001705<, __funcptr_type_kind >|2| 0x00001706<
    0x00001708 call ag5 "openglGetProcAddress" (cstroflen 16 "glSampleMaskEXT") *s8
    0x00001709 gvar *__funcptr_type_kind 0x000005C7
    0x0000170A bc *s8 >|2| 0x00001708< to __funcptr_type_kind
    0x0000170B store *__funcptr_type_kind >|2| 0x00001709<, __funcptr_type_kind >|2| 0x0000170A<
    0x0000170C call ag5 "openglGetProcAddress" (cstroflen 22 "glSampleMaskIndexedNV") *s8
    0x0000170D gvar *__funcptr_type_kind 0x000005C8
    0x0000170E bc *s8 >|2| 0x0000170C< to __funcptr_type_kind
    0x0000170F store *__funcptr_type_kind >|2| 0x0000170D<, __funcptr_type_kind >|2| 0x0000170E<
    0x00001710 call ag5 "openglGetProcAddress" (cstroflen 14 "glSampleMaski") *s8
    0x00001711 gvar *__funcptr_type_kind 0x000005C9
    0x00001712 bc *s8 >|2| 0x00001710< to __funcptr_type_kind
    0x00001713 store *__funcptr_type_kind >|2| 0x00001711<, __funcptr_type_kind >|2| 0x00001712<
    0x00001714 call ag5 "openglGetProcAddress" (cstroflen 17 "glSampleMaskSGIS") *s8
    0x00001715 gvar *__funcptr_type_kind 0x000005CA
    0x00001716 bc *s8 >|2| 0x00001714< to __funcptr_type_kind
    0x00001717 store *__funcptr_type_kind >|2| 0x00001715<, __funcptr_type_kind >|2| 0x00001716<
    0x00001718 call ag5 "openglGetProcAddress" (cstroflen 19 "glSamplePatternEXT") *s8
    0x00001719 gvar *__funcptr_type_kind 0x000005CB
    0x0000171A bc *s8 >|2| 0x00001718< to __funcptr_type_kind
    0x0000171B store *__funcptr_type_kind >|2| 0x00001719<, __funcptr_type_kind >|2| 0x0000171A<
    0x0000171C call ag5 "openglGetProcAddress" (cstroflen 20 "glSamplePatternSGIS") *s8
    0x0000171D gvar *__funcptr_type_kind 0x000005CC
    0x0000171E bc *s8 >|2| 0x0000171C< to __funcptr_type_kind
    0x0000171F store *__funcptr_type_kind >|2| 0x0000171D<, __funcptr_type_kind >|2| 0x0000171E<
    0x00001720 call ag5 "openglGetProcAddress" (cstroflen 20 "glSamplerParameterf") *s8
    0x00001721 gvar *__funcptr_type_kind 0x000005CD
    0x00001722 bc *s8 >|2| 0x00001720< to __funcptr_type_kind
    0x00001723 store *__funcptr_type_kind >|2| 0x00001721<, __funcptr_type_kind >|2| 0x00001722<
    0x00001724 call ag5 "openglGetProcAddress" (cstroflen 21 "glSamplerParameterfv") *s8
    0x00001725 gvar *__funcptr_type_kind 0x000005CE
    0x00001726 bc *s8 >|2| 0x00001724< to __funcptr_type_kind
    0x00001727 store *__funcptr_type_kind >|2| 0x00001725<, __funcptr_type_kind >|2| 0x00001726<
    0x00001728 call ag5 "openglGetProcAddress" (cstroflen 22 "glSamplerParameterIiv") *s8
    0x00001729 gvar *__funcptr_type_kind 0x000005CF
    0x0000172A bc *s8 >|2| 0x00001728< to __funcptr_type_kind
    0x0000172B store *__funcptr_type_kind >|2| 0x00001729<, __funcptr_type_kind >|2| 0x0000172A<
    0x0000172C call ag5 "openglGetProcAddress" (cstroflen 20 "glSamplerParameteri") *s8
    0x0000172D gvar *__funcptr_type_kind 0x000005D0
    0x0000172E bc *s8 >|2| 0x0000172C< to __funcptr_type_kind
    0x0000172F store *__funcptr_type_kind >|2| 0x0000172D<, __funcptr_type_kind >|2| 0x0000172E<
    0x00001730 call ag5 "openglGetProcAddress" (cstroflen 23 "glSamplerParameterIuiv") *s8
    0x00001731 gvar *__funcptr_type_kind 0x000005D1
    0x00001732 bc *s8 >|2| 0x00001730< to __funcptr_type_kind
    0x00001733 store *__funcptr_type_kind >|2| 0x00001731<, __funcptr_type_kind >|2| 0x00001732<
    0x00001734 call ag5 "openglGetProcAddress" (cstroflen 21 "glSamplerParameteriv") *s8
    0x00001735 gvar *__funcptr_type_kind 0x000005D2
    0x00001736 bc *s8 >|2| 0x00001734< to __funcptr_type_kind
    0x00001737 store *__funcptr_type_kind >|2| 0x00001735<, __funcptr_type_kind >|2| 0x00001736<
    0x00001738 call ag5 "openglGetProcAddress" (cstroflen 9 "glScalex") *s8
    0x00001739 gvar *__funcptr_type_kind 0x000005D3
    0x0000173A bc *s8 >|2| 0x00001738< to __funcptr_type_kind
    0x0000173B store *__funcptr_type_kind >|2| 0x00001739<, __funcptr_type_kind >|2| 0x0000173A<
    0x0000173C call ag5 "openglGetProcAddress" (cstroflen 16 "glScissorArrayv") *s8
    0x0000173D gvar *__funcptr_type_kind 0x000005D4
    0x0000173E bc *s8 >|2| 0x0000173C< to __funcptr_type_kind
    0x0000173F store *__funcptr_type_kind >|2| 0x0000173D<, __funcptr_type_kind >|2| 0x0000173E<
    0x00001740 call ag5 "openglGetProcAddress" (cstroflen 17 "glScissorIndexed") *s8
    0x00001741 gvar *__funcptr_type_kind 0x000005D5
    0x00001742 bc *s8 >|2| 0x00001740< to __funcptr_type_kind
    0x00001743 store *__funcptr_type_kind >|2| 0x00001741<, __funcptr_type_kind >|2| 0x00001742<
    0x00001744 call ag5 "openglGetProcAddress" (cstroflen 18 "glScissorIndexedv") *s8
    0x00001745 gvar *__funcptr_type_kind 0x000005D6
    0x00001746 bc *s8 >|2| 0x00001744< to __funcptr_type_kind
    0x00001747 store *__funcptr_type_kind >|2| 0x00001745<, __funcptr_type_kind >|2| 0x00001746<
    0x00001748 call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColor3bEXT") *s8
    0x00001749 gvar *__funcptr_type_kind 0x000005D7
    0x0000174A bc *s8 >|2| 0x00001748< to __funcptr_type_kind
    0x0000174B store *__funcptr_type_kind >|2| 0x00001749<, __funcptr_type_kind >|2| 0x0000174A<
    0x0000174C call ag5 "openglGetProcAddress" (cstroflen 19 "glSecondaryColor3b") *s8
    0x0000174D gvar *__funcptr_type_kind 0x000005D8
    0x0000174E bc *s8 >|2| 0x0000174C< to __funcptr_type_kind
    0x0000174F store *__funcptr_type_kind >|2| 0x0000174D<, __funcptr_type_kind >|2| 0x0000174E<
    0x00001750 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3bvEXT") *s8
    0x00001751 gvar *__funcptr_type_kind 0x000005D9
    0x00001752 bc *s8 >|2| 0x00001750< to __funcptr_type_kind
    0x00001753 store *__funcptr_type_kind >|2| 0x00001751<, __funcptr_type_kind >|2| 0x00001752<
    0x00001754 call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3bv") *s8
    0x00001755 gvar *__funcptr_type_kind 0x000005DA
    0x00001756 bc *s8 >|2| 0x00001754< to __funcptr_type_kind
    0x00001757 store *__funcptr_type_kind >|2| 0x00001755<, __funcptr_type_kind >|2| 0x00001756<
    0x00001758 call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColor3dEXT") *s8
    0x00001759 gvar *__funcptr_type_kind 0x000005DB
    0x0000175A bc *s8 >|2| 0x00001758< to __funcptr_type_kind
    0x0000175B store *__funcptr_type_kind >|2| 0x00001759<, __funcptr_type_kind >|2| 0x0000175A<
    0x0000175C call ag5 "openglGetProcAddress" (cstroflen 19 "glSecondaryColor3d") *s8
    0x0000175D gvar *__funcptr_type_kind 0x000005DC
    0x0000175E bc *s8 >|2| 0x0000175C< to __funcptr_type_kind
    0x0000175F store *__funcptr_type_kind >|2| 0x0000175D<, __funcptr_type_kind >|2| 0x0000175E<
    0x00001760 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3dvEXT") *s8
    0x00001761 gvar *__funcptr_type_kind 0x000005DD
    0x00001762 bc *s8 >|2| 0x00001760< to __funcptr_type_kind
    0x00001763 store *__funcptr_type_kind >|2| 0x00001761<, __funcptr_type_kind >|2| 0x00001762<
    0x00001764 call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3dv") *s8
    0x00001765 gvar *__funcptr_type_kind 0x000005DE
    0x00001766 bc *s8 >|2| 0x00001764< to __funcptr_type_kind
    0x00001767 store *__funcptr_type_kind >|2| 0x00001765<, __funcptr_type_kind >|2| 0x00001766<
    0x00001768 call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColor3fEXT") *s8
    0x00001769 gvar *__funcptr_type_kind 0x000005DF
    0x0000176A bc *s8 >|2| 0x00001768< to __funcptr_type_kind
    0x0000176B store *__funcptr_type_kind >|2| 0x00001769<, __funcptr_type_kind >|2| 0x0000176A<
    0x0000176C call ag5 "openglGetProcAddress" (cstroflen 19 "glSecondaryColor3f") *s8
    0x0000176D gvar *__funcptr_type_kind 0x000005E0
    0x0000176E bc *s8 >|2| 0x0000176C< to __funcptr_type_kind
    0x0000176F store *__funcptr_type_kind >|2| 0x0000176D<, __funcptr_type_kind >|2| 0x0000176E<
    0x00001770 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3fvEXT") *s8
    0x00001771 gvar *__funcptr_type_kind 0x000005E1
    0x00001772 bc *s8 >|2| 0x00001770< to __funcptr_type_kind
    0x00001773 store *__funcptr_type_kind >|2| 0x00001771<, __funcptr_type_kind >|2| 0x00001772<
    0x00001774 call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3fv") *s8
    0x00001775 gvar *__funcptr_type_kind 0x000005E2
    0x00001776 bc *s8 >|2| 0x00001774< to __funcptr_type_kind
    0x00001777 store *__funcptr_type_kind >|2| 0x00001775<, __funcptr_type_kind >|2| 0x00001776<
    0x00001778 call ag5 "openglGetProcAddress" (cstroflen 21 "glSecondaryColor3hNV") *s8
    0x00001779 gvar *__funcptr_type_kind 0x000005E3
    0x0000177A bc *s8 >|2| 0x00001778< to __funcptr_type_kind
    0x0000177B store *__funcptr_type_kind >|2| 0x00001779<, __funcptr_type_kind >|2| 0x0000177A<
    0x0000177C call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColor3hvNV") *s8
    0x0000177D gvar *__funcptr_type_kind 0x000005E4
    0x0000177E bc *s8 >|2| 0x0000177C< to __funcptr_type_kind
    0x0000177F store *__funcptr_type_kind >|2| 0x0000177D<, __funcptr_type_kind >|2| 0x0000177E<
    0x00001780 call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColor3iEXT") *s8
    0x00001781 gvar *__funcptr_type_kind 0x000005E5
    0x00001782 bc *s8 >|2| 0x00001780< to __funcptr_type_kind
    0x00001783 store *__funcptr_type_kind >|2| 0x00001781<, __funcptr_type_kind >|2| 0x00001782<
    0x00001784 call ag5 "openglGetProcAddress" (cstroflen 19 "glSecondaryColor3i") *s8
    0x00001785 gvar *__funcptr_type_kind 0x000005E6
    0x00001786 bc *s8 >|2| 0x00001784< to __funcptr_type_kind
    0x00001787 store *__funcptr_type_kind >|2| 0x00001785<, __funcptr_type_kind >|2| 0x00001786<
    0x00001788 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3ivEXT") *s8
    0x00001789 gvar *__funcptr_type_kind 0x000005E7
    0x0000178A bc *s8 >|2| 0x00001788< to __funcptr_type_kind
    0x0000178B store *__funcptr_type_kind >|2| 0x00001789<, __funcptr_type_kind >|2| 0x0000178A<
    0x0000178C call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3iv") *s8
    0x0000178D gvar *__funcptr_type_kind 0x000005E8
    0x0000178E bc *s8 >|2| 0x0000178C< to __funcptr_type_kind
    0x0000178F store *__funcptr_type_kind >|2| 0x0000178D<, __funcptr_type_kind >|2| 0x0000178E<
    0x00001790 call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColor3sEXT") *s8
    0x00001791 gvar *__funcptr_type_kind 0x000005E9
    0x00001792 bc *s8 >|2| 0x00001790< to __funcptr_type_kind
    0x00001793 store *__funcptr_type_kind >|2| 0x00001791<, __funcptr_type_kind >|2| 0x00001792<
    0x00001794 call ag5 "openglGetProcAddress" (cstroflen 19 "glSecondaryColor3s") *s8
    0x00001795 gvar *__funcptr_type_kind 0x000005EA
    0x00001796 bc *s8 >|2| 0x00001794< to __funcptr_type_kind
    0x00001797 store *__funcptr_type_kind >|2| 0x00001795<, __funcptr_type_kind >|2| 0x00001796<
    0x00001798 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3svEXT") *s8
    0x00001799 gvar *__funcptr_type_kind 0x000005EB
    0x0000179A bc *s8 >|2| 0x00001798< to __funcptr_type_kind
    0x0000179B store *__funcptr_type_kind >|2| 0x00001799<, __funcptr_type_kind >|2| 0x0000179A<
    0x0000179C call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3sv") *s8
    0x0000179D gvar *__funcptr_type_kind 0x000005EC
    0x0000179E bc *s8 >|2| 0x0000179C< to __funcptr_type_kind
    0x0000179F store *__funcptr_type_kind >|2| 0x0000179D<, __funcptr_type_kind >|2| 0x0000179E<
    0x000017A0 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3ubEXT") *s8
    0x000017A1 gvar *__funcptr_type_kind 0x000005ED
    0x000017A2 bc *s8 >|2| 0x000017A0< to __funcptr_type_kind
    0x000017A3 store *__funcptr_type_kind >|2| 0x000017A1<, __funcptr_type_kind >|2| 0x000017A2<
    0x000017A4 call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3ub") *s8
    0x000017A5 gvar *__funcptr_type_kind 0x000005EE
    0x000017A6 bc *s8 >|2| 0x000017A4< to __funcptr_type_kind
    0x000017A7 store *__funcptr_type_kind >|2| 0x000017A5<, __funcptr_type_kind >|2| 0x000017A6<
    0x000017A8 call ag5 "openglGetProcAddress" (cstroflen 24 "glSecondaryColor3ubvEXT") *s8
    0x000017A9 gvar *__funcptr_type_kind 0x000005EF
    0x000017AA bc *s8 >|2| 0x000017A8< to __funcptr_type_kind
    0x000017AB store *__funcptr_type_kind >|2| 0x000017A9<, __funcptr_type_kind >|2| 0x000017AA<
    0x000017AC call ag5 "openglGetProcAddress" (cstroflen 21 "glSecondaryColor3ubv") *s8
    0x000017AD gvar *__funcptr_type_kind 0x000005F0
    0x000017AE bc *s8 >|2| 0x000017AC< to __funcptr_type_kind
    0x000017AF store *__funcptr_type_kind >|2| 0x000017AD<, __funcptr_type_kind >|2| 0x000017AE<
    0x000017B0 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3uiEXT") *s8
    0x000017B1 gvar *__funcptr_type_kind 0x000005F1
    0x000017B2 bc *s8 >|2| 0x000017B0< to __funcptr_type_kind
    0x000017B3 store *__funcptr_type_kind >|2| 0x000017B1<, __funcptr_type_kind >|2| 0x000017B2<
    0x000017B4 call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3ui") *s8
    0x000017B5 gvar *__funcptr_type_kind 0x000005F2
    0x000017B6 bc *s8 >|2| 0x000017B4< to __funcptr_type_kind
    0x000017B7 store *__funcptr_type_kind >|2| 0x000017B5<, __funcptr_type_kind >|2| 0x000017B6<
    0x000017B8 call ag5 "openglGetProcAddress" (cstroflen 24 "glSecondaryColor3uivEXT") *s8
    0x000017B9 gvar *__funcptr_type_kind 0x000005F3
    0x000017BA bc *s8 >|2| 0x000017B8< to __funcptr_type_kind
    0x000017BB store *__funcptr_type_kind >|2| 0x000017B9<, __funcptr_type_kind >|2| 0x000017BA<
    0x000017BC call ag5 "openglGetProcAddress" (cstroflen 21 "glSecondaryColor3uiv") *s8
    0x000017BD gvar *__funcptr_type_kind 0x000005F4
    0x000017BE bc *s8 >|2| 0x000017BC< to __funcptr_type_kind
    0x000017BF store *__funcptr_type_kind >|2| 0x000017BD<, __funcptr_type_kind >|2| 0x000017BE<
    0x000017C0 call ag5 "openglGetProcAddress" (cstroflen 23 "glSecondaryColor3usEXT") *s8
    0x000017C1 gvar *__funcptr_type_kind 0x000005F5
    0x000017C2 bc *s8 >|2| 0x000017C0< to __funcptr_type_kind
    0x000017C3 store *__funcptr_type_kind >|2| 0x000017C1<, __funcptr_type_kind >|2| 0x000017C2<
    0x000017C4 call ag5 "openglGetProcAddress" (cstroflen 20 "glSecondaryColor3us") *s8
    0x000017C5 gvar *__funcptr_type_kind 0x000005F6
    0x000017C6 bc *s8 >|2| 0x000017C4< to __funcptr_type_kind
    0x000017C7 store *__funcptr_type_kind >|2| 0x000017C5<, __funcptr_type_kind >|2| 0x000017C6<
    0x000017C8 call ag5 "openglGetProcAddress" (cstroflen 24 "glSecondaryColor3usvEXT") *s8
    0x000017C9 gvar *__funcptr_type_kind 0x000005F7
    0x000017CA bc *s8 >|2| 0x000017C8< to __funcptr_type_kind
    0x000017CB store *__funcptr_type_kind >|2| 0x000017C9<, __funcptr_type_kind >|2| 0x000017CA<
    0x000017CC call ag5 "openglGetProcAddress" (cstroflen 21 "glSecondaryColor3usv") *s8
    0x000017CD gvar *__funcptr_type_kind 0x000005F8
    0x000017CE bc *s8 >|2| 0x000017CC< to __funcptr_type_kind
    0x000017CF store *__funcptr_type_kind >|2| 0x000017CD<, __funcptr_type_kind >|2| 0x000017CE<
    0x000017D0 call ag5 "openglGetProcAddress" (cstroflen 25 "glSecondaryColorFormatNV") *s8
    0x000017D1 gvar *__funcptr_type_kind 0x000005F9
    0x000017D2 bc *s8 >|2| 0x000017D0< to __funcptr_type_kind
    0x000017D3 store *__funcptr_type_kind >|2| 0x000017D1<, __funcptr_type_kind >|2| 0x000017D2<
    0x000017D4 call ag5 "openglGetProcAddress" (cstroflen 21 "glSecondaryColorP3ui") *s8
    0x000017D5 gvar *__funcptr_type_kind 0x000005FA
    0x000017D6 bc *s8 >|2| 0x000017D4< to __funcptr_type_kind
    0x000017D7 store *__funcptr_type_kind >|2| 0x000017D5<, __funcptr_type_kind >|2| 0x000017D6<
    0x000017D8 call ag5 "openglGetProcAddress" (cstroflen 22 "glSecondaryColorP3uiv") *s8
    0x000017D9 gvar *__funcptr_type_kind 0x000005FB
    0x000017DA bc *s8 >|2| 0x000017D8< to __funcptr_type_kind
    0x000017DB store *__funcptr_type_kind >|2| 0x000017D9<, __funcptr_type_kind >|2| 0x000017DA<
    0x000017DC call ag5 "openglGetProcAddress" (cstroflen 27 "glSecondaryColorPointerEXT") *s8
    0x000017DD gvar *__funcptr_type_kind 0x000005FC
    0x000017DE bc *s8 >|2| 0x000017DC< to __funcptr_type_kind
    0x000017DF store *__funcptr_type_kind >|2| 0x000017DD<, __funcptr_type_kind >|2| 0x000017DE<
    0x000017E0 call ag5 "openglGetProcAddress" (cstroflen 31 "glSecondaryColorPointerListIBM") *s8
    0x000017E1 gvar *__funcptr_type_kind 0x000005FD
    0x000017E2 bc *s8 >|2| 0x000017E0< to __funcptr_type_kind
    0x000017E3 store *__funcptr_type_kind >|2| 0x000017E1<, __funcptr_type_kind >|2| 0x000017E2<
    0x000017E4 call ag5 "openglGetProcAddress" (cstroflen 24 "glSecondaryColorPointer") *s8
    0x000017E5 gvar *__funcptr_type_kind 0x000005FE
    0x000017E6 bc *s8 >|2| 0x000017E4< to __funcptr_type_kind
    0x000017E7 store *__funcptr_type_kind >|2| 0x000017E5<, __funcptr_type_kind >|2| 0x000017E6<
    0x000017E8 call ag5 "openglGetProcAddress" (cstroflen 31 "glSelectPerfMonitorCountersAMD") *s8
    0x000017E9 gvar *__funcptr_type_kind 0x000005FF
    0x000017EA bc *s8 >|2| 0x000017E8< to __funcptr_type_kind
    0x000017EB store *__funcptr_type_kind >|2| 0x000017E9<, __funcptr_type_kind >|2| 0x000017EA<
    0x000017EC call ag5 "openglGetProcAddress" (cstroflen 23 "glSeparableFilter2DEXT") *s8
    0x000017ED gvar *__funcptr_type_kind 0x00000600
    0x000017EE bc *s8 >|2| 0x000017EC< to __funcptr_type_kind
    0x000017EF store *__funcptr_type_kind >|2| 0x000017ED<, __funcptr_type_kind >|2| 0x000017EE<
    0x000017F0 call ag5 "openglGetProcAddress" (cstroflen 20 "glSeparableFilter2D") *s8
    0x000017F1 gvar *__funcptr_type_kind 0x00000601
    0x000017F2 bc *s8 >|2| 0x000017F0< to __funcptr_type_kind
    0x000017F3 store *__funcptr_type_kind >|2| 0x000017F1<, __funcptr_type_kind >|2| 0x000017F2<
    0x000017F4 call ag5 "openglGetProcAddress" (cstroflen 16 "glSetFenceAPPLE") *s8
    0x000017F5 gvar *__funcptr_type_kind 0x00000602
    0x000017F6 bc *s8 >|2| 0x000017F4< to __funcptr_type_kind
    0x000017F7 store *__funcptr_type_kind >|2| 0x000017F5<, __funcptr_type_kind >|2| 0x000017F6<
    0x000017F8 call ag5 "openglGetProcAddress" (cstroflen 13 "glSetFenceNV") *s8
    0x000017F9 gvar *__funcptr_type_kind 0x00000603
    0x000017FA bc *s8 >|2| 0x000017F8< to __funcptr_type_kind
    0x000017FB store *__funcptr_type_kind >|2| 0x000017F9<, __funcptr_type_kind >|2| 0x000017FA<
    0x000017FC call ag5 "openglGetProcAddress" (cstroflen 31 "glSetFragmentShaderConstantATI") *s8
    0x000017FD gvar *__funcptr_type_kind 0x00000604
    0x000017FE bc *s8 >|2| 0x000017FC< to __funcptr_type_kind
    0x000017FF store *__funcptr_type_kind >|2| 0x000017FD<, __funcptr_type_kind >|2| 0x000017FE<
    0x00001800 call ag5 "openglGetProcAddress" (cstroflen 18 "glSetInvariantEXT") *s8
    0x00001801 gvar *__funcptr_type_kind 0x00000605
    0x00001802 bc *s8 >|2| 0x00001800< to __funcptr_type_kind
    0x00001803 store *__funcptr_type_kind >|2| 0x00001801<, __funcptr_type_kind >|2| 0x00001802<
    0x00001804 call ag5 "openglGetProcAddress" (cstroflen 22 "glSetLocalConstantEXT") *s8
    0x00001805 gvar *__funcptr_type_kind 0x00000606
    0x00001806 bc *s8 >|2| 0x00001804< to __funcptr_type_kind
    0x00001807 store *__funcptr_type_kind >|2| 0x00001805<, __funcptr_type_kind >|2| 0x00001806<
    0x00001808 call ag5 "openglGetProcAddress" (cstroflen 22 "glSetMultisamplefvAMD") *s8
    0x00001809 gvar *__funcptr_type_kind 0x00000607
    0x0000180A bc *s8 >|2| 0x00001808< to __funcptr_type_kind
    0x0000180B store *__funcptr_type_kind >|2| 0x00001809<, __funcptr_type_kind >|2| 0x0000180A<
    0x0000180C call ag5 "openglGetProcAddress" (cstroflen 15 "glShaderBinary") *s8
    0x0000180D gvar *__funcptr_type_kind 0x00000608
    0x0000180E bc *s8 >|2| 0x0000180C< to __funcptr_type_kind
    0x0000180F store *__funcptr_type_kind >|2| 0x0000180D<, __funcptr_type_kind >|2| 0x0000180E<
    0x00001810 call ag5 "openglGetProcAddress" (cstroflen 15 "glShaderOp1EXT") *s8
    0x00001811 gvar *__funcptr_type_kind 0x00000609
    0x00001812 bc *s8 >|2| 0x00001810< to __funcptr_type_kind
    0x00001813 store *__funcptr_type_kind >|2| 0x00001811<, __funcptr_type_kind >|2| 0x00001812<
    0x00001814 call ag5 "openglGetProcAddress" (cstroflen 15 "glShaderOp2EXT") *s8
    0x00001815 gvar *__funcptr_type_kind 0x0000060A
    0x00001816 bc *s8 >|2| 0x00001814< to __funcptr_type_kind
    0x00001817 store *__funcptr_type_kind >|2| 0x00001815<, __funcptr_type_kind >|2| 0x00001816<
    0x00001818 call ag5 "openglGetProcAddress" (cstroflen 15 "glShaderOp3EXT") *s8
    0x00001819 gvar *__funcptr_type_kind 0x0000060B
    0x0000181A bc *s8 >|2| 0x00001818< to __funcptr_type_kind
    0x0000181B store *__funcptr_type_kind >|2| 0x00001819<, __funcptr_type_kind >|2| 0x0000181A<
    0x0000181C call ag5 "openglGetProcAddress" (cstroflen 18 "glShaderSourceARB") *s8
    0x0000181D gvar *__funcptr_type_kind 0x0000060C
    0x0000181E bc *s8 >|2| 0x0000181C< to __funcptr_type_kind
    0x0000181F store *__funcptr_type_kind >|2| 0x0000181D<, __funcptr_type_kind >|2| 0x0000181E<
    0x00001820 call ag5 "openglGetProcAddress" (cstroflen 15 "glShaderSource") *s8
    0x00001821 gvar *__funcptr_type_kind 0x0000060D
    0x00001822 bc *s8 >|2| 0x00001820< to __funcptr_type_kind
    0x00001823 store *__funcptr_type_kind >|2| 0x00001821<, __funcptr_type_kind >|2| 0x00001822<
    0x00001824 call ag5 "openglGetProcAddress" (cstroflen 28 "glShaderStorageBlockBinding") *s8
    0x00001825 gvar *__funcptr_type_kind 0x0000060E
    0x00001826 bc *s8 >|2| 0x00001824< to __funcptr_type_kind
    0x00001827 store *__funcptr_type_kind >|2| 0x00001825<, __funcptr_type_kind >|2| 0x00001826<
    0x00001828 call ag5 "openglGetProcAddress" (cstroflen 21 "glSharpenTexFuncSGIS") *s8
    0x00001829 gvar *__funcptr_type_kind 0x0000060F
    0x0000182A bc *s8 >|2| 0x00001828< to __funcptr_type_kind
    0x0000182B store *__funcptr_type_kind >|2| 0x00001829<, __funcptr_type_kind >|2| 0x0000182A<
    0x0000182C call ag5 "openglGetProcAddress" (cstroflen 23 "glSpriteParameterfSGIX") *s8
    0x0000182D gvar *__funcptr_type_kind 0x00000610
    0x0000182E bc *s8 >|2| 0x0000182C< to __funcptr_type_kind
    0x0000182F store *__funcptr_type_kind >|2| 0x0000182D<, __funcptr_type_kind >|2| 0x0000182E<
    0x00001830 call ag5 "openglGetProcAddress" (cstroflen 24 "glSpriteParameterfvSGIX") *s8
    0x00001831 gvar *__funcptr_type_kind 0x00000611
    0x00001832 bc *s8 >|2| 0x00001830< to __funcptr_type_kind
    0x00001833 store *__funcptr_type_kind >|2| 0x00001831<, __funcptr_type_kind >|2| 0x00001832<
    0x00001834 call ag5 "openglGetProcAddress" (cstroflen 23 "glSpriteParameteriSGIX") *s8
    0x00001835 gvar *__funcptr_type_kind 0x00000612
    0x00001836 bc *s8 >|2| 0x00001834< to __funcptr_type_kind
    0x00001837 store *__funcptr_type_kind >|2| 0x00001835<, __funcptr_type_kind >|2| 0x00001836<
    0x00001838 call ag5 "openglGetProcAddress" (cstroflen 24 "glSpriteParameterivSGIX") *s8
    0x00001839 gvar *__funcptr_type_kind 0x00000613
    0x0000183A bc *s8 >|2| 0x00001838< to __funcptr_type_kind
    0x0000183B store *__funcptr_type_kind >|2| 0x00001839<, __funcptr_type_kind >|2| 0x0000183A<
    0x0000183C call ag5 "openglGetProcAddress" (cstroflen 29 "glStencilFillPathInstancedNV") *s8
    0x0000183D gvar *__funcptr_type_kind 0x00000614
    0x0000183E bc *s8 >|2| 0x0000183C< to __funcptr_type_kind
    0x0000183F store *__funcptr_type_kind >|2| 0x0000183D<, __funcptr_type_kind >|2| 0x0000183E<
    0x00001840 call ag5 "openglGetProcAddress" (cstroflen 20 "glStencilFillPathNV") *s8
    0x00001841 gvar *__funcptr_type_kind 0x00000615
    0x00001842 bc *s8 >|2| 0x00001840< to __funcptr_type_kind
    0x00001843 store *__funcptr_type_kind >|2| 0x00001841<, __funcptr_type_kind >|2| 0x00001842<
    0x00001844 call ag5 "openglGetProcAddress" (cstroflen 25 "glStencilFuncSeparateATI") *s8
    0x00001845 gvar *__funcptr_type_kind 0x00000616
    0x00001846 bc *s8 >|2| 0x00001844< to __funcptr_type_kind
    0x00001847 store *__funcptr_type_kind >|2| 0x00001845<, __funcptr_type_kind >|2| 0x00001846<
    0x00001848 call ag5 "openglGetProcAddress" (cstroflen 22 "glStencilFuncSeparate") *s8
    0x00001849 gvar *__funcptr_type_kind 0x00000617
    0x0000184A bc *s8 >|2| 0x00001848< to __funcptr_type_kind
    0x0000184B store *__funcptr_type_kind >|2| 0x00001849<, __funcptr_type_kind >|2| 0x0000184A<
    0x0000184C call ag5 "openglGetProcAddress" (cstroflen 22 "glStencilMaskSeparate") *s8
    0x0000184D gvar *__funcptr_type_kind 0x00000618
    0x0000184E bc *s8 >|2| 0x0000184C< to __funcptr_type_kind
    0x0000184F store *__funcptr_type_kind >|2| 0x0000184D<, __funcptr_type_kind >|2| 0x0000184E<
    0x00001850 call ag5 "openglGetProcAddress" (cstroflen 23 "glStencilOpSeparateATI") *s8
    0x00001851 gvar *__funcptr_type_kind 0x00000619
    0x00001852 bc *s8 >|2| 0x00001850< to __funcptr_type_kind
    0x00001853 store *__funcptr_type_kind >|2| 0x00001851<, __funcptr_type_kind >|2| 0x00001852<
    0x00001854 call ag5 "openglGetProcAddress" (cstroflen 20 "glStencilOpSeparate") *s8
    0x00001855 gvar *__funcptr_type_kind 0x0000061A
    0x00001856 bc *s8 >|2| 0x00001854< to __funcptr_type_kind
    0x00001857 store *__funcptr_type_kind >|2| 0x00001855<, __funcptr_type_kind >|2| 0x00001856<
    0x00001858 call ag5 "openglGetProcAddress" (cstroflen 20 "glStencilOpValueAMD") *s8
    0x00001859 gvar *__funcptr_type_kind 0x0000061B
    0x0000185A bc *s8 >|2| 0x00001858< to __funcptr_type_kind
    0x0000185B store *__funcptr_type_kind >|2| 0x00001859<, __funcptr_type_kind >|2| 0x0000185A<
    0x0000185C call ag5 "openglGetProcAddress" (cstroflen 31 "glStencilStrokePathInstancedNV") *s8
    0x0000185D gvar *__funcptr_type_kind 0x0000061C
    0x0000185E bc *s8 >|2| 0x0000185C< to __funcptr_type_kind
    0x0000185F store *__funcptr_type_kind >|2| 0x0000185D<, __funcptr_type_kind >|2| 0x0000185E<
    0x00001860 call ag5 "openglGetProcAddress" (cstroflen 22 "glStencilStrokePathNV") *s8
    0x00001861 gvar *__funcptr_type_kind 0x0000061D
    0x00001862 bc *s8 >|2| 0x00001860< to __funcptr_type_kind
    0x00001863 store *__funcptr_type_kind >|2| 0x00001861<, __funcptr_type_kind >|2| 0x00001862<
    0x00001864 call ag5 "openglGetProcAddress" (cstroflen 38 "glStencilThenCoverFillPathInstancedNV") *s8
    0x00001865 gvar *__funcptr_type_kind 0x0000061E
    0x00001866 bc *s8 >|2| 0x00001864< to __funcptr_type_kind
    0x00001867 store *__funcptr_type_kind >|2| 0x00001865<, __funcptr_type_kind >|2| 0x00001866<
    0x00001868 call ag5 "openglGetProcAddress" (cstroflen 29 "glStencilThenCoverFillPathNV") *s8
    0x00001869 gvar *__funcptr_type_kind 0x0000061F
    0x0000186A bc *s8 >|2| 0x00001868< to __funcptr_type_kind
    0x0000186B store *__funcptr_type_kind >|2| 0x00001869<, __funcptr_type_kind >|2| 0x0000186A<
    0x0000186C call ag5 "openglGetProcAddress" (cstroflen 40 "glStencilThenCoverStrokePathInstancedNV") *s8
    0x0000186D gvar *__funcptr_type_kind 0x00000620
    0x0000186E bc *s8 >|2| 0x0000186C< to __funcptr_type_kind
    0x0000186F store *__funcptr_type_kind >|2| 0x0000186D<, __funcptr_type_kind >|2| 0x0000186E<
    0x00001870 call ag5 "openglGetProcAddress" (cstroflen 31 "glStencilThenCoverStrokePathNV") *s8
    0x00001871 gvar *__funcptr_type_kind 0x00000621
    0x00001872 bc *s8 >|2| 0x00001870< to __funcptr_type_kind
    0x00001873 store *__funcptr_type_kind >|2| 0x00001871<, __funcptr_type_kind >|2| 0x00001872<
    0x00001874 call ag5 "openglGetProcAddress" (cstroflen 22 "glStringMarkerGREMEDY") *s8
    0x00001875 gvar *__funcptr_type_kind 0x00000622
    0x00001876 bc *s8 >|2| 0x00001874< to __funcptr_type_kind
    0x00001877 store *__funcptr_type_kind >|2| 0x00001875<, __funcptr_type_kind >|2| 0x00001876<
    0x00001878 call ag5 "openglGetProcAddress" (cstroflen 26 "glSubpixelPrecisionBiasNV") *s8
    0x00001879 gvar *__funcptr_type_kind 0x00000623
    0x0000187A bc *s8 >|2| 0x00001878< to __funcptr_type_kind
    0x0000187B store *__funcptr_type_kind >|2| 0x00001879<, __funcptr_type_kind >|2| 0x0000187A<
    0x0000187C call ag5 "openglGetProcAddress" (cstroflen 13 "glSwizzleEXT") *s8
    0x0000187D gvar *__funcptr_type_kind 0x00000624
    0x0000187E bc *s8 >|2| 0x0000187C< to __funcptr_type_kind
    0x0000187F store *__funcptr_type_kind >|2| 0x0000187D<, __funcptr_type_kind >|2| 0x0000187E<
    0x00001880 call ag5 "openglGetProcAddress" (cstroflen 19 "glSyncTextureINTEL") *s8
    0x00001881 gvar *__funcptr_type_kind 0x00000625
    0x00001882 bc *s8 >|2| 0x00001880< to __funcptr_type_kind
    0x00001883 store *__funcptr_type_kind >|2| 0x00001881<, __funcptr_type_kind >|2| 0x00001882<
    0x00001884 call ag5 "openglGetProcAddress" (cstroflen 22 "glTagSampleBufferSGIX") *s8
    0x00001885 gvar *__funcptr_type_kind 0x00000626
    0x00001886 bc *s8 >|2| 0x00001884< to __funcptr_type_kind
    0x00001887 store *__funcptr_type_kind >|2| 0x00001885<, __funcptr_type_kind >|2| 0x00001886<
    0x00001888 call ag5 "openglGetProcAddress" (cstroflen 20 "glTangentPointerEXT") *s8
    0x00001889 gvar *__funcptr_type_kind 0x00000627
    0x0000188A bc *s8 >|2| 0x00001888< to __funcptr_type_kind
    0x0000188B store *__funcptr_type_kind >|2| 0x00001889<, __funcptr_type_kind >|2| 0x0000188A<
    0x0000188C call ag5 "openglGetProcAddress" (cstroflen 18 "glTbufferMask3DFX") *s8
    0x0000188D gvar *__funcptr_type_kind 0x00000628
    0x0000188E bc *s8 >|2| 0x0000188C< to __funcptr_type_kind
    0x0000188F store *__funcptr_type_kind >|2| 0x0000188D<, __funcptr_type_kind >|2| 0x0000188E<
    0x00001890 call ag5 "openglGetProcAddress" (cstroflen 24 "glTessellationFactorAMD") *s8
    0x00001891 gvar *__funcptr_type_kind 0x00000629
    0x00001892 bc *s8 >|2| 0x00001890< to __funcptr_type_kind
    0x00001893 store *__funcptr_type_kind >|2| 0x00001891<, __funcptr_type_kind >|2| 0x00001892<
    0x00001894 call ag5 "openglGetProcAddress" (cstroflen 22 "glTessellationModeAMD") *s8
    0x00001895 gvar *__funcptr_type_kind 0x0000062A
    0x00001896 bc *s8 >|2| 0x00001894< to __funcptr_type_kind
    0x00001897 store *__funcptr_type_kind >|2| 0x00001895<, __funcptr_type_kind >|2| 0x00001896<
    0x00001898 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexBufferARB") *s8
    0x00001899 gvar *__funcptr_type_kind 0x0000062B
    0x0000189A bc *s8 >|2| 0x00001898< to __funcptr_type_kind
    0x0000189B store *__funcptr_type_kind >|2| 0x00001899<, __funcptr_type_kind >|2| 0x0000189A<
    0x0000189C call ag5 "openglGetProcAddress" (cstroflen 15 "glTexBufferEXT") *s8
    0x0000189D gvar *__funcptr_type_kind 0x0000062C
    0x0000189E bc *s8 >|2| 0x0000189C< to __funcptr_type_kind
    0x0000189F store *__funcptr_type_kind >|2| 0x0000189D<, __funcptr_type_kind >|2| 0x0000189E<
    0x000018A0 call ag5 "openglGetProcAddress" (cstroflen 12 "glTexBuffer") *s8
    0x000018A1 gvar *__funcptr_type_kind 0x0000062D
    0x000018A2 bc *s8 >|2| 0x000018A0< to __funcptr_type_kind
    0x000018A3 store *__funcptr_type_kind >|2| 0x000018A1<, __funcptr_type_kind >|2| 0x000018A2<
    0x000018A4 call ag5 "openglGetProcAddress" (cstroflen 17 "glTexBufferRange") *s8
    0x000018A5 gvar *__funcptr_type_kind 0x0000062E
    0x000018A6 bc *s8 >|2| 0x000018A4< to __funcptr_type_kind
    0x000018A7 store *__funcptr_type_kind >|2| 0x000018A5<, __funcptr_type_kind >|2| 0x000018A6<
    0x000018A8 call ag5 "openglGetProcAddress" (cstroflen 24 "glTexBumpParameterfvATI") *s8
    0x000018A9 gvar *__funcptr_type_kind 0x0000062F
    0x000018AA bc *s8 >|2| 0x000018A8< to __funcptr_type_kind
    0x000018AB store *__funcptr_type_kind >|2| 0x000018A9<, __funcptr_type_kind >|2| 0x000018AA<
    0x000018AC call ag5 "openglGetProcAddress" (cstroflen 24 "glTexBumpParameterivATI") *s8
    0x000018AD gvar *__funcptr_type_kind 0x00000630
    0x000018AE bc *s8 >|2| 0x000018AC< to __funcptr_type_kind
    0x000018AF store *__funcptr_type_kind >|2| 0x000018AD<, __funcptr_type_kind >|2| 0x000018AE<
    0x000018B0 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoord1hNV") *s8
    0x000018B1 gvar *__funcptr_type_kind 0x00000631
    0x000018B2 bc *s8 >|2| 0x000018B0< to __funcptr_type_kind
    0x000018B3 store *__funcptr_type_kind >|2| 0x000018B1<, __funcptr_type_kind >|2| 0x000018B2<
    0x000018B4 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoord1hvNV") *s8
    0x000018B5 gvar *__funcptr_type_kind 0x00000632
    0x000018B6 bc *s8 >|2| 0x000018B4< to __funcptr_type_kind
    0x000018B7 store *__funcptr_type_kind >|2| 0x000018B5<, __funcptr_type_kind >|2| 0x000018B6<
    0x000018B8 call ag5 "openglGetProcAddress" (cstroflen 31 "glTexCoord2fColor3fVertex3fSUN") *s8
    0x000018B9 gvar *__funcptr_type_kind 0x00000633
    0x000018BA bc *s8 >|2| 0x000018B8< to __funcptr_type_kind
    0x000018BB store *__funcptr_type_kind >|2| 0x000018B9<, __funcptr_type_kind >|2| 0x000018BA<
    0x000018BC call ag5 "openglGetProcAddress" (cstroflen 32 "glTexCoord2fColor3fVertex3fvSUN") *s8
    0x000018BD gvar *__funcptr_type_kind 0x00000634
    0x000018BE bc *s8 >|2| 0x000018BC< to __funcptr_type_kind
    0x000018BF store *__funcptr_type_kind >|2| 0x000018BD<, __funcptr_type_kind >|2| 0x000018BE<
    0x000018C0 call ag5 "openglGetProcAddress" (cstroflen 39 "glTexCoord2fColor4fNormal3fVertex3fSUN") *s8
    0x000018C1 gvar *__funcptr_type_kind 0x00000635
    0x000018C2 bc *s8 >|2| 0x000018C0< to __funcptr_type_kind
    0x000018C3 store *__funcptr_type_kind >|2| 0x000018C1<, __funcptr_type_kind >|2| 0x000018C2<
    0x000018C4 call ag5 "openglGetProcAddress" (cstroflen 40 "glTexCoord2fColor4fNormal3fVertex3fvSUN") *s8
    0x000018C5 gvar *__funcptr_type_kind 0x00000636
    0x000018C6 bc *s8 >|2| 0x000018C4< to __funcptr_type_kind
    0x000018C7 store *__funcptr_type_kind >|2| 0x000018C5<, __funcptr_type_kind >|2| 0x000018C6<
    0x000018C8 call ag5 "openglGetProcAddress" (cstroflen 32 "glTexCoord2fColor4ubVertex3fSUN") *s8
    0x000018C9 gvar *__funcptr_type_kind 0x00000637
    0x000018CA bc *s8 >|2| 0x000018C8< to __funcptr_type_kind
    0x000018CB store *__funcptr_type_kind >|2| 0x000018C9<, __funcptr_type_kind >|2| 0x000018CA<
    0x000018CC call ag5 "openglGetProcAddress" (cstroflen 33 "glTexCoord2fColor4ubVertex3fvSUN") *s8
    0x000018CD gvar *__funcptr_type_kind 0x00000638
    0x000018CE bc *s8 >|2| 0x000018CC< to __funcptr_type_kind
    0x000018CF store *__funcptr_type_kind >|2| 0x000018CD<, __funcptr_type_kind >|2| 0x000018CE<
    0x000018D0 call ag5 "openglGetProcAddress" (cstroflen 32 "glTexCoord2fNormal3fVertex3fSUN") *s8
    0x000018D1 gvar *__funcptr_type_kind 0x00000639
    0x000018D2 bc *s8 >|2| 0x000018D0< to __funcptr_type_kind
    0x000018D3 store *__funcptr_type_kind >|2| 0x000018D1<, __funcptr_type_kind >|2| 0x000018D2<
    0x000018D4 call ag5 "openglGetProcAddress" (cstroflen 33 "glTexCoord2fNormal3fVertex3fvSUN") *s8
    0x000018D5 gvar *__funcptr_type_kind 0x0000063A
    0x000018D6 bc *s8 >|2| 0x000018D4< to __funcptr_type_kind
    0x000018D7 store *__funcptr_type_kind >|2| 0x000018D5<, __funcptr_type_kind >|2| 0x000018D6<
    0x000018D8 call ag5 "openglGetProcAddress" (cstroflen 24 "glTexCoord2fVertex3fSUN") *s8
    0x000018D9 gvar *__funcptr_type_kind 0x0000063B
    0x000018DA bc *s8 >|2| 0x000018D8< to __funcptr_type_kind
    0x000018DB store *__funcptr_type_kind >|2| 0x000018D9<, __funcptr_type_kind >|2| 0x000018DA<
    0x000018DC call ag5 "openglGetProcAddress" (cstroflen 25 "glTexCoord2fVertex3fvSUN") *s8
    0x000018DD gvar *__funcptr_type_kind 0x0000063C
    0x000018DE bc *s8 >|2| 0x000018DC< to __funcptr_type_kind
    0x000018DF store *__funcptr_type_kind >|2| 0x000018DD<, __funcptr_type_kind >|2| 0x000018DE<
    0x000018E0 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoord2hNV") *s8
    0x000018E1 gvar *__funcptr_type_kind 0x0000063D
    0x000018E2 bc *s8 >|2| 0x000018E0< to __funcptr_type_kind
    0x000018E3 store *__funcptr_type_kind >|2| 0x000018E1<, __funcptr_type_kind >|2| 0x000018E2<
    0x000018E4 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoord2hvNV") *s8
    0x000018E5 gvar *__funcptr_type_kind 0x0000063E
    0x000018E6 bc *s8 >|2| 0x000018E4< to __funcptr_type_kind
    0x000018E7 store *__funcptr_type_kind >|2| 0x000018E5<, __funcptr_type_kind >|2| 0x000018E6<
    0x000018E8 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoord3hNV") *s8
    0x000018E9 gvar *__funcptr_type_kind 0x0000063F
    0x000018EA bc *s8 >|2| 0x000018E8< to __funcptr_type_kind
    0x000018EB store *__funcptr_type_kind >|2| 0x000018E9<, __funcptr_type_kind >|2| 0x000018EA<
    0x000018EC call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoord3hvNV") *s8
    0x000018ED gvar *__funcptr_type_kind 0x00000640
    0x000018EE bc *s8 >|2| 0x000018EC< to __funcptr_type_kind
    0x000018EF store *__funcptr_type_kind >|2| 0x000018ED<, __funcptr_type_kind >|2| 0x000018EE<
    0x000018F0 call ag5 "openglGetProcAddress" (cstroflen 39 "glTexCoord4fColor4fNormal3fVertex4fSUN") *s8
    0x000018F1 gvar *__funcptr_type_kind 0x00000641
    0x000018F2 bc *s8 >|2| 0x000018F0< to __funcptr_type_kind
    0x000018F3 store *__funcptr_type_kind >|2| 0x000018F1<, __funcptr_type_kind >|2| 0x000018F2<
    0x000018F4 call ag5 "openglGetProcAddress" (cstroflen 40 "glTexCoord4fColor4fNormal3fVertex4fvSUN") *s8
    0x000018F5 gvar *__funcptr_type_kind 0x00000642
    0x000018F6 bc *s8 >|2| 0x000018F4< to __funcptr_type_kind
    0x000018F7 store *__funcptr_type_kind >|2| 0x000018F5<, __funcptr_type_kind >|2| 0x000018F6<
    0x000018F8 call ag5 "openglGetProcAddress" (cstroflen 24 "glTexCoord4fVertex4fSUN") *s8
    0x000018F9 gvar *__funcptr_type_kind 0x00000643
    0x000018FA bc *s8 >|2| 0x000018F8< to __funcptr_type_kind
    0x000018FB store *__funcptr_type_kind >|2| 0x000018F9<, __funcptr_type_kind >|2| 0x000018FA<
    0x000018FC call ag5 "openglGetProcAddress" (cstroflen 25 "glTexCoord4fVertex4fvSUN") *s8
    0x000018FD gvar *__funcptr_type_kind 0x00000644
    0x000018FE bc *s8 >|2| 0x000018FC< to __funcptr_type_kind
    0x000018FF store *__funcptr_type_kind >|2| 0x000018FD<, __funcptr_type_kind >|2| 0x000018FE<
    0x00001900 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoord4hNV") *s8
    0x00001901 gvar *__funcptr_type_kind 0x00000645
    0x00001902 bc *s8 >|2| 0x00001900< to __funcptr_type_kind
    0x00001903 store *__funcptr_type_kind >|2| 0x00001901<, __funcptr_type_kind >|2| 0x00001902<
    0x00001904 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoord4hvNV") *s8
    0x00001905 gvar *__funcptr_type_kind 0x00000646
    0x00001906 bc *s8 >|2| 0x00001904< to __funcptr_type_kind
    0x00001907 store *__funcptr_type_kind >|2| 0x00001905<, __funcptr_type_kind >|2| 0x00001906<
    0x00001908 call ag5 "openglGetProcAddress" (cstroflen 19 "glTexCoordFormatNV") *s8
    0x00001909 gvar *__funcptr_type_kind 0x00000647
    0x0000190A bc *s8 >|2| 0x00001908< to __funcptr_type_kind
    0x0000190B store *__funcptr_type_kind >|2| 0x00001909<, __funcptr_type_kind >|2| 0x0000190A<
    0x0000190C call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoordP1ui") *s8
    0x0000190D gvar *__funcptr_type_kind 0x00000648
    0x0000190E bc *s8 >|2| 0x0000190C< to __funcptr_type_kind
    0x0000190F store *__funcptr_type_kind >|2| 0x0000190D<, __funcptr_type_kind >|2| 0x0000190E<
    0x00001910 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoordP1uiv") *s8
    0x00001911 gvar *__funcptr_type_kind 0x00000649
    0x00001912 bc *s8 >|2| 0x00001910< to __funcptr_type_kind
    0x00001913 store *__funcptr_type_kind >|2| 0x00001911<, __funcptr_type_kind >|2| 0x00001912<
    0x00001914 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoordP2ui") *s8
    0x00001915 gvar *__funcptr_type_kind 0x0000064A
    0x00001916 bc *s8 >|2| 0x00001914< to __funcptr_type_kind
    0x00001917 store *__funcptr_type_kind >|2| 0x00001915<, __funcptr_type_kind >|2| 0x00001916<
    0x00001918 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoordP2uiv") *s8
    0x00001919 gvar *__funcptr_type_kind 0x0000064B
    0x0000191A bc *s8 >|2| 0x00001918< to __funcptr_type_kind
    0x0000191B store *__funcptr_type_kind >|2| 0x00001919<, __funcptr_type_kind >|2| 0x0000191A<
    0x0000191C call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoordP3ui") *s8
    0x0000191D gvar *__funcptr_type_kind 0x0000064C
    0x0000191E bc *s8 >|2| 0x0000191C< to __funcptr_type_kind
    0x0000191F store *__funcptr_type_kind >|2| 0x0000191D<, __funcptr_type_kind >|2| 0x0000191E<
    0x00001920 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoordP3uiv") *s8
    0x00001921 gvar *__funcptr_type_kind 0x0000064D
    0x00001922 bc *s8 >|2| 0x00001920< to __funcptr_type_kind
    0x00001923 store *__funcptr_type_kind >|2| 0x00001921<, __funcptr_type_kind >|2| 0x00001922<
    0x00001924 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexCoordP4ui") *s8
    0x00001925 gvar *__funcptr_type_kind 0x0000064E
    0x00001926 bc *s8 >|2| 0x00001924< to __funcptr_type_kind
    0x00001927 store *__funcptr_type_kind >|2| 0x00001925<, __funcptr_type_kind >|2| 0x00001926<
    0x00001928 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexCoordP4uiv") *s8
    0x00001929 gvar *__funcptr_type_kind 0x0000064F
    0x0000192A bc *s8 >|2| 0x00001928< to __funcptr_type_kind
    0x0000192B store *__funcptr_type_kind >|2| 0x00001929<, __funcptr_type_kind >|2| 0x0000192A<
    0x0000192C call ag5 "openglGetProcAddress" (cstroflen 21 "glTexCoordPointerEXT") *s8
    0x0000192D gvar *__funcptr_type_kind 0x00000650
    0x0000192E bc *s8 >|2| 0x0000192C< to __funcptr_type_kind
    0x0000192F store *__funcptr_type_kind >|2| 0x0000192D<, __funcptr_type_kind >|2| 0x0000192E<
    0x00001930 call ag5 "openglGetProcAddress" (cstroflen 25 "glTexCoordPointerListIBM") *s8
    0x00001931 gvar *__funcptr_type_kind 0x00000651
    0x00001932 bc *s8 >|2| 0x00001930< to __funcptr_type_kind
    0x00001933 store *__funcptr_type_kind >|2| 0x00001931<, __funcptr_type_kind >|2| 0x00001932<
    0x00001934 call ag5 "openglGetProcAddress" (cstroflen 24 "glTexCoordPointervINTEL") *s8
    0x00001935 gvar *__funcptr_type_kind 0x00000652
    0x00001936 bc *s8 >|2| 0x00001934< to __funcptr_type_kind
    0x00001937 store *__funcptr_type_kind >|2| 0x00001935<, __funcptr_type_kind >|2| 0x00001936<
    0x00001938 call ag5 "openglGetProcAddress" (cstroflen 10 "glTexEnvx") *s8
    0x00001939 gvar *__funcptr_type_kind 0x00000653
    0x0000193A bc *s8 >|2| 0x00001938< to __funcptr_type_kind
    0x0000193B store *__funcptr_type_kind >|2| 0x00001939<, __funcptr_type_kind >|2| 0x0000193A<
    0x0000193C call ag5 "openglGetProcAddress" (cstroflen 11 "glTexEnvxv") *s8
    0x0000193D gvar *__funcptr_type_kind 0x00000654
    0x0000193E bc *s8 >|2| 0x0000193C< to __funcptr_type_kind
    0x0000193F store *__funcptr_type_kind >|2| 0x0000193D<, __funcptr_type_kind >|2| 0x0000193E<
    0x00001940 call ag5 "openglGetProcAddress" (cstroflen 20 "glTexFilterFuncSGIS") *s8
    0x00001941 gvar *__funcptr_type_kind 0x00000655
    0x00001942 bc *s8 >|2| 0x00001940< to __funcptr_type_kind
    0x00001943 store *__funcptr_type_kind >|2| 0x00001941<, __funcptr_type_kind >|2| 0x00001942<
    0x00001944 call ag5 "openglGetProcAddress" (cstroflen 34 "glTexImage2DMultisampleCoverageNV") *s8
    0x00001945 gvar *__funcptr_type_kind 0x00000656
    0x00001946 bc *s8 >|2| 0x00001944< to __funcptr_type_kind
    0x00001947 store *__funcptr_type_kind >|2| 0x00001945<, __funcptr_type_kind >|2| 0x00001946<
    0x00001948 call ag5 "openglGetProcAddress" (cstroflen 24 "glTexImage2DMultisample") *s8
    0x00001949 gvar *__funcptr_type_kind 0x00000657
    0x0000194A bc *s8 >|2| 0x00001948< to __funcptr_type_kind
    0x0000194B store *__funcptr_type_kind >|2| 0x00001949<, __funcptr_type_kind >|2| 0x0000194A<
    0x0000194C call ag5 "openglGetProcAddress" (cstroflen 16 "glTexImage3DEXT") *s8
    0x0000194D gvar *__funcptr_type_kind 0x00000658
    0x0000194E bc *s8 >|2| 0x0000194C< to __funcptr_type_kind
    0x0000194F store *__funcptr_type_kind >|2| 0x0000194D<, __funcptr_type_kind >|2| 0x0000194E<
    0x00001950 call ag5 "openglGetProcAddress" (cstroflen 34 "glTexImage3DMultisampleCoverageNV") *s8
    0x00001951 gvar *__funcptr_type_kind 0x00000659
    0x00001952 bc *s8 >|2| 0x00001950< to __funcptr_type_kind
    0x00001953 store *__funcptr_type_kind >|2| 0x00001951<, __funcptr_type_kind >|2| 0x00001952<
    0x00001954 call ag5 "openglGetProcAddress" (cstroflen 24 "glTexImage3DMultisample") *s8
    0x00001955 gvar *__funcptr_type_kind 0x0000065A
    0x00001956 bc *s8 >|2| 0x00001954< to __funcptr_type_kind
    0x00001957 store *__funcptr_type_kind >|2| 0x00001955<, __funcptr_type_kind >|2| 0x00001956<
    0x00001958 call ag5 "openglGetProcAddress" (cstroflen 13 "glTexImage3D") *s8
    0x00001959 gvar *__funcptr_type_kind 0x0000065B
    0x0000195A bc *s8 >|2| 0x00001958< to __funcptr_type_kind
    0x0000195B store *__funcptr_type_kind >|2| 0x00001959<, __funcptr_type_kind >|2| 0x0000195A<
    0x0000195C call ag5 "openglGetProcAddress" (cstroflen 17 "glTexImage4DSGIS") *s8
    0x0000195D gvar *__funcptr_type_kind 0x0000065C
    0x0000195E bc *s8 >|2| 0x0000195C< to __funcptr_type_kind
    0x0000195F store *__funcptr_type_kind >|2| 0x0000195D<, __funcptr_type_kind >|2| 0x0000195E<
    0x00001960 call ag5 "openglGetProcAddress" (cstroflen 23 "glTexPageCommitmentARB") *s8
    0x00001961 gvar *__funcptr_type_kind 0x0000065D
    0x00001962 bc *s8 >|2| 0x00001960< to __funcptr_type_kind
    0x00001963 store *__funcptr_type_kind >|2| 0x00001961<, __funcptr_type_kind >|2| 0x00001962<
    0x00001964 call ag5 "openglGetProcAddress" (cstroflen 21 "glTexParameterIivEXT") *s8
    0x00001965 gvar *__funcptr_type_kind 0x0000065E
    0x00001966 bc *s8 >|2| 0x00001964< to __funcptr_type_kind
    0x00001967 store *__funcptr_type_kind >|2| 0x00001965<, __funcptr_type_kind >|2| 0x00001966<
    0x00001968 call ag5 "openglGetProcAddress" (cstroflen 18 "glTexParameterIiv") *s8
    0x00001969 gvar *__funcptr_type_kind 0x0000065F
    0x0000196A bc *s8 >|2| 0x00001968< to __funcptr_type_kind
    0x0000196B store *__funcptr_type_kind >|2| 0x00001969<, __funcptr_type_kind >|2| 0x0000196A<
    0x0000196C call ag5 "openglGetProcAddress" (cstroflen 22 "glTexParameterIuivEXT") *s8
    0x0000196D gvar *__funcptr_type_kind 0x00000660
    0x0000196E bc *s8 >|2| 0x0000196C< to __funcptr_type_kind
    0x0000196F store *__funcptr_type_kind >|2| 0x0000196D<, __funcptr_type_kind >|2| 0x0000196E<
    0x00001970 call ag5 "openglGetProcAddress" (cstroflen 19 "glTexParameterIuiv") *s8
    0x00001971 gvar *__funcptr_type_kind 0x00000661
    0x00001972 bc *s8 >|2| 0x00001970< to __funcptr_type_kind
    0x00001973 store *__funcptr_type_kind >|2| 0x00001971<, __funcptr_type_kind >|2| 0x00001972<
    0x00001974 call ag5 "openglGetProcAddress" (cstroflen 16 "glTexParameterx") *s8
    0x00001975 gvar *__funcptr_type_kind 0x00000662
    0x00001976 bc *s8 >|2| 0x00001974< to __funcptr_type_kind
    0x00001977 store *__funcptr_type_kind >|2| 0x00001975<, __funcptr_type_kind >|2| 0x00001976<
    0x00001978 call ag5 "openglGetProcAddress" (cstroflen 17 "glTexParameterxv") *s8
    0x00001979 gvar *__funcptr_type_kind 0x00000663
    0x0000197A bc *s8 >|2| 0x00001978< to __funcptr_type_kind
    0x0000197B store *__funcptr_type_kind >|2| 0x00001979<, __funcptr_type_kind >|2| 0x0000197A<
    0x0000197C call ag5 "openglGetProcAddress" (cstroflen 20 "glTexRenderbufferNV") *s8
    0x0000197D gvar *__funcptr_type_kind 0x00000664
    0x0000197E bc *s8 >|2| 0x0000197C< to __funcptr_type_kind
    0x0000197F store *__funcptr_type_kind >|2| 0x0000197D<, __funcptr_type_kind >|2| 0x0000197E<
    0x00001980 call ag5 "openglGetProcAddress" (cstroflen 22 "glTexScissorFuncINTEL") *s8
    0x00001981 gvar *__funcptr_type_kind 0x00000665
    0x00001982 bc *s8 >|2| 0x00001980< to __funcptr_type_kind
    0x00001983 store *__funcptr_type_kind >|2| 0x00001981<, __funcptr_type_kind >|2| 0x00001982<
    0x00001984 call ag5 "openglGetProcAddress" (cstroflen 18 "glTexScissorINTEL") *s8
    0x00001985 gvar *__funcptr_type_kind 0x00000666
    0x00001986 bc *s8 >|2| 0x00001984< to __funcptr_type_kind
    0x00001987 store *__funcptr_type_kind >|2| 0x00001985<, __funcptr_type_kind >|2| 0x00001986<
    0x00001988 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexStorage1D") *s8
    0x00001989 gvar *__funcptr_type_kind 0x00000667
    0x0000198A bc *s8 >|2| 0x00001988< to __funcptr_type_kind
    0x0000198B store *__funcptr_type_kind >|2| 0x00001989<, __funcptr_type_kind >|2| 0x0000198A<
    0x0000198C call ag5 "openglGetProcAddress" (cstroflen 26 "glTexStorage2DMultisample") *s8
    0x0000198D gvar *__funcptr_type_kind 0x00000668
    0x0000198E bc *s8 >|2| 0x0000198C< to __funcptr_type_kind
    0x0000198F store *__funcptr_type_kind >|2| 0x0000198D<, __funcptr_type_kind >|2| 0x0000198E<
    0x00001990 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexStorage2D") *s8
    0x00001991 gvar *__funcptr_type_kind 0x00000669
    0x00001992 bc *s8 >|2| 0x00001990< to __funcptr_type_kind
    0x00001993 store *__funcptr_type_kind >|2| 0x00001991<, __funcptr_type_kind >|2| 0x00001992<
    0x00001994 call ag5 "openglGetProcAddress" (cstroflen 26 "glTexStorage3DMultisample") *s8
    0x00001995 gvar *__funcptr_type_kind 0x0000066A
    0x00001996 bc *s8 >|2| 0x00001994< to __funcptr_type_kind
    0x00001997 store *__funcptr_type_kind >|2| 0x00001995<, __funcptr_type_kind >|2| 0x00001996<
    0x00001998 call ag5 "openglGetProcAddress" (cstroflen 15 "glTexStorage3D") *s8
    0x00001999 gvar *__funcptr_type_kind 0x0000066B
    0x0000199A bc *s8 >|2| 0x00001998< to __funcptr_type_kind
    0x0000199B store *__funcptr_type_kind >|2| 0x00001999<, __funcptr_type_kind >|2| 0x0000199A<
    0x0000199C call ag5 "openglGetProcAddress" (cstroflen 22 "glTexStorageSparseAMD") *s8
    0x0000199D gvar *__funcptr_type_kind 0x0000066C
    0x0000199E bc *s8 >|2| 0x0000199C< to __funcptr_type_kind
    0x0000199F store *__funcptr_type_kind >|2| 0x0000199D<, __funcptr_type_kind >|2| 0x0000199E<
    0x000019A0 call ag5 "openglGetProcAddress" (cstroflen 19 "glTexSubImage1DEXT") *s8
    0x000019A1 gvar *__funcptr_type_kind 0x0000066D
    0x000019A2 bc *s8 >|2| 0x000019A0< to __funcptr_type_kind
    0x000019A3 store *__funcptr_type_kind >|2| 0x000019A1<, __funcptr_type_kind >|2| 0x000019A2<
    0x000019A4 call ag5 "openglGetProcAddress" (cstroflen 19 "glTexSubImage2DEXT") *s8
    0x000019A5 gvar *__funcptr_type_kind 0x0000066E
    0x000019A6 bc *s8 >|2| 0x000019A4< to __funcptr_type_kind
    0x000019A7 store *__funcptr_type_kind >|2| 0x000019A5<, __funcptr_type_kind >|2| 0x000019A6<
    0x000019A8 call ag5 "openglGetProcAddress" (cstroflen 19 "glTexSubImage3DEXT") *s8
    0x000019A9 gvar *__funcptr_type_kind 0x0000066F
    0x000019AA bc *s8 >|2| 0x000019A8< to __funcptr_type_kind
    0x000019AB store *__funcptr_type_kind >|2| 0x000019A9<, __funcptr_type_kind >|2| 0x000019AA<
    0x000019AC call ag5 "openglGetProcAddress" (cstroflen 16 "glTexSubImage3D") *s8
    0x000019AD gvar *__funcptr_type_kind 0x00000670
    0x000019AE bc *s8 >|2| 0x000019AC< to __funcptr_type_kind
    0x000019AF store *__funcptr_type_kind >|2| 0x000019AD<, __funcptr_type_kind >|2| 0x000019AE<
    0x000019B0 call ag5 "openglGetProcAddress" (cstroflen 20 "glTexSubImage4DSGIS") *s8
    0x000019B1 gvar *__funcptr_type_kind 0x00000671
    0x000019B2 bc *s8 >|2| 0x000019B0< to __funcptr_type_kind
    0x000019B3 store *__funcptr_type_kind >|2| 0x000019B1<, __funcptr_type_kind >|2| 0x000019B2<
    0x000019B4 call ag5 "openglGetProcAddress" (cstroflen 19 "glTextureBarrierNV") *s8
    0x000019B5 gvar *__funcptr_type_kind 0x00000672
    0x000019B6 bc *s8 >|2| 0x000019B4< to __funcptr_type_kind
    0x000019B7 store *__funcptr_type_kind >|2| 0x000019B5<, __funcptr_type_kind >|2| 0x000019B6<
    0x000019B8 call ag5 "openglGetProcAddress" (cstroflen 17 "glTextureBarrier") *s8
    0x000019B9 gvar *__funcptr_type_kind 0x00000673
    0x000019BA bc *s8 >|2| 0x000019B8< to __funcptr_type_kind
    0x000019BB store *__funcptr_type_kind >|2| 0x000019B9<, __funcptr_type_kind >|2| 0x000019BA<
    0x000019BC call ag5 "openglGetProcAddress" (cstroflen 19 "glTextureBufferEXT") *s8
    0x000019BD gvar *__funcptr_type_kind 0x00000674
    0x000019BE bc *s8 >|2| 0x000019BC< to __funcptr_type_kind
    0x000019BF store *__funcptr_type_kind >|2| 0x000019BD<, __funcptr_type_kind >|2| 0x000019BE<
    0x000019C0 call ag5 "openglGetProcAddress" (cstroflen 16 "glTextureBuffer") *s8
    0x000019C1 gvar *__funcptr_type_kind 0x00000675
    0x000019C2 bc *s8 >|2| 0x000019C0< to __funcptr_type_kind
    0x000019C3 store *__funcptr_type_kind >|2| 0x000019C1<, __funcptr_type_kind >|2| 0x000019C2<
    0x000019C4 call ag5 "openglGetProcAddress" (cstroflen 24 "glTextureBufferRangeEXT") *s8
    0x000019C5 gvar *__funcptr_type_kind 0x00000676
    0x000019C6 bc *s8 >|2| 0x000019C4< to __funcptr_type_kind
    0x000019C7 store *__funcptr_type_kind >|2| 0x000019C5<, __funcptr_type_kind >|2| 0x000019C6<
    0x000019C8 call ag5 "openglGetProcAddress" (cstroflen 21 "glTextureBufferRange") *s8
    0x000019C9 gvar *__funcptr_type_kind 0x00000677
    0x000019CA bc *s8 >|2| 0x000019C8< to __funcptr_type_kind
    0x000019CB store *__funcptr_type_kind >|2| 0x000019C9<, __funcptr_type_kind >|2| 0x000019CA<
    0x000019CC call ag5 "openglGetProcAddress" (cstroflen 17 "glTextureFogSGIX") *s8
    0x000019CD gvar *__funcptr_type_kind 0x00000678
    0x000019CE bc *s8 >|2| 0x000019CC< to __funcptr_type_kind
    0x000019CF store *__funcptr_type_kind >|2| 0x000019CD<, __funcptr_type_kind >|2| 0x000019CE<
    0x000019D0 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureImage1DEXT") *s8
    0x000019D1 gvar *__funcptr_type_kind 0x00000679
    0x000019D2 bc *s8 >|2| 0x000019D0< to __funcptr_type_kind
    0x000019D3 store *__funcptr_type_kind >|2| 0x000019D1<, __funcptr_type_kind >|2| 0x000019D2<
    0x000019D4 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureImage2DEXT") *s8
    0x000019D5 gvar *__funcptr_type_kind 0x0000067A
    0x000019D6 bc *s8 >|2| 0x000019D4< to __funcptr_type_kind
    0x000019D7 store *__funcptr_type_kind >|2| 0x000019D5<, __funcptr_type_kind >|2| 0x000019D6<
    0x000019D8 call ag5 "openglGetProcAddress" (cstroflen 38 "glTextureImage2DMultisampleCoverageNV") *s8
    0x000019D9 gvar *__funcptr_type_kind 0x0000067B
    0x000019DA bc *s8 >|2| 0x000019D8< to __funcptr_type_kind
    0x000019DB store *__funcptr_type_kind >|2| 0x000019D9<, __funcptr_type_kind >|2| 0x000019DA<
    0x000019DC call ag5 "openglGetProcAddress" (cstroflen 30 "glTextureImage2DMultisampleNV") *s8
    0x000019DD gvar *__funcptr_type_kind 0x0000067C
    0x000019DE bc *s8 >|2| 0x000019DC< to __funcptr_type_kind
    0x000019DF store *__funcptr_type_kind >|2| 0x000019DD<, __funcptr_type_kind >|2| 0x000019DE<
    0x000019E0 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureImage3DEXT") *s8
    0x000019E1 gvar *__funcptr_type_kind 0x0000067D
    0x000019E2 bc *s8 >|2| 0x000019E0< to __funcptr_type_kind
    0x000019E3 store *__funcptr_type_kind >|2| 0x000019E1<, __funcptr_type_kind >|2| 0x000019E2<
    0x000019E4 call ag5 "openglGetProcAddress" (cstroflen 38 "glTextureImage3DMultisampleCoverageNV") *s8
    0x000019E5 gvar *__funcptr_type_kind 0x0000067E
    0x000019E6 bc *s8 >|2| 0x000019E4< to __funcptr_type_kind
    0x000019E7 store *__funcptr_type_kind >|2| 0x000019E5<, __funcptr_type_kind >|2| 0x000019E6<
    0x000019E8 call ag5 "openglGetProcAddress" (cstroflen 30 "glTextureImage3DMultisampleNV") *s8
    0x000019E9 gvar *__funcptr_type_kind 0x0000067F
    0x000019EA bc *s8 >|2| 0x000019E8< to __funcptr_type_kind
    0x000019EB store *__funcptr_type_kind >|2| 0x000019E9<, __funcptr_type_kind >|2| 0x000019EA<
    0x000019EC call ag5 "openglGetProcAddress" (cstroflen 18 "glTextureLightEXT") *s8
    0x000019ED gvar *__funcptr_type_kind 0x00000680
    0x000019EE bc *s8 >|2| 0x000019EC< to __funcptr_type_kind
    0x000019EF store *__funcptr_type_kind >|2| 0x000019ED<, __funcptr_type_kind >|2| 0x000019EE<
    0x000019F0 call ag5 "openglGetProcAddress" (cstroflen 21 "glTextureMaterialEXT") *s8
    0x000019F1 gvar *__funcptr_type_kind 0x00000681
    0x000019F2 bc *s8 >|2| 0x000019F0< to __funcptr_type_kind
    0x000019F3 store *__funcptr_type_kind >|2| 0x000019F1<, __funcptr_type_kind >|2| 0x000019F2<
    0x000019F4 call ag5 "openglGetProcAddress" (cstroflen 19 "glTextureNormalEXT") *s8
    0x000019F5 gvar *__funcptr_type_kind 0x00000682
    0x000019F6 bc *s8 >|2| 0x000019F4< to __funcptr_type_kind
    0x000019F7 store *__funcptr_type_kind >|2| 0x000019F5<, __funcptr_type_kind >|2| 0x000019F6<
    0x000019F8 call ag5 "openglGetProcAddress" (cstroflen 27 "glTexturePageCommitmentEXT") *s8
    0x000019F9 gvar *__funcptr_type_kind 0x00000683
    0x000019FA bc *s8 >|2| 0x000019F8< to __funcptr_type_kind
    0x000019FB store *__funcptr_type_kind >|2| 0x000019F9<, __funcptr_type_kind >|2| 0x000019FA<
    0x000019FC call ag5 "openglGetProcAddress" (cstroflen 23 "glTextureParameterfEXT") *s8
    0x000019FD gvar *__funcptr_type_kind 0x00000684
    0x000019FE bc *s8 >|2| 0x000019FC< to __funcptr_type_kind
    0x000019FF store *__funcptr_type_kind >|2| 0x000019FD<, __funcptr_type_kind >|2| 0x000019FE<
    0x00001A00 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureParameterf") *s8
    0x00001A01 gvar *__funcptr_type_kind 0x00000685
    0x00001A02 bc *s8 >|2| 0x00001A00< to __funcptr_type_kind
    0x00001A03 store *__funcptr_type_kind >|2| 0x00001A01<, __funcptr_type_kind >|2| 0x00001A02<
    0x00001A04 call ag5 "openglGetProcAddress" (cstroflen 24 "glTextureParameterfvEXT") *s8
    0x00001A05 gvar *__funcptr_type_kind 0x00000686
    0x00001A06 bc *s8 >|2| 0x00001A04< to __funcptr_type_kind
    0x00001A07 store *__funcptr_type_kind >|2| 0x00001A05<, __funcptr_type_kind >|2| 0x00001A06<
    0x00001A08 call ag5 "openglGetProcAddress" (cstroflen 21 "glTextureParameterfv") *s8
    0x00001A09 gvar *__funcptr_type_kind 0x00000687
    0x00001A0A bc *s8 >|2| 0x00001A08< to __funcptr_type_kind
    0x00001A0B store *__funcptr_type_kind >|2| 0x00001A09<, __funcptr_type_kind >|2| 0x00001A0A<
    0x00001A0C call ag5 "openglGetProcAddress" (cstroflen 23 "glTextureParameteriEXT") *s8
    0x00001A0D gvar *__funcptr_type_kind 0x00000688
    0x00001A0E bc *s8 >|2| 0x00001A0C< to __funcptr_type_kind
    0x00001A0F store *__funcptr_type_kind >|2| 0x00001A0D<, __funcptr_type_kind >|2| 0x00001A0E<
    0x00001A10 call ag5 "openglGetProcAddress" (cstroflen 25 "glTextureParameterIivEXT") *s8
    0x00001A11 gvar *__funcptr_type_kind 0x00000689
    0x00001A12 bc *s8 >|2| 0x00001A10< to __funcptr_type_kind
    0x00001A13 store *__funcptr_type_kind >|2| 0x00001A11<, __funcptr_type_kind >|2| 0x00001A12<
    0x00001A14 call ag5 "openglGetProcAddress" (cstroflen 22 "glTextureParameterIiv") *s8
    0x00001A15 gvar *__funcptr_type_kind 0x0000068A
    0x00001A16 bc *s8 >|2| 0x00001A14< to __funcptr_type_kind
    0x00001A17 store *__funcptr_type_kind >|2| 0x00001A15<, __funcptr_type_kind >|2| 0x00001A16<
    0x00001A18 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureParameteri") *s8
    0x00001A19 gvar *__funcptr_type_kind 0x0000068B
    0x00001A1A bc *s8 >|2| 0x00001A18< to __funcptr_type_kind
    0x00001A1B store *__funcptr_type_kind >|2| 0x00001A19<, __funcptr_type_kind >|2| 0x00001A1A<
    0x00001A1C call ag5 "openglGetProcAddress" (cstroflen 26 "glTextureParameterIuivEXT") *s8
    0x00001A1D gvar *__funcptr_type_kind 0x0000068C
    0x00001A1E bc *s8 >|2| 0x00001A1C< to __funcptr_type_kind
    0x00001A1F store *__funcptr_type_kind >|2| 0x00001A1D<, __funcptr_type_kind >|2| 0x00001A1E<
    0x00001A20 call ag5 "openglGetProcAddress" (cstroflen 23 "glTextureParameterIuiv") *s8
    0x00001A21 gvar *__funcptr_type_kind 0x0000068D
    0x00001A22 bc *s8 >|2| 0x00001A20< to __funcptr_type_kind
    0x00001A23 store *__funcptr_type_kind >|2| 0x00001A21<, __funcptr_type_kind >|2| 0x00001A22<
    0x00001A24 call ag5 "openglGetProcAddress" (cstroflen 24 "glTextureParameterivEXT") *s8
    0x00001A25 gvar *__funcptr_type_kind 0x0000068E
    0x00001A26 bc *s8 >|2| 0x00001A24< to __funcptr_type_kind
    0x00001A27 store *__funcptr_type_kind >|2| 0x00001A25<, __funcptr_type_kind >|2| 0x00001A26<
    0x00001A28 call ag5 "openglGetProcAddress" (cstroflen 21 "glTextureParameteriv") *s8
    0x00001A29 gvar *__funcptr_type_kind 0x0000068F
    0x00001A2A bc *s8 >|2| 0x00001A28< to __funcptr_type_kind
    0x00001A2B store *__funcptr_type_kind >|2| 0x00001A29<, __funcptr_type_kind >|2| 0x00001A2A<
    0x00001A2C call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureRangeAPPLE") *s8
    0x00001A2D gvar *__funcptr_type_kind 0x00000690
    0x00001A2E bc *s8 >|2| 0x00001A2C< to __funcptr_type_kind
    0x00001A2F store *__funcptr_type_kind >|2| 0x00001A2D<, __funcptr_type_kind >|2| 0x00001A2E<
    0x00001A30 call ag5 "openglGetProcAddress" (cstroflen 25 "glTextureRenderbufferEXT") *s8
    0x00001A31 gvar *__funcptr_type_kind 0x00000691
    0x00001A32 bc *s8 >|2| 0x00001A30< to __funcptr_type_kind
    0x00001A33 store *__funcptr_type_kind >|2| 0x00001A31<, __funcptr_type_kind >|2| 0x00001A32<
    0x00001A34 call ag5 "openglGetProcAddress" (cstroflen 22 "glTextureStorage1DEXT") *s8
    0x00001A35 gvar *__funcptr_type_kind 0x00000692
    0x00001A36 bc *s8 >|2| 0x00001A34< to __funcptr_type_kind
    0x00001A37 store *__funcptr_type_kind >|2| 0x00001A35<, __funcptr_type_kind >|2| 0x00001A36<
    0x00001A38 call ag5 "openglGetProcAddress" (cstroflen 19 "glTextureStorage1D") *s8
    0x00001A39 gvar *__funcptr_type_kind 0x00000693
    0x00001A3A bc *s8 >|2| 0x00001A38< to __funcptr_type_kind
    0x00001A3B store *__funcptr_type_kind >|2| 0x00001A39<, __funcptr_type_kind >|2| 0x00001A3A<
    0x00001A3C call ag5 "openglGetProcAddress" (cstroflen 22 "glTextureStorage2DEXT") *s8
    0x00001A3D gvar *__funcptr_type_kind 0x00000694
    0x00001A3E bc *s8 >|2| 0x00001A3C< to __funcptr_type_kind
    0x00001A3F store *__funcptr_type_kind >|2| 0x00001A3D<, __funcptr_type_kind >|2| 0x00001A3E<
    0x00001A40 call ag5 "openglGetProcAddress" (cstroflen 33 "glTextureStorage2DMultisampleEXT") *s8
    0x00001A41 gvar *__funcptr_type_kind 0x00000695
    0x00001A42 bc *s8 >|2| 0x00001A40< to __funcptr_type_kind
    0x00001A43 store *__funcptr_type_kind >|2| 0x00001A41<, __funcptr_type_kind >|2| 0x00001A42<
    0x00001A44 call ag5 "openglGetProcAddress" (cstroflen 30 "glTextureStorage2DMultisample") *s8
    0x00001A45 gvar *__funcptr_type_kind 0x00000696
    0x00001A46 bc *s8 >|2| 0x00001A44< to __funcptr_type_kind
    0x00001A47 store *__funcptr_type_kind >|2| 0x00001A45<, __funcptr_type_kind >|2| 0x00001A46<
    0x00001A48 call ag5 "openglGetProcAddress" (cstroflen 19 "glTextureStorage2D") *s8
    0x00001A49 gvar *__funcptr_type_kind 0x00000697
    0x00001A4A bc *s8 >|2| 0x00001A48< to __funcptr_type_kind
    0x00001A4B store *__funcptr_type_kind >|2| 0x00001A49<, __funcptr_type_kind >|2| 0x00001A4A<
    0x00001A4C call ag5 "openglGetProcAddress" (cstroflen 22 "glTextureStorage3DEXT") *s8
    0x00001A4D gvar *__funcptr_type_kind 0x00000698
    0x00001A4E bc *s8 >|2| 0x00001A4C< to __funcptr_type_kind
    0x00001A4F store *__funcptr_type_kind >|2| 0x00001A4D<, __funcptr_type_kind >|2| 0x00001A4E<
    0x00001A50 call ag5 "openglGetProcAddress" (cstroflen 33 "glTextureStorage3DMultisampleEXT") *s8
    0x00001A51 gvar *__funcptr_type_kind 0x00000699
    0x00001A52 bc *s8 >|2| 0x00001A50< to __funcptr_type_kind
    0x00001A53 store *__funcptr_type_kind >|2| 0x00001A51<, __funcptr_type_kind >|2| 0x00001A52<
    0x00001A54 call ag5 "openglGetProcAddress" (cstroflen 30 "glTextureStorage3DMultisample") *s8
    0x00001A55 gvar *__funcptr_type_kind 0x0000069A
    0x00001A56 bc *s8 >|2| 0x00001A54< to __funcptr_type_kind
    0x00001A57 store *__funcptr_type_kind >|2| 0x00001A55<, __funcptr_type_kind >|2| 0x00001A56<
    0x00001A58 call ag5 "openglGetProcAddress" (cstroflen 19 "glTextureStorage3D") *s8
    0x00001A59 gvar *__funcptr_type_kind 0x0000069B
    0x00001A5A bc *s8 >|2| 0x00001A58< to __funcptr_type_kind
    0x00001A5B store *__funcptr_type_kind >|2| 0x00001A59<, __funcptr_type_kind >|2| 0x00001A5A<
    0x00001A5C call ag5 "openglGetProcAddress" (cstroflen 26 "glTextureStorageSparseAMD") *s8
    0x00001A5D gvar *__funcptr_type_kind 0x0000069C
    0x00001A5E bc *s8 >|2| 0x00001A5C< to __funcptr_type_kind
    0x00001A5F store *__funcptr_type_kind >|2| 0x00001A5D<, __funcptr_type_kind >|2| 0x00001A5E<
    0x00001A60 call ag5 "openglGetProcAddress" (cstroflen 23 "glTextureSubImage1DEXT") *s8
    0x00001A61 gvar *__funcptr_type_kind 0x0000069D
    0x00001A62 bc *s8 >|2| 0x00001A60< to __funcptr_type_kind
    0x00001A63 store *__funcptr_type_kind >|2| 0x00001A61<, __funcptr_type_kind >|2| 0x00001A62<
    0x00001A64 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureSubImage1D") *s8
    0x00001A65 gvar *__funcptr_type_kind 0x0000069E
    0x00001A66 bc *s8 >|2| 0x00001A64< to __funcptr_type_kind
    0x00001A67 store *__funcptr_type_kind >|2| 0x00001A65<, __funcptr_type_kind >|2| 0x00001A66<
    0x00001A68 call ag5 "openglGetProcAddress" (cstroflen 23 "glTextureSubImage2DEXT") *s8
    0x00001A69 gvar *__funcptr_type_kind 0x0000069F
    0x00001A6A bc *s8 >|2| 0x00001A68< to __funcptr_type_kind
    0x00001A6B store *__funcptr_type_kind >|2| 0x00001A69<, __funcptr_type_kind >|2| 0x00001A6A<
    0x00001A6C call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureSubImage2D") *s8
    0x00001A6D gvar *__funcptr_type_kind 0x000006A0
    0x00001A6E bc *s8 >|2| 0x00001A6C< to __funcptr_type_kind
    0x00001A6F store *__funcptr_type_kind >|2| 0x00001A6D<, __funcptr_type_kind >|2| 0x00001A6E<
    0x00001A70 call ag5 "openglGetProcAddress" (cstroflen 23 "glTextureSubImage3DEXT") *s8
    0x00001A71 gvar *__funcptr_type_kind 0x000006A1
    0x00001A72 bc *s8 >|2| 0x00001A70< to __funcptr_type_kind
    0x00001A73 store *__funcptr_type_kind >|2| 0x00001A71<, __funcptr_type_kind >|2| 0x00001A72<
    0x00001A74 call ag5 "openglGetProcAddress" (cstroflen 20 "glTextureSubImage3D") *s8
    0x00001A75 gvar *__funcptr_type_kind 0x000006A2
    0x00001A76 bc *s8 >|2| 0x00001A74< to __funcptr_type_kind
    0x00001A77 store *__funcptr_type_kind >|2| 0x00001A75<, __funcptr_type_kind >|2| 0x00001A76<
    0x00001A78 call ag5 "openglGetProcAddress" (cstroflen 14 "glTextureView") *s8
    0x00001A79 gvar *__funcptr_type_kind 0x000006A3
    0x00001A7A bc *s8 >|2| 0x00001A78< to __funcptr_type_kind
    0x00001A7B store *__funcptr_type_kind >|2| 0x00001A79<, __funcptr_type_kind >|2| 0x00001A7A<
    0x00001A7C call ag5 "openglGetProcAddress" (cstroflen 16 "glTrackMatrixNV") *s8
    0x00001A7D gvar *__funcptr_type_kind 0x000006A4
    0x00001A7E bc *s8 >|2| 0x00001A7C< to __funcptr_type_kind
    0x00001A7F store *__funcptr_type_kind >|2| 0x00001A7D<, __funcptr_type_kind >|2| 0x00001A7E<
    0x00001A80 call ag5 "openglGetProcAddress" (cstroflen 29 "glTransformFeedbackAttribsNV") *s8
    0x00001A81 gvar *__funcptr_type_kind 0x000006A5
    0x00001A82 bc *s8 >|2| 0x00001A80< to __funcptr_type_kind
    0x00001A83 store *__funcptr_type_kind >|2| 0x00001A81<, __funcptr_type_kind >|2| 0x00001A82<
    0x00001A84 call ag5 "openglGetProcAddress" (cstroflen 30 "glTransformFeedbackBufferBase") *s8
    0x00001A85 gvar *__funcptr_type_kind 0x000006A6
    0x00001A86 bc *s8 >|2| 0x00001A84< to __funcptr_type_kind
    0x00001A87 store *__funcptr_type_kind >|2| 0x00001A85<, __funcptr_type_kind >|2| 0x00001A86<
    0x00001A88 call ag5 "openglGetProcAddress" (cstroflen 31 "glTransformFeedbackBufferRange") *s8
    0x00001A89 gvar *__funcptr_type_kind 0x000006A7
    0x00001A8A bc *s8 >|2| 0x00001A88< to __funcptr_type_kind
    0x00001A8B store *__funcptr_type_kind >|2| 0x00001A89<, __funcptr_type_kind >|2| 0x00001A8A<
    0x00001A8C call ag5 "openglGetProcAddress" (cstroflen 31 "glTransformFeedbackVaryingsEXT") *s8
    0x00001A8D gvar *__funcptr_type_kind 0x000006A8
    0x00001A8E bc *s8 >|2| 0x00001A8C< to __funcptr_type_kind
    0x00001A8F store *__funcptr_type_kind >|2| 0x00001A8D<, __funcptr_type_kind >|2| 0x00001A8E<
    0x00001A90 call ag5 "openglGetProcAddress" (cstroflen 30 "glTransformFeedbackVaryingsNV") *s8
    0x00001A91 gvar *__funcptr_type_kind 0x000006A9
    0x00001A92 bc *s8 >|2| 0x00001A90< to __funcptr_type_kind
    0x00001A93 store *__funcptr_type_kind >|2| 0x00001A91<, __funcptr_type_kind >|2| 0x00001A92<
    0x00001A94 call ag5 "openglGetProcAddress" (cstroflen 28 "glTransformFeedbackVaryings") *s8
    0x00001A95 gvar *__funcptr_type_kind 0x000006AA
    0x00001A96 bc *s8 >|2| 0x00001A94< to __funcptr_type_kind
    0x00001A97 store *__funcptr_type_kind >|2| 0x00001A95<, __funcptr_type_kind >|2| 0x00001A96<
    0x00001A98 call ag5 "openglGetProcAddress" (cstroflen 18 "glTransformPathNV") *s8
    0x00001A99 gvar *__funcptr_type_kind 0x000006AB
    0x00001A9A bc *s8 >|2| 0x00001A98< to __funcptr_type_kind
    0x00001A9B store *__funcptr_type_kind >|2| 0x00001A99<, __funcptr_type_kind >|2| 0x00001A9A<
    0x00001A9C call ag5 "openglGetProcAddress" (cstroflen 13 "glTranslatex") *s8
    0x00001A9D gvar *__funcptr_type_kind 0x000006AC
    0x00001A9E bc *s8 >|2| 0x00001A9C< to __funcptr_type_kind
    0x00001A9F store *__funcptr_type_kind >|2| 0x00001A9D<, __funcptr_type_kind >|2| 0x00001A9E<
    0x00001AA0 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform1d") *s8
    0x00001AA1 gvar *__funcptr_type_kind 0x000006AD
    0x00001AA2 bc *s8 >|2| 0x00001AA0< to __funcptr_type_kind
    0x00001AA3 store *__funcptr_type_kind >|2| 0x00001AA1<, __funcptr_type_kind >|2| 0x00001AA2<
    0x00001AA4 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform1dv") *s8
    0x00001AA5 gvar *__funcptr_type_kind 0x000006AE
    0x00001AA6 bc *s8 >|2| 0x00001AA4< to __funcptr_type_kind
    0x00001AA7 store *__funcptr_type_kind >|2| 0x00001AA5<, __funcptr_type_kind >|2| 0x00001AA6<
    0x00001AA8 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform1fARB") *s8
    0x00001AA9 gvar *__funcptr_type_kind 0x000006AF
    0x00001AAA bc *s8 >|2| 0x00001AA8< to __funcptr_type_kind
    0x00001AAB store *__funcptr_type_kind >|2| 0x00001AA9<, __funcptr_type_kind >|2| 0x00001AAA<
    0x00001AAC call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform1f") *s8
    0x00001AAD gvar *__funcptr_type_kind 0x000006B0
    0x00001AAE bc *s8 >|2| 0x00001AAC< to __funcptr_type_kind
    0x00001AAF store *__funcptr_type_kind >|2| 0x00001AAD<, __funcptr_type_kind >|2| 0x00001AAE<
    0x00001AB0 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform1fvARB") *s8
    0x00001AB1 gvar *__funcptr_type_kind 0x000006B1
    0x00001AB2 bc *s8 >|2| 0x00001AB0< to __funcptr_type_kind
    0x00001AB3 store *__funcptr_type_kind >|2| 0x00001AB1<, __funcptr_type_kind >|2| 0x00001AB2<
    0x00001AB4 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform1fv") *s8
    0x00001AB5 gvar *__funcptr_type_kind 0x000006B2
    0x00001AB6 bc *s8 >|2| 0x00001AB4< to __funcptr_type_kind
    0x00001AB7 store *__funcptr_type_kind >|2| 0x00001AB5<, __funcptr_type_kind >|2| 0x00001AB6<
    0x00001AB8 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform1i64ARB") *s8
    0x00001AB9 gvar *__funcptr_type_kind 0x000006B3
    0x00001ABA bc *s8 >|2| 0x00001AB8< to __funcptr_type_kind
    0x00001ABB store *__funcptr_type_kind >|2| 0x00001AB9<, __funcptr_type_kind >|2| 0x00001ABA<
    0x00001ABC call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform1i64NV") *s8
    0x00001ABD gvar *__funcptr_type_kind 0x000006B4
    0x00001ABE bc *s8 >|2| 0x00001ABC< to __funcptr_type_kind
    0x00001ABF store *__funcptr_type_kind >|2| 0x00001ABD<, __funcptr_type_kind >|2| 0x00001ABE<
    0x00001AC0 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform1i64vARB") *s8
    0x00001AC1 gvar *__funcptr_type_kind 0x000006B5
    0x00001AC2 bc *s8 >|2| 0x00001AC0< to __funcptr_type_kind
    0x00001AC3 store *__funcptr_type_kind >|2| 0x00001AC1<, __funcptr_type_kind >|2| 0x00001AC2<
    0x00001AC4 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform1i64vNV") *s8
    0x00001AC5 gvar *__funcptr_type_kind 0x000006B6
    0x00001AC6 bc *s8 >|2| 0x00001AC4< to __funcptr_type_kind
    0x00001AC7 store *__funcptr_type_kind >|2| 0x00001AC5<, __funcptr_type_kind >|2| 0x00001AC6<
    0x00001AC8 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform1iARB") *s8
    0x00001AC9 gvar *__funcptr_type_kind 0x000006B7
    0x00001ACA bc *s8 >|2| 0x00001AC8< to __funcptr_type_kind
    0x00001ACB store *__funcptr_type_kind >|2| 0x00001AC9<, __funcptr_type_kind >|2| 0x00001ACA<
    0x00001ACC call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform1i") *s8
    0x00001ACD gvar *__funcptr_type_kind 0x000006B8
    0x00001ACE bc *s8 >|2| 0x00001ACC< to __funcptr_type_kind
    0x00001ACF store *__funcptr_type_kind >|2| 0x00001ACD<, __funcptr_type_kind >|2| 0x00001ACE<
    0x00001AD0 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform1ivARB") *s8
    0x00001AD1 gvar *__funcptr_type_kind 0x000006B9
    0x00001AD2 bc *s8 >|2| 0x00001AD0< to __funcptr_type_kind
    0x00001AD3 store *__funcptr_type_kind >|2| 0x00001AD1<, __funcptr_type_kind >|2| 0x00001AD2<
    0x00001AD4 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform1iv") *s8
    0x00001AD5 gvar *__funcptr_type_kind 0x000006BA
    0x00001AD6 bc *s8 >|2| 0x00001AD4< to __funcptr_type_kind
    0x00001AD7 store *__funcptr_type_kind >|2| 0x00001AD5<, __funcptr_type_kind >|2| 0x00001AD6<
    0x00001AD8 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform1ui64ARB") *s8
    0x00001AD9 gvar *__funcptr_type_kind 0x000006BB
    0x00001ADA bc *s8 >|2| 0x00001AD8< to __funcptr_type_kind
    0x00001ADB store *__funcptr_type_kind >|2| 0x00001AD9<, __funcptr_type_kind >|2| 0x00001ADA<
    0x00001ADC call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform1ui64NV") *s8
    0x00001ADD gvar *__funcptr_type_kind 0x000006BC
    0x00001ADE bc *s8 >|2| 0x00001ADC< to __funcptr_type_kind
    0x00001ADF store *__funcptr_type_kind >|2| 0x00001ADD<, __funcptr_type_kind >|2| 0x00001ADE<
    0x00001AE0 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniform1ui64vARB") *s8
    0x00001AE1 gvar *__funcptr_type_kind 0x000006BD
    0x00001AE2 bc *s8 >|2| 0x00001AE0< to __funcptr_type_kind
    0x00001AE3 store *__funcptr_type_kind >|2| 0x00001AE1<, __funcptr_type_kind >|2| 0x00001AE2<
    0x00001AE4 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform1ui64vNV") *s8
    0x00001AE5 gvar *__funcptr_type_kind 0x000006BE
    0x00001AE6 bc *s8 >|2| 0x00001AE4< to __funcptr_type_kind
    0x00001AE7 store *__funcptr_type_kind >|2| 0x00001AE5<, __funcptr_type_kind >|2| 0x00001AE6<
    0x00001AE8 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform1uiEXT") *s8
    0x00001AE9 gvar *__funcptr_type_kind 0x000006BF
    0x00001AEA bc *s8 >|2| 0x00001AE8< to __funcptr_type_kind
    0x00001AEB store *__funcptr_type_kind >|2| 0x00001AE9<, __funcptr_type_kind >|2| 0x00001AEA<
    0x00001AEC call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform1ui") *s8
    0x00001AED gvar *__funcptr_type_kind 0x000006C0
    0x00001AEE bc *s8 >|2| 0x00001AEC< to __funcptr_type_kind
    0x00001AEF store *__funcptr_type_kind >|2| 0x00001AED<, __funcptr_type_kind >|2| 0x00001AEE<
    0x00001AF0 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform1uivEXT") *s8
    0x00001AF1 gvar *__funcptr_type_kind 0x000006C1
    0x00001AF2 bc *s8 >|2| 0x00001AF0< to __funcptr_type_kind
    0x00001AF3 store *__funcptr_type_kind >|2| 0x00001AF1<, __funcptr_type_kind >|2| 0x00001AF2<
    0x00001AF4 call ag5 "openglGetProcAddress" (cstroflen 14 "glUniform1uiv") *s8
    0x00001AF5 gvar *__funcptr_type_kind 0x000006C2
    0x00001AF6 bc *s8 >|2| 0x00001AF4< to __funcptr_type_kind
    0x00001AF7 store *__funcptr_type_kind >|2| 0x00001AF5<, __funcptr_type_kind >|2| 0x00001AF6<
    0x00001AF8 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform2d") *s8
    0x00001AF9 gvar *__funcptr_type_kind 0x000006C3
    0x00001AFA bc *s8 >|2| 0x00001AF8< to __funcptr_type_kind
    0x00001AFB store *__funcptr_type_kind >|2| 0x00001AF9<, __funcptr_type_kind >|2| 0x00001AFA<
    0x00001AFC call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform2dv") *s8
    0x00001AFD gvar *__funcptr_type_kind 0x000006C4
    0x00001AFE bc *s8 >|2| 0x00001AFC< to __funcptr_type_kind
    0x00001AFF store *__funcptr_type_kind >|2| 0x00001AFD<, __funcptr_type_kind >|2| 0x00001AFE<
    0x00001B00 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform2fARB") *s8
    0x00001B01 gvar *__funcptr_type_kind 0x000006C5
    0x00001B02 bc *s8 >|2| 0x00001B00< to __funcptr_type_kind
    0x00001B03 store *__funcptr_type_kind >|2| 0x00001B01<, __funcptr_type_kind >|2| 0x00001B02<
    0x00001B04 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform2f") *s8
    0x00001B05 gvar *__funcptr_type_kind 0x000006C6
    0x00001B06 bc *s8 >|2| 0x00001B04< to __funcptr_type_kind
    0x00001B07 store *__funcptr_type_kind >|2| 0x00001B05<, __funcptr_type_kind >|2| 0x00001B06<
    0x00001B08 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform2fvARB") *s8
    0x00001B09 gvar *__funcptr_type_kind 0x000006C7
    0x00001B0A bc *s8 >|2| 0x00001B08< to __funcptr_type_kind
    0x00001B0B store *__funcptr_type_kind >|2| 0x00001B09<, __funcptr_type_kind >|2| 0x00001B0A<
    0x00001B0C call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform2fv") *s8
    0x00001B0D gvar *__funcptr_type_kind 0x000006C8
    0x00001B0E bc *s8 >|2| 0x00001B0C< to __funcptr_type_kind
    0x00001B0F store *__funcptr_type_kind >|2| 0x00001B0D<, __funcptr_type_kind >|2| 0x00001B0E<
    0x00001B10 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform2i64ARB") *s8
    0x00001B11 gvar *__funcptr_type_kind 0x000006C9
    0x00001B12 bc *s8 >|2| 0x00001B10< to __funcptr_type_kind
    0x00001B13 store *__funcptr_type_kind >|2| 0x00001B11<, __funcptr_type_kind >|2| 0x00001B12<
    0x00001B14 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform2i64NV") *s8
    0x00001B15 gvar *__funcptr_type_kind 0x000006CA
    0x00001B16 bc *s8 >|2| 0x00001B14< to __funcptr_type_kind
    0x00001B17 store *__funcptr_type_kind >|2| 0x00001B15<, __funcptr_type_kind >|2| 0x00001B16<
    0x00001B18 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform2i64vARB") *s8
    0x00001B19 gvar *__funcptr_type_kind 0x000006CB
    0x00001B1A bc *s8 >|2| 0x00001B18< to __funcptr_type_kind
    0x00001B1B store *__funcptr_type_kind >|2| 0x00001B19<, __funcptr_type_kind >|2| 0x00001B1A<
    0x00001B1C call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform2i64vNV") *s8
    0x00001B1D gvar *__funcptr_type_kind 0x000006CC
    0x00001B1E bc *s8 >|2| 0x00001B1C< to __funcptr_type_kind
    0x00001B1F store *__funcptr_type_kind >|2| 0x00001B1D<, __funcptr_type_kind >|2| 0x00001B1E<
    0x00001B20 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform2iARB") *s8
    0x00001B21 gvar *__funcptr_type_kind 0x000006CD
    0x00001B22 bc *s8 >|2| 0x00001B20< to __funcptr_type_kind
    0x00001B23 store *__funcptr_type_kind >|2| 0x00001B21<, __funcptr_type_kind >|2| 0x00001B22<
    0x00001B24 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform2i") *s8
    0x00001B25 gvar *__funcptr_type_kind 0x000006CE
    0x00001B26 bc *s8 >|2| 0x00001B24< to __funcptr_type_kind
    0x00001B27 store *__funcptr_type_kind >|2| 0x00001B25<, __funcptr_type_kind >|2| 0x00001B26<
    0x00001B28 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform2ivARB") *s8
    0x00001B29 gvar *__funcptr_type_kind 0x000006CF
    0x00001B2A bc *s8 >|2| 0x00001B28< to __funcptr_type_kind
    0x00001B2B store *__funcptr_type_kind >|2| 0x00001B29<, __funcptr_type_kind >|2| 0x00001B2A<
    0x00001B2C call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform2iv") *s8
    0x00001B2D gvar *__funcptr_type_kind 0x000006D0
    0x00001B2E bc *s8 >|2| 0x00001B2C< to __funcptr_type_kind
    0x00001B2F store *__funcptr_type_kind >|2| 0x00001B2D<, __funcptr_type_kind >|2| 0x00001B2E<
    0x00001B30 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform2ui64ARB") *s8
    0x00001B31 gvar *__funcptr_type_kind 0x000006D1
    0x00001B32 bc *s8 >|2| 0x00001B30< to __funcptr_type_kind
    0x00001B33 store *__funcptr_type_kind >|2| 0x00001B31<, __funcptr_type_kind >|2| 0x00001B32<
    0x00001B34 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform2ui64NV") *s8
    0x00001B35 gvar *__funcptr_type_kind 0x000006D2
    0x00001B36 bc *s8 >|2| 0x00001B34< to __funcptr_type_kind
    0x00001B37 store *__funcptr_type_kind >|2| 0x00001B35<, __funcptr_type_kind >|2| 0x00001B36<
    0x00001B38 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniform2ui64vARB") *s8
    0x00001B39 gvar *__funcptr_type_kind 0x000006D3
    0x00001B3A bc *s8 >|2| 0x00001B38< to __funcptr_type_kind
    0x00001B3B store *__funcptr_type_kind >|2| 0x00001B39<, __funcptr_type_kind >|2| 0x00001B3A<
    0x00001B3C call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform2ui64vNV") *s8
    0x00001B3D gvar *__funcptr_type_kind 0x000006D4
    0x00001B3E bc *s8 >|2| 0x00001B3C< to __funcptr_type_kind
    0x00001B3F store *__funcptr_type_kind >|2| 0x00001B3D<, __funcptr_type_kind >|2| 0x00001B3E<
    0x00001B40 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform2uiEXT") *s8
    0x00001B41 gvar *__funcptr_type_kind 0x000006D5
    0x00001B42 bc *s8 >|2| 0x00001B40< to __funcptr_type_kind
    0x00001B43 store *__funcptr_type_kind >|2| 0x00001B41<, __funcptr_type_kind >|2| 0x00001B42<
    0x00001B44 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform2ui") *s8
    0x00001B45 gvar *__funcptr_type_kind 0x000006D6
    0x00001B46 bc *s8 >|2| 0x00001B44< to __funcptr_type_kind
    0x00001B47 store *__funcptr_type_kind >|2| 0x00001B45<, __funcptr_type_kind >|2| 0x00001B46<
    0x00001B48 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform2uivEXT") *s8
    0x00001B49 gvar *__funcptr_type_kind 0x000006D7
    0x00001B4A bc *s8 >|2| 0x00001B48< to __funcptr_type_kind
    0x00001B4B store *__funcptr_type_kind >|2| 0x00001B49<, __funcptr_type_kind >|2| 0x00001B4A<
    0x00001B4C call ag5 "openglGetProcAddress" (cstroflen 14 "glUniform2uiv") *s8
    0x00001B4D gvar *__funcptr_type_kind 0x000006D8
    0x00001B4E bc *s8 >|2| 0x00001B4C< to __funcptr_type_kind
    0x00001B4F store *__funcptr_type_kind >|2| 0x00001B4D<, __funcptr_type_kind >|2| 0x00001B4E<
    0x00001B50 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform3d") *s8
    0x00001B51 gvar *__funcptr_type_kind 0x000006D9
    0x00001B52 bc *s8 >|2| 0x00001B50< to __funcptr_type_kind
    0x00001B53 store *__funcptr_type_kind >|2| 0x00001B51<, __funcptr_type_kind >|2| 0x00001B52<
    0x00001B54 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform3dv") *s8
    0x00001B55 gvar *__funcptr_type_kind 0x000006DA
    0x00001B56 bc *s8 >|2| 0x00001B54< to __funcptr_type_kind
    0x00001B57 store *__funcptr_type_kind >|2| 0x00001B55<, __funcptr_type_kind >|2| 0x00001B56<
    0x00001B58 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform3fARB") *s8
    0x00001B59 gvar *__funcptr_type_kind 0x000006DB
    0x00001B5A bc *s8 >|2| 0x00001B58< to __funcptr_type_kind
    0x00001B5B store *__funcptr_type_kind >|2| 0x00001B59<, __funcptr_type_kind >|2| 0x00001B5A<
    0x00001B5C call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform3f") *s8
    0x00001B5D gvar *__funcptr_type_kind 0x000006DC
    0x00001B5E bc *s8 >|2| 0x00001B5C< to __funcptr_type_kind
    0x00001B5F store *__funcptr_type_kind >|2| 0x00001B5D<, __funcptr_type_kind >|2| 0x00001B5E<
    0x00001B60 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform3fvARB") *s8
    0x00001B61 gvar *__funcptr_type_kind 0x000006DD
    0x00001B62 bc *s8 >|2| 0x00001B60< to __funcptr_type_kind
    0x00001B63 store *__funcptr_type_kind >|2| 0x00001B61<, __funcptr_type_kind >|2| 0x00001B62<
    0x00001B64 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform3fv") *s8
    0x00001B65 gvar *__funcptr_type_kind 0x000006DE
    0x00001B66 bc *s8 >|2| 0x00001B64< to __funcptr_type_kind
    0x00001B67 store *__funcptr_type_kind >|2| 0x00001B65<, __funcptr_type_kind >|2| 0x00001B66<
    0x00001B68 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform3i64ARB") *s8
    0x00001B69 gvar *__funcptr_type_kind 0x000006DF
    0x00001B6A bc *s8 >|2| 0x00001B68< to __funcptr_type_kind
    0x00001B6B store *__funcptr_type_kind >|2| 0x00001B69<, __funcptr_type_kind >|2| 0x00001B6A<
    0x00001B6C call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform3i64NV") *s8
    0x00001B6D gvar *__funcptr_type_kind 0x000006E0
    0x00001B6E bc *s8 >|2| 0x00001B6C< to __funcptr_type_kind
    0x00001B6F store *__funcptr_type_kind >|2| 0x00001B6D<, __funcptr_type_kind >|2| 0x00001B6E<
    0x00001B70 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform3i64vARB") *s8
    0x00001B71 gvar *__funcptr_type_kind 0x000006E1
    0x00001B72 bc *s8 >|2| 0x00001B70< to __funcptr_type_kind
    0x00001B73 store *__funcptr_type_kind >|2| 0x00001B71<, __funcptr_type_kind >|2| 0x00001B72<
    0x00001B74 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform3i64vNV") *s8
    0x00001B75 gvar *__funcptr_type_kind 0x000006E2
    0x00001B76 bc *s8 >|2| 0x00001B74< to __funcptr_type_kind
    0x00001B77 store *__funcptr_type_kind >|2| 0x00001B75<, __funcptr_type_kind >|2| 0x00001B76<
    0x00001B78 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform3iARB") *s8
    0x00001B79 gvar *__funcptr_type_kind 0x000006E3
    0x00001B7A bc *s8 >|2| 0x00001B78< to __funcptr_type_kind
    0x00001B7B store *__funcptr_type_kind >|2| 0x00001B79<, __funcptr_type_kind >|2| 0x00001B7A<
    0x00001B7C call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform3i") *s8
    0x00001B7D gvar *__funcptr_type_kind 0x000006E4
    0x00001B7E bc *s8 >|2| 0x00001B7C< to __funcptr_type_kind
    0x00001B7F store *__funcptr_type_kind >|2| 0x00001B7D<, __funcptr_type_kind >|2| 0x00001B7E<
    0x00001B80 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform3ivARB") *s8
    0x00001B81 gvar *__funcptr_type_kind 0x000006E5
    0x00001B82 bc *s8 >|2| 0x00001B80< to __funcptr_type_kind
    0x00001B83 store *__funcptr_type_kind >|2| 0x00001B81<, __funcptr_type_kind >|2| 0x00001B82<
    0x00001B84 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform3iv") *s8
    0x00001B85 gvar *__funcptr_type_kind 0x000006E6
    0x00001B86 bc *s8 >|2| 0x00001B84< to __funcptr_type_kind
    0x00001B87 store *__funcptr_type_kind >|2| 0x00001B85<, __funcptr_type_kind >|2| 0x00001B86<
    0x00001B88 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform3ui64ARB") *s8
    0x00001B89 gvar *__funcptr_type_kind 0x000006E7
    0x00001B8A bc *s8 >|2| 0x00001B88< to __funcptr_type_kind
    0x00001B8B store *__funcptr_type_kind >|2| 0x00001B89<, __funcptr_type_kind >|2| 0x00001B8A<
    0x00001B8C call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform3ui64NV") *s8
    0x00001B8D gvar *__funcptr_type_kind 0x000006E8
    0x00001B8E bc *s8 >|2| 0x00001B8C< to __funcptr_type_kind
    0x00001B8F store *__funcptr_type_kind >|2| 0x00001B8D<, __funcptr_type_kind >|2| 0x00001B8E<
    0x00001B90 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniform3ui64vARB") *s8
    0x00001B91 gvar *__funcptr_type_kind 0x000006E9
    0x00001B92 bc *s8 >|2| 0x00001B90< to __funcptr_type_kind
    0x00001B93 store *__funcptr_type_kind >|2| 0x00001B91<, __funcptr_type_kind >|2| 0x00001B92<
    0x00001B94 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform3ui64vNV") *s8
    0x00001B95 gvar *__funcptr_type_kind 0x000006EA
    0x00001B96 bc *s8 >|2| 0x00001B94< to __funcptr_type_kind
    0x00001B97 store *__funcptr_type_kind >|2| 0x00001B95<, __funcptr_type_kind >|2| 0x00001B96<
    0x00001B98 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform3uiEXT") *s8
    0x00001B99 gvar *__funcptr_type_kind 0x000006EB
    0x00001B9A bc *s8 >|2| 0x00001B98< to __funcptr_type_kind
    0x00001B9B store *__funcptr_type_kind >|2| 0x00001B99<, __funcptr_type_kind >|2| 0x00001B9A<
    0x00001B9C call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform3ui") *s8
    0x00001B9D gvar *__funcptr_type_kind 0x000006EC
    0x00001B9E bc *s8 >|2| 0x00001B9C< to __funcptr_type_kind
    0x00001B9F store *__funcptr_type_kind >|2| 0x00001B9D<, __funcptr_type_kind >|2| 0x00001B9E<
    0x00001BA0 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform3uivEXT") *s8
    0x00001BA1 gvar *__funcptr_type_kind 0x000006ED
    0x00001BA2 bc *s8 >|2| 0x00001BA0< to __funcptr_type_kind
    0x00001BA3 store *__funcptr_type_kind >|2| 0x00001BA1<, __funcptr_type_kind >|2| 0x00001BA2<
    0x00001BA4 call ag5 "openglGetProcAddress" (cstroflen 14 "glUniform3uiv") *s8
    0x00001BA5 gvar *__funcptr_type_kind 0x000006EE
    0x00001BA6 bc *s8 >|2| 0x00001BA4< to __funcptr_type_kind
    0x00001BA7 store *__funcptr_type_kind >|2| 0x00001BA5<, __funcptr_type_kind >|2| 0x00001BA6<
    0x00001BA8 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform4d") *s8
    0x00001BA9 gvar *__funcptr_type_kind 0x000006EF
    0x00001BAA bc *s8 >|2| 0x00001BA8< to __funcptr_type_kind
    0x00001BAB store *__funcptr_type_kind >|2| 0x00001BA9<, __funcptr_type_kind >|2| 0x00001BAA<
    0x00001BAC call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform4dv") *s8
    0x00001BAD gvar *__funcptr_type_kind 0x000006F0
    0x00001BAE bc *s8 >|2| 0x00001BAC< to __funcptr_type_kind
    0x00001BAF store *__funcptr_type_kind >|2| 0x00001BAD<, __funcptr_type_kind >|2| 0x00001BAE<
    0x00001BB0 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform4fARB") *s8
    0x00001BB1 gvar *__funcptr_type_kind 0x000006F1
    0x00001BB2 bc *s8 >|2| 0x00001BB0< to __funcptr_type_kind
    0x00001BB3 store *__funcptr_type_kind >|2| 0x00001BB1<, __funcptr_type_kind >|2| 0x00001BB2<
    0x00001BB4 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform4f") *s8
    0x00001BB5 gvar *__funcptr_type_kind 0x000006F2
    0x00001BB6 bc *s8 >|2| 0x00001BB4< to __funcptr_type_kind
    0x00001BB7 store *__funcptr_type_kind >|2| 0x00001BB5<, __funcptr_type_kind >|2| 0x00001BB6<
    0x00001BB8 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform4fvARB") *s8
    0x00001BB9 gvar *__funcptr_type_kind 0x000006F3
    0x00001BBA bc *s8 >|2| 0x00001BB8< to __funcptr_type_kind
    0x00001BBB store *__funcptr_type_kind >|2| 0x00001BB9<, __funcptr_type_kind >|2| 0x00001BBA<
    0x00001BBC call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform4fv") *s8
    0x00001BBD gvar *__funcptr_type_kind 0x000006F4
    0x00001BBE bc *s8 >|2| 0x00001BBC< to __funcptr_type_kind
    0x00001BBF store *__funcptr_type_kind >|2| 0x00001BBD<, __funcptr_type_kind >|2| 0x00001BBE<
    0x00001BC0 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform4i64ARB") *s8
    0x00001BC1 gvar *__funcptr_type_kind 0x000006F5
    0x00001BC2 bc *s8 >|2| 0x00001BC0< to __funcptr_type_kind
    0x00001BC3 store *__funcptr_type_kind >|2| 0x00001BC1<, __funcptr_type_kind >|2| 0x00001BC2<
    0x00001BC4 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform4i64NV") *s8
    0x00001BC5 gvar *__funcptr_type_kind 0x000006F6
    0x00001BC6 bc *s8 >|2| 0x00001BC4< to __funcptr_type_kind
    0x00001BC7 store *__funcptr_type_kind >|2| 0x00001BC5<, __funcptr_type_kind >|2| 0x00001BC6<
    0x00001BC8 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform4i64vARB") *s8
    0x00001BC9 gvar *__funcptr_type_kind 0x000006F7
    0x00001BCA bc *s8 >|2| 0x00001BC8< to __funcptr_type_kind
    0x00001BCB store *__funcptr_type_kind >|2| 0x00001BC9<, __funcptr_type_kind >|2| 0x00001BCA<
    0x00001BCC call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform4i64vNV") *s8
    0x00001BCD gvar *__funcptr_type_kind 0x000006F8
    0x00001BCE bc *s8 >|2| 0x00001BCC< to __funcptr_type_kind
    0x00001BCF store *__funcptr_type_kind >|2| 0x00001BCD<, __funcptr_type_kind >|2| 0x00001BCE<
    0x00001BD0 call ag5 "openglGetProcAddress" (cstroflen 15 "glUniform4iARB") *s8
    0x00001BD1 gvar *__funcptr_type_kind 0x000006F9
    0x00001BD2 bc *s8 >|2| 0x00001BD0< to __funcptr_type_kind
    0x00001BD3 store *__funcptr_type_kind >|2| 0x00001BD1<, __funcptr_type_kind >|2| 0x00001BD2<
    0x00001BD4 call ag5 "openglGetProcAddress" (cstroflen 12 "glUniform4i") *s8
    0x00001BD5 gvar *__funcptr_type_kind 0x000006FA
    0x00001BD6 bc *s8 >|2| 0x00001BD4< to __funcptr_type_kind
    0x00001BD7 store *__funcptr_type_kind >|2| 0x00001BD5<, __funcptr_type_kind >|2| 0x00001BD6<
    0x00001BD8 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform4ivARB") *s8
    0x00001BD9 gvar *__funcptr_type_kind 0x000006FB
    0x00001BDA bc *s8 >|2| 0x00001BD8< to __funcptr_type_kind
    0x00001BDB store *__funcptr_type_kind >|2| 0x00001BD9<, __funcptr_type_kind >|2| 0x00001BDA<
    0x00001BDC call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform4iv") *s8
    0x00001BDD gvar *__funcptr_type_kind 0x000006FC
    0x00001BDE bc *s8 >|2| 0x00001BDC< to __funcptr_type_kind
    0x00001BDF store *__funcptr_type_kind >|2| 0x00001BDD<, __funcptr_type_kind >|2| 0x00001BDE<
    0x00001BE0 call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform4ui64ARB") *s8
    0x00001BE1 gvar *__funcptr_type_kind 0x000006FD
    0x00001BE2 bc *s8 >|2| 0x00001BE0< to __funcptr_type_kind
    0x00001BE3 store *__funcptr_type_kind >|2| 0x00001BE1<, __funcptr_type_kind >|2| 0x00001BE2<
    0x00001BE4 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform4ui64NV") *s8
    0x00001BE5 gvar *__funcptr_type_kind 0x000006FE
    0x00001BE6 bc *s8 >|2| 0x00001BE4< to __funcptr_type_kind
    0x00001BE7 store *__funcptr_type_kind >|2| 0x00001BE5<, __funcptr_type_kind >|2| 0x00001BE6<
    0x00001BE8 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniform4ui64vARB") *s8
    0x00001BE9 gvar *__funcptr_type_kind 0x000006FF
    0x00001BEA bc *s8 >|2| 0x00001BE8< to __funcptr_type_kind
    0x00001BEB store *__funcptr_type_kind >|2| 0x00001BE9<, __funcptr_type_kind >|2| 0x00001BEA<
    0x00001BEC call ag5 "openglGetProcAddress" (cstroflen 18 "glUniform4ui64vNV") *s8
    0x00001BED gvar *__funcptr_type_kind 0x00000700
    0x00001BEE bc *s8 >|2| 0x00001BEC< to __funcptr_type_kind
    0x00001BEF store *__funcptr_type_kind >|2| 0x00001BED<, __funcptr_type_kind >|2| 0x00001BEE<
    0x00001BF0 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniform4uiEXT") *s8
    0x00001BF1 gvar *__funcptr_type_kind 0x00000701
    0x00001BF2 bc *s8 >|2| 0x00001BF0< to __funcptr_type_kind
    0x00001BF3 store *__funcptr_type_kind >|2| 0x00001BF1<, __funcptr_type_kind >|2| 0x00001BF2<
    0x00001BF4 call ag5 "openglGetProcAddress" (cstroflen 13 "glUniform4ui") *s8
    0x00001BF5 gvar *__funcptr_type_kind 0x00000702
    0x00001BF6 bc *s8 >|2| 0x00001BF4< to __funcptr_type_kind
    0x00001BF7 store *__funcptr_type_kind >|2| 0x00001BF5<, __funcptr_type_kind >|2| 0x00001BF6<
    0x00001BF8 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniform4uivEXT") *s8
    0x00001BF9 gvar *__funcptr_type_kind 0x00000703
    0x00001BFA bc *s8 >|2| 0x00001BF8< to __funcptr_type_kind
    0x00001BFB store *__funcptr_type_kind >|2| 0x00001BF9<, __funcptr_type_kind >|2| 0x00001BFA<
    0x00001BFC call ag5 "openglGetProcAddress" (cstroflen 14 "glUniform4uiv") *s8
    0x00001BFD gvar *__funcptr_type_kind 0x00000704
    0x00001BFE bc *s8 >|2| 0x00001BFC< to __funcptr_type_kind
    0x00001BFF store *__funcptr_type_kind >|2| 0x00001BFD<, __funcptr_type_kind >|2| 0x00001BFE<
    0x00001C00 call ag5 "openglGetProcAddress" (cstroflen 22 "glUniformBlockBinding") *s8
    0x00001C01 gvar *__funcptr_type_kind 0x00000705
    0x00001C02 bc *s8 >|2| 0x00001C00< to __funcptr_type_kind
    0x00001C03 store *__funcptr_type_kind >|2| 0x00001C01<, __funcptr_type_kind >|2| 0x00001C02<
    0x00001C04 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformBufferEXT") *s8
    0x00001C05 gvar *__funcptr_type_kind 0x00000706
    0x00001C06 bc *s8 >|2| 0x00001C04< to __funcptr_type_kind
    0x00001C07 store *__funcptr_type_kind >|2| 0x00001C05<, __funcptr_type_kind >|2| 0x00001C06<
    0x00001C08 call ag5 "openglGetProcAddress" (cstroflen 23 "glUniformHandleui64ARB") *s8
    0x00001C09 gvar *__funcptr_type_kind 0x00000707
    0x00001C0A bc *s8 >|2| 0x00001C08< to __funcptr_type_kind
    0x00001C0B store *__funcptr_type_kind >|2| 0x00001C09<, __funcptr_type_kind >|2| 0x00001C0A<
    0x00001C0C call ag5 "openglGetProcAddress" (cstroflen 22 "glUniformHandleui64NV") *s8
    0x00001C0D gvar *__funcptr_type_kind 0x00000708
    0x00001C0E bc *s8 >|2| 0x00001C0C< to __funcptr_type_kind
    0x00001C0F store *__funcptr_type_kind >|2| 0x00001C0D<, __funcptr_type_kind >|2| 0x00001C0E<
    0x00001C10 call ag5 "openglGetProcAddress" (cstroflen 24 "glUniformHandleui64vARB") *s8
    0x00001C11 gvar *__funcptr_type_kind 0x00000709
    0x00001C12 bc *s8 >|2| 0x00001C10< to __funcptr_type_kind
    0x00001C13 store *__funcptr_type_kind >|2| 0x00001C11<, __funcptr_type_kind >|2| 0x00001C12<
    0x00001C14 call ag5 "openglGetProcAddress" (cstroflen 23 "glUniformHandleui64vNV") *s8
    0x00001C15 gvar *__funcptr_type_kind 0x0000070A
    0x00001C16 bc *s8 >|2| 0x00001C14< to __funcptr_type_kind
    0x00001C17 store *__funcptr_type_kind >|2| 0x00001C15<, __funcptr_type_kind >|2| 0x00001C16<
    0x00001C18 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformMatrix2dv") *s8
    0x00001C19 gvar *__funcptr_type_kind 0x0000070B
    0x00001C1A bc *s8 >|2| 0x00001C18< to __funcptr_type_kind
    0x00001C1B store *__funcptr_type_kind >|2| 0x00001C19<, __funcptr_type_kind >|2| 0x00001C1A<
    0x00001C1C call ag5 "openglGetProcAddress" (cstroflen 22 "glUniformMatrix2fvARB") *s8
    0x00001C1D gvar *__funcptr_type_kind 0x0000070C
    0x00001C1E bc *s8 >|2| 0x00001C1C< to __funcptr_type_kind
    0x00001C1F store *__funcptr_type_kind >|2| 0x00001C1D<, __funcptr_type_kind >|2| 0x00001C1E<
    0x00001C20 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformMatrix2fv") *s8
    0x00001C21 gvar *__funcptr_type_kind 0x0000070D
    0x00001C22 bc *s8 >|2| 0x00001C20< to __funcptr_type_kind
    0x00001C23 store *__funcptr_type_kind >|2| 0x00001C21<, __funcptr_type_kind >|2| 0x00001C22<
    0x00001C24 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix2x3dv") *s8
    0x00001C25 gvar *__funcptr_type_kind 0x0000070E
    0x00001C26 bc *s8 >|2| 0x00001C24< to __funcptr_type_kind
    0x00001C27 store *__funcptr_type_kind >|2| 0x00001C25<, __funcptr_type_kind >|2| 0x00001C26<
    0x00001C28 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix2x3fv") *s8
    0x00001C29 gvar *__funcptr_type_kind 0x0000070F
    0x00001C2A bc *s8 >|2| 0x00001C28< to __funcptr_type_kind
    0x00001C2B store *__funcptr_type_kind >|2| 0x00001C29<, __funcptr_type_kind >|2| 0x00001C2A<
    0x00001C2C call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix2x4dv") *s8
    0x00001C2D gvar *__funcptr_type_kind 0x00000710
    0x00001C2E bc *s8 >|2| 0x00001C2C< to __funcptr_type_kind
    0x00001C2F store *__funcptr_type_kind >|2| 0x00001C2D<, __funcptr_type_kind >|2| 0x00001C2E<
    0x00001C30 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix2x4fv") *s8
    0x00001C31 gvar *__funcptr_type_kind 0x00000711
    0x00001C32 bc *s8 >|2| 0x00001C30< to __funcptr_type_kind
    0x00001C33 store *__funcptr_type_kind >|2| 0x00001C31<, __funcptr_type_kind >|2| 0x00001C32<
    0x00001C34 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformMatrix3dv") *s8
    0x00001C35 gvar *__funcptr_type_kind 0x00000712
    0x00001C36 bc *s8 >|2| 0x00001C34< to __funcptr_type_kind
    0x00001C37 store *__funcptr_type_kind >|2| 0x00001C35<, __funcptr_type_kind >|2| 0x00001C36<
    0x00001C38 call ag5 "openglGetProcAddress" (cstroflen 22 "glUniformMatrix3fvARB") *s8
    0x00001C39 gvar *__funcptr_type_kind 0x00000713
    0x00001C3A bc *s8 >|2| 0x00001C38< to __funcptr_type_kind
    0x00001C3B store *__funcptr_type_kind >|2| 0x00001C39<, __funcptr_type_kind >|2| 0x00001C3A<
    0x00001C3C call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformMatrix3fv") *s8
    0x00001C3D gvar *__funcptr_type_kind 0x00000714
    0x00001C3E bc *s8 >|2| 0x00001C3C< to __funcptr_type_kind
    0x00001C3F store *__funcptr_type_kind >|2| 0x00001C3D<, __funcptr_type_kind >|2| 0x00001C3E<
    0x00001C40 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix3x2dv") *s8
    0x00001C41 gvar *__funcptr_type_kind 0x00000715
    0x00001C42 bc *s8 >|2| 0x00001C40< to __funcptr_type_kind
    0x00001C43 store *__funcptr_type_kind >|2| 0x00001C41<, __funcptr_type_kind >|2| 0x00001C42<
    0x00001C44 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix3x2fv") *s8
    0x00001C45 gvar *__funcptr_type_kind 0x00000716
    0x00001C46 bc *s8 >|2| 0x00001C44< to __funcptr_type_kind
    0x00001C47 store *__funcptr_type_kind >|2| 0x00001C45<, __funcptr_type_kind >|2| 0x00001C46<
    0x00001C48 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix3x4dv") *s8
    0x00001C49 gvar *__funcptr_type_kind 0x00000717
    0x00001C4A bc *s8 >|2| 0x00001C48< to __funcptr_type_kind
    0x00001C4B store *__funcptr_type_kind >|2| 0x00001C49<, __funcptr_type_kind >|2| 0x00001C4A<
    0x00001C4C call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix3x4fv") *s8
    0x00001C4D gvar *__funcptr_type_kind 0x00000718
    0x00001C4E bc *s8 >|2| 0x00001C4C< to __funcptr_type_kind
    0x00001C4F store *__funcptr_type_kind >|2| 0x00001C4D<, __funcptr_type_kind >|2| 0x00001C4E<
    0x00001C50 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformMatrix4dv") *s8
    0x00001C51 gvar *__funcptr_type_kind 0x00000719
    0x00001C52 bc *s8 >|2| 0x00001C50< to __funcptr_type_kind
    0x00001C53 store *__funcptr_type_kind >|2| 0x00001C51<, __funcptr_type_kind >|2| 0x00001C52<
    0x00001C54 call ag5 "openglGetProcAddress" (cstroflen 22 "glUniformMatrix4fvARB") *s8
    0x00001C55 gvar *__funcptr_type_kind 0x0000071A
    0x00001C56 bc *s8 >|2| 0x00001C54< to __funcptr_type_kind
    0x00001C57 store *__funcptr_type_kind >|2| 0x00001C55<, __funcptr_type_kind >|2| 0x00001C56<
    0x00001C58 call ag5 "openglGetProcAddress" (cstroflen 19 "glUniformMatrix4fv") *s8
    0x00001C59 gvar *__funcptr_type_kind 0x0000071B
    0x00001C5A bc *s8 >|2| 0x00001C58< to __funcptr_type_kind
    0x00001C5B store *__funcptr_type_kind >|2| 0x00001C59<, __funcptr_type_kind >|2| 0x00001C5A<
    0x00001C5C call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix4x2dv") *s8
    0x00001C5D gvar *__funcptr_type_kind 0x0000071C
    0x00001C5E bc *s8 >|2| 0x00001C5C< to __funcptr_type_kind
    0x00001C5F store *__funcptr_type_kind >|2| 0x00001C5D<, __funcptr_type_kind >|2| 0x00001C5E<
    0x00001C60 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix4x2fv") *s8
    0x00001C61 gvar *__funcptr_type_kind 0x0000071D
    0x00001C62 bc *s8 >|2| 0x00001C60< to __funcptr_type_kind
    0x00001C63 store *__funcptr_type_kind >|2| 0x00001C61<, __funcptr_type_kind >|2| 0x00001C62<
    0x00001C64 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix4x3dv") *s8
    0x00001C65 gvar *__funcptr_type_kind 0x0000071E
    0x00001C66 bc *s8 >|2| 0x00001C64< to __funcptr_type_kind
    0x00001C67 store *__funcptr_type_kind >|2| 0x00001C65<, __funcptr_type_kind >|2| 0x00001C66<
    0x00001C68 call ag5 "openglGetProcAddress" (cstroflen 21 "glUniformMatrix4x3fv") *s8
    0x00001C69 gvar *__funcptr_type_kind 0x0000071F
    0x00001C6A bc *s8 >|2| 0x00001C68< to __funcptr_type_kind
    0x00001C6B store *__funcptr_type_kind >|2| 0x00001C69<, __funcptr_type_kind >|2| 0x00001C6A<
    0x00001C6C call ag5 "openglGetProcAddress" (cstroflen 24 "glUniformSubroutinesuiv") *s8
    0x00001C6D gvar *__funcptr_type_kind 0x00000720
    0x00001C6E bc *s8 >|2| 0x00001C6C< to __funcptr_type_kind
    0x00001C6F store *__funcptr_type_kind >|2| 0x00001C6D<, __funcptr_type_kind >|2| 0x00001C6E<
    0x00001C70 call ag5 "openglGetProcAddress" (cstroflen 16 "glUniformui64NV") *s8
    0x00001C71 gvar *__funcptr_type_kind 0x00000721
    0x00001C72 bc *s8 >|2| 0x00001C70< to __funcptr_type_kind
    0x00001C73 store *__funcptr_type_kind >|2| 0x00001C71<, __funcptr_type_kind >|2| 0x00001C72<
    0x00001C74 call ag5 "openglGetProcAddress" (cstroflen 17 "glUniformui64vNV") *s8
    0x00001C75 gvar *__funcptr_type_kind 0x00000722
    0x00001C76 bc *s8 >|2| 0x00001C74< to __funcptr_type_kind
    0x00001C77 store *__funcptr_type_kind >|2| 0x00001C75<, __funcptr_type_kind >|2| 0x00001C76<
    0x00001C78 call ag5 "openglGetProcAddress" (cstroflen 18 "glUnlockArraysEXT") *s8
    0x00001C79 gvar *__funcptr_type_kind 0x00000723
    0x00001C7A bc *s8 >|2| 0x00001C78< to __funcptr_type_kind
    0x00001C7B store *__funcptr_type_kind >|2| 0x00001C79<, __funcptr_type_kind >|2| 0x00001C7A<
    0x00001C7C call ag5 "openglGetProcAddress" (cstroflen 23 "glUnmapObjectBufferATI") *s8
    0x00001C7D gvar *__funcptr_type_kind 0x00000724
    0x00001C7E bc *s8 >|2| 0x00001C7C< to __funcptr_type_kind
    0x00001C7F store *__funcptr_type_kind >|2| 0x00001C7D<, __funcptr_type_kind >|2| 0x00001C7E<
    0x00001C80 call ag5 "openglGetProcAddress" (cstroflen 22 "glUnmapTexture2DINTEL") *s8
    0x00001C81 gvar *__funcptr_type_kind 0x00000725
    0x00001C82 bc *s8 >|2| 0x00001C80< to __funcptr_type_kind
    0x00001C83 store *__funcptr_type_kind >|2| 0x00001C81<, __funcptr_type_kind >|2| 0x00001C82<
    0x00001C84 call ag5 "openglGetProcAddress" (cstroflen 24 "glUpdateObjectBufferATI") *s8
    0x00001C85 gvar *__funcptr_type_kind 0x00000726
    0x00001C86 bc *s8 >|2| 0x00001C84< to __funcptr_type_kind
    0x00001C87 store *__funcptr_type_kind >|2| 0x00001C85<, __funcptr_type_kind >|2| 0x00001C86<
    0x00001C88 call ag5 "openglGetProcAddress" (cstroflen 22 "glUseProgramObjectARB") *s8
    0x00001C89 gvar *__funcptr_type_kind 0x00000727
    0x00001C8A bc *s8 >|2| 0x00001C88< to __funcptr_type_kind
    0x00001C8B store *__funcptr_type_kind >|2| 0x00001C89<, __funcptr_type_kind >|2| 0x00001C8A<
    0x00001C8C call ag5 "openglGetProcAddress" (cstroflen 13 "glUseProgram") *s8
    0x00001C8D gvar *__funcptr_type_kind 0x00000728
    0x00001C8E bc *s8 >|2| 0x00001C8C< to __funcptr_type_kind
    0x00001C8F store *__funcptr_type_kind >|2| 0x00001C8D<, __funcptr_type_kind >|2| 0x00001C8E<
    0x00001C90 call ag5 "openglGetProcAddress" (cstroflen 19 "glUseProgramStages") *s8
    0x00001C91 gvar *__funcptr_type_kind 0x00000729
    0x00001C92 bc *s8 >|2| 0x00001C90< to __funcptr_type_kind
    0x00001C93 store *__funcptr_type_kind >|2| 0x00001C91<, __funcptr_type_kind >|2| 0x00001C92<
    0x00001C94 call ag5 "openglGetProcAddress" (cstroflen 22 "glUseShaderProgramEXT") *s8
    0x00001C95 gvar *__funcptr_type_kind 0x0000072A
    0x00001C96 bc *s8 >|2| 0x00001C94< to __funcptr_type_kind
    0x00001C97 store *__funcptr_type_kind >|2| 0x00001C95<, __funcptr_type_kind >|2| 0x00001C96<
    0x00001C98 call ag5 "openglGetProcAddress" (cstroflen 21 "glValidateProgramARB") *s8
    0x00001C99 gvar *__funcptr_type_kind 0x0000072B
    0x00001C9A bc *s8 >|2| 0x00001C98< to __funcptr_type_kind
    0x00001C9B store *__funcptr_type_kind >|2| 0x00001C99<, __funcptr_type_kind >|2| 0x00001C9A<
    0x00001C9C call ag5 "openglGetProcAddress" (cstroflen 26 "glValidateProgramPipeline") *s8
    0x00001C9D gvar *__funcptr_type_kind 0x0000072C
    0x00001C9E bc *s8 >|2| 0x00001C9C< to __funcptr_type_kind
    0x00001C9F store *__funcptr_type_kind >|2| 0x00001C9D<, __funcptr_type_kind >|2| 0x00001C9E<
    0x00001CA0 call ag5 "openglGetProcAddress" (cstroflen 18 "glValidateProgram") *s8
    0x00001CA1 gvar *__funcptr_type_kind 0x0000072D
    0x00001CA2 bc *s8 >|2| 0x00001CA0< to __funcptr_type_kind
    0x00001CA3 store *__funcptr_type_kind >|2| 0x00001CA1<, __funcptr_type_kind >|2| 0x00001CA2<
    0x00001CA4 call ag5 "openglGetProcAddress" (cstroflen 24 "glVariantArrayObjectATI") *s8
    0x00001CA5 gvar *__funcptr_type_kind 0x0000072E
    0x00001CA6 bc *s8 >|2| 0x00001CA4< to __funcptr_type_kind
    0x00001CA7 store *__funcptr_type_kind >|2| 0x00001CA5<, __funcptr_type_kind >|2| 0x00001CA6<
    0x00001CA8 call ag5 "openglGetProcAddress" (cstroflen 15 "glVariantbvEXT") *s8
    0x00001CA9 gvar *__funcptr_type_kind 0x0000072F
    0x00001CAA bc *s8 >|2| 0x00001CA8< to __funcptr_type_kind
    0x00001CAB store *__funcptr_type_kind >|2| 0x00001CA9<, __funcptr_type_kind >|2| 0x00001CAA<
    0x00001CAC call ag5 "openglGetProcAddress" (cstroflen 15 "glVariantdvEXT") *s8
    0x00001CAD gvar *__funcptr_type_kind 0x00000730
    0x00001CAE bc *s8 >|2| 0x00001CAC< to __funcptr_type_kind
    0x00001CAF store *__funcptr_type_kind >|2| 0x00001CAD<, __funcptr_type_kind >|2| 0x00001CAE<
    0x00001CB0 call ag5 "openglGetProcAddress" (cstroflen 15 "glVariantfvEXT") *s8
    0x00001CB1 gvar *__funcptr_type_kind 0x00000731
    0x00001CB2 bc *s8 >|2| 0x00001CB0< to __funcptr_type_kind
    0x00001CB3 store *__funcptr_type_kind >|2| 0x00001CB1<, __funcptr_type_kind >|2| 0x00001CB2<
    0x00001CB4 call ag5 "openglGetProcAddress" (cstroflen 15 "glVariantivEXT") *s8
    0x00001CB5 gvar *__funcptr_type_kind 0x00000732
    0x00001CB6 bc *s8 >|2| 0x00001CB4< to __funcptr_type_kind
    0x00001CB7 store *__funcptr_type_kind >|2| 0x00001CB5<, __funcptr_type_kind >|2| 0x00001CB6<
    0x00001CB8 call ag5 "openglGetProcAddress" (cstroflen 20 "glVariantPointerEXT") *s8
    0x00001CB9 gvar *__funcptr_type_kind 0x00000733
    0x00001CBA bc *s8 >|2| 0x00001CB8< to __funcptr_type_kind
    0x00001CBB store *__funcptr_type_kind >|2| 0x00001CB9<, __funcptr_type_kind >|2| 0x00001CBA<
    0x00001CBC call ag5 "openglGetProcAddress" (cstroflen 15 "glVariantsvEXT") *s8
    0x00001CBD gvar *__funcptr_type_kind 0x00000734
    0x00001CBE bc *s8 >|2| 0x00001CBC< to __funcptr_type_kind
    0x00001CBF store *__funcptr_type_kind >|2| 0x00001CBD<, __funcptr_type_kind >|2| 0x00001CBE<
    0x00001CC0 call ag5 "openglGetProcAddress" (cstroflen 16 "glVariantubvEXT") *s8
    0x00001CC1 gvar *__funcptr_type_kind 0x00000735
    0x00001CC2 bc *s8 >|2| 0x00001CC0< to __funcptr_type_kind
    0x00001CC3 store *__funcptr_type_kind >|2| 0x00001CC1<, __funcptr_type_kind >|2| 0x00001CC2<
    0x00001CC4 call ag5 "openglGetProcAddress" (cstroflen 16 "glVariantuivEXT") *s8
    0x00001CC5 gvar *__funcptr_type_kind 0x00000736
    0x00001CC6 bc *s8 >|2| 0x00001CC4< to __funcptr_type_kind
    0x00001CC7 store *__funcptr_type_kind >|2| 0x00001CC5<, __funcptr_type_kind >|2| 0x00001CC6<
    0x00001CC8 call ag5 "openglGetProcAddress" (cstroflen 16 "glVariantusvEXT") *s8
    0x00001CC9 gvar *__funcptr_type_kind 0x00000737
    0x00001CCA bc *s8 >|2| 0x00001CC8< to __funcptr_type_kind
    0x00001CCB store *__funcptr_type_kind >|2| 0x00001CC9<, __funcptr_type_kind >|2| 0x00001CCA<
    0x00001CCC call ag5 "openglGetProcAddress" (cstroflen 14 "glVDPAUFiniNV") *s8
    0x00001CCD gvar *__funcptr_type_kind 0x00000738
    0x00001CCE bc *s8 >|2| 0x00001CCC< to __funcptr_type_kind
    0x00001CCF store *__funcptr_type_kind >|2| 0x00001CCD<, __funcptr_type_kind >|2| 0x00001CCE<
    0x00001CD0 call ag5 "openglGetProcAddress" (cstroflen 22 "glVDPAUGetSurfaceivNV") *s8
    0x00001CD1 gvar *__funcptr_type_kind 0x00000739
    0x00001CD2 bc *s8 >|2| 0x00001CD0< to __funcptr_type_kind
    0x00001CD3 store *__funcptr_type_kind >|2| 0x00001CD1<, __funcptr_type_kind >|2| 0x00001CD2<
    0x00001CD4 call ag5 "openglGetProcAddress" (cstroflen 14 "glVDPAUInitNV") *s8
    0x00001CD5 gvar *__funcptr_type_kind 0x0000073A
    0x00001CD6 bc *s8 >|2| 0x00001CD4< to __funcptr_type_kind
    0x00001CD7 store *__funcptr_type_kind >|2| 0x00001CD5<, __funcptr_type_kind >|2| 0x00001CD6<
    0x00001CD8 call ag5 "openglGetProcAddress" (cstroflen 19 "glVDPAUIsSurfaceNV") *s8
    0x00001CD9 gvar *__funcptr_type_kind 0x0000073B
    0x00001CDA bc *s8 >|2| 0x00001CD8< to __funcptr_type_kind
    0x00001CDB store *__funcptr_type_kind >|2| 0x00001CD9<, __funcptr_type_kind >|2| 0x00001CDA<
    0x00001CDC call ag5 "openglGetProcAddress" (cstroflen 21 "glVDPAUMapSurfacesNV") *s8
    0x00001CDD gvar *__funcptr_type_kind 0x0000073C
    0x00001CDE bc *s8 >|2| 0x00001CDC< to __funcptr_type_kind
    0x00001CDF store *__funcptr_type_kind >|2| 0x00001CDD<, __funcptr_type_kind >|2| 0x00001CDE<
    0x00001CE0 call ag5 "openglGetProcAddress" (cstroflen 23 "glVDPAUSurfaceAccessNV") *s8
    0x00001CE1 gvar *__funcptr_type_kind 0x0000073D
    0x00001CE2 bc *s8 >|2| 0x00001CE0< to __funcptr_type_kind
    0x00001CE3 store *__funcptr_type_kind >|2| 0x00001CE1<, __funcptr_type_kind >|2| 0x00001CE2<
    0x00001CE4 call ag5 "openglGetProcAddress" (cstroflen 23 "glVDPAUUnmapSurfacesNV") *s8
    0x00001CE5 gvar *__funcptr_type_kind 0x0000073E
    0x00001CE6 bc *s8 >|2| 0x00001CE4< to __funcptr_type_kind
    0x00001CE7 store *__funcptr_type_kind >|2| 0x00001CE5<, __funcptr_type_kind >|2| 0x00001CE6<
    0x00001CE8 call ag5 "openglGetProcAddress" (cstroflen 27 "glVDPAUUnregisterSurfaceNV") *s8
    0x00001CE9 gvar *__funcptr_type_kind 0x0000073F
    0x00001CEA bc *s8 >|2| 0x00001CE8< to __funcptr_type_kind
    0x00001CEB store *__funcptr_type_kind >|2| 0x00001CE9<, __funcptr_type_kind >|2| 0x00001CEA<
    0x00001CEC call ag5 "openglGetProcAddress" (cstroflen 13 "glVertex2hNV") *s8
    0x00001CED gvar *__funcptr_type_kind 0x00000740
    0x00001CEE bc *s8 >|2| 0x00001CEC< to __funcptr_type_kind
    0x00001CEF store *__funcptr_type_kind >|2| 0x00001CED<, __funcptr_type_kind >|2| 0x00001CEE<
    0x00001CF0 call ag5 "openglGetProcAddress" (cstroflen 14 "glVertex2hvNV") *s8
    0x00001CF1 gvar *__funcptr_type_kind 0x00000741
    0x00001CF2 bc *s8 >|2| 0x00001CF0< to __funcptr_type_kind
    0x00001CF3 store *__funcptr_type_kind >|2| 0x00001CF1<, __funcptr_type_kind >|2| 0x00001CF2<
    0x00001CF4 call ag5 "openglGetProcAddress" (cstroflen 13 "glVertex3hNV") *s8
    0x00001CF5 gvar *__funcptr_type_kind 0x00000742
    0x00001CF6 bc *s8 >|2| 0x00001CF4< to __funcptr_type_kind
    0x00001CF7 store *__funcptr_type_kind >|2| 0x00001CF5<, __funcptr_type_kind >|2| 0x00001CF6<
    0x00001CF8 call ag5 "openglGetProcAddress" (cstroflen 14 "glVertex3hvNV") *s8
    0x00001CF9 gvar *__funcptr_type_kind 0x00000743
    0x00001CFA bc *s8 >|2| 0x00001CF8< to __funcptr_type_kind
    0x00001CFB store *__funcptr_type_kind >|2| 0x00001CF9<, __funcptr_type_kind >|2| 0x00001CFA<
    0x00001CFC call ag5 "openglGetProcAddress" (cstroflen 13 "glVertex4hNV") *s8
    0x00001CFD gvar *__funcptr_type_kind 0x00000744
    0x00001CFE bc *s8 >|2| 0x00001CFC< to __funcptr_type_kind
    0x00001CFF store *__funcptr_type_kind >|2| 0x00001CFD<, __funcptr_type_kind >|2| 0x00001CFE<
    0x00001D00 call ag5 "openglGetProcAddress" (cstroflen 14 "glVertex4hvNV") *s8
    0x00001D01 gvar *__funcptr_type_kind 0x00000745
    0x00001D02 bc *s8 >|2| 0x00001D00< to __funcptr_type_kind
    0x00001D03 store *__funcptr_type_kind >|2| 0x00001D01<, __funcptr_type_kind >|2| 0x00001D02<
    0x00001D04 call ag5 "openglGetProcAddress" (cstroflen 27 "glVertexArrayAttribBinding") *s8
    0x00001D05 gvar *__funcptr_type_kind 0x00000746
    0x00001D06 bc *s8 >|2| 0x00001D04< to __funcptr_type_kind
    0x00001D07 store *__funcptr_type_kind >|2| 0x00001D05<, __funcptr_type_kind >|2| 0x00001D06<
    0x00001D08 call ag5 "openglGetProcAddress" (cstroflen 26 "glVertexArrayAttribFormat") *s8
    0x00001D09 gvar *__funcptr_type_kind 0x00000747
    0x00001D0A bc *s8 >|2| 0x00001D08< to __funcptr_type_kind
    0x00001D0B store *__funcptr_type_kind >|2| 0x00001D09<, __funcptr_type_kind >|2| 0x00001D0A<
    0x00001D0C call ag5 "openglGetProcAddress" (cstroflen 27 "glVertexArrayAttribIFormat") *s8
    0x00001D0D gvar *__funcptr_type_kind 0x00000748
    0x00001D0E bc *s8 >|2| 0x00001D0C< to __funcptr_type_kind
    0x00001D0F store *__funcptr_type_kind >|2| 0x00001D0D<, __funcptr_type_kind >|2| 0x00001D0E<
    0x00001D10 call ag5 "openglGetProcAddress" (cstroflen 27 "glVertexArrayAttribLFormat") *s8
    0x00001D11 gvar *__funcptr_type_kind 0x00000749
    0x00001D12 bc *s8 >|2| 0x00001D10< to __funcptr_type_kind
    0x00001D13 store *__funcptr_type_kind >|2| 0x00001D11<, __funcptr_type_kind >|2| 0x00001D12<
    0x00001D14 call ag5 "openglGetProcAddress" (cstroflen 28 "glVertexArrayBindingDivisor") *s8
    0x00001D15 gvar *__funcptr_type_kind 0x0000074A
    0x00001D16 bc *s8 >|2| 0x00001D14< to __funcptr_type_kind
    0x00001D17 store *__funcptr_type_kind >|2| 0x00001D15<, __funcptr_type_kind >|2| 0x00001D16<
    0x00001D18 call ag5 "openglGetProcAddress" (cstroflen 33 "glVertexArrayBindVertexBufferEXT") *s8
    0x00001D19 gvar *__funcptr_type_kind 0x0000074B
    0x00001D1A bc *s8 >|2| 0x00001D18< to __funcptr_type_kind
    0x00001D1B store *__funcptr_type_kind >|2| 0x00001D19<, __funcptr_type_kind >|2| 0x00001D1A<
    0x00001D1C call ag5 "openglGetProcAddress" (cstroflen 28 "glVertexArrayColorOffsetEXT") *s8
    0x00001D1D gvar *__funcptr_type_kind 0x0000074C
    0x00001D1E bc *s8 >|2| 0x00001D1C< to __funcptr_type_kind
    0x00001D1F store *__funcptr_type_kind >|2| 0x00001D1D<, __funcptr_type_kind >|2| 0x00001D1E<
    0x00001D20 call ag5 "openglGetProcAddress" (cstroflen 31 "glVertexArrayEdgeFlagOffsetEXT") *s8
    0x00001D21 gvar *__funcptr_type_kind 0x0000074D
    0x00001D22 bc *s8 >|2| 0x00001D20< to __funcptr_type_kind
    0x00001D23 store *__funcptr_type_kind >|2| 0x00001D21<, __funcptr_type_kind >|2| 0x00001D22<
    0x00001D24 call ag5 "openglGetProcAddress" (cstroflen 27 "glVertexArrayElementBuffer") *s8
    0x00001D25 gvar *__funcptr_type_kind 0x0000074E
    0x00001D26 bc *s8 >|2| 0x00001D24< to __funcptr_type_kind
    0x00001D27 store *__funcptr_type_kind >|2| 0x00001D25<, __funcptr_type_kind >|2| 0x00001D26<
    0x00001D28 call ag5 "openglGetProcAddress" (cstroflen 31 "glVertexArrayFogCoordOffsetEXT") *s8
    0x00001D29 gvar *__funcptr_type_kind 0x0000074F
    0x00001D2A bc *s8 >|2| 0x00001D28< to __funcptr_type_kind
    0x00001D2B store *__funcptr_type_kind >|2| 0x00001D29<, __funcptr_type_kind >|2| 0x00001D2A<
    0x00001D2C call ag5 "openglGetProcAddress" (cstroflen 28 "glVertexArrayIndexOffsetEXT") *s8
    0x00001D2D gvar *__funcptr_type_kind 0x00000750
    0x00001D2E bc *s8 >|2| 0x00001D2C< to __funcptr_type_kind
    0x00001D2F store *__funcptr_type_kind >|2| 0x00001D2D<, __funcptr_type_kind >|2| 0x00001D2E<
    0x00001D30 call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayMultiTexCoordOffsetEXT") *s8
    0x00001D31 gvar *__funcptr_type_kind 0x00000751
    0x00001D32 bc *s8 >|2| 0x00001D30< to __funcptr_type_kind
    0x00001D33 store *__funcptr_type_kind >|2| 0x00001D31<, __funcptr_type_kind >|2| 0x00001D32<
    0x00001D34 call ag5 "openglGetProcAddress" (cstroflen 29 "glVertexArrayNormalOffsetEXT") *s8
    0x00001D35 gvar *__funcptr_type_kind 0x00000752
    0x00001D36 bc *s8 >|2| 0x00001D34< to __funcptr_type_kind
    0x00001D37 store *__funcptr_type_kind >|2| 0x00001D35<, __funcptr_type_kind >|2| 0x00001D36<
    0x00001D38 call ag5 "openglGetProcAddress" (cstroflen 29 "glVertexArrayParameteriAPPLE") *s8
    0x00001D39 gvar *__funcptr_type_kind 0x00000753
    0x00001D3A bc *s8 >|2| 0x00001D38< to __funcptr_type_kind
    0x00001D3B store *__funcptr_type_kind >|2| 0x00001D39<, __funcptr_type_kind >|2| 0x00001D3A<
    0x00001D3C call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexArrayRangeAPPLE") *s8
    0x00001D3D gvar *__funcptr_type_kind 0x00000754
    0x00001D3E bc *s8 >|2| 0x00001D3C< to __funcptr_type_kind
    0x00001D3F store *__funcptr_type_kind >|2| 0x00001D3D<, __funcptr_type_kind >|2| 0x00001D3E<
    0x00001D40 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexArrayRangeNV") *s8
    0x00001D41 gvar *__funcptr_type_kind 0x00000755
    0x00001D42 bc *s8 >|2| 0x00001D40< to __funcptr_type_kind
    0x00001D43 store *__funcptr_type_kind >|2| 0x00001D41<, __funcptr_type_kind >|2| 0x00001D42<
    0x00001D44 call ag5 "openglGetProcAddress" (cstroflen 37 "glVertexArraySecondaryColorOffsetEXT") *s8
    0x00001D45 gvar *__funcptr_type_kind 0x00000756
    0x00001D46 bc *s8 >|2| 0x00001D44< to __funcptr_type_kind
    0x00001D47 store *__funcptr_type_kind >|2| 0x00001D45<, __funcptr_type_kind >|2| 0x00001D46<
    0x00001D48 call ag5 "openglGetProcAddress" (cstroflen 31 "glVertexArrayTexCoordOffsetEXT") *s8
    0x00001D49 gvar *__funcptr_type_kind 0x00000757
    0x00001D4A bc *s8 >|2| 0x00001D48< to __funcptr_type_kind
    0x00001D4B store *__funcptr_type_kind >|2| 0x00001D49<, __funcptr_type_kind >|2| 0x00001D4A<
    0x00001D4C call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayVertexAttribBindingEXT") *s8
    0x00001D4D gvar *__funcptr_type_kind 0x00000758
    0x00001D4E bc *s8 >|2| 0x00001D4C< to __funcptr_type_kind
    0x00001D4F store *__funcptr_type_kind >|2| 0x00001D4D<, __funcptr_type_kind >|2| 0x00001D4E<
    0x00001D50 call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayVertexAttribDivisorEXT") *s8
    0x00001D51 gvar *__funcptr_type_kind 0x00000759
    0x00001D52 bc *s8 >|2| 0x00001D50< to __funcptr_type_kind
    0x00001D53 store *__funcptr_type_kind >|2| 0x00001D51<, __funcptr_type_kind >|2| 0x00001D52<
    0x00001D54 call ag5 "openglGetProcAddress" (cstroflen 35 "glVertexArrayVertexAttribFormatEXT") *s8
    0x00001D55 gvar *__funcptr_type_kind 0x0000075A
    0x00001D56 bc *s8 >|2| 0x00001D54< to __funcptr_type_kind
    0x00001D57 store *__funcptr_type_kind >|2| 0x00001D55<, __funcptr_type_kind >|2| 0x00001D56<
    0x00001D58 call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayVertexAttribIFormatEXT") *s8
    0x00001D59 gvar *__funcptr_type_kind 0x0000075B
    0x00001D5A bc *s8 >|2| 0x00001D58< to __funcptr_type_kind
    0x00001D5B store *__funcptr_type_kind >|2| 0x00001D59<, __funcptr_type_kind >|2| 0x00001D5A<
    0x00001D5C call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayVertexAttribIOffsetEXT") *s8
    0x00001D5D gvar *__funcptr_type_kind 0x0000075C
    0x00001D5E bc *s8 >|2| 0x00001D5C< to __funcptr_type_kind
    0x00001D5F store *__funcptr_type_kind >|2| 0x00001D5D<, __funcptr_type_kind >|2| 0x00001D5E<
    0x00001D60 call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayVertexAttribLFormatEXT") *s8
    0x00001D61 gvar *__funcptr_type_kind 0x0000075D
    0x00001D62 bc *s8 >|2| 0x00001D60< to __funcptr_type_kind
    0x00001D63 store *__funcptr_type_kind >|2| 0x00001D61<, __funcptr_type_kind >|2| 0x00001D62<
    0x00001D64 call ag5 "openglGetProcAddress" (cstroflen 36 "glVertexArrayVertexAttribLOffsetEXT") *s8
    0x00001D65 gvar *__funcptr_type_kind 0x0000075E
    0x00001D66 bc *s8 >|2| 0x00001D64< to __funcptr_type_kind
    0x00001D67 store *__funcptr_type_kind >|2| 0x00001D65<, __funcptr_type_kind >|2| 0x00001D66<
    0x00001D68 call ag5 "openglGetProcAddress" (cstroflen 35 "glVertexArrayVertexAttribOffsetEXT") *s8
    0x00001D69 gvar *__funcptr_type_kind 0x0000075F
    0x00001D6A bc *s8 >|2| 0x00001D68< to __funcptr_type_kind
    0x00001D6B store *__funcptr_type_kind >|2| 0x00001D69<, __funcptr_type_kind >|2| 0x00001D6A<
    0x00001D6C call ag5 "openglGetProcAddress" (cstroflen 37 "glVertexArrayVertexBindingDivisorEXT") *s8
    0x00001D6D gvar *__funcptr_type_kind 0x00000760
    0x00001D6E bc *s8 >|2| 0x00001D6C< to __funcptr_type_kind
    0x00001D6F store *__funcptr_type_kind >|2| 0x00001D6D<, __funcptr_type_kind >|2| 0x00001D6E<
    0x00001D70 call ag5 "openglGetProcAddress" (cstroflen 26 "glVertexArrayVertexBuffer") *s8
    0x00001D71 gvar *__funcptr_type_kind 0x00000761
    0x00001D72 bc *s8 >|2| 0x00001D70< to __funcptr_type_kind
    0x00001D73 store *__funcptr_type_kind >|2| 0x00001D71<, __funcptr_type_kind >|2| 0x00001D72<
    0x00001D74 call ag5 "openglGetProcAddress" (cstroflen 27 "glVertexArrayVertexBuffers") *s8
    0x00001D75 gvar *__funcptr_type_kind 0x00000762
    0x00001D76 bc *s8 >|2| 0x00001D74< to __funcptr_type_kind
    0x00001D77 store *__funcptr_type_kind >|2| 0x00001D75<, __funcptr_type_kind >|2| 0x00001D76<
    0x00001D78 call ag5 "openglGetProcAddress" (cstroflen 29 "glVertexArrayVertexOffsetEXT") *s8
    0x00001D79 gvar *__funcptr_type_kind 0x00000763
    0x00001D7A bc *s8 >|2| 0x00001D78< to __funcptr_type_kind
    0x00001D7B store *__funcptr_type_kind >|2| 0x00001D79<, __funcptr_type_kind >|2| 0x00001D7A<
    0x00001D7C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1dARB") *s8
    0x00001D7D gvar *__funcptr_type_kind 0x00000764
    0x00001D7E bc *s8 >|2| 0x00001D7C< to __funcptr_type_kind
    0x00001D7F store *__funcptr_type_kind >|2| 0x00001D7D<, __funcptr_type_kind >|2| 0x00001D7E<
    0x00001D80 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib1dNV") *s8
    0x00001D81 gvar *__funcptr_type_kind 0x00000765
    0x00001D82 bc *s8 >|2| 0x00001D80< to __funcptr_type_kind
    0x00001D83 store *__funcptr_type_kind >|2| 0x00001D81<, __funcptr_type_kind >|2| 0x00001D82<
    0x00001D84 call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib1d") *s8
    0x00001D85 gvar *__funcptr_type_kind 0x00000766
    0x00001D86 bc *s8 >|2| 0x00001D84< to __funcptr_type_kind
    0x00001D87 store *__funcptr_type_kind >|2| 0x00001D85<, __funcptr_type_kind >|2| 0x00001D86<
    0x00001D88 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib1dvARB") *s8
    0x00001D89 gvar *__funcptr_type_kind 0x00000767
    0x00001D8A bc *s8 >|2| 0x00001D88< to __funcptr_type_kind
    0x00001D8B store *__funcptr_type_kind >|2| 0x00001D89<, __funcptr_type_kind >|2| 0x00001D8A<
    0x00001D8C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1dvNV") *s8
    0x00001D8D gvar *__funcptr_type_kind 0x00000768
    0x00001D8E bc *s8 >|2| 0x00001D8C< to __funcptr_type_kind
    0x00001D8F store *__funcptr_type_kind >|2| 0x00001D8D<, __funcptr_type_kind >|2| 0x00001D8E<
    0x00001D90 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib1dv") *s8
    0x00001D91 gvar *__funcptr_type_kind 0x00000769
    0x00001D92 bc *s8 >|2| 0x00001D90< to __funcptr_type_kind
    0x00001D93 store *__funcptr_type_kind >|2| 0x00001D91<, __funcptr_type_kind >|2| 0x00001D92<
    0x00001D94 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1fARB") *s8
    0x00001D95 gvar *__funcptr_type_kind 0x0000076A
    0x00001D96 bc *s8 >|2| 0x00001D94< to __funcptr_type_kind
    0x00001D97 store *__funcptr_type_kind >|2| 0x00001D95<, __funcptr_type_kind >|2| 0x00001D96<
    0x00001D98 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib1fNV") *s8
    0x00001D99 gvar *__funcptr_type_kind 0x0000076B
    0x00001D9A bc *s8 >|2| 0x00001D98< to __funcptr_type_kind
    0x00001D9B store *__funcptr_type_kind >|2| 0x00001D99<, __funcptr_type_kind >|2| 0x00001D9A<
    0x00001D9C call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib1f") *s8
    0x00001D9D gvar *__funcptr_type_kind 0x0000076C
    0x00001D9E bc *s8 >|2| 0x00001D9C< to __funcptr_type_kind
    0x00001D9F store *__funcptr_type_kind >|2| 0x00001D9D<, __funcptr_type_kind >|2| 0x00001D9E<
    0x00001DA0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib1fvARB") *s8
    0x00001DA1 gvar *__funcptr_type_kind 0x0000076D
    0x00001DA2 bc *s8 >|2| 0x00001DA0< to __funcptr_type_kind
    0x00001DA3 store *__funcptr_type_kind >|2| 0x00001DA1<, __funcptr_type_kind >|2| 0x00001DA2<
    0x00001DA4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1fvNV") *s8
    0x00001DA5 gvar *__funcptr_type_kind 0x0000076E
    0x00001DA6 bc *s8 >|2| 0x00001DA4< to __funcptr_type_kind
    0x00001DA7 store *__funcptr_type_kind >|2| 0x00001DA5<, __funcptr_type_kind >|2| 0x00001DA6<
    0x00001DA8 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib1fv") *s8
    0x00001DA9 gvar *__funcptr_type_kind 0x0000076F
    0x00001DAA bc *s8 >|2| 0x00001DA8< to __funcptr_type_kind
    0x00001DAB store *__funcptr_type_kind >|2| 0x00001DA9<, __funcptr_type_kind >|2| 0x00001DAA<
    0x00001DAC call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib1hNV") *s8
    0x00001DAD gvar *__funcptr_type_kind 0x00000770
    0x00001DAE bc *s8 >|2| 0x00001DAC< to __funcptr_type_kind
    0x00001DAF store *__funcptr_type_kind >|2| 0x00001DAD<, __funcptr_type_kind >|2| 0x00001DAE<
    0x00001DB0 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1hvNV") *s8
    0x00001DB1 gvar *__funcptr_type_kind 0x00000771
    0x00001DB2 bc *s8 >|2| 0x00001DB0< to __funcptr_type_kind
    0x00001DB3 store *__funcptr_type_kind >|2| 0x00001DB1<, __funcptr_type_kind >|2| 0x00001DB2<
    0x00001DB4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1sARB") *s8
    0x00001DB5 gvar *__funcptr_type_kind 0x00000772
    0x00001DB6 bc *s8 >|2| 0x00001DB4< to __funcptr_type_kind
    0x00001DB7 store *__funcptr_type_kind >|2| 0x00001DB5<, __funcptr_type_kind >|2| 0x00001DB6<
    0x00001DB8 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib1sNV") *s8
    0x00001DB9 gvar *__funcptr_type_kind 0x00000773
    0x00001DBA bc *s8 >|2| 0x00001DB8< to __funcptr_type_kind
    0x00001DBB store *__funcptr_type_kind >|2| 0x00001DB9<, __funcptr_type_kind >|2| 0x00001DBA<
    0x00001DBC call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib1s") *s8
    0x00001DBD gvar *__funcptr_type_kind 0x00000774
    0x00001DBE bc *s8 >|2| 0x00001DBC< to __funcptr_type_kind
    0x00001DBF store *__funcptr_type_kind >|2| 0x00001DBD<, __funcptr_type_kind >|2| 0x00001DBE<
    0x00001DC0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib1svARB") *s8
    0x00001DC1 gvar *__funcptr_type_kind 0x00000775
    0x00001DC2 bc *s8 >|2| 0x00001DC0< to __funcptr_type_kind
    0x00001DC3 store *__funcptr_type_kind >|2| 0x00001DC1<, __funcptr_type_kind >|2| 0x00001DC2<
    0x00001DC4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib1svNV") *s8
    0x00001DC5 gvar *__funcptr_type_kind 0x00000776
    0x00001DC6 bc *s8 >|2| 0x00001DC4< to __funcptr_type_kind
    0x00001DC7 store *__funcptr_type_kind >|2| 0x00001DC5<, __funcptr_type_kind >|2| 0x00001DC6<
    0x00001DC8 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib1sv") *s8
    0x00001DC9 gvar *__funcptr_type_kind 0x00000777
    0x00001DCA bc *s8 >|2| 0x00001DC8< to __funcptr_type_kind
    0x00001DCB store *__funcptr_type_kind >|2| 0x00001DC9<, __funcptr_type_kind >|2| 0x00001DCA<
    0x00001DCC call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2dARB") *s8
    0x00001DCD gvar *__funcptr_type_kind 0x00000778
    0x00001DCE bc *s8 >|2| 0x00001DCC< to __funcptr_type_kind
    0x00001DCF store *__funcptr_type_kind >|2| 0x00001DCD<, __funcptr_type_kind >|2| 0x00001DCE<
    0x00001DD0 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib2dNV") *s8
    0x00001DD1 gvar *__funcptr_type_kind 0x00000779
    0x00001DD2 bc *s8 >|2| 0x00001DD0< to __funcptr_type_kind
    0x00001DD3 store *__funcptr_type_kind >|2| 0x00001DD1<, __funcptr_type_kind >|2| 0x00001DD2<
    0x00001DD4 call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib2d") *s8
    0x00001DD5 gvar *__funcptr_type_kind 0x0000077A
    0x00001DD6 bc *s8 >|2| 0x00001DD4< to __funcptr_type_kind
    0x00001DD7 store *__funcptr_type_kind >|2| 0x00001DD5<, __funcptr_type_kind >|2| 0x00001DD6<
    0x00001DD8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib2dvARB") *s8
    0x00001DD9 gvar *__funcptr_type_kind 0x0000077B
    0x00001DDA bc *s8 >|2| 0x00001DD8< to __funcptr_type_kind
    0x00001DDB store *__funcptr_type_kind >|2| 0x00001DD9<, __funcptr_type_kind >|2| 0x00001DDA<
    0x00001DDC call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2dvNV") *s8
    0x00001DDD gvar *__funcptr_type_kind 0x0000077C
    0x00001DDE bc *s8 >|2| 0x00001DDC< to __funcptr_type_kind
    0x00001DDF store *__funcptr_type_kind >|2| 0x00001DDD<, __funcptr_type_kind >|2| 0x00001DDE<
    0x00001DE0 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib2dv") *s8
    0x00001DE1 gvar *__funcptr_type_kind 0x0000077D
    0x00001DE2 bc *s8 >|2| 0x00001DE0< to __funcptr_type_kind
    0x00001DE3 store *__funcptr_type_kind >|2| 0x00001DE1<, __funcptr_type_kind >|2| 0x00001DE2<
    0x00001DE4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2fARB") *s8
    0x00001DE5 gvar *__funcptr_type_kind 0x0000077E
    0x00001DE6 bc *s8 >|2| 0x00001DE4< to __funcptr_type_kind
    0x00001DE7 store *__funcptr_type_kind >|2| 0x00001DE5<, __funcptr_type_kind >|2| 0x00001DE6<
    0x00001DE8 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib2fNV") *s8
    0x00001DE9 gvar *__funcptr_type_kind 0x0000077F
    0x00001DEA bc *s8 >|2| 0x00001DE8< to __funcptr_type_kind
    0x00001DEB store *__funcptr_type_kind >|2| 0x00001DE9<, __funcptr_type_kind >|2| 0x00001DEA<
    0x00001DEC call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib2f") *s8
    0x00001DED gvar *__funcptr_type_kind 0x00000780
    0x00001DEE bc *s8 >|2| 0x00001DEC< to __funcptr_type_kind
    0x00001DEF store *__funcptr_type_kind >|2| 0x00001DED<, __funcptr_type_kind >|2| 0x00001DEE<
    0x00001DF0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib2fvARB") *s8
    0x00001DF1 gvar *__funcptr_type_kind 0x00000781
    0x00001DF2 bc *s8 >|2| 0x00001DF0< to __funcptr_type_kind
    0x00001DF3 store *__funcptr_type_kind >|2| 0x00001DF1<, __funcptr_type_kind >|2| 0x00001DF2<
    0x00001DF4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2fvNV") *s8
    0x00001DF5 gvar *__funcptr_type_kind 0x00000782
    0x00001DF6 bc *s8 >|2| 0x00001DF4< to __funcptr_type_kind
    0x00001DF7 store *__funcptr_type_kind >|2| 0x00001DF5<, __funcptr_type_kind >|2| 0x00001DF6<
    0x00001DF8 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib2fv") *s8
    0x00001DF9 gvar *__funcptr_type_kind 0x00000783
    0x00001DFA bc *s8 >|2| 0x00001DF8< to __funcptr_type_kind
    0x00001DFB store *__funcptr_type_kind >|2| 0x00001DF9<, __funcptr_type_kind >|2| 0x00001DFA<
    0x00001DFC call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib2hNV") *s8
    0x00001DFD gvar *__funcptr_type_kind 0x00000784
    0x00001DFE bc *s8 >|2| 0x00001DFC< to __funcptr_type_kind
    0x00001DFF store *__funcptr_type_kind >|2| 0x00001DFD<, __funcptr_type_kind >|2| 0x00001DFE<
    0x00001E00 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2hvNV") *s8
    0x00001E01 gvar *__funcptr_type_kind 0x00000785
    0x00001E02 bc *s8 >|2| 0x00001E00< to __funcptr_type_kind
    0x00001E03 store *__funcptr_type_kind >|2| 0x00001E01<, __funcptr_type_kind >|2| 0x00001E02<
    0x00001E04 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2sARB") *s8
    0x00001E05 gvar *__funcptr_type_kind 0x00000786
    0x00001E06 bc *s8 >|2| 0x00001E04< to __funcptr_type_kind
    0x00001E07 store *__funcptr_type_kind >|2| 0x00001E05<, __funcptr_type_kind >|2| 0x00001E06<
    0x00001E08 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib2sNV") *s8
    0x00001E09 gvar *__funcptr_type_kind 0x00000787
    0x00001E0A bc *s8 >|2| 0x00001E08< to __funcptr_type_kind
    0x00001E0B store *__funcptr_type_kind >|2| 0x00001E09<, __funcptr_type_kind >|2| 0x00001E0A<
    0x00001E0C call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib2s") *s8
    0x00001E0D gvar *__funcptr_type_kind 0x00000788
    0x00001E0E bc *s8 >|2| 0x00001E0C< to __funcptr_type_kind
    0x00001E0F store *__funcptr_type_kind >|2| 0x00001E0D<, __funcptr_type_kind >|2| 0x00001E0E<
    0x00001E10 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib2svARB") *s8
    0x00001E11 gvar *__funcptr_type_kind 0x00000789
    0x00001E12 bc *s8 >|2| 0x00001E10< to __funcptr_type_kind
    0x00001E13 store *__funcptr_type_kind >|2| 0x00001E11<, __funcptr_type_kind >|2| 0x00001E12<
    0x00001E14 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib2svNV") *s8
    0x00001E15 gvar *__funcptr_type_kind 0x0000078A
    0x00001E16 bc *s8 >|2| 0x00001E14< to __funcptr_type_kind
    0x00001E17 store *__funcptr_type_kind >|2| 0x00001E15<, __funcptr_type_kind >|2| 0x00001E16<
    0x00001E18 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib2sv") *s8
    0x00001E19 gvar *__funcptr_type_kind 0x0000078B
    0x00001E1A bc *s8 >|2| 0x00001E18< to __funcptr_type_kind
    0x00001E1B store *__funcptr_type_kind >|2| 0x00001E19<, __funcptr_type_kind >|2| 0x00001E1A<
    0x00001E1C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3dARB") *s8
    0x00001E1D gvar *__funcptr_type_kind 0x0000078C
    0x00001E1E bc *s8 >|2| 0x00001E1C< to __funcptr_type_kind
    0x00001E1F store *__funcptr_type_kind >|2| 0x00001E1D<, __funcptr_type_kind >|2| 0x00001E1E<
    0x00001E20 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib3dNV") *s8
    0x00001E21 gvar *__funcptr_type_kind 0x0000078D
    0x00001E22 bc *s8 >|2| 0x00001E20< to __funcptr_type_kind
    0x00001E23 store *__funcptr_type_kind >|2| 0x00001E21<, __funcptr_type_kind >|2| 0x00001E22<
    0x00001E24 call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib3d") *s8
    0x00001E25 gvar *__funcptr_type_kind 0x0000078E
    0x00001E26 bc *s8 >|2| 0x00001E24< to __funcptr_type_kind
    0x00001E27 store *__funcptr_type_kind >|2| 0x00001E25<, __funcptr_type_kind >|2| 0x00001E26<
    0x00001E28 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib3dvARB") *s8
    0x00001E29 gvar *__funcptr_type_kind 0x0000078F
    0x00001E2A bc *s8 >|2| 0x00001E28< to __funcptr_type_kind
    0x00001E2B store *__funcptr_type_kind >|2| 0x00001E29<, __funcptr_type_kind >|2| 0x00001E2A<
    0x00001E2C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3dvNV") *s8
    0x00001E2D gvar *__funcptr_type_kind 0x00000790
    0x00001E2E bc *s8 >|2| 0x00001E2C< to __funcptr_type_kind
    0x00001E2F store *__funcptr_type_kind >|2| 0x00001E2D<, __funcptr_type_kind >|2| 0x00001E2E<
    0x00001E30 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib3dv") *s8
    0x00001E31 gvar *__funcptr_type_kind 0x00000791
    0x00001E32 bc *s8 >|2| 0x00001E30< to __funcptr_type_kind
    0x00001E33 store *__funcptr_type_kind >|2| 0x00001E31<, __funcptr_type_kind >|2| 0x00001E32<
    0x00001E34 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3fARB") *s8
    0x00001E35 gvar *__funcptr_type_kind 0x00000792
    0x00001E36 bc *s8 >|2| 0x00001E34< to __funcptr_type_kind
    0x00001E37 store *__funcptr_type_kind >|2| 0x00001E35<, __funcptr_type_kind >|2| 0x00001E36<
    0x00001E38 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib3fNV") *s8
    0x00001E39 gvar *__funcptr_type_kind 0x00000793
    0x00001E3A bc *s8 >|2| 0x00001E38< to __funcptr_type_kind
    0x00001E3B store *__funcptr_type_kind >|2| 0x00001E39<, __funcptr_type_kind >|2| 0x00001E3A<
    0x00001E3C call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib3f") *s8
    0x00001E3D gvar *__funcptr_type_kind 0x00000794
    0x00001E3E bc *s8 >|2| 0x00001E3C< to __funcptr_type_kind
    0x00001E3F store *__funcptr_type_kind >|2| 0x00001E3D<, __funcptr_type_kind >|2| 0x00001E3E<
    0x00001E40 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib3fvARB") *s8
    0x00001E41 gvar *__funcptr_type_kind 0x00000795
    0x00001E42 bc *s8 >|2| 0x00001E40< to __funcptr_type_kind
    0x00001E43 store *__funcptr_type_kind >|2| 0x00001E41<, __funcptr_type_kind >|2| 0x00001E42<
    0x00001E44 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3fvNV") *s8
    0x00001E45 gvar *__funcptr_type_kind 0x00000796
    0x00001E46 bc *s8 >|2| 0x00001E44< to __funcptr_type_kind
    0x00001E47 store *__funcptr_type_kind >|2| 0x00001E45<, __funcptr_type_kind >|2| 0x00001E46<
    0x00001E48 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib3fv") *s8
    0x00001E49 gvar *__funcptr_type_kind 0x00000797
    0x00001E4A bc *s8 >|2| 0x00001E48< to __funcptr_type_kind
    0x00001E4B store *__funcptr_type_kind >|2| 0x00001E49<, __funcptr_type_kind >|2| 0x00001E4A<
    0x00001E4C call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib3hNV") *s8
    0x00001E4D gvar *__funcptr_type_kind 0x00000798
    0x00001E4E bc *s8 >|2| 0x00001E4C< to __funcptr_type_kind
    0x00001E4F store *__funcptr_type_kind >|2| 0x00001E4D<, __funcptr_type_kind >|2| 0x00001E4E<
    0x00001E50 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3hvNV") *s8
    0x00001E51 gvar *__funcptr_type_kind 0x00000799
    0x00001E52 bc *s8 >|2| 0x00001E50< to __funcptr_type_kind
    0x00001E53 store *__funcptr_type_kind >|2| 0x00001E51<, __funcptr_type_kind >|2| 0x00001E52<
    0x00001E54 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3sARB") *s8
    0x00001E55 gvar *__funcptr_type_kind 0x0000079A
    0x00001E56 bc *s8 >|2| 0x00001E54< to __funcptr_type_kind
    0x00001E57 store *__funcptr_type_kind >|2| 0x00001E55<, __funcptr_type_kind >|2| 0x00001E56<
    0x00001E58 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib3sNV") *s8
    0x00001E59 gvar *__funcptr_type_kind 0x0000079B
    0x00001E5A bc *s8 >|2| 0x00001E58< to __funcptr_type_kind
    0x00001E5B store *__funcptr_type_kind >|2| 0x00001E59<, __funcptr_type_kind >|2| 0x00001E5A<
    0x00001E5C call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib3s") *s8
    0x00001E5D gvar *__funcptr_type_kind 0x0000079C
    0x00001E5E bc *s8 >|2| 0x00001E5C< to __funcptr_type_kind
    0x00001E5F store *__funcptr_type_kind >|2| 0x00001E5D<, __funcptr_type_kind >|2| 0x00001E5E<
    0x00001E60 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib3svARB") *s8
    0x00001E61 gvar *__funcptr_type_kind 0x0000079D
    0x00001E62 bc *s8 >|2| 0x00001E60< to __funcptr_type_kind
    0x00001E63 store *__funcptr_type_kind >|2| 0x00001E61<, __funcptr_type_kind >|2| 0x00001E62<
    0x00001E64 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib3svNV") *s8
    0x00001E65 gvar *__funcptr_type_kind 0x0000079E
    0x00001E66 bc *s8 >|2| 0x00001E64< to __funcptr_type_kind
    0x00001E67 store *__funcptr_type_kind >|2| 0x00001E65<, __funcptr_type_kind >|2| 0x00001E66<
    0x00001E68 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib3sv") *s8
    0x00001E69 gvar *__funcptr_type_kind 0x0000079F
    0x00001E6A bc *s8 >|2| 0x00001E68< to __funcptr_type_kind
    0x00001E6B store *__funcptr_type_kind >|2| 0x00001E69<, __funcptr_type_kind >|2| 0x00001E6A<
    0x00001E6C call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib4bvARB") *s8
    0x00001E6D gvar *__funcptr_type_kind 0x000007A0
    0x00001E6E bc *s8 >|2| 0x00001E6C< to __funcptr_type_kind
    0x00001E6F store *__funcptr_type_kind >|2| 0x00001E6D<, __funcptr_type_kind >|2| 0x00001E6E<
    0x00001E70 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib4bv") *s8
    0x00001E71 gvar *__funcptr_type_kind 0x000007A1
    0x00001E72 bc *s8 >|2| 0x00001E70< to __funcptr_type_kind
    0x00001E73 store *__funcptr_type_kind >|2| 0x00001E71<, __funcptr_type_kind >|2| 0x00001E72<
    0x00001E74 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4dARB") *s8
    0x00001E75 gvar *__funcptr_type_kind 0x000007A2
    0x00001E76 bc *s8 >|2| 0x00001E74< to __funcptr_type_kind
    0x00001E77 store *__funcptr_type_kind >|2| 0x00001E75<, __funcptr_type_kind >|2| 0x00001E76<
    0x00001E78 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4dNV") *s8
    0x00001E79 gvar *__funcptr_type_kind 0x000007A3
    0x00001E7A bc *s8 >|2| 0x00001E78< to __funcptr_type_kind
    0x00001E7B store *__funcptr_type_kind >|2| 0x00001E79<, __funcptr_type_kind >|2| 0x00001E7A<
    0x00001E7C call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib4d") *s8
    0x00001E7D gvar *__funcptr_type_kind 0x000007A4
    0x00001E7E bc *s8 >|2| 0x00001E7C< to __funcptr_type_kind
    0x00001E7F store *__funcptr_type_kind >|2| 0x00001E7D<, __funcptr_type_kind >|2| 0x00001E7E<
    0x00001E80 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib4dvARB") *s8
    0x00001E81 gvar *__funcptr_type_kind 0x000007A5
    0x00001E82 bc *s8 >|2| 0x00001E80< to __funcptr_type_kind
    0x00001E83 store *__funcptr_type_kind >|2| 0x00001E81<, __funcptr_type_kind >|2| 0x00001E82<
    0x00001E84 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4dvNV") *s8
    0x00001E85 gvar *__funcptr_type_kind 0x000007A6
    0x00001E86 bc *s8 >|2| 0x00001E84< to __funcptr_type_kind
    0x00001E87 store *__funcptr_type_kind >|2| 0x00001E85<, __funcptr_type_kind >|2| 0x00001E86<
    0x00001E88 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib4dv") *s8
    0x00001E89 gvar *__funcptr_type_kind 0x000007A7
    0x00001E8A bc *s8 >|2| 0x00001E88< to __funcptr_type_kind
    0x00001E8B store *__funcptr_type_kind >|2| 0x00001E89<, __funcptr_type_kind >|2| 0x00001E8A<
    0x00001E8C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4fARB") *s8
    0x00001E8D gvar *__funcptr_type_kind 0x000007A8
    0x00001E8E bc *s8 >|2| 0x00001E8C< to __funcptr_type_kind
    0x00001E8F store *__funcptr_type_kind >|2| 0x00001E8D<, __funcptr_type_kind >|2| 0x00001E8E<
    0x00001E90 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4fNV") *s8
    0x00001E91 gvar *__funcptr_type_kind 0x000007A9
    0x00001E92 bc *s8 >|2| 0x00001E90< to __funcptr_type_kind
    0x00001E93 store *__funcptr_type_kind >|2| 0x00001E91<, __funcptr_type_kind >|2| 0x00001E92<
    0x00001E94 call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib4f") *s8
    0x00001E95 gvar *__funcptr_type_kind 0x000007AA
    0x00001E96 bc *s8 >|2| 0x00001E94< to __funcptr_type_kind
    0x00001E97 store *__funcptr_type_kind >|2| 0x00001E95<, __funcptr_type_kind >|2| 0x00001E96<
    0x00001E98 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib4fvARB") *s8
    0x00001E99 gvar *__funcptr_type_kind 0x000007AB
    0x00001E9A bc *s8 >|2| 0x00001E98< to __funcptr_type_kind
    0x00001E9B store *__funcptr_type_kind >|2| 0x00001E99<, __funcptr_type_kind >|2| 0x00001E9A<
    0x00001E9C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4fvNV") *s8
    0x00001E9D gvar *__funcptr_type_kind 0x000007AC
    0x00001E9E bc *s8 >|2| 0x00001E9C< to __funcptr_type_kind
    0x00001E9F store *__funcptr_type_kind >|2| 0x00001E9D<, __funcptr_type_kind >|2| 0x00001E9E<
    0x00001EA0 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib4fv") *s8
    0x00001EA1 gvar *__funcptr_type_kind 0x000007AD
    0x00001EA2 bc *s8 >|2| 0x00001EA0< to __funcptr_type_kind
    0x00001EA3 store *__funcptr_type_kind >|2| 0x00001EA1<, __funcptr_type_kind >|2| 0x00001EA2<
    0x00001EA4 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4hNV") *s8
    0x00001EA5 gvar *__funcptr_type_kind 0x000007AE
    0x00001EA6 bc *s8 >|2| 0x00001EA4< to __funcptr_type_kind
    0x00001EA7 store *__funcptr_type_kind >|2| 0x00001EA5<, __funcptr_type_kind >|2| 0x00001EA6<
    0x00001EA8 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4hvNV") *s8
    0x00001EA9 gvar *__funcptr_type_kind 0x000007AF
    0x00001EAA bc *s8 >|2| 0x00001EA8< to __funcptr_type_kind
    0x00001EAB store *__funcptr_type_kind >|2| 0x00001EA9<, __funcptr_type_kind >|2| 0x00001EAA<
    0x00001EAC call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib4ivARB") *s8
    0x00001EAD gvar *__funcptr_type_kind 0x000007B0
    0x00001EAE bc *s8 >|2| 0x00001EAC< to __funcptr_type_kind
    0x00001EAF store *__funcptr_type_kind >|2| 0x00001EAD<, __funcptr_type_kind >|2| 0x00001EAE<
    0x00001EB0 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib4iv") *s8
    0x00001EB1 gvar *__funcptr_type_kind 0x000007B1
    0x00001EB2 bc *s8 >|2| 0x00001EB0< to __funcptr_type_kind
    0x00001EB3 store *__funcptr_type_kind >|2| 0x00001EB1<, __funcptr_type_kind >|2| 0x00001EB2<
    0x00001EB4 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4NbvARB") *s8
    0x00001EB5 gvar *__funcptr_type_kind 0x000007B2
    0x00001EB6 bc *s8 >|2| 0x00001EB4< to __funcptr_type_kind
    0x00001EB7 store *__funcptr_type_kind >|2| 0x00001EB5<, __funcptr_type_kind >|2| 0x00001EB6<
    0x00001EB8 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4Nbv") *s8
    0x00001EB9 gvar *__funcptr_type_kind 0x000007B3
    0x00001EBA bc *s8 >|2| 0x00001EB8< to __funcptr_type_kind
    0x00001EBB store *__funcptr_type_kind >|2| 0x00001EB9<, __funcptr_type_kind >|2| 0x00001EBA<
    0x00001EBC call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4NivARB") *s8
    0x00001EBD gvar *__funcptr_type_kind 0x000007B4
    0x00001EBE bc *s8 >|2| 0x00001EBC< to __funcptr_type_kind
    0x00001EBF store *__funcptr_type_kind >|2| 0x00001EBD<, __funcptr_type_kind >|2| 0x00001EBE<
    0x00001EC0 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4Niv") *s8
    0x00001EC1 gvar *__funcptr_type_kind 0x000007B5
    0x00001EC2 bc *s8 >|2| 0x00001EC0< to __funcptr_type_kind
    0x00001EC3 store *__funcptr_type_kind >|2| 0x00001EC1<, __funcptr_type_kind >|2| 0x00001EC2<
    0x00001EC4 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4NsvARB") *s8
    0x00001EC5 gvar *__funcptr_type_kind 0x000007B6
    0x00001EC6 bc *s8 >|2| 0x00001EC4< to __funcptr_type_kind
    0x00001EC7 store *__funcptr_type_kind >|2| 0x00001EC5<, __funcptr_type_kind >|2| 0x00001EC6<
    0x00001EC8 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4Nsv") *s8
    0x00001EC9 gvar *__funcptr_type_kind 0x000007B7
    0x00001ECA bc *s8 >|2| 0x00001EC8< to __funcptr_type_kind
    0x00001ECB store *__funcptr_type_kind >|2| 0x00001EC9<, __funcptr_type_kind >|2| 0x00001ECA<
    0x00001ECC call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4NubARB") *s8
    0x00001ECD gvar *__funcptr_type_kind 0x000007B8
    0x00001ECE bc *s8 >|2| 0x00001ECC< to __funcptr_type_kind
    0x00001ECF store *__funcptr_type_kind >|2| 0x00001ECD<, __funcptr_type_kind >|2| 0x00001ECE<
    0x00001ED0 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4Nub") *s8
    0x00001ED1 gvar *__funcptr_type_kind 0x000007B9
    0x00001ED2 bc *s8 >|2| 0x00001ED0< to __funcptr_type_kind
    0x00001ED3 store *__funcptr_type_kind >|2| 0x00001ED1<, __funcptr_type_kind >|2| 0x00001ED2<
    0x00001ED4 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttrib4NubvARB") *s8
    0x00001ED5 gvar *__funcptr_type_kind 0x000007BA
    0x00001ED6 bc *s8 >|2| 0x00001ED4< to __funcptr_type_kind
    0x00001ED7 store *__funcptr_type_kind >|2| 0x00001ED5<, __funcptr_type_kind >|2| 0x00001ED6<
    0x00001ED8 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4Nubv") *s8
    0x00001ED9 gvar *__funcptr_type_kind 0x000007BB
    0x00001EDA bc *s8 >|2| 0x00001ED8< to __funcptr_type_kind
    0x00001EDB store *__funcptr_type_kind >|2| 0x00001ED9<, __funcptr_type_kind >|2| 0x00001EDA<
    0x00001EDC call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttrib4NuivARB") *s8
    0x00001EDD gvar *__funcptr_type_kind 0x000007BC
    0x00001EDE bc *s8 >|2| 0x00001EDC< to __funcptr_type_kind
    0x00001EDF store *__funcptr_type_kind >|2| 0x00001EDD<, __funcptr_type_kind >|2| 0x00001EDE<
    0x00001EE0 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4Nuiv") *s8
    0x00001EE1 gvar *__funcptr_type_kind 0x000007BD
    0x00001EE2 bc *s8 >|2| 0x00001EE0< to __funcptr_type_kind
    0x00001EE3 store *__funcptr_type_kind >|2| 0x00001EE1<, __funcptr_type_kind >|2| 0x00001EE2<
    0x00001EE4 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttrib4NusvARB") *s8
    0x00001EE5 gvar *__funcptr_type_kind 0x000007BE
    0x00001EE6 bc *s8 >|2| 0x00001EE4< to __funcptr_type_kind
    0x00001EE7 store *__funcptr_type_kind >|2| 0x00001EE5<, __funcptr_type_kind >|2| 0x00001EE6<
    0x00001EE8 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4Nusv") *s8
    0x00001EE9 gvar *__funcptr_type_kind 0x000007BF
    0x00001EEA bc *s8 >|2| 0x00001EE8< to __funcptr_type_kind
    0x00001EEB store *__funcptr_type_kind >|2| 0x00001EE9<, __funcptr_type_kind >|2| 0x00001EEA<
    0x00001EEC call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4sARB") *s8
    0x00001EED gvar *__funcptr_type_kind 0x000007C0
    0x00001EEE bc *s8 >|2| 0x00001EEC< to __funcptr_type_kind
    0x00001EEF store *__funcptr_type_kind >|2| 0x00001EED<, __funcptr_type_kind >|2| 0x00001EEE<
    0x00001EF0 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4sNV") *s8
    0x00001EF1 gvar *__funcptr_type_kind 0x000007C1
    0x00001EF2 bc *s8 >|2| 0x00001EF0< to __funcptr_type_kind
    0x00001EF3 store *__funcptr_type_kind >|2| 0x00001EF1<, __funcptr_type_kind >|2| 0x00001EF2<
    0x00001EF4 call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexAttrib4s") *s8
    0x00001EF5 gvar *__funcptr_type_kind 0x000007C2
    0x00001EF6 bc *s8 >|2| 0x00001EF4< to __funcptr_type_kind
    0x00001EF7 store *__funcptr_type_kind >|2| 0x00001EF5<, __funcptr_type_kind >|2| 0x00001EF6<
    0x00001EF8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib4svARB") *s8
    0x00001EF9 gvar *__funcptr_type_kind 0x000007C3
    0x00001EFA bc *s8 >|2| 0x00001EF8< to __funcptr_type_kind
    0x00001EFB store *__funcptr_type_kind >|2| 0x00001EF9<, __funcptr_type_kind >|2| 0x00001EFA<
    0x00001EFC call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4svNV") *s8
    0x00001EFD gvar *__funcptr_type_kind 0x000007C4
    0x00001EFE bc *s8 >|2| 0x00001EFC< to __funcptr_type_kind
    0x00001EFF store *__funcptr_type_kind >|2| 0x00001EFD<, __funcptr_type_kind >|2| 0x00001EFE<
    0x00001F00 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttrib4sv") *s8
    0x00001F01 gvar *__funcptr_type_kind 0x000007C5
    0x00001F02 bc *s8 >|2| 0x00001F00< to __funcptr_type_kind
    0x00001F03 store *__funcptr_type_kind >|2| 0x00001F01<, __funcptr_type_kind >|2| 0x00001F02<
    0x00001F04 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttrib4ubNV") *s8
    0x00001F05 gvar *__funcptr_type_kind 0x000007C6
    0x00001F06 bc *s8 >|2| 0x00001F04< to __funcptr_type_kind
    0x00001F07 store *__funcptr_type_kind >|2| 0x00001F05<, __funcptr_type_kind >|2| 0x00001F06<
    0x00001F08 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4ubvARB") *s8
    0x00001F09 gvar *__funcptr_type_kind 0x000007C7
    0x00001F0A bc *s8 >|2| 0x00001F08< to __funcptr_type_kind
    0x00001F0B store *__funcptr_type_kind >|2| 0x00001F09<, __funcptr_type_kind >|2| 0x00001F0A<
    0x00001F0C call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttrib4ubvNV") *s8
    0x00001F0D gvar *__funcptr_type_kind 0x000007C8
    0x00001F0E bc *s8 >|2| 0x00001F0C< to __funcptr_type_kind
    0x00001F0F store *__funcptr_type_kind >|2| 0x00001F0D<, __funcptr_type_kind >|2| 0x00001F0E<
    0x00001F10 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4ubv") *s8
    0x00001F11 gvar *__funcptr_type_kind 0x000007C9
    0x00001F12 bc *s8 >|2| 0x00001F10< to __funcptr_type_kind
    0x00001F13 store *__funcptr_type_kind >|2| 0x00001F11<, __funcptr_type_kind >|2| 0x00001F12<
    0x00001F14 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4uivARB") *s8
    0x00001F15 gvar *__funcptr_type_kind 0x000007CA
    0x00001F16 bc *s8 >|2| 0x00001F14< to __funcptr_type_kind
    0x00001F17 store *__funcptr_type_kind >|2| 0x00001F15<, __funcptr_type_kind >|2| 0x00001F16<
    0x00001F18 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4uiv") *s8
    0x00001F19 gvar *__funcptr_type_kind 0x000007CB
    0x00001F1A bc *s8 >|2| 0x00001F18< to __funcptr_type_kind
    0x00001F1B store *__funcptr_type_kind >|2| 0x00001F19<, __funcptr_type_kind >|2| 0x00001F1A<
    0x00001F1C call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttrib4usvARB") *s8
    0x00001F1D gvar *__funcptr_type_kind 0x000007CC
    0x00001F1E bc *s8 >|2| 0x00001F1C< to __funcptr_type_kind
    0x00001F1F store *__funcptr_type_kind >|2| 0x00001F1D<, __funcptr_type_kind >|2| 0x00001F1E<
    0x00001F20 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttrib4usv") *s8
    0x00001F21 gvar *__funcptr_type_kind 0x000007CD
    0x00001F22 bc *s8 >|2| 0x00001F20< to __funcptr_type_kind
    0x00001F23 store *__funcptr_type_kind >|2| 0x00001F21<, __funcptr_type_kind >|2| 0x00001F22<
    0x00001F24 call ag5 "openglGetProcAddress" (cstroflen 29 "glVertexAttribArrayObjectATI") *s8
    0x00001F25 gvar *__funcptr_type_kind 0x000007CE
    0x00001F26 bc *s8 >|2| 0x00001F24< to __funcptr_type_kind
    0x00001F27 store *__funcptr_type_kind >|2| 0x00001F25<, __funcptr_type_kind >|2| 0x00001F26<
    0x00001F28 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribBinding") *s8
    0x00001F29 gvar *__funcptr_type_kind 0x000007CF
    0x00001F2A bc *s8 >|2| 0x00001F28< to __funcptr_type_kind
    0x00001F2B store *__funcptr_type_kind >|2| 0x00001F29<, __funcptr_type_kind >|2| 0x00001F2A<
    0x00001F2C call ag5 "openglGetProcAddress" (cstroflen 27 "glVertexAttribDivisorANGLE") *s8
    0x00001F2D gvar *__funcptr_type_kind 0x000007D0
    0x00001F2E bc *s8 >|2| 0x00001F2C< to __funcptr_type_kind
    0x00001F2F store *__funcptr_type_kind >|2| 0x00001F2D<, __funcptr_type_kind >|2| 0x00001F2E<
    0x00001F30 call ag5 "openglGetProcAddress" (cstroflen 25 "glVertexAttribDivisorARB") *s8
    0x00001F31 gvar *__funcptr_type_kind 0x000007D1
    0x00001F32 bc *s8 >|2| 0x00001F30< to __funcptr_type_kind
    0x00001F33 store *__funcptr_type_kind >|2| 0x00001F31<, __funcptr_type_kind >|2| 0x00001F32<
    0x00001F34 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribDivisor") *s8
    0x00001F35 gvar *__funcptr_type_kind 0x000007D2
    0x00001F36 bc *s8 >|2| 0x00001F34< to __funcptr_type_kind
    0x00001F37 store *__funcptr_type_kind >|2| 0x00001F35<, __funcptr_type_kind >|2| 0x00001F36<
    0x00001F38 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribFormatNV") *s8
    0x00001F39 gvar *__funcptr_type_kind 0x000007D3
    0x00001F3A bc *s8 >|2| 0x00001F38< to __funcptr_type_kind
    0x00001F3B store *__funcptr_type_kind >|2| 0x00001F39<, __funcptr_type_kind >|2| 0x00001F3A<
    0x00001F3C call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribFormat") *s8
    0x00001F3D gvar *__funcptr_type_kind 0x000007D4
    0x00001F3E bc *s8 >|2| 0x00001F3C< to __funcptr_type_kind
    0x00001F3F store *__funcptr_type_kind >|2| 0x00001F3D<, __funcptr_type_kind >|2| 0x00001F3E<
    0x00001F40 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribI1iEXT") *s8
    0x00001F41 gvar *__funcptr_type_kind 0x000007D5
    0x00001F42 bc *s8 >|2| 0x00001F40< to __funcptr_type_kind
    0x00001F43 store *__funcptr_type_kind >|2| 0x00001F41<, __funcptr_type_kind >|2| 0x00001F42<
    0x00001F44 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribI1i") *s8
    0x00001F45 gvar *__funcptr_type_kind 0x000007D6
    0x00001F46 bc *s8 >|2| 0x00001F44< to __funcptr_type_kind
    0x00001F47 store *__funcptr_type_kind >|2| 0x00001F45<, __funcptr_type_kind >|2| 0x00001F46<
    0x00001F48 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI1ivEXT") *s8
    0x00001F49 gvar *__funcptr_type_kind 0x000007D7
    0x00001F4A bc *s8 >|2| 0x00001F48< to __funcptr_type_kind
    0x00001F4B store *__funcptr_type_kind >|2| 0x00001F49<, __funcptr_type_kind >|2| 0x00001F4A<
    0x00001F4C call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI1iv") *s8
    0x00001F4D gvar *__funcptr_type_kind 0x000007D8
    0x00001F4E bc *s8 >|2| 0x00001F4C< to __funcptr_type_kind
    0x00001F4F store *__funcptr_type_kind >|2| 0x00001F4D<, __funcptr_type_kind >|2| 0x00001F4E<
    0x00001F50 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI1uiEXT") *s8
    0x00001F51 gvar *__funcptr_type_kind 0x000007D9
    0x00001F52 bc *s8 >|2| 0x00001F50< to __funcptr_type_kind
    0x00001F53 store *__funcptr_type_kind >|2| 0x00001F51<, __funcptr_type_kind >|2| 0x00001F52<
    0x00001F54 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI1ui") *s8
    0x00001F55 gvar *__funcptr_type_kind 0x000007DA
    0x00001F56 bc *s8 >|2| 0x00001F54< to __funcptr_type_kind
    0x00001F57 store *__funcptr_type_kind >|2| 0x00001F55<, __funcptr_type_kind >|2| 0x00001F56<
    0x00001F58 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribI1uivEXT") *s8
    0x00001F59 gvar *__funcptr_type_kind 0x000007DB
    0x00001F5A bc *s8 >|2| 0x00001F58< to __funcptr_type_kind
    0x00001F5B store *__funcptr_type_kind >|2| 0x00001F59<, __funcptr_type_kind >|2| 0x00001F5A<
    0x00001F5C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribI1uiv") *s8
    0x00001F5D gvar *__funcptr_type_kind 0x000007DC
    0x00001F5E bc *s8 >|2| 0x00001F5C< to __funcptr_type_kind
    0x00001F5F store *__funcptr_type_kind >|2| 0x00001F5D<, __funcptr_type_kind >|2| 0x00001F5E<
    0x00001F60 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribI2iEXT") *s8
    0x00001F61 gvar *__funcptr_type_kind 0x000007DD
    0x00001F62 bc *s8 >|2| 0x00001F60< to __funcptr_type_kind
    0x00001F63 store *__funcptr_type_kind >|2| 0x00001F61<, __funcptr_type_kind >|2| 0x00001F62<
    0x00001F64 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribI2i") *s8
    0x00001F65 gvar *__funcptr_type_kind 0x000007DE
    0x00001F66 bc *s8 >|2| 0x00001F64< to __funcptr_type_kind
    0x00001F67 store *__funcptr_type_kind >|2| 0x00001F65<, __funcptr_type_kind >|2| 0x00001F66<
    0x00001F68 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI2ivEXT") *s8
    0x00001F69 gvar *__funcptr_type_kind 0x000007DF
    0x00001F6A bc *s8 >|2| 0x00001F68< to __funcptr_type_kind
    0x00001F6B store *__funcptr_type_kind >|2| 0x00001F69<, __funcptr_type_kind >|2| 0x00001F6A<
    0x00001F6C call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI2iv") *s8
    0x00001F6D gvar *__funcptr_type_kind 0x000007E0
    0x00001F6E bc *s8 >|2| 0x00001F6C< to __funcptr_type_kind
    0x00001F6F store *__funcptr_type_kind >|2| 0x00001F6D<, __funcptr_type_kind >|2| 0x00001F6E<
    0x00001F70 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI2uiEXT") *s8
    0x00001F71 gvar *__funcptr_type_kind 0x000007E1
    0x00001F72 bc *s8 >|2| 0x00001F70< to __funcptr_type_kind
    0x00001F73 store *__funcptr_type_kind >|2| 0x00001F71<, __funcptr_type_kind >|2| 0x00001F72<
    0x00001F74 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI2ui") *s8
    0x00001F75 gvar *__funcptr_type_kind 0x000007E2
    0x00001F76 bc *s8 >|2| 0x00001F74< to __funcptr_type_kind
    0x00001F77 store *__funcptr_type_kind >|2| 0x00001F75<, __funcptr_type_kind >|2| 0x00001F76<
    0x00001F78 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribI2uivEXT") *s8
    0x00001F79 gvar *__funcptr_type_kind 0x000007E3
    0x00001F7A bc *s8 >|2| 0x00001F78< to __funcptr_type_kind
    0x00001F7B store *__funcptr_type_kind >|2| 0x00001F79<, __funcptr_type_kind >|2| 0x00001F7A<
    0x00001F7C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribI2uiv") *s8
    0x00001F7D gvar *__funcptr_type_kind 0x000007E4
    0x00001F7E bc *s8 >|2| 0x00001F7C< to __funcptr_type_kind
    0x00001F7F store *__funcptr_type_kind >|2| 0x00001F7D<, __funcptr_type_kind >|2| 0x00001F7E<
    0x00001F80 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribI3iEXT") *s8
    0x00001F81 gvar *__funcptr_type_kind 0x000007E5
    0x00001F82 bc *s8 >|2| 0x00001F80< to __funcptr_type_kind
    0x00001F83 store *__funcptr_type_kind >|2| 0x00001F81<, __funcptr_type_kind >|2| 0x00001F82<
    0x00001F84 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribI3i") *s8
    0x00001F85 gvar *__funcptr_type_kind 0x000007E6
    0x00001F86 bc *s8 >|2| 0x00001F84< to __funcptr_type_kind
    0x00001F87 store *__funcptr_type_kind >|2| 0x00001F85<, __funcptr_type_kind >|2| 0x00001F86<
    0x00001F88 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI3ivEXT") *s8
    0x00001F89 gvar *__funcptr_type_kind 0x000007E7
    0x00001F8A bc *s8 >|2| 0x00001F88< to __funcptr_type_kind
    0x00001F8B store *__funcptr_type_kind >|2| 0x00001F89<, __funcptr_type_kind >|2| 0x00001F8A<
    0x00001F8C call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI3iv") *s8
    0x00001F8D gvar *__funcptr_type_kind 0x000007E8
    0x00001F8E bc *s8 >|2| 0x00001F8C< to __funcptr_type_kind
    0x00001F8F store *__funcptr_type_kind >|2| 0x00001F8D<, __funcptr_type_kind >|2| 0x00001F8E<
    0x00001F90 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI3uiEXT") *s8
    0x00001F91 gvar *__funcptr_type_kind 0x000007E9
    0x00001F92 bc *s8 >|2| 0x00001F90< to __funcptr_type_kind
    0x00001F93 store *__funcptr_type_kind >|2| 0x00001F91<, __funcptr_type_kind >|2| 0x00001F92<
    0x00001F94 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI3ui") *s8
    0x00001F95 gvar *__funcptr_type_kind 0x000007EA
    0x00001F96 bc *s8 >|2| 0x00001F94< to __funcptr_type_kind
    0x00001F97 store *__funcptr_type_kind >|2| 0x00001F95<, __funcptr_type_kind >|2| 0x00001F96<
    0x00001F98 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribI3uivEXT") *s8
    0x00001F99 gvar *__funcptr_type_kind 0x000007EB
    0x00001F9A bc *s8 >|2| 0x00001F98< to __funcptr_type_kind
    0x00001F9B store *__funcptr_type_kind >|2| 0x00001F99<, __funcptr_type_kind >|2| 0x00001F9A<
    0x00001F9C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribI3uiv") *s8
    0x00001F9D gvar *__funcptr_type_kind 0x000007EC
    0x00001F9E bc *s8 >|2| 0x00001F9C< to __funcptr_type_kind
    0x00001F9F store *__funcptr_type_kind >|2| 0x00001F9D<, __funcptr_type_kind >|2| 0x00001F9E<
    0x00001FA0 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI4bvEXT") *s8
    0x00001FA1 gvar *__funcptr_type_kind 0x000007ED
    0x00001FA2 bc *s8 >|2| 0x00001FA0< to __funcptr_type_kind
    0x00001FA3 store *__funcptr_type_kind >|2| 0x00001FA1<, __funcptr_type_kind >|2| 0x00001FA2<
    0x00001FA4 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI4bv") *s8
    0x00001FA5 gvar *__funcptr_type_kind 0x000007EE
    0x00001FA6 bc *s8 >|2| 0x00001FA4< to __funcptr_type_kind
    0x00001FA7 store *__funcptr_type_kind >|2| 0x00001FA5<, __funcptr_type_kind >|2| 0x00001FA6<
    0x00001FA8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribI4iEXT") *s8
    0x00001FA9 gvar *__funcptr_type_kind 0x000007EF
    0x00001FAA bc *s8 >|2| 0x00001FA8< to __funcptr_type_kind
    0x00001FAB store *__funcptr_type_kind >|2| 0x00001FA9<, __funcptr_type_kind >|2| 0x00001FAA<
    0x00001FAC call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribI4i") *s8
    0x00001FAD gvar *__funcptr_type_kind 0x000007F0
    0x00001FAE bc *s8 >|2| 0x00001FAC< to __funcptr_type_kind
    0x00001FAF store *__funcptr_type_kind >|2| 0x00001FAD<, __funcptr_type_kind >|2| 0x00001FAE<
    0x00001FB0 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI4ivEXT") *s8
    0x00001FB1 gvar *__funcptr_type_kind 0x000007F1
    0x00001FB2 bc *s8 >|2| 0x00001FB0< to __funcptr_type_kind
    0x00001FB3 store *__funcptr_type_kind >|2| 0x00001FB1<, __funcptr_type_kind >|2| 0x00001FB2<
    0x00001FB4 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI4iv") *s8
    0x00001FB5 gvar *__funcptr_type_kind 0x000007F2
    0x00001FB6 bc *s8 >|2| 0x00001FB4< to __funcptr_type_kind
    0x00001FB7 store *__funcptr_type_kind >|2| 0x00001FB5<, __funcptr_type_kind >|2| 0x00001FB6<
    0x00001FB8 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI4svEXT") *s8
    0x00001FB9 gvar *__funcptr_type_kind 0x000007F3
    0x00001FBA bc *s8 >|2| 0x00001FB8< to __funcptr_type_kind
    0x00001FBB store *__funcptr_type_kind >|2| 0x00001FB9<, __funcptr_type_kind >|2| 0x00001FBA<
    0x00001FBC call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI4sv") *s8
    0x00001FBD gvar *__funcptr_type_kind 0x000007F4
    0x00001FBE bc *s8 >|2| 0x00001FBC< to __funcptr_type_kind
    0x00001FBF store *__funcptr_type_kind >|2| 0x00001FBD<, __funcptr_type_kind >|2| 0x00001FBE<
    0x00001FC0 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribI4ubvEXT") *s8
    0x00001FC1 gvar *__funcptr_type_kind 0x000007F5
    0x00001FC2 bc *s8 >|2| 0x00001FC0< to __funcptr_type_kind
    0x00001FC3 store *__funcptr_type_kind >|2| 0x00001FC1<, __funcptr_type_kind >|2| 0x00001FC2<
    0x00001FC4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribI4ubv") *s8
    0x00001FC5 gvar *__funcptr_type_kind 0x000007F6
    0x00001FC6 bc *s8 >|2| 0x00001FC4< to __funcptr_type_kind
    0x00001FC7 store *__funcptr_type_kind >|2| 0x00001FC5<, __funcptr_type_kind >|2| 0x00001FC6<
    0x00001FC8 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribI4uiEXT") *s8
    0x00001FC9 gvar *__funcptr_type_kind 0x000007F7
    0x00001FCA bc *s8 >|2| 0x00001FC8< to __funcptr_type_kind
    0x00001FCB store *__funcptr_type_kind >|2| 0x00001FC9<, __funcptr_type_kind >|2| 0x00001FCA<
    0x00001FCC call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribI4ui") *s8
    0x00001FCD gvar *__funcptr_type_kind 0x000007F8
    0x00001FCE bc *s8 >|2| 0x00001FCC< to __funcptr_type_kind
    0x00001FCF store *__funcptr_type_kind >|2| 0x00001FCD<, __funcptr_type_kind >|2| 0x00001FCE<
    0x00001FD0 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribI4uivEXT") *s8
    0x00001FD1 gvar *__funcptr_type_kind 0x000007F9
    0x00001FD2 bc *s8 >|2| 0x00001FD0< to __funcptr_type_kind
    0x00001FD3 store *__funcptr_type_kind >|2| 0x00001FD1<, __funcptr_type_kind >|2| 0x00001FD2<
    0x00001FD4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribI4uiv") *s8
    0x00001FD5 gvar *__funcptr_type_kind 0x000007FA
    0x00001FD6 bc *s8 >|2| 0x00001FD4< to __funcptr_type_kind
    0x00001FD7 store *__funcptr_type_kind >|2| 0x00001FD5<, __funcptr_type_kind >|2| 0x00001FD6<
    0x00001FD8 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribI4usvEXT") *s8
    0x00001FD9 gvar *__funcptr_type_kind 0x000007FB
    0x00001FDA bc *s8 >|2| 0x00001FD8< to __funcptr_type_kind
    0x00001FDB store *__funcptr_type_kind >|2| 0x00001FD9<, __funcptr_type_kind >|2| 0x00001FDA<
    0x00001FDC call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribI4usv") *s8
    0x00001FDD gvar *__funcptr_type_kind 0x000007FC
    0x00001FDE bc *s8 >|2| 0x00001FDC< to __funcptr_type_kind
    0x00001FDF store *__funcptr_type_kind >|2| 0x00001FDD<, __funcptr_type_kind >|2| 0x00001FDE<
    0x00001FE0 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribIFormatNV") *s8
    0x00001FE1 gvar *__funcptr_type_kind 0x000007FD
    0x00001FE2 bc *s8 >|2| 0x00001FE0< to __funcptr_type_kind
    0x00001FE3 store *__funcptr_type_kind >|2| 0x00001FE1<, __funcptr_type_kind >|2| 0x00001FE2<
    0x00001FE4 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribIFormat") *s8
    0x00001FE5 gvar *__funcptr_type_kind 0x000007FE
    0x00001FE6 bc *s8 >|2| 0x00001FE4< to __funcptr_type_kind
    0x00001FE7 store *__funcptr_type_kind >|2| 0x00001FE5<, __funcptr_type_kind >|2| 0x00001FE6<
    0x00001FE8 call ag5 "openglGetProcAddress" (cstroflen 26 "glVertexAttribIPointerEXT") *s8
    0x00001FE9 gvar *__funcptr_type_kind 0x000007FF
    0x00001FEA bc *s8 >|2| 0x00001FE8< to __funcptr_type_kind
    0x00001FEB store *__funcptr_type_kind >|2| 0x00001FE9<, __funcptr_type_kind >|2| 0x00001FEA<
    0x00001FEC call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribIPointer") *s8
    0x00001FED gvar *__funcptr_type_kind 0x00000800
    0x00001FEE bc *s8 >|2| 0x00001FEC< to __funcptr_type_kind
    0x00001FEF store *__funcptr_type_kind >|2| 0x00001FED<, __funcptr_type_kind >|2| 0x00001FEE<
    0x00001FF0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribL1dEXT") *s8
    0x00001FF1 gvar *__funcptr_type_kind 0x00000801
    0x00001FF2 bc *s8 >|2| 0x00001FF0< to __funcptr_type_kind
    0x00001FF3 store *__funcptr_type_kind >|2| 0x00001FF1<, __funcptr_type_kind >|2| 0x00001FF2<
    0x00001FF4 call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribL1d") *s8
    0x00001FF5 gvar *__funcptr_type_kind 0x00000802
    0x00001FF6 bc *s8 >|2| 0x00001FF4< to __funcptr_type_kind
    0x00001FF7 store *__funcptr_type_kind >|2| 0x00001FF5<, __funcptr_type_kind >|2| 0x00001FF6<
    0x00001FF8 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL1dvEXT") *s8
    0x00001FF9 gvar *__funcptr_type_kind 0x00000803
    0x00001FFA bc *s8 >|2| 0x00001FF8< to __funcptr_type_kind
    0x00001FFB store *__funcptr_type_kind >|2| 0x00001FF9<, __funcptr_type_kind >|2| 0x00001FFA<
    0x00001FFC call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribL1dv") *s8
    0x00001FFD gvar *__funcptr_type_kind 0x00000804
    0x00001FFE bc *s8 >|2| 0x00001FFC< to __funcptr_type_kind
    0x00001FFF store *__funcptr_type_kind >|2| 0x00001FFD<, __funcptr_type_kind >|2| 0x00001FFE<
    0x00002000 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL1i64NV") *s8
    0x00002001 gvar *__funcptr_type_kind 0x00000805
    0x00002002 bc *s8 >|2| 0x00002000< to __funcptr_type_kind
    0x00002003 store *__funcptr_type_kind >|2| 0x00002001<, __funcptr_type_kind >|2| 0x00002002<
    0x00002004 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL1i64vNV") *s8
    0x00002005 gvar *__funcptr_type_kind 0x00000806
    0x00002006 bc *s8 >|2| 0x00002004< to __funcptr_type_kind
    0x00002007 store *__funcptr_type_kind >|2| 0x00002005<, __funcptr_type_kind >|2| 0x00002006<
    0x00002008 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribL1ui64ARB") *s8
    0x00002009 gvar *__funcptr_type_kind 0x00000807
    0x0000200A bc *s8 >|2| 0x00002008< to __funcptr_type_kind
    0x0000200B store *__funcptr_type_kind >|2| 0x00002009<, __funcptr_type_kind >|2| 0x0000200A<
    0x0000200C call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL1ui64NV") *s8
    0x0000200D gvar *__funcptr_type_kind 0x00000808
    0x0000200E bc *s8 >|2| 0x0000200C< to __funcptr_type_kind
    0x0000200F store *__funcptr_type_kind >|2| 0x0000200D<, __funcptr_type_kind >|2| 0x0000200E<
    0x00002010 call ag5 "openglGetProcAddress" (cstroflen 25 "glVertexAttribL1ui64vARB") *s8
    0x00002011 gvar *__funcptr_type_kind 0x00000809
    0x00002012 bc *s8 >|2| 0x00002010< to __funcptr_type_kind
    0x00002013 store *__funcptr_type_kind >|2| 0x00002011<, __funcptr_type_kind >|2| 0x00002012<
    0x00002014 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribL1ui64vNV") *s8
    0x00002015 gvar *__funcptr_type_kind 0x0000080A
    0x00002016 bc *s8 >|2| 0x00002014< to __funcptr_type_kind
    0x00002017 store *__funcptr_type_kind >|2| 0x00002015<, __funcptr_type_kind >|2| 0x00002016<
    0x00002018 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribL2dEXT") *s8
    0x00002019 gvar *__funcptr_type_kind 0x0000080B
    0x0000201A bc *s8 >|2| 0x00002018< to __funcptr_type_kind
    0x0000201B store *__funcptr_type_kind >|2| 0x00002019<, __funcptr_type_kind >|2| 0x0000201A<
    0x0000201C call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribL2d") *s8
    0x0000201D gvar *__funcptr_type_kind 0x0000080C
    0x0000201E bc *s8 >|2| 0x0000201C< to __funcptr_type_kind
    0x0000201F store *__funcptr_type_kind >|2| 0x0000201D<, __funcptr_type_kind >|2| 0x0000201E<
    0x00002020 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL2dvEXT") *s8
    0x00002021 gvar *__funcptr_type_kind 0x0000080D
    0x00002022 bc *s8 >|2| 0x00002020< to __funcptr_type_kind
    0x00002023 store *__funcptr_type_kind >|2| 0x00002021<, __funcptr_type_kind >|2| 0x00002022<
    0x00002024 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribL2dv") *s8
    0x00002025 gvar *__funcptr_type_kind 0x0000080E
    0x00002026 bc *s8 >|2| 0x00002024< to __funcptr_type_kind
    0x00002027 store *__funcptr_type_kind >|2| 0x00002025<, __funcptr_type_kind >|2| 0x00002026<
    0x00002028 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL2i64NV") *s8
    0x00002029 gvar *__funcptr_type_kind 0x0000080F
    0x0000202A bc *s8 >|2| 0x00002028< to __funcptr_type_kind
    0x0000202B store *__funcptr_type_kind >|2| 0x00002029<, __funcptr_type_kind >|2| 0x0000202A<
    0x0000202C call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL2i64vNV") *s8
    0x0000202D gvar *__funcptr_type_kind 0x00000810
    0x0000202E bc *s8 >|2| 0x0000202C< to __funcptr_type_kind
    0x0000202F store *__funcptr_type_kind >|2| 0x0000202D<, __funcptr_type_kind >|2| 0x0000202E<
    0x00002030 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL2ui64NV") *s8
    0x00002031 gvar *__funcptr_type_kind 0x00000811
    0x00002032 bc *s8 >|2| 0x00002030< to __funcptr_type_kind
    0x00002033 store *__funcptr_type_kind >|2| 0x00002031<, __funcptr_type_kind >|2| 0x00002032<
    0x00002034 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribL2ui64vNV") *s8
    0x00002035 gvar *__funcptr_type_kind 0x00000812
    0x00002036 bc *s8 >|2| 0x00002034< to __funcptr_type_kind
    0x00002037 store *__funcptr_type_kind >|2| 0x00002035<, __funcptr_type_kind >|2| 0x00002036<
    0x00002038 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribL3dEXT") *s8
    0x00002039 gvar *__funcptr_type_kind 0x00000813
    0x0000203A bc *s8 >|2| 0x00002038< to __funcptr_type_kind
    0x0000203B store *__funcptr_type_kind >|2| 0x00002039<, __funcptr_type_kind >|2| 0x0000203A<
    0x0000203C call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribL3d") *s8
    0x0000203D gvar *__funcptr_type_kind 0x00000814
    0x0000203E bc *s8 >|2| 0x0000203C< to __funcptr_type_kind
    0x0000203F store *__funcptr_type_kind >|2| 0x0000203D<, __funcptr_type_kind >|2| 0x0000203E<
    0x00002040 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL3dvEXT") *s8
    0x00002041 gvar *__funcptr_type_kind 0x00000815
    0x00002042 bc *s8 >|2| 0x00002040< to __funcptr_type_kind
    0x00002043 store *__funcptr_type_kind >|2| 0x00002041<, __funcptr_type_kind >|2| 0x00002042<
    0x00002044 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribL3dv") *s8
    0x00002045 gvar *__funcptr_type_kind 0x00000816
    0x00002046 bc *s8 >|2| 0x00002044< to __funcptr_type_kind
    0x00002047 store *__funcptr_type_kind >|2| 0x00002045<, __funcptr_type_kind >|2| 0x00002046<
    0x00002048 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL3i64NV") *s8
    0x00002049 gvar *__funcptr_type_kind 0x00000817
    0x0000204A bc *s8 >|2| 0x00002048< to __funcptr_type_kind
    0x0000204B store *__funcptr_type_kind >|2| 0x00002049<, __funcptr_type_kind >|2| 0x0000204A<
    0x0000204C call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL3i64vNV") *s8
    0x0000204D gvar *__funcptr_type_kind 0x00000818
    0x0000204E bc *s8 >|2| 0x0000204C< to __funcptr_type_kind
    0x0000204F store *__funcptr_type_kind >|2| 0x0000204D<, __funcptr_type_kind >|2| 0x0000204E<
    0x00002050 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL3ui64NV") *s8
    0x00002051 gvar *__funcptr_type_kind 0x00000819
    0x00002052 bc *s8 >|2| 0x00002050< to __funcptr_type_kind
    0x00002053 store *__funcptr_type_kind >|2| 0x00002051<, __funcptr_type_kind >|2| 0x00002052<
    0x00002054 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribL3ui64vNV") *s8
    0x00002055 gvar *__funcptr_type_kind 0x0000081A
    0x00002056 bc *s8 >|2| 0x00002054< to __funcptr_type_kind
    0x00002057 store *__funcptr_type_kind >|2| 0x00002055<, __funcptr_type_kind >|2| 0x00002056<
    0x00002058 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribL4dEXT") *s8
    0x00002059 gvar *__funcptr_type_kind 0x0000081B
    0x0000205A bc *s8 >|2| 0x00002058< to __funcptr_type_kind
    0x0000205B store *__funcptr_type_kind >|2| 0x00002059<, __funcptr_type_kind >|2| 0x0000205A<
    0x0000205C call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexAttribL4d") *s8
    0x0000205D gvar *__funcptr_type_kind 0x0000081C
    0x0000205E bc *s8 >|2| 0x0000205C< to __funcptr_type_kind
    0x0000205F store *__funcptr_type_kind >|2| 0x0000205D<, __funcptr_type_kind >|2| 0x0000205E<
    0x00002060 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL4dvEXT") *s8
    0x00002061 gvar *__funcptr_type_kind 0x0000081D
    0x00002062 bc *s8 >|2| 0x00002060< to __funcptr_type_kind
    0x00002063 store *__funcptr_type_kind >|2| 0x00002061<, __funcptr_type_kind >|2| 0x00002062<
    0x00002064 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribL4dv") *s8
    0x00002065 gvar *__funcptr_type_kind 0x0000081E
    0x00002066 bc *s8 >|2| 0x00002064< to __funcptr_type_kind
    0x00002067 store *__funcptr_type_kind >|2| 0x00002065<, __funcptr_type_kind >|2| 0x00002066<
    0x00002068 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribL4i64NV") *s8
    0x00002069 gvar *__funcptr_type_kind 0x0000081F
    0x0000206A bc *s8 >|2| 0x00002068< to __funcptr_type_kind
    0x0000206B store *__funcptr_type_kind >|2| 0x00002069<, __funcptr_type_kind >|2| 0x0000206A<
    0x0000206C call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL4i64vNV") *s8
    0x0000206D gvar *__funcptr_type_kind 0x00000820
    0x0000206E bc *s8 >|2| 0x0000206C< to __funcptr_type_kind
    0x0000206F store *__funcptr_type_kind >|2| 0x0000206D<, __funcptr_type_kind >|2| 0x0000206E<
    0x00002070 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribL4ui64NV") *s8
    0x00002071 gvar *__funcptr_type_kind 0x00000821
    0x00002072 bc *s8 >|2| 0x00002070< to __funcptr_type_kind
    0x00002073 store *__funcptr_type_kind >|2| 0x00002071<, __funcptr_type_kind >|2| 0x00002072<
    0x00002074 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribL4ui64vNV") *s8
    0x00002075 gvar *__funcptr_type_kind 0x00000822
    0x00002076 bc *s8 >|2| 0x00002074< to __funcptr_type_kind
    0x00002077 store *__funcptr_type_kind >|2| 0x00002075<, __funcptr_type_kind >|2| 0x00002076<
    0x00002078 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribLFormatNV") *s8
    0x00002079 gvar *__funcptr_type_kind 0x00000823
    0x0000207A bc *s8 >|2| 0x00002078< to __funcptr_type_kind
    0x0000207B store *__funcptr_type_kind >|2| 0x00002079<, __funcptr_type_kind >|2| 0x0000207A<
    0x0000207C call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribLFormat") *s8
    0x0000207D gvar *__funcptr_type_kind 0x00000824
    0x0000207E bc *s8 >|2| 0x0000207C< to __funcptr_type_kind
    0x0000207F store *__funcptr_type_kind >|2| 0x0000207D<, __funcptr_type_kind >|2| 0x0000207E<
    0x00002080 call ag5 "openglGetProcAddress" (cstroflen 26 "glVertexAttribLPointerEXT") *s8
    0x00002081 gvar *__funcptr_type_kind 0x00000825
    0x00002082 bc *s8 >|2| 0x00002080< to __funcptr_type_kind
    0x00002083 store *__funcptr_type_kind >|2| 0x00002081<, __funcptr_type_kind >|2| 0x00002082<
    0x00002084 call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexAttribLPointer") *s8
    0x00002085 gvar *__funcptr_type_kind 0x00000826
    0x00002086 bc *s8 >|2| 0x00002084< to __funcptr_type_kind
    0x00002087 store *__funcptr_type_kind >|2| 0x00002085<, __funcptr_type_kind >|2| 0x00002086<
    0x00002088 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribP1ui") *s8
    0x00002089 gvar *__funcptr_type_kind 0x00000827
    0x0000208A bc *s8 >|2| 0x00002088< to __funcptr_type_kind
    0x0000208B store *__funcptr_type_kind >|2| 0x00002089<, __funcptr_type_kind >|2| 0x0000208A<
    0x0000208C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribP1uiv") *s8
    0x0000208D gvar *__funcptr_type_kind 0x00000828
    0x0000208E bc *s8 >|2| 0x0000208C< to __funcptr_type_kind
    0x0000208F store *__funcptr_type_kind >|2| 0x0000208D<, __funcptr_type_kind >|2| 0x0000208E<
    0x00002090 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribP2ui") *s8
    0x00002091 gvar *__funcptr_type_kind 0x00000829
    0x00002092 bc *s8 >|2| 0x00002090< to __funcptr_type_kind
    0x00002093 store *__funcptr_type_kind >|2| 0x00002091<, __funcptr_type_kind >|2| 0x00002092<
    0x00002094 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribP2uiv") *s8
    0x00002095 gvar *__funcptr_type_kind 0x0000082A
    0x00002096 bc *s8 >|2| 0x00002094< to __funcptr_type_kind
    0x00002097 store *__funcptr_type_kind >|2| 0x00002095<, __funcptr_type_kind >|2| 0x00002096<
    0x00002098 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribP3ui") *s8
    0x00002099 gvar *__funcptr_type_kind 0x0000082B
    0x0000209A bc *s8 >|2| 0x00002098< to __funcptr_type_kind
    0x0000209B store *__funcptr_type_kind >|2| 0x00002099<, __funcptr_type_kind >|2| 0x0000209A<
    0x0000209C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribP3uiv") *s8
    0x0000209D gvar *__funcptr_type_kind 0x0000082C
    0x0000209E bc *s8 >|2| 0x0000209C< to __funcptr_type_kind
    0x0000209F store *__funcptr_type_kind >|2| 0x0000209D<, __funcptr_type_kind >|2| 0x0000209E<
    0x000020A0 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexAttribP4ui") *s8
    0x000020A1 gvar *__funcptr_type_kind 0x0000082D
    0x000020A2 bc *s8 >|2| 0x000020A0< to __funcptr_type_kind
    0x000020A3 store *__funcptr_type_kind >|2| 0x000020A1<, __funcptr_type_kind >|2| 0x000020A2<
    0x000020A4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexAttribP4uiv") *s8
    0x000020A5 gvar *__funcptr_type_kind 0x0000082E
    0x000020A6 bc *s8 >|2| 0x000020A4< to __funcptr_type_kind
    0x000020A7 store *__funcptr_type_kind >|2| 0x000020A5<, __funcptr_type_kind >|2| 0x000020A6<
    0x000020A8 call ag5 "openglGetProcAddress" (cstroflen 28 "glVertexAttribParameteriAMD") *s8
    0x000020A9 gvar *__funcptr_type_kind 0x0000082F
    0x000020AA bc *s8 >|2| 0x000020A8< to __funcptr_type_kind
    0x000020AB store *__funcptr_type_kind >|2| 0x000020A9<, __funcptr_type_kind >|2| 0x000020AA<
    0x000020AC call ag5 "openglGetProcAddress" (cstroflen 25 "glVertexAttribPointerARB") *s8
    0x000020AD gvar *__funcptr_type_kind 0x00000830
    0x000020AE bc *s8 >|2| 0x000020AC< to __funcptr_type_kind
    0x000020AF store *__funcptr_type_kind >|2| 0x000020AD<, __funcptr_type_kind >|2| 0x000020AE<
    0x000020B0 call ag5 "openglGetProcAddress" (cstroflen 24 "glVertexAttribPointerNV") *s8
    0x000020B1 gvar *__funcptr_type_kind 0x00000831
    0x000020B2 bc *s8 >|2| 0x000020B0< to __funcptr_type_kind
    0x000020B3 store *__funcptr_type_kind >|2| 0x000020B1<, __funcptr_type_kind >|2| 0x000020B2<
    0x000020B4 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribPointer") *s8
    0x000020B5 gvar *__funcptr_type_kind 0x00000832
    0x000020B6 bc *s8 >|2| 0x000020B4< to __funcptr_type_kind
    0x000020B7 store *__funcptr_type_kind >|2| 0x000020B5<, __funcptr_type_kind >|2| 0x000020B6<
    0x000020B8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs1dvNV") *s8
    0x000020B9 gvar *__funcptr_type_kind 0x00000833
    0x000020BA bc *s8 >|2| 0x000020B8< to __funcptr_type_kind
    0x000020BB store *__funcptr_type_kind >|2| 0x000020B9<, __funcptr_type_kind >|2| 0x000020BA<
    0x000020BC call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs1fvNV") *s8
    0x000020BD gvar *__funcptr_type_kind 0x00000834
    0x000020BE bc *s8 >|2| 0x000020BC< to __funcptr_type_kind
    0x000020BF store *__funcptr_type_kind >|2| 0x000020BD<, __funcptr_type_kind >|2| 0x000020BE<
    0x000020C0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs1hvNV") *s8
    0x000020C1 gvar *__funcptr_type_kind 0x00000835
    0x000020C2 bc *s8 >|2| 0x000020C0< to __funcptr_type_kind
    0x000020C3 store *__funcptr_type_kind >|2| 0x000020C1<, __funcptr_type_kind >|2| 0x000020C2<
    0x000020C4 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs1svNV") *s8
    0x000020C5 gvar *__funcptr_type_kind 0x00000836
    0x000020C6 bc *s8 >|2| 0x000020C4< to __funcptr_type_kind
    0x000020C7 store *__funcptr_type_kind >|2| 0x000020C5<, __funcptr_type_kind >|2| 0x000020C6<
    0x000020C8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs2dvNV") *s8
    0x000020C9 gvar *__funcptr_type_kind 0x00000837
    0x000020CA bc *s8 >|2| 0x000020C8< to __funcptr_type_kind
    0x000020CB store *__funcptr_type_kind >|2| 0x000020C9<, __funcptr_type_kind >|2| 0x000020CA<
    0x000020CC call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs2fvNV") *s8
    0x000020CD gvar *__funcptr_type_kind 0x00000838
    0x000020CE bc *s8 >|2| 0x000020CC< to __funcptr_type_kind
    0x000020CF store *__funcptr_type_kind >|2| 0x000020CD<, __funcptr_type_kind >|2| 0x000020CE<
    0x000020D0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs2hvNV") *s8
    0x000020D1 gvar *__funcptr_type_kind 0x00000839
    0x000020D2 bc *s8 >|2| 0x000020D0< to __funcptr_type_kind
    0x000020D3 store *__funcptr_type_kind >|2| 0x000020D1<, __funcptr_type_kind >|2| 0x000020D2<
    0x000020D4 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs2svNV") *s8
    0x000020D5 gvar *__funcptr_type_kind 0x0000083A
    0x000020D6 bc *s8 >|2| 0x000020D4< to __funcptr_type_kind
    0x000020D7 store *__funcptr_type_kind >|2| 0x000020D5<, __funcptr_type_kind >|2| 0x000020D6<
    0x000020D8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs3dvNV") *s8
    0x000020D9 gvar *__funcptr_type_kind 0x0000083B
    0x000020DA bc *s8 >|2| 0x000020D8< to __funcptr_type_kind
    0x000020DB store *__funcptr_type_kind >|2| 0x000020D9<, __funcptr_type_kind >|2| 0x000020DA<
    0x000020DC call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs3fvNV") *s8
    0x000020DD gvar *__funcptr_type_kind 0x0000083C
    0x000020DE bc *s8 >|2| 0x000020DC< to __funcptr_type_kind
    0x000020DF store *__funcptr_type_kind >|2| 0x000020DD<, __funcptr_type_kind >|2| 0x000020DE<
    0x000020E0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs3hvNV") *s8
    0x000020E1 gvar *__funcptr_type_kind 0x0000083D
    0x000020E2 bc *s8 >|2| 0x000020E0< to __funcptr_type_kind
    0x000020E3 store *__funcptr_type_kind >|2| 0x000020E1<, __funcptr_type_kind >|2| 0x000020E2<
    0x000020E4 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs3svNV") *s8
    0x000020E5 gvar *__funcptr_type_kind 0x0000083E
    0x000020E6 bc *s8 >|2| 0x000020E4< to __funcptr_type_kind
    0x000020E7 store *__funcptr_type_kind >|2| 0x000020E5<, __funcptr_type_kind >|2| 0x000020E6<
    0x000020E8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs4dvNV") *s8
    0x000020E9 gvar *__funcptr_type_kind 0x0000083F
    0x000020EA bc *s8 >|2| 0x000020E8< to __funcptr_type_kind
    0x000020EB store *__funcptr_type_kind >|2| 0x000020E9<, __funcptr_type_kind >|2| 0x000020EA<
    0x000020EC call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs4fvNV") *s8
    0x000020ED gvar *__funcptr_type_kind 0x00000840
    0x000020EE bc *s8 >|2| 0x000020EC< to __funcptr_type_kind
    0x000020EF store *__funcptr_type_kind >|2| 0x000020ED<, __funcptr_type_kind >|2| 0x000020EE<
    0x000020F0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs4hvNV") *s8
    0x000020F1 gvar *__funcptr_type_kind 0x00000841
    0x000020F2 bc *s8 >|2| 0x000020F0< to __funcptr_type_kind
    0x000020F3 store *__funcptr_type_kind >|2| 0x000020F1<, __funcptr_type_kind >|2| 0x000020F2<
    0x000020F4 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexAttribs4svNV") *s8
    0x000020F5 gvar *__funcptr_type_kind 0x00000842
    0x000020F6 bc *s8 >|2| 0x000020F4< to __funcptr_type_kind
    0x000020F7 store *__funcptr_type_kind >|2| 0x000020F5<, __funcptr_type_kind >|2| 0x000020F6<
    0x000020F8 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexAttribs4ubvNV") *s8
    0x000020F9 gvar *__funcptr_type_kind 0x00000843
    0x000020FA bc *s8 >|2| 0x000020F8< to __funcptr_type_kind
    0x000020FB store *__funcptr_type_kind >|2| 0x000020F9<, __funcptr_type_kind >|2| 0x000020FA<
    0x000020FC call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexBindingDivisor") *s8
    0x000020FD gvar *__funcptr_type_kind 0x00000844
    0x000020FE bc *s8 >|2| 0x000020FC< to __funcptr_type_kind
    0x000020FF store *__funcptr_type_kind >|2| 0x000020FD<, __funcptr_type_kind >|2| 0x000020FE<
    0x00002100 call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexBlendARB") *s8
    0x00002101 gvar *__funcptr_type_kind 0x00000845
    0x00002102 bc *s8 >|2| 0x00002100< to __funcptr_type_kind
    0x00002103 store *__funcptr_type_kind >|2| 0x00002101<, __funcptr_type_kind >|2| 0x00002102<
    0x00002104 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexBlendEnvfATI") *s8
    0x00002105 gvar *__funcptr_type_kind 0x00000846
    0x00002106 bc *s8 >|2| 0x00002104< to __funcptr_type_kind
    0x00002107 store *__funcptr_type_kind >|2| 0x00002105<, __funcptr_type_kind >|2| 0x00002106<
    0x00002108 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexBlendEnviATI") *s8
    0x00002109 gvar *__funcptr_type_kind 0x00000847
    0x0000210A bc *s8 >|2| 0x00002108< to __funcptr_type_kind
    0x0000210B store *__funcptr_type_kind >|2| 0x00002109<, __funcptr_type_kind >|2| 0x0000210A<
    0x0000210C call ag5 "openglGetProcAddress" (cstroflen 17 "glVertexFormatNV") *s8
    0x0000210D gvar *__funcptr_type_kind 0x00000848
    0x0000210E bc *s8 >|2| 0x0000210C< to __funcptr_type_kind
    0x0000210F store *__funcptr_type_kind >|2| 0x0000210D<, __funcptr_type_kind >|2| 0x0000210E<
    0x00002110 call ag5 "openglGetProcAddress" (cstroflen 13 "glVertexP2ui") *s8
    0x00002111 gvar *__funcptr_type_kind 0x00000849
    0x00002112 bc *s8 >|2| 0x00002110< to __funcptr_type_kind
    0x00002113 store *__funcptr_type_kind >|2| 0x00002111<, __funcptr_type_kind >|2| 0x00002112<
    0x00002114 call ag5 "openglGetProcAddress" (cstroflen 14 "glVertexP2uiv") *s8
    0x00002115 gvar *__funcptr_type_kind 0x0000084A
    0x00002116 bc *s8 >|2| 0x00002114< to __funcptr_type_kind
    0x00002117 store *__funcptr_type_kind >|2| 0x00002115<, __funcptr_type_kind >|2| 0x00002116<
    0x00002118 call ag5 "openglGetProcAddress" (cstroflen 13 "glVertexP3ui") *s8
    0x00002119 gvar *__funcptr_type_kind 0x0000084B
    0x0000211A bc *s8 >|2| 0x00002118< to __funcptr_type_kind
    0x0000211B store *__funcptr_type_kind >|2| 0x00002119<, __funcptr_type_kind >|2| 0x0000211A<
    0x0000211C call ag5 "openglGetProcAddress" (cstroflen 14 "glVertexP3uiv") *s8
    0x0000211D gvar *__funcptr_type_kind 0x0000084C
    0x0000211E bc *s8 >|2| 0x0000211C< to __funcptr_type_kind
    0x0000211F store *__funcptr_type_kind >|2| 0x0000211D<, __funcptr_type_kind >|2| 0x0000211E<
    0x00002120 call ag5 "openglGetProcAddress" (cstroflen 13 "glVertexP4ui") *s8
    0x00002121 gvar *__funcptr_type_kind 0x0000084D
    0x00002122 bc *s8 >|2| 0x00002120< to __funcptr_type_kind
    0x00002123 store *__funcptr_type_kind >|2| 0x00002121<, __funcptr_type_kind >|2| 0x00002122<
    0x00002124 call ag5 "openglGetProcAddress" (cstroflen 14 "glVertexP4uiv") *s8
    0x00002125 gvar *__funcptr_type_kind 0x0000084E
    0x00002126 bc *s8 >|2| 0x00002124< to __funcptr_type_kind
    0x00002127 store *__funcptr_type_kind >|2| 0x00002125<, __funcptr_type_kind >|2| 0x00002126<
    0x00002128 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexPointerEXT") *s8
    0x00002129 gvar *__funcptr_type_kind 0x0000084F
    0x0000212A bc *s8 >|2| 0x00002128< to __funcptr_type_kind
    0x0000212B store *__funcptr_type_kind >|2| 0x00002129<, __funcptr_type_kind >|2| 0x0000212A<
    0x0000212C call ag5 "openglGetProcAddress" (cstroflen 23 "glVertexPointerListIBM") *s8
    0x0000212D gvar *__funcptr_type_kind 0x00000850
    0x0000212E bc *s8 >|2| 0x0000212C< to __funcptr_type_kind
    0x0000212F store *__funcptr_type_kind >|2| 0x0000212D<, __funcptr_type_kind >|2| 0x0000212E<
    0x00002130 call ag5 "openglGetProcAddress" (cstroflen 22 "glVertexPointervINTEL") *s8
    0x00002131 gvar *__funcptr_type_kind 0x00000851
    0x00002132 bc *s8 >|2| 0x00002130< to __funcptr_type_kind
    0x00002133 store *__funcptr_type_kind >|2| 0x00002131<, __funcptr_type_kind >|2| 0x00002132<
    0x00002134 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream1dATI") *s8
    0x00002135 gvar *__funcptr_type_kind 0x00000852
    0x00002136 bc *s8 >|2| 0x00002134< to __funcptr_type_kind
    0x00002137 store *__funcptr_type_kind >|2| 0x00002135<, __funcptr_type_kind >|2| 0x00002136<
    0x00002138 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream1dvATI") *s8
    0x00002139 gvar *__funcptr_type_kind 0x00000853
    0x0000213A bc *s8 >|2| 0x00002138< to __funcptr_type_kind
    0x0000213B store *__funcptr_type_kind >|2| 0x00002139<, __funcptr_type_kind >|2| 0x0000213A<
    0x0000213C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream1fATI") *s8
    0x0000213D gvar *__funcptr_type_kind 0x00000854
    0x0000213E bc *s8 >|2| 0x0000213C< to __funcptr_type_kind
    0x0000213F store *__funcptr_type_kind >|2| 0x0000213D<, __funcptr_type_kind >|2| 0x0000213E<
    0x00002140 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream1fvATI") *s8
    0x00002141 gvar *__funcptr_type_kind 0x00000855
    0x00002142 bc *s8 >|2| 0x00002140< to __funcptr_type_kind
    0x00002143 store *__funcptr_type_kind >|2| 0x00002141<, __funcptr_type_kind >|2| 0x00002142<
    0x00002144 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream1iATI") *s8
    0x00002145 gvar *__funcptr_type_kind 0x00000856
    0x00002146 bc *s8 >|2| 0x00002144< to __funcptr_type_kind
    0x00002147 store *__funcptr_type_kind >|2| 0x00002145<, __funcptr_type_kind >|2| 0x00002146<
    0x00002148 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream1ivATI") *s8
    0x00002149 gvar *__funcptr_type_kind 0x00000857
    0x0000214A bc *s8 >|2| 0x00002148< to __funcptr_type_kind
    0x0000214B store *__funcptr_type_kind >|2| 0x00002149<, __funcptr_type_kind >|2| 0x0000214A<
    0x0000214C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream1sATI") *s8
    0x0000214D gvar *__funcptr_type_kind 0x00000858
    0x0000214E bc *s8 >|2| 0x0000214C< to __funcptr_type_kind
    0x0000214F store *__funcptr_type_kind >|2| 0x0000214D<, __funcptr_type_kind >|2| 0x0000214E<
    0x00002150 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream1svATI") *s8
    0x00002151 gvar *__funcptr_type_kind 0x00000859
    0x00002152 bc *s8 >|2| 0x00002150< to __funcptr_type_kind
    0x00002153 store *__funcptr_type_kind >|2| 0x00002151<, __funcptr_type_kind >|2| 0x00002152<
    0x00002154 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream2dATI") *s8
    0x00002155 gvar *__funcptr_type_kind 0x0000085A
    0x00002156 bc *s8 >|2| 0x00002154< to __funcptr_type_kind
    0x00002157 store *__funcptr_type_kind >|2| 0x00002155<, __funcptr_type_kind >|2| 0x00002156<
    0x00002158 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream2dvATI") *s8
    0x00002159 gvar *__funcptr_type_kind 0x0000085B
    0x0000215A bc *s8 >|2| 0x00002158< to __funcptr_type_kind
    0x0000215B store *__funcptr_type_kind >|2| 0x00002159<, __funcptr_type_kind >|2| 0x0000215A<
    0x0000215C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream2fATI") *s8
    0x0000215D gvar *__funcptr_type_kind 0x0000085C
    0x0000215E bc *s8 >|2| 0x0000215C< to __funcptr_type_kind
    0x0000215F store *__funcptr_type_kind >|2| 0x0000215D<, __funcptr_type_kind >|2| 0x0000215E<
    0x00002160 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream2fvATI") *s8
    0x00002161 gvar *__funcptr_type_kind 0x0000085D
    0x00002162 bc *s8 >|2| 0x00002160< to __funcptr_type_kind
    0x00002163 store *__funcptr_type_kind >|2| 0x00002161<, __funcptr_type_kind >|2| 0x00002162<
    0x00002164 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream2iATI") *s8
    0x00002165 gvar *__funcptr_type_kind 0x0000085E
    0x00002166 bc *s8 >|2| 0x00002164< to __funcptr_type_kind
    0x00002167 store *__funcptr_type_kind >|2| 0x00002165<, __funcptr_type_kind >|2| 0x00002166<
    0x00002168 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream2ivATI") *s8
    0x00002169 gvar *__funcptr_type_kind 0x0000085F
    0x0000216A bc *s8 >|2| 0x00002168< to __funcptr_type_kind
    0x0000216B store *__funcptr_type_kind >|2| 0x00002169<, __funcptr_type_kind >|2| 0x0000216A<
    0x0000216C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream2sATI") *s8
    0x0000216D gvar *__funcptr_type_kind 0x00000860
    0x0000216E bc *s8 >|2| 0x0000216C< to __funcptr_type_kind
    0x0000216F store *__funcptr_type_kind >|2| 0x0000216D<, __funcptr_type_kind >|2| 0x0000216E<
    0x00002170 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream2svATI") *s8
    0x00002171 gvar *__funcptr_type_kind 0x00000861
    0x00002172 bc *s8 >|2| 0x00002170< to __funcptr_type_kind
    0x00002173 store *__funcptr_type_kind >|2| 0x00002171<, __funcptr_type_kind >|2| 0x00002172<
    0x00002174 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream3dATI") *s8
    0x00002175 gvar *__funcptr_type_kind 0x00000862
    0x00002176 bc *s8 >|2| 0x00002174< to __funcptr_type_kind
    0x00002177 store *__funcptr_type_kind >|2| 0x00002175<, __funcptr_type_kind >|2| 0x00002176<
    0x00002178 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream3dvATI") *s8
    0x00002179 gvar *__funcptr_type_kind 0x00000863
    0x0000217A bc *s8 >|2| 0x00002178< to __funcptr_type_kind
    0x0000217B store *__funcptr_type_kind >|2| 0x00002179<, __funcptr_type_kind >|2| 0x0000217A<
    0x0000217C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream3fATI") *s8
    0x0000217D gvar *__funcptr_type_kind 0x00000864
    0x0000217E bc *s8 >|2| 0x0000217C< to __funcptr_type_kind
    0x0000217F store *__funcptr_type_kind >|2| 0x0000217D<, __funcptr_type_kind >|2| 0x0000217E<
    0x00002180 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream3fvATI") *s8
    0x00002181 gvar *__funcptr_type_kind 0x00000865
    0x00002182 bc *s8 >|2| 0x00002180< to __funcptr_type_kind
    0x00002183 store *__funcptr_type_kind >|2| 0x00002181<, __funcptr_type_kind >|2| 0x00002182<
    0x00002184 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream3iATI") *s8
    0x00002185 gvar *__funcptr_type_kind 0x00000866
    0x00002186 bc *s8 >|2| 0x00002184< to __funcptr_type_kind
    0x00002187 store *__funcptr_type_kind >|2| 0x00002185<, __funcptr_type_kind >|2| 0x00002186<
    0x00002188 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream3ivATI") *s8
    0x00002189 gvar *__funcptr_type_kind 0x00000867
    0x0000218A bc *s8 >|2| 0x00002188< to __funcptr_type_kind
    0x0000218B store *__funcptr_type_kind >|2| 0x00002189<, __funcptr_type_kind >|2| 0x0000218A<
    0x0000218C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream3sATI") *s8
    0x0000218D gvar *__funcptr_type_kind 0x00000868
    0x0000218E bc *s8 >|2| 0x0000218C< to __funcptr_type_kind
    0x0000218F store *__funcptr_type_kind >|2| 0x0000218D<, __funcptr_type_kind >|2| 0x0000218E<
    0x00002190 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream3svATI") *s8
    0x00002191 gvar *__funcptr_type_kind 0x00000869
    0x00002192 bc *s8 >|2| 0x00002190< to __funcptr_type_kind
    0x00002193 store *__funcptr_type_kind >|2| 0x00002191<, __funcptr_type_kind >|2| 0x00002192<
    0x00002194 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream4dATI") *s8
    0x00002195 gvar *__funcptr_type_kind 0x0000086A
    0x00002196 bc *s8 >|2| 0x00002194< to __funcptr_type_kind
    0x00002197 store *__funcptr_type_kind >|2| 0x00002195<, __funcptr_type_kind >|2| 0x00002196<
    0x00002198 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream4dvATI") *s8
    0x00002199 gvar *__funcptr_type_kind 0x0000086B
    0x0000219A bc *s8 >|2| 0x00002198< to __funcptr_type_kind
    0x0000219B store *__funcptr_type_kind >|2| 0x00002199<, __funcptr_type_kind >|2| 0x0000219A<
    0x0000219C call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream4fATI") *s8
    0x0000219D gvar *__funcptr_type_kind 0x0000086C
    0x0000219E bc *s8 >|2| 0x0000219C< to __funcptr_type_kind
    0x0000219F store *__funcptr_type_kind >|2| 0x0000219D<, __funcptr_type_kind >|2| 0x0000219E<
    0x000021A0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream4fvATI") *s8
    0x000021A1 gvar *__funcptr_type_kind 0x0000086D
    0x000021A2 bc *s8 >|2| 0x000021A0< to __funcptr_type_kind
    0x000021A3 store *__funcptr_type_kind >|2| 0x000021A1<, __funcptr_type_kind >|2| 0x000021A2<
    0x000021A4 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream4iATI") *s8
    0x000021A5 gvar *__funcptr_type_kind 0x0000086E
    0x000021A6 bc *s8 >|2| 0x000021A4< to __funcptr_type_kind
    0x000021A7 store *__funcptr_type_kind >|2| 0x000021A5<, __funcptr_type_kind >|2| 0x000021A6<
    0x000021A8 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream4ivATI") *s8
    0x000021A9 gvar *__funcptr_type_kind 0x0000086F
    0x000021AA bc *s8 >|2| 0x000021A8< to __funcptr_type_kind
    0x000021AB store *__funcptr_type_kind >|2| 0x000021A9<, __funcptr_type_kind >|2| 0x000021AA<
    0x000021AC call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexStream4sATI") *s8
    0x000021AD gvar *__funcptr_type_kind 0x00000870
    0x000021AE bc *s8 >|2| 0x000021AC< to __funcptr_type_kind
    0x000021AF store *__funcptr_type_kind >|2| 0x000021AD<, __funcptr_type_kind >|2| 0x000021AE<
    0x000021B0 call ag5 "openglGetProcAddress" (cstroflen 21 "glVertexStream4svATI") *s8
    0x000021B1 gvar *__funcptr_type_kind 0x00000871
    0x000021B2 bc *s8 >|2| 0x000021B0< to __funcptr_type_kind
    0x000021B3 store *__funcptr_type_kind >|2| 0x000021B1<, __funcptr_type_kind >|2| 0x000021B2<
    0x000021B4 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexWeightfEXT") *s8
    0x000021B5 gvar *__funcptr_type_kind 0x00000872
    0x000021B6 bc *s8 >|2| 0x000021B4< to __funcptr_type_kind
    0x000021B7 store *__funcptr_type_kind >|2| 0x000021B5<, __funcptr_type_kind >|2| 0x000021B6<
    0x000021B8 call ag5 "openglGetProcAddress" (cstroflen 20 "glVertexWeightfvEXT") *s8
    0x000021B9 gvar *__funcptr_type_kind 0x00000873
    0x000021BA bc *s8 >|2| 0x000021B8< to __funcptr_type_kind
    0x000021BB store *__funcptr_type_kind >|2| 0x000021B9<, __funcptr_type_kind >|2| 0x000021BA<
    0x000021BC call ag5 "openglGetProcAddress" (cstroflen 18 "glVertexWeighthNV") *s8
    0x000021BD gvar *__funcptr_type_kind 0x00000874
    0x000021BE bc *s8 >|2| 0x000021BC< to __funcptr_type_kind
    0x000021BF store *__funcptr_type_kind >|2| 0x000021BD<, __funcptr_type_kind >|2| 0x000021BE<
    0x000021C0 call ag5 "openglGetProcAddress" (cstroflen 19 "glVertexWeighthvNV") *s8
    0x000021C1 gvar *__funcptr_type_kind 0x00000875
    0x000021C2 bc *s8 >|2| 0x000021C0< to __funcptr_type_kind
    0x000021C3 store *__funcptr_type_kind >|2| 0x000021C1<, __funcptr_type_kind >|2| 0x000021C2<
    0x000021C4 call ag5 "openglGetProcAddress" (cstroflen 25 "glVertexWeightPointerEXT") *s8
    0x000021C5 gvar *__funcptr_type_kind 0x00000876
    0x000021C6 bc *s8 >|2| 0x000021C4< to __funcptr_type_kind
    0x000021C7 store *__funcptr_type_kind >|2| 0x000021C5<, __funcptr_type_kind >|2| 0x000021C6<
    0x000021C8 call ag5 "openglGetProcAddress" (cstroflen 34 "glVideoCaptureStreamParameterdvNV") *s8
    0x000021C9 gvar *__funcptr_type_kind 0x00000877
    0x000021CA bc *s8 >|2| 0x000021C8< to __funcptr_type_kind
    0x000021CB store *__funcptr_type_kind >|2| 0x000021C9<, __funcptr_type_kind >|2| 0x000021CA<
    0x000021CC call ag5 "openglGetProcAddress" (cstroflen 34 "glVideoCaptureStreamParameterfvNV") *s8
    0x000021CD gvar *__funcptr_type_kind 0x00000878
    0x000021CE bc *s8 >|2| 0x000021CC< to __funcptr_type_kind
    0x000021CF store *__funcptr_type_kind >|2| 0x000021CD<, __funcptr_type_kind >|2| 0x000021CE<
    0x000021D0 call ag5 "openglGetProcAddress" (cstroflen 34 "glVideoCaptureStreamParameterivNV") *s8
    0x000021D1 gvar *__funcptr_type_kind 0x00000879
    0x000021D2 bc *s8 >|2| 0x000021D0< to __funcptr_type_kind
    0x000021D3 store *__funcptr_type_kind >|2| 0x000021D1<, __funcptr_type_kind >|2| 0x000021D2<
    0x000021D4 call ag5 "openglGetProcAddress" (cstroflen 17 "glViewportArrayv") *s8
    0x000021D5 gvar *__funcptr_type_kind 0x0000087A
    0x000021D6 bc *s8 >|2| 0x000021D4< to __funcptr_type_kind
    0x000021D7 store *__funcptr_type_kind >|2| 0x000021D5<, __funcptr_type_kind >|2| 0x000021D6<
    0x000021D8 call ag5 "openglGetProcAddress" (cstroflen 19 "glViewportIndexedf") *s8
    0x000021D9 gvar *__funcptr_type_kind 0x0000087B
    0x000021DA bc *s8 >|2| 0x000021D8< to __funcptr_type_kind
    0x000021DB store *__funcptr_type_kind >|2| 0x000021D9<, __funcptr_type_kind >|2| 0x000021DA<
    0x000021DC call ag5 "openglGetProcAddress" (cstroflen 20 "glViewportIndexedfv") *s8
    0x000021DD gvar *__funcptr_type_kind 0x0000087C
    0x000021DE bc *s8 >|2| 0x000021DC< to __funcptr_type_kind
    0x000021DF store *__funcptr_type_kind >|2| 0x000021DD<, __funcptr_type_kind >|2| 0x000021DE<
    0x000021E0 call ag5 "openglGetProcAddress" (cstroflen 11 "glWaitSync") *s8
    0x000021E1 gvar *__funcptr_type_kind 0x0000087D
    0x000021E2 bc *s8 >|2| 0x000021E0< to __funcptr_type_kind
    0x000021E3 store *__funcptr_type_kind >|2| 0x000021E1<, __funcptr_type_kind >|2| 0x000021E2<
    0x000021E4 call ag5 "openglGetProcAddress" (cstroflen 14 "glWeightbvARB") *s8
    0x000021E5 gvar *__funcptr_type_kind 0x0000087E
    0x000021E6 bc *s8 >|2| 0x000021E4< to __funcptr_type_kind
    0x000021E7 store *__funcptr_type_kind >|2| 0x000021E5<, __funcptr_type_kind >|2| 0x000021E6<
    0x000021E8 call ag5 "openglGetProcAddress" (cstroflen 14 "glWeightdvARB") *s8
    0x000021E9 gvar *__funcptr_type_kind 0x0000087F
    0x000021EA bc *s8 >|2| 0x000021E8< to __funcptr_type_kind
    0x000021EB store *__funcptr_type_kind >|2| 0x000021E9<, __funcptr_type_kind >|2| 0x000021EA<
    0x000021EC call ag5 "openglGetProcAddress" (cstroflen 14 "glWeightfvARB") *s8
    0x000021ED gvar *__funcptr_type_kind 0x00000880
    0x000021EE bc *s8 >|2| 0x000021EC< to __funcptr_type_kind
    0x000021EF store *__funcptr_type_kind >|2| 0x000021ED<, __funcptr_type_kind >|2| 0x000021EE<
    0x000021F0 call ag5 "openglGetProcAddress" (cstroflen 14 "glWeightivARB") *s8
    0x000021F1 gvar *__funcptr_type_kind 0x00000881
    0x000021F2 bc *s8 >|2| 0x000021F0< to __funcptr_type_kind
    0x000021F3 store *__funcptr_type_kind >|2| 0x000021F1<, __funcptr_type_kind >|2| 0x000021F2<
    0x000021F4 call ag5 "openglGetProcAddress" (cstroflen 16 "glWeightPathsNV") *s8
    0x000021F5 gvar *__funcptr_type_kind 0x00000882
    0x000021F6 bc *s8 >|2| 0x000021F4< to __funcptr_type_kind
    0x000021F7 store *__funcptr_type_kind >|2| 0x000021F5<, __funcptr_type_kind >|2| 0x000021F6<
    0x000021F8 call ag5 "openglGetProcAddress" (cstroflen 19 "glWeightPointerARB") *s8
    0x000021F9 gvar *__funcptr_type_kind 0x00000883
    0x000021FA bc *s8 >|2| 0x000021F8< to __funcptr_type_kind
    0x000021FB store *__funcptr_type_kind >|2| 0x000021F9<, __funcptr_type_kind >|2| 0x000021FA<
    0x000021FC call ag5 "openglGetProcAddress" (cstroflen 14 "glWeightsvARB") *s8
    0x000021FD gvar *__funcptr_type_kind 0x00000884
    0x000021FE bc *s8 >|2| 0x000021FC< to __funcptr_type_kind
    0x000021FF store *__funcptr_type_kind >|2| 0x000021FD<, __funcptr_type_kind >|2| 0x000021FE<
    0x00002200 call ag5 "openglGetProcAddress" (cstroflen 15 "glWeightubvARB") *s8
    0x00002201 gvar *__funcptr_type_kind 0x00000885
    0x00002202 bc *s8 >|2| 0x00002200< to __funcptr_type_kind
    0x00002203 store *__funcptr_type_kind >|2| 0x00002201<, __funcptr_type_kind >|2| 0x00002202<
    0x00002204 call ag5 "openglGetProcAddress" (cstroflen 15 "glWeightuivARB") *s8
    0x00002205 gvar *__funcptr_type_kind 0x00000886
    0x00002206 bc *s8 >|2| 0x00002204< to __funcptr_type_kind
    0x00002207 store *__funcptr_type_kind >|2| 0x00002205<, __funcptr_type_kind >|2| 0x00002206<
    0x00002208 call ag5 "openglGetProcAddress" (cstroflen 15 "glWeightusvARB") *s8
    0x00002209 gvar *__funcptr_type_kind 0x00000887
    0x0000220A bc *s8 >|2| 0x00002208< to __funcptr_type_kind
    0x0000220B store *__funcptr_type_kind >|2| 0x00002209<, __funcptr_type_kind >|2| 0x0000220A<
    0x0000220C call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos2dARB") *s8
    0x0000220D gvar *__funcptr_type_kind 0x00000888
    0x0000220E bc *s8 >|2| 0x0000220C< to __funcptr_type_kind
    0x0000220F store *__funcptr_type_kind >|2| 0x0000220D<, __funcptr_type_kind >|2| 0x0000220E<
    0x00002210 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2dMESA") *s8
    0x00002211 gvar *__funcptr_type_kind 0x00000889
    0x00002212 bc *s8 >|2| 0x00002210< to __funcptr_type_kind
    0x00002213 store *__funcptr_type_kind >|2| 0x00002211<, __funcptr_type_kind >|2| 0x00002212<
    0x00002214 call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos2d") *s8
    0x00002215 gvar *__funcptr_type_kind 0x0000088A
    0x00002216 bc *s8 >|2| 0x00002214< to __funcptr_type_kind
    0x00002217 store *__funcptr_type_kind >|2| 0x00002215<, __funcptr_type_kind >|2| 0x00002216<
    0x00002218 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2dvARB") *s8
    0x00002219 gvar *__funcptr_type_kind 0x0000088B
    0x0000221A bc *s8 >|2| 0x00002218< to __funcptr_type_kind
    0x0000221B store *__funcptr_type_kind >|2| 0x00002219<, __funcptr_type_kind >|2| 0x0000221A<
    0x0000221C call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos2dvMESA") *s8
    0x0000221D gvar *__funcptr_type_kind 0x0000088C
    0x0000221E bc *s8 >|2| 0x0000221C< to __funcptr_type_kind
    0x0000221F store *__funcptr_type_kind >|2| 0x0000221D<, __funcptr_type_kind >|2| 0x0000221E<
    0x00002220 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos2dv") *s8
    0x00002221 gvar *__funcptr_type_kind 0x0000088D
    0x00002222 bc *s8 >|2| 0x00002220< to __funcptr_type_kind
    0x00002223 store *__funcptr_type_kind >|2| 0x00002221<, __funcptr_type_kind >|2| 0x00002222<
    0x00002224 call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos2fARB") *s8
    0x00002225 gvar *__funcptr_type_kind 0x0000088E
    0x00002226 bc *s8 >|2| 0x00002224< to __funcptr_type_kind
    0x00002227 store *__funcptr_type_kind >|2| 0x00002225<, __funcptr_type_kind >|2| 0x00002226<
    0x00002228 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2fMESA") *s8
    0x00002229 gvar *__funcptr_type_kind 0x0000088F
    0x0000222A bc *s8 >|2| 0x00002228< to __funcptr_type_kind
    0x0000222B store *__funcptr_type_kind >|2| 0x00002229<, __funcptr_type_kind >|2| 0x0000222A<
    0x0000222C call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos2f") *s8
    0x0000222D gvar *__funcptr_type_kind 0x00000890
    0x0000222E bc *s8 >|2| 0x0000222C< to __funcptr_type_kind
    0x0000222F store *__funcptr_type_kind >|2| 0x0000222D<, __funcptr_type_kind >|2| 0x0000222E<
    0x00002230 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2fvARB") *s8
    0x00002231 gvar *__funcptr_type_kind 0x00000891
    0x00002232 bc *s8 >|2| 0x00002230< to __funcptr_type_kind
    0x00002233 store *__funcptr_type_kind >|2| 0x00002231<, __funcptr_type_kind >|2| 0x00002232<
    0x00002234 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos2fvMESA") *s8
    0x00002235 gvar *__funcptr_type_kind 0x00000892
    0x00002236 bc *s8 >|2| 0x00002234< to __funcptr_type_kind
    0x00002237 store *__funcptr_type_kind >|2| 0x00002235<, __funcptr_type_kind >|2| 0x00002236<
    0x00002238 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos2fv") *s8
    0x00002239 gvar *__funcptr_type_kind 0x00000893
    0x0000223A bc *s8 >|2| 0x00002238< to __funcptr_type_kind
    0x0000223B store *__funcptr_type_kind >|2| 0x00002239<, __funcptr_type_kind >|2| 0x0000223A<
    0x0000223C call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos2iARB") *s8
    0x0000223D gvar *__funcptr_type_kind 0x00000894
    0x0000223E bc *s8 >|2| 0x0000223C< to __funcptr_type_kind
    0x0000223F store *__funcptr_type_kind >|2| 0x0000223D<, __funcptr_type_kind >|2| 0x0000223E<
    0x00002240 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2iMESA") *s8
    0x00002241 gvar *__funcptr_type_kind 0x00000895
    0x00002242 bc *s8 >|2| 0x00002240< to __funcptr_type_kind
    0x00002243 store *__funcptr_type_kind >|2| 0x00002241<, __funcptr_type_kind >|2| 0x00002242<
    0x00002244 call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos2i") *s8
    0x00002245 gvar *__funcptr_type_kind 0x00000896
    0x00002246 bc *s8 >|2| 0x00002244< to __funcptr_type_kind
    0x00002247 store *__funcptr_type_kind >|2| 0x00002245<, __funcptr_type_kind >|2| 0x00002246<
    0x00002248 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2ivARB") *s8
    0x00002249 gvar *__funcptr_type_kind 0x00000897
    0x0000224A bc *s8 >|2| 0x00002248< to __funcptr_type_kind
    0x0000224B store *__funcptr_type_kind >|2| 0x00002249<, __funcptr_type_kind >|2| 0x0000224A<
    0x0000224C call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos2ivMESA") *s8
    0x0000224D gvar *__funcptr_type_kind 0x00000898
    0x0000224E bc *s8 >|2| 0x0000224C< to __funcptr_type_kind
    0x0000224F store *__funcptr_type_kind >|2| 0x0000224D<, __funcptr_type_kind >|2| 0x0000224E<
    0x00002250 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos2iv") *s8
    0x00002251 gvar *__funcptr_type_kind 0x00000899
    0x00002252 bc *s8 >|2| 0x00002250< to __funcptr_type_kind
    0x00002253 store *__funcptr_type_kind >|2| 0x00002251<, __funcptr_type_kind >|2| 0x00002252<
    0x00002254 call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos2sARB") *s8
    0x00002255 gvar *__funcptr_type_kind 0x0000089A
    0x00002256 bc *s8 >|2| 0x00002254< to __funcptr_type_kind
    0x00002257 store *__funcptr_type_kind >|2| 0x00002255<, __funcptr_type_kind >|2| 0x00002256<
    0x00002258 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2sMESA") *s8
    0x00002259 gvar *__funcptr_type_kind 0x0000089B
    0x0000225A bc *s8 >|2| 0x00002258< to __funcptr_type_kind
    0x0000225B store *__funcptr_type_kind >|2| 0x00002259<, __funcptr_type_kind >|2| 0x0000225A<
    0x0000225C call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos2s") *s8
    0x0000225D gvar *__funcptr_type_kind 0x0000089C
    0x0000225E bc *s8 >|2| 0x0000225C< to __funcptr_type_kind
    0x0000225F store *__funcptr_type_kind >|2| 0x0000225D<, __funcptr_type_kind >|2| 0x0000225E<
    0x00002260 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos2svARB") *s8
    0x00002261 gvar *__funcptr_type_kind 0x0000089D
    0x00002262 bc *s8 >|2| 0x00002260< to __funcptr_type_kind
    0x00002263 store *__funcptr_type_kind >|2| 0x00002261<, __funcptr_type_kind >|2| 0x00002262<
    0x00002264 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos2svMESA") *s8
    0x00002265 gvar *__funcptr_type_kind 0x0000089E
    0x00002266 bc *s8 >|2| 0x00002264< to __funcptr_type_kind
    0x00002267 store *__funcptr_type_kind >|2| 0x00002265<, __funcptr_type_kind >|2| 0x00002266<
    0x00002268 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos2sv") *s8
    0x00002269 gvar *__funcptr_type_kind 0x0000089F
    0x0000226A bc *s8 >|2| 0x00002268< to __funcptr_type_kind
    0x0000226B store *__funcptr_type_kind >|2| 0x00002269<, __funcptr_type_kind >|2| 0x0000226A<
    0x0000226C call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos3dARB") *s8
    0x0000226D gvar *__funcptr_type_kind 0x000008A0
    0x0000226E bc *s8 >|2| 0x0000226C< to __funcptr_type_kind
    0x0000226F store *__funcptr_type_kind >|2| 0x0000226D<, __funcptr_type_kind >|2| 0x0000226E<
    0x00002270 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3dMESA") *s8
    0x00002271 gvar *__funcptr_type_kind 0x000008A1
    0x00002272 bc *s8 >|2| 0x00002270< to __funcptr_type_kind
    0x00002273 store *__funcptr_type_kind >|2| 0x00002271<, __funcptr_type_kind >|2| 0x00002272<
    0x00002274 call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos3d") *s8
    0x00002275 gvar *__funcptr_type_kind 0x000008A2
    0x00002276 bc *s8 >|2| 0x00002274< to __funcptr_type_kind
    0x00002277 store *__funcptr_type_kind >|2| 0x00002275<, __funcptr_type_kind >|2| 0x00002276<
    0x00002278 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3dvARB") *s8
    0x00002279 gvar *__funcptr_type_kind 0x000008A3
    0x0000227A bc *s8 >|2| 0x00002278< to __funcptr_type_kind
    0x0000227B store *__funcptr_type_kind >|2| 0x00002279<, __funcptr_type_kind >|2| 0x0000227A<
    0x0000227C call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos3dvMESA") *s8
    0x0000227D gvar *__funcptr_type_kind 0x000008A4
    0x0000227E bc *s8 >|2| 0x0000227C< to __funcptr_type_kind
    0x0000227F store *__funcptr_type_kind >|2| 0x0000227D<, __funcptr_type_kind >|2| 0x0000227E<
    0x00002280 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos3dv") *s8
    0x00002281 gvar *__funcptr_type_kind 0x000008A5
    0x00002282 bc *s8 >|2| 0x00002280< to __funcptr_type_kind
    0x00002283 store *__funcptr_type_kind >|2| 0x00002281<, __funcptr_type_kind >|2| 0x00002282<
    0x00002284 call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos3fARB") *s8
    0x00002285 gvar *__funcptr_type_kind 0x000008A6
    0x00002286 bc *s8 >|2| 0x00002284< to __funcptr_type_kind
    0x00002287 store *__funcptr_type_kind >|2| 0x00002285<, __funcptr_type_kind >|2| 0x00002286<
    0x00002288 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3fMESA") *s8
    0x00002289 gvar *__funcptr_type_kind 0x000008A7
    0x0000228A bc *s8 >|2| 0x00002288< to __funcptr_type_kind
    0x0000228B store *__funcptr_type_kind >|2| 0x00002289<, __funcptr_type_kind >|2| 0x0000228A<
    0x0000228C call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos3f") *s8
    0x0000228D gvar *__funcptr_type_kind 0x000008A8
    0x0000228E bc *s8 >|2| 0x0000228C< to __funcptr_type_kind
    0x0000228F store *__funcptr_type_kind >|2| 0x0000228D<, __funcptr_type_kind >|2| 0x0000228E<
    0x00002290 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3fvARB") *s8
    0x00002291 gvar *__funcptr_type_kind 0x000008A9
    0x00002292 bc *s8 >|2| 0x00002290< to __funcptr_type_kind
    0x00002293 store *__funcptr_type_kind >|2| 0x00002291<, __funcptr_type_kind >|2| 0x00002292<
    0x00002294 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos3fvMESA") *s8
    0x00002295 gvar *__funcptr_type_kind 0x000008AA
    0x00002296 bc *s8 >|2| 0x00002294< to __funcptr_type_kind
    0x00002297 store *__funcptr_type_kind >|2| 0x00002295<, __funcptr_type_kind >|2| 0x00002296<
    0x00002298 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos3fv") *s8
    0x00002299 gvar *__funcptr_type_kind 0x000008AB
    0x0000229A bc *s8 >|2| 0x00002298< to __funcptr_type_kind
    0x0000229B store *__funcptr_type_kind >|2| 0x00002299<, __funcptr_type_kind >|2| 0x0000229A<
    0x0000229C call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos3iARB") *s8
    0x0000229D gvar *__funcptr_type_kind 0x000008AC
    0x0000229E bc *s8 >|2| 0x0000229C< to __funcptr_type_kind
    0x0000229F store *__funcptr_type_kind >|2| 0x0000229D<, __funcptr_type_kind >|2| 0x0000229E<
    0x000022A0 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3iMESA") *s8
    0x000022A1 gvar *__funcptr_type_kind 0x000008AD
    0x000022A2 bc *s8 >|2| 0x000022A0< to __funcptr_type_kind
    0x000022A3 store *__funcptr_type_kind >|2| 0x000022A1<, __funcptr_type_kind >|2| 0x000022A2<
    0x000022A4 call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos3i") *s8
    0x000022A5 gvar *__funcptr_type_kind 0x000008AE
    0x000022A6 bc *s8 >|2| 0x000022A4< to __funcptr_type_kind
    0x000022A7 store *__funcptr_type_kind >|2| 0x000022A5<, __funcptr_type_kind >|2| 0x000022A6<
    0x000022A8 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3ivARB") *s8
    0x000022A9 gvar *__funcptr_type_kind 0x000008AF
    0x000022AA bc *s8 >|2| 0x000022A8< to __funcptr_type_kind
    0x000022AB store *__funcptr_type_kind >|2| 0x000022A9<, __funcptr_type_kind >|2| 0x000022AA<
    0x000022AC call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos3ivMESA") *s8
    0x000022AD gvar *__funcptr_type_kind 0x000008B0
    0x000022AE bc *s8 >|2| 0x000022AC< to __funcptr_type_kind
    0x000022AF store *__funcptr_type_kind >|2| 0x000022AD<, __funcptr_type_kind >|2| 0x000022AE<
    0x000022B0 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos3iv") *s8
    0x000022B1 gvar *__funcptr_type_kind 0x000008B1
    0x000022B2 bc *s8 >|2| 0x000022B0< to __funcptr_type_kind
    0x000022B3 store *__funcptr_type_kind >|2| 0x000022B1<, __funcptr_type_kind >|2| 0x000022B2<
    0x000022B4 call ag5 "openglGetProcAddress" (cstroflen 17 "glWindowPos3sARB") *s8
    0x000022B5 gvar *__funcptr_type_kind 0x000008B2
    0x000022B6 bc *s8 >|2| 0x000022B4< to __funcptr_type_kind
    0x000022B7 store *__funcptr_type_kind >|2| 0x000022B5<, __funcptr_type_kind >|2| 0x000022B6<
    0x000022B8 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3sMESA") *s8
    0x000022B9 gvar *__funcptr_type_kind 0x000008B3
    0x000022BA bc *s8 >|2| 0x000022B8< to __funcptr_type_kind
    0x000022BB store *__funcptr_type_kind >|2| 0x000022B9<, __funcptr_type_kind >|2| 0x000022BA<
    0x000022BC call ag5 "openglGetProcAddress" (cstroflen 14 "glWindowPos3s") *s8
    0x000022BD gvar *__funcptr_type_kind 0x000008B4
    0x000022BE bc *s8 >|2| 0x000022BC< to __funcptr_type_kind
    0x000022BF store *__funcptr_type_kind >|2| 0x000022BD<, __funcptr_type_kind >|2| 0x000022BE<
    0x000022C0 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos3svARB") *s8
    0x000022C1 gvar *__funcptr_type_kind 0x000008B5
    0x000022C2 bc *s8 >|2| 0x000022C0< to __funcptr_type_kind
    0x000022C3 store *__funcptr_type_kind >|2| 0x000022C1<, __funcptr_type_kind >|2| 0x000022C2<
    0x000022C4 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos3svMESA") *s8
    0x000022C5 gvar *__funcptr_type_kind 0x000008B6
    0x000022C6 bc *s8 >|2| 0x000022C4< to __funcptr_type_kind
    0x000022C7 store *__funcptr_type_kind >|2| 0x000022C5<, __funcptr_type_kind >|2| 0x000022C6<
    0x000022C8 call ag5 "openglGetProcAddress" (cstroflen 15 "glWindowPos3sv") *s8
    0x000022C9 gvar *__funcptr_type_kind 0x000008B7
    0x000022CA bc *s8 >|2| 0x000022C8< to __funcptr_type_kind
    0x000022CB store *__funcptr_type_kind >|2| 0x000022C9<, __funcptr_type_kind >|2| 0x000022CA<
    0x000022CC call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos4dMESA") *s8
    0x000022CD gvar *__funcptr_type_kind 0x000008B8
    0x000022CE bc *s8 >|2| 0x000022CC< to __funcptr_type_kind
    0x000022CF store *__funcptr_type_kind >|2| 0x000022CD<, __funcptr_type_kind >|2| 0x000022CE<
    0x000022D0 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos4dvMESA") *s8
    0x000022D1 gvar *__funcptr_type_kind 0x000008B9
    0x000022D2 bc *s8 >|2| 0x000022D0< to __funcptr_type_kind
    0x000022D3 store *__funcptr_type_kind >|2| 0x000022D1<, __funcptr_type_kind >|2| 0x000022D2<
    0x000022D4 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos4fMESA") *s8
    0x000022D5 gvar *__funcptr_type_kind 0x000008BA
    0x000022D6 bc *s8 >|2| 0x000022D4< to __funcptr_type_kind
    0x000022D7 store *__funcptr_type_kind >|2| 0x000022D5<, __funcptr_type_kind >|2| 0x000022D6<
    0x000022D8 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos4fvMESA") *s8
    0x000022D9 gvar *__funcptr_type_kind 0x000008BB
    0x000022DA bc *s8 >|2| 0x000022D8< to __funcptr_type_kind
    0x000022DB store *__funcptr_type_kind >|2| 0x000022D9<, __funcptr_type_kind >|2| 0x000022DA<
    0x000022DC call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos4iMESA") *s8
    0x000022DD gvar *__funcptr_type_kind 0x000008BC
    0x000022DE bc *s8 >|2| 0x000022DC< to __funcptr_type_kind
    0x000022DF store *__funcptr_type_kind >|2| 0x000022DD<, __funcptr_type_kind >|2| 0x000022DE<
    0x000022E0 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos4ivMESA") *s8
    0x000022E1 gvar *__funcptr_type_kind 0x000008BD
    0x000022E2 bc *s8 >|2| 0x000022E0< to __funcptr_type_kind
    0x000022E3 store *__funcptr_type_kind >|2| 0x000022E1<, __funcptr_type_kind >|2| 0x000022E2<
    0x000022E4 call ag5 "openglGetProcAddress" (cstroflen 18 "glWindowPos4sMESA") *s8
    0x000022E5 gvar *__funcptr_type_kind 0x000008BE
    0x000022E6 bc *s8 >|2| 0x000022E4< to __funcptr_type_kind
    0x000022E7 store *__funcptr_type_kind >|2| 0x000022E5<, __funcptr_type_kind >|2| 0x000022E6<
    0x000022E8 call ag5 "openglGetProcAddress" (cstroflen 19 "glWindowPos4svMESA") *s8
    0x000022E9 gvar *__funcptr_type_kind 0x000008BF
    0x000022EA bc *s8 >|2| 0x000022E8< to __funcptr_type_kind
    0x000022EB store *__funcptr_type_kind >|2| 0x000022E9<, __funcptr_type_kind >|2| 0x000022EA<
    0x000022EC call ag5 "openglGetProcAddress" (cstroflen 15 "glWriteMaskEXT") *s8
    0x000022ED gvar *__funcptr_type_kind 0x000008C0
    0x000022EE bc *s8 >|2| 0x000022EC< to __funcptr_type_kind
    0x000022EF store *__funcptr_type_kind >|2| 0x000022ED<, __funcptr_type_kind >|2| 0x000022EE<
    0x000022F0 gvar **s8 0x000008C1
    0x000022F1 load **s8 >|2| 0x000022F0<
    0x000022F2 call aC "dlclose" (*s8 >|2| 0x000022F1<) s32
    0x000022F3 ret
fn glfwInit ai5 -> s32
fn glfwTerminate aj5 -> void
fn glfwGetVersion ak5 -> void
fn glfwGetVersionString al5 -> *u8
fn glfwSetErrorCallback am5 -> *s8
fn glfwGetMonitors an5 -> **__unk_type_kind
fn glfwGetPrimaryMonitor ao5 -> *__unk_type_kind
fn glfwGetMonitorPos ap5 -> void
fn glfwGetMonitorPhysicalSize aq5 -> void
fn glfwGetMonitorName ar5 -> *u8
fn glfwSetMonitorCallback as5 -> *s8
fn glfwGetVideoModes at5 -> *__unk_type_kind
fn glfwGetVideoMode au5 -> *__unk_type_kind
fn glfwSetGamma av5 -> void
fn glfwGetGammaRamp aw5 -> *__unk_type_kind
fn glfwSetGammaRamp ax5 -> void
fn glfwDefaultWindowHints ay5 -> void
fn glfwWindowHint az5 -> void
fn glfwCreateWindow a06 -> *__unk_type_kind
fn glfwDestroyWindow a16 -> void
fn glfwWindowShouldClose a26 -> s32
fn glfwSetWindowShouldClose a36 -> void
fn glfwSetWindowTitle a46 -> void
fn glfwSetWindowIcon a56 -> void
fn glfwGetWindowPos a66 -> void
fn glfwSetWindowPos a76 -> void
fn glfwGetWindowSize a86 -> void
fn glfwSetWindowSizeLimits a96 -> void
fn glfwSetWindowAspectRatio aA6 -> void
fn glfwSetWindowSize aB6 -> void
fn glfwGetFramebufferSize aC6 -> void
fn glfwGetWindowFrameSize aD6 -> void
fn glfwIconifyWindow aE6 -> void
fn glfwRestoreWindow aF6 -> void
fn glfwMaximizeWindow aG6 -> void
fn glfwShowWindow aH6 -> void
fn glfwHideWindow aI6 -> void
fn glfwFocusWindow aJ6 -> void
fn glfwGetWindowMonitor aK6 -> *__unk_type_kind
fn glfwSetWindowMonitor aL6 -> void
fn glfwGetWindowAttrib aM6 -> s32
fn glfwSetWindowUserPointer aN6 -> void
fn glfwGetWindowUserPointer aO6 -> *s8
fn glfwSetWindowPosCallback aP6 -> *s8
fn glfwSetWindowSizeCallback aQ6 -> *s8
fn glfwSetWindowCloseCallback aR6 -> *s8
fn glfwSetWindowRefreshCallback aS6 -> *s8
fn glfwSetWindowFocusCallback aT6 -> *s8
fn glfwSetWindowIconifyCallback aU6 -> *s8
fn glfwSetFramebufferSizeCallback aV6 -> *s8
fn glfwPollEvents aW6 -> void
fn glfwWaitEvents aX6 -> void
fn glfwWaitEventsTimeout aY6 -> void
fn glfwPostEmptyEvent aZ6 -> void
fn glfwGetInputMode aa6 -> s32
fn glfwSetInputMode ab6 -> void
fn glfwGetKeyName ac6 -> *u8
fn glfwGetKey ad6 -> s32
fn glfwGetMouseButton ae6 -> s32
fn glfwGetCursorPos af6 -> void
fn glfwSetCursorPos ag6 -> void
fn glfwCreateCursor ah6 -> *__unk_type_kind
fn glfwCreateStandardCursor ai6 -> *__unk_type_kind
fn glfwDestroyCursor aj6 -> void
fn glfwSetCursor ak6 -> void
fn glfwSetKeyCallback al6 -> *s8
fn glfwSetCharCallback am6 -> *s8
fn glfwSetCharModsCallback an6 -> *s8
fn glfwSetMouseButtonCallback ao6 -> *s8
fn glfwSetCursorPosCallback ap6 -> *s8
fn glfwSetCursorEnterCallback aq6 -> *s8
fn glfwSetScrollCallback ar6 -> *s8
fn glfwSetDropCallback as6 -> *s8
fn glfwJoystickPresent at6 -> s32
fn glfwGetJoystickAxes au6 -> *f
fn glfwGetJoystickButtons av6 -> *u8
fn glfwGetJoystickName aw6 -> *u8
fn glfwSetJoystickCallback ax6 -> *s8
fn glfwSetClipboardString ay6 -> void
fn glfwGetClipboardString az6 -> *u8
fn glfwGetTime a07 -> d
fn glfwSetTime a17 -> void
fn glfwGetTimerValue a27 -> u64
fn glfwGetTimerFrequency a37 -> u64
fn glfwMakeContextCurrent a47 -> void
fn glfwGetCurrentContext a57 -> *__unk_type_kind
fn glfwSwapBuffers a67 -> void
fn glfwSwapInterval a77 -> void
fn glfwExtensionSupported a87 -> s32
fn glfwGetProcAddress a97 -> __unk_type_kind
fn glfwVulkanSupported aA7 -> s32
fn glfwGetRequiredInstanceExtensions aB7 -> **u8
fn stbi_load aC7 -> *u8
fn stbi_image_free aD7 -> void
fn stbi_failure_reason aE7 -> *u8
fn clock aF7 -> s64
fn difftime aG7 -> d
fn mkdir aH7 -> s64
fn time aI7 -> s64
fn asctime aJ7 -> *u8
fn ctime aK7 -> *u8
fn gmtime aL7 -> *__unk_type_kind
fn localtime aM7 -> *__unk_type_kind
fn strftime aN7 -> u64
fn system aO7 -> void
fn exit aP7 -> void
fn abort aQ7 -> void
fn atexit aR7 -> void
fn calloc aS7 -> *s8
fn free aT7 -> void
fn malloc aU7 -> *s8
fn realloc aV7 -> *s8
fn atof aW7 -> d
fn atoi aX7 -> s32
fn atol aY7 -> s64
fn strtod aZ7 -> d
fn strtol aa7 -> s64
fn strtoul ab7 -> u64
fn abs ac7 -> s32
fn labs ad7 -> s64
fn getenv ae7 -> *u8
fn qsort af7 -> void
fn bsearch ag7 -> *s8
fn rand ah7 -> s32
fn srand ai7 -> void
fn remove aj7 -> s32
fn rename ak7 -> s32
fn tmpfile al7 -> *__unk_type_kind
fn tmpnam am7 -> *u8
fn fclose an7 -> s32
fn fflush ao7 -> s32
fn fopen ap7 -> *__unk_type_kind
fn freopen aq7 -> *__unk_type_kind
fn setbuf ar7 -> void
fn setvbuf as7 -> s32
fn fgetc at7 -> s32
fn fgets au7 -> *u8
fn fputc av7 -> s32
fn fputs aw7 -> s32
fn getc ax7 -> s32
fn putc ay7 -> s32
fn putchar az7 -> s32
fn getchar a08 -> s32
fn ungetc a18 -> s32
fn puts a28 -> s32
fn gets a38 -> *u8
fn fread a48 -> s32
fn fwrite a58 -> s32
fn fgetpos a68 -> s32
fn fseek a78 -> s32
fn fsetpos a88 -> s32
fn ftell a98 -> s32
fn rewind aA8 -> void
fn clearerr aB8 -> void
fn feof aC8 -> s32
fn ferror aD8 -> s32
fn perror aE8 -> void
fn printf aF8 -> s32
fn fprintf aG8 -> s32
fn sprintf aH8 -> s32
fn scanf aI8 -> s32
fn fscanf aJ8 -> s32
fn sscanf aK8 -> s32
fn memcpy aL8 -> *s8
fn memmove aM8 -> *s8
fn strcpy aN8 -> *u8
fn strncpy aO8 -> *u8
fn strcat aP8 -> *u8
fn strncat aQ8 -> *u8
fn memcmp aR8 -> s32
fn strcmp aS8 -> s32
fn strcoll aT8 -> s32
fn strncmp aU8 -> s32
fn memchr aV8 -> *s8
fn strchr aW8 -> *u8
fn strcspn aX8 -> u64
fn strpbrk aY8 -> *u8
fn strrchr aZ8 -> *u8
fn strspn aa8 -> u64
fn strstr ab8 -> *u8
fn strtok ac8 -> *u8
fn memset ad8 -> *s8
fn strlen ae8 -> u64
fn strerror af8 -> *u8
fn acos ag8 -> d
fn acosf ah8 -> f
fn asin ai8 -> d
fn asinf aj8 -> f
fn atan ak8 -> d
fn atanf al8 -> f
fn atan2 am8 -> d
fn atan2f an8 -> f
fn cos ao8 -> d
fn cosf ap8 -> f
fn cosh aq8 -> d
fn coshf ar8 -> f
fn sin as8 -> d
fn sinf at8 -> f
fn sinh au8 -> d
fn sinhf av8 -> f
fn tan aw8 -> d
fn tanf ax8 -> f
fn tanh ay8 -> d
fn tanhf az8 -> f
fn exp a09 -> d
fn expf a19 -> f
fn frexp a29 -> d
fn frexpf a39 -> f
fn lxexp a49 -> d
fn lxexpd a59 -> f
fn log a69 -> d
fn logf a79 -> f
fn log10 a89 -> d
fn log10f a99 -> f
fn modf aA9 -> d
fn modff aB9 -> f
fn pow aC9 -> d
fn powf aD9 -> f
fn sqrt aE9 -> d
fn sqrtf aF9 -> f
fn ceil aG9 -> d
fn ceilf aH9 -> f
fn fabs aI9 -> d
fn fabsf aJ9 -> f
fn floor aK9 -> d
fn floorf aL9 -> f
fn fmod aM9 -> d
fn fmodf aN9 -> f
fn zero aO9 -> void
    {1 BBs, 13 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 store *f >|0| 0x00000002<, f 0.000000
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 store *f >|0| 0x00000006<, f 0.000000
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 2
    0x0000000B store *f >|0| 0x0000000A<, f 0.000000
    0x0000000C ret
fn set aP9 -> void
    {1 BBs, 19 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000001
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *f >|0| 0x00000004<, f >|0| 0x00000001<
    0x00000006 var *f 0x00000002
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000007<
    0x0000000C var *f 0x00000003
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E var **__unk_type_kind 0x00000000
    0x0000000F load **__unk_type_kind >|0| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 2
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000D<
    0x00000012 ret
fn set aQ9 -> void
    {1 BBs, 24 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 store *f >|0| 0x00000005<, f >|0| 0x00000002<
    0x00000007 var *__unk_type_kind 0x00000001
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|0| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D store *f >|0| 0x0000000C<, f >|0| 0x00000009<
    0x0000000E var *__unk_type_kind 0x00000001
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 2
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 var **__unk_type_kind 0x00000000
    0x00000012 load **__unk_type_kind >|0| 0x00000011<
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 2
    0x00000014 store *f >|0| 0x00000013<, f >|0| 0x00000010<
    0x00000015 var *__unk_type_kind 0x00000001
    0x00000016 call awD "__defer__" (*__unk_type_kind >|0| 0x00000015<) void
    0x00000017 ret
fn add aR9 -> void
    {1 BBs, 30 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 fadd f >|0| 0x00000006<, f >|0| 0x00000002<
    0x00000008 store *f >|0| 0x00000005<, f >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 1
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fadd f >|0| 0x0000000F<, f >|0| 0x0000000B<
    0x00000011 store *f >|0| 0x0000000E<, f >|0| 0x00000010<
    0x00000012 var *__unk_type_kind 0x00000001
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 2
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|0| 0x00000015<
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 2
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 fadd f >|0| 0x00000018<, f >|0| 0x00000014<
    0x0000001A store *f >|0| 0x00000017<, f >|0| 0x00000019<
    0x0000001B var *__unk_type_kind 0x00000001
    0x0000001C call awD "__defer__" (*__unk_type_kind >|0| 0x0000001B<) void
    0x0000001D ret
fn subtract aS9 -> void
    {1 BBs, 30 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 fsub f >|0| 0x00000006<, f >|0| 0x00000002<
    0x00000008 store *f >|0| 0x00000005<, f >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 1
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fsub f >|0| 0x0000000F<, f >|0| 0x0000000B<
    0x00000011 store *f >|0| 0x0000000E<, f >|0| 0x00000010<
    0x00000012 var *__unk_type_kind 0x00000001
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 2
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|0| 0x00000015<
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 2
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 fsub f >|0| 0x00000018<, f >|0| 0x00000014<
    0x0000001A store *f >|0| 0x00000017<, f >|0| 0x00000019<
    0x0000001B var *__unk_type_kind 0x00000001
    0x0000001C call awD "__defer__" (*__unk_type_kind >|0| 0x0000001B<) void
    0x0000001D ret
fn multiply aT9 -> void
    {1 BBs, 30 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 fmul f >|0| 0x00000006<, f >|0| 0x00000002<
    0x00000008 store *f >|0| 0x00000005<, f >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 1
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fmul f >|0| 0x0000000F<, f >|0| 0x0000000B<
    0x00000011 store *f >|0| 0x0000000E<, f >|0| 0x00000010<
    0x00000012 var *__unk_type_kind 0x00000001
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 2
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|0| 0x00000015<
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 2
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 fmul f >|0| 0x00000018<, f >|0| 0x00000014<
    0x0000001A store *f >|0| 0x00000017<, f >|0| 0x00000019<
    0x0000001B var *__unk_type_kind 0x00000001
    0x0000001C call awD "__defer__" (*__unk_type_kind >|0| 0x0000001B<) void
    0x0000001D ret
fn negate aU9 -> void
    {1 BBs, 19 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 fmul f >|0| 0x00000003<, f -1.000000
    0x00000005 store *f >|0| 0x00000002<, f >|0| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fmul f >|0| 0x00000009<, f -1.000000
    0x0000000B store *f >|0| 0x00000008<, f >|0| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 2
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fmul f >|0| 0x0000000F<, f -1.000000
    0x00000011 store *f >|0| 0x0000000E<, f >|0| 0x00000010<
    0x00000012 ret
fn scale aV9 -> void
    {1 BBs, 25 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000001
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 fmul f >|0| 0x00000005<, f >|0| 0x00000001<
    0x00000007 store *f >|0| 0x00000004<, f >|0| 0x00000006<
    0x00000008 var *f 0x00000001
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|0| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E fmul f >|0| 0x0000000D<, f >|0| 0x00000009<
    0x0000000F store *f >|0| 0x0000000C<, f >|0| 0x0000000E<
    0x00000010 var *f 0x00000001
    0x00000011 load *f >|0| 0x00000010<
    0x00000012 var **__unk_type_kind 0x00000000
    0x00000013 load **__unk_type_kind >|0| 0x00000012<
    0x00000014 memb *__unk_type_kind >|0| 0x00000013<, 2
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 fmul f >|0| 0x00000015<, f >|0| 0x00000011<
    0x00000017 store *f >|0| 0x00000014<, f >|0| 0x00000016<
    0x00000018 ret
fn normalize aW9 -> void
    {6 BBs, 76 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 var *f 0x00000001
    0x00000005 store *f >|0| 0x00000004<, f >|0| 0x00000003<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000002
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 2
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *f 0x00000003
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000F<
    0x00000012 var *f 0x00000001
    0x00000013 load *f >|0| 0x00000012<
    0x00000014 var *f 0x00000001
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 fmul f >|0| 0x00000013<, f >|0| 0x00000015<
    0x00000017 var *f 0x00000002
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 var *f 0x00000002
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fmul f >|0| 0x00000018<, f >|0| 0x0000001A<
    0x0000001C fadd f >|0| 0x00000016<, f >|0| 0x0000001B<
    0x0000001D var *f 0x00000003
    0x0000001E load *f >|0| 0x0000001D<
    0x0000001F var *f 0x00000003
    0x00000020 load *f >|0| 0x0000001F<
    0x00000021 fmul f >|0| 0x0000001E<, f >|0| 0x00000020<
    0x00000022 fadd f >|0| 0x0000001C<, f >|0| 0x00000021<
    0x00000023 call aF9 "sqrtf" (f >|0| 0x00000022<) f
    0x00000024 var *f 0x00000004
    0x00000025 store *f >|0| 0x00000024<, f >|0| 0x00000023<
    0x00000026 var *f 0x00000004
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 feq f >|0| 0x00000027<, f 0.000000
    0x00000029 cbr f >|0| 0x00000028<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call aP9 "set" (*__unk_type_kind >|1| 0x00000001<, f 0.000000, f 0.000000, f 0.000000) void
    0x00000003 ret
  BASICBLOCK |2|
    0x00000000 var *f 0x00000004
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 feq f >|2| 0x00000001<, f 1.000000
    0x00000003 cbr f >|2| 0x00000002<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var *f 0x00000004
    0x00000001 load *f >|3| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|3| 0x00000001<
    0x00000003 var *f 0x00000004
    0x00000004 store *f >|3| 0x00000003<, f >|3| 0x00000002<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|3| 0x00000005<
    0x00000007 var *f 0x00000001
    0x00000008 load *f >|3| 0x00000007<
    0x00000009 var *f 0x00000004
    0x0000000A load *f >|3| 0x00000009<
    0x0000000B fmul f >|3| 0x00000008<, f >|3| 0x0000000A<
    0x0000000C var *f 0x00000002
    0x0000000D load *f >|3| 0x0000000C<
    0x0000000E var *f 0x00000004
    0x0000000F load *f >|3| 0x0000000E<
    0x00000010 fmul f >|3| 0x0000000D<, f >|3| 0x0000000F<
    0x00000011 var *f 0x00000003
    0x00000012 load *f >|3| 0x00000011<
    0x00000013 var *f 0x00000004
    0x00000014 load *f >|3| 0x00000013<
    0x00000015 fmul f >|3| 0x00000012<, f >|3| 0x00000014<
    0x00000016 call aP9 "set" (*__unk_type_kind >|3| 0x00000006<, f >|3| 0x0000000B<, f >|3| 0x00000010<, f >|3| 0x00000015<) void
    0x00000017 ret
  BASICBLOCK |4|
    0x00000000 ret
  BASICBLOCK |5|
    0x00000000 br |3|
fn cross aX9 -> void
    {1 BBs, 81 INSTRs, 8 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 var *f 0x00000002
    0x00000005 store *f >|0| 0x00000004<, f >|0| 0x00000003<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000003
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 2
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *f 0x00000004
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000F<
    0x00000012 var *__unk_type_kind 0x00000001
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 0
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 var *f 0x00000005
    0x00000016 store *f >|0| 0x00000015<, f >|0| 0x00000014<
    0x00000017 var *__unk_type_kind 0x00000001
    0x00000018 memb *__unk_type_kind >|0| 0x00000017<, 1
    0x00000019 load *f >|0| 0x00000018<
    0x0000001A var *f 0x00000006
    0x0000001B store *f >|0| 0x0000001A<, f >|0| 0x00000019<
    0x0000001C var *__unk_type_kind 0x00000001
    0x0000001D memb *__unk_type_kind >|0| 0x0000001C<, 2
    0x0000001E load *f >|0| 0x0000001D<
    0x0000001F var *f 0x00000007
    0x00000020 store *f >|0| 0x0000001F<, f >|0| 0x0000001E<
    0x00000021 var *f 0x00000003
    0x00000022 load *f >|0| 0x00000021<
    0x00000023 var *f 0x00000007
    0x00000024 load *f >|0| 0x00000023<
    0x00000025 fmul f >|0| 0x00000022<, f >|0| 0x00000024<
    0x00000026 var *f 0x00000004
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var *f 0x00000006
    0x00000029 load *f >|0| 0x00000028<
    0x0000002A fmul f >|0| 0x00000027<, f >|0| 0x00000029<
    0x0000002B fsub f >|0| 0x00000025<, f >|0| 0x0000002A<
    0x0000002C var **__unk_type_kind 0x00000000
    0x0000002D load **__unk_type_kind >|0| 0x0000002C<
    0x0000002E memb *__unk_type_kind >|0| 0x0000002D<, 0
    0x0000002F store *f >|0| 0x0000002E<, f >|0| 0x0000002B<
    0x00000030 var *f 0x00000004
    0x00000031 load *f >|0| 0x00000030<
    0x00000032 var *f 0x00000005
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 fmul f >|0| 0x00000031<, f >|0| 0x00000033<
    0x00000035 var *f 0x00000002
    0x00000036 load *f >|0| 0x00000035<
    0x00000037 var *f 0x00000007
    0x00000038 load *f >|0| 0x00000037<
    0x00000039 fmul f >|0| 0x00000036<, f >|0| 0x00000038<
    0x0000003A fsub f >|0| 0x00000034<, f >|0| 0x00000039<
    0x0000003B var **__unk_type_kind 0x00000000
    0x0000003C load **__unk_type_kind >|0| 0x0000003B<
    0x0000003D memb *__unk_type_kind >|0| 0x0000003C<, 1
    0x0000003E store *f >|0| 0x0000003D<, f >|0| 0x0000003A<
    0x0000003F var *f 0x00000002
    0x00000040 load *f >|0| 0x0000003F<
    0x00000041 var *f 0x00000006
    0x00000042 load *f >|0| 0x00000041<
    0x00000043 fmul f >|0| 0x00000040<, f >|0| 0x00000042<
    0x00000044 var *f 0x00000003
    0x00000045 load *f >|0| 0x00000044<
    0x00000046 var *f 0x00000005
    0x00000047 load *f >|0| 0x00000046<
    0x00000048 fmul f >|0| 0x00000045<, f >|0| 0x00000047<
    0x00000049 fsub f >|0| 0x00000043<, f >|0| 0x00000048<
    0x0000004A var **__unk_type_kind 0x00000000
    0x0000004B load **__unk_type_kind >|0| 0x0000004A<
    0x0000004C memb *__unk_type_kind >|0| 0x0000004B<, 2
    0x0000004D store *f >|0| 0x0000004C<, f >|0| 0x00000049<
    0x0000004E var *__unk_type_kind 0x00000001
    0x0000004F call awD "__defer__" (*__unk_type_kind >|0| 0x0000004E<) void
    0x00000050 ret
fn length aY9 -> f
    {1 BBs, 37 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 var *f 0x00000001
    0x00000005 store *f >|0| 0x00000004<, f >|0| 0x00000003<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000002
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 2
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *f 0x00000003
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000F<
    0x00000012 var *f 0x00000001
    0x00000013 load *f >|0| 0x00000012<
    0x00000014 var *f 0x00000001
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 fmul f >|0| 0x00000013<, f >|0| 0x00000015<
    0x00000017 var *f 0x00000002
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 var *f 0x00000002
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fmul f >|0| 0x00000018<, f >|0| 0x0000001A<
    0x0000001C fadd f >|0| 0x00000016<, f >|0| 0x0000001B<
    0x0000001D var *f 0x00000003
    0x0000001E load *f >|0| 0x0000001D<
    0x0000001F var *f 0x00000003
    0x00000020 load *f >|0| 0x0000001F<
    0x00000021 fmul f >|0| 0x0000001E<, f >|0| 0x00000020<
    0x00000022 fadd f >|0| 0x0000001C<, f >|0| 0x00000021<
    0x00000023 call aF9 "sqrtf" (f >|0| 0x00000022<) f
    0x00000024 ret f >|0| 0x00000023<
fn dot aZ9 -> f
    {1 BBs, 29 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 call awD "__defer__" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000001
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 fmul f >|0| 0x00000005<, f >|0| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|0| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000001
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 1
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 fmul f >|0| 0x0000000D<, f >|0| 0x00000010<
    0x00000012 fadd f >|0| 0x00000009<, f >|0| 0x00000011<
    0x00000013 var **__unk_type_kind 0x00000000
    0x00000014 load **__unk_type_kind >|0| 0x00000013<
    0x00000015 memb *__unk_type_kind >|0| 0x00000014<, 2
    0x00000016 load *f >|0| 0x00000015<
    0x00000017 var *__unk_type_kind 0x00000001
    0x00000018 memb *__unk_type_kind >|0| 0x00000017<, 2
    0x00000019 load *f >|0| 0x00000018<
    0x0000001A fmul f >|0| 0x00000016<, f >|0| 0x00000019<
    0x0000001B fadd f >|0| 0x00000012<, f >|0| 0x0000001A<
    0x0000001C ret f >|0| 0x0000001B<
fn direction aa9 -> void
    {3 BBs, 86 INSTRs, 6 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 fsub f >|0| 0x00000003<, f >|0| 0x00000006<
    0x00000008 var *f 0x00000002
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|0| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000001
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 1
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 fsub f >|0| 0x0000000D<, f >|0| 0x00000010<
    0x00000012 var *f 0x00000003
    0x00000013 store *f >|0| 0x00000012<, f >|0| 0x00000011<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|0| 0x00000014<
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 2
    0x00000017 load *f >|0| 0x00000016<
    0x00000018 var *__unk_type_kind 0x00000001
    0x00000019 memb *__unk_type_kind >|0| 0x00000018<, 2
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fsub f >|0| 0x00000017<, f >|0| 0x0000001A<
    0x0000001C var *f 0x00000004
    0x0000001D store *f >|0| 0x0000001C<, f >|0| 0x0000001B<
    0x0000001E var *f 0x00000002
    0x0000001F load *f >|0| 0x0000001E<
    0x00000020 var *f 0x00000002
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 fmul f >|0| 0x0000001F<, f >|0| 0x00000021<
    0x00000023 var *f 0x00000003
    0x00000024 load *f >|0| 0x00000023<
    0x00000025 var *f 0x00000003
    0x00000026 load *f >|0| 0x00000025<
    0x00000027 fmul f >|0| 0x00000024<, f >|0| 0x00000026<
    0x00000028 fadd f >|0| 0x00000022<, f >|0| 0x00000027<
    0x00000029 var *f 0x00000004
    0x0000002A load *f >|0| 0x00000029<
    0x0000002B var *f 0x00000004
    0x0000002C load *f >|0| 0x0000002B<
    0x0000002D fmul f >|0| 0x0000002A<, f >|0| 0x0000002C<
    0x0000002E fadd f >|0| 0x00000028<, f >|0| 0x0000002D<
    0x0000002F call aF9 "sqrtf" (f >|0| 0x0000002E<) f
    0x00000030 var *f 0x00000005
    0x00000031 store *f >|0| 0x00000030<, f >|0| 0x0000002F<
    0x00000032 var *f 0x00000005
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 feq f >|0| 0x00000033<, f 0.000000
    0x00000035 cbr f >|0| 0x00000034<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call aP9 "set" (*__unk_type_kind >|1| 0x00000001<, f 0.000000, f 0.000000, f 0.000000) void
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 call awD "__defer__" (*__unk_type_kind >|1| 0x00000003<) void
    0x00000005 ret
  BASICBLOCK |2|
    0x00000000 var *f 0x00000005
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|2| 0x00000001<
    0x00000003 var *f 0x00000005
    0x00000004 store *f >|2| 0x00000003<, f >|2| 0x00000002<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|2| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|2| 0x00000007<
    0x00000009 var *f 0x00000005
    0x0000000A load *f >|2| 0x00000009<
    0x0000000B fmul f >|2| 0x00000008<, f >|2| 0x0000000A<
    0x0000000C var *f 0x00000003
    0x0000000D load *f >|2| 0x0000000C<
    0x0000000E var *f 0x00000005
    0x0000000F load *f >|2| 0x0000000E<
    0x00000010 fmul f >|2| 0x0000000D<, f >|2| 0x0000000F<
    0x00000011 var *f 0x00000004
    0x00000012 load *f >|2| 0x00000011<
    0x00000013 var *f 0x00000005
    0x00000014 load *f >|2| 0x00000013<
    0x00000015 fmul f >|2| 0x00000012<, f >|2| 0x00000014<
    0x00000016 call aP9 "set" (*__unk_type_kind >|2| 0x00000006<, f >|2| 0x0000000B<, f >|2| 0x00000010<, f >|2| 0x00000015<) void
    0x00000017 var *__unk_type_kind 0x00000001
    0x00000018 call awD "__defer__" (*__unk_type_kind >|2| 0x00000017<) void
    0x00000019 ret
fn lerp ab9 -> void
    {1 BBs, 54 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000002
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000001
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 load *f >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 fsub f >|0| 0x00000004<, f >|0| 0x00000008<
    0x0000000A fmul f >|0| 0x00000001<, f >|0| 0x00000009<
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|0| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 0
    0x0000000E load *f >|0| 0x0000000D<
    0x0000000F fadd f >|0| 0x0000000E<, f >|0| 0x0000000A<
    0x00000010 store *f >|0| 0x0000000D<, f >|0| 0x0000000F<
    0x00000011 var *f 0x00000002
    0x00000012 load *f >|0| 0x00000011<
    0x00000013 var *__unk_type_kind 0x00000001
    0x00000014 memb *__unk_type_kind >|0| 0x00000013<, 1
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|0| 0x00000016<
    0x00000018 memb *__unk_type_kind >|0| 0x00000017<, 1
    0x00000019 load *f >|0| 0x00000018<
    0x0000001A fsub f >|0| 0x00000015<, f >|0| 0x00000019<
    0x0000001B fmul f >|0| 0x00000012<, f >|0| 0x0000001A<
    0x0000001C var **__unk_type_kind 0x00000000
    0x0000001D load **__unk_type_kind >|0| 0x0000001C<
    0x0000001E memb *__unk_type_kind >|0| 0x0000001D<, 1
    0x0000001F load *f >|0| 0x0000001E<
    0x00000020 fadd f >|0| 0x0000001F<, f >|0| 0x0000001B<
    0x00000021 store *f >|0| 0x0000001E<, f >|0| 0x00000020<
    0x00000022 var *f 0x00000002
    0x00000023 load *f >|0| 0x00000022<
    0x00000024 var *__unk_type_kind 0x00000001
    0x00000025 memb *__unk_type_kind >|0| 0x00000024<, 2
    0x00000026 load *f >|0| 0x00000025<
    0x00000027 var **__unk_type_kind 0x00000000
    0x00000028 load **__unk_type_kind >|0| 0x00000027<
    0x00000029 memb *__unk_type_kind >|0| 0x00000028<, 2
    0x0000002A load *f >|0| 0x00000029<
    0x0000002B fsub f >|0| 0x00000026<, f >|0| 0x0000002A<
    0x0000002C fmul f >|0| 0x00000023<, f >|0| 0x0000002B<
    0x0000002D var **__unk_type_kind 0x00000000
    0x0000002E load **__unk_type_kind >|0| 0x0000002D<
    0x0000002F memb *__unk_type_kind >|0| 0x0000002E<, 2
    0x00000030 load *f >|0| 0x0000002F<
    0x00000031 fadd f >|0| 0x00000030<, f >|0| 0x0000002C<
    0x00000032 store *f >|0| 0x0000002F<, f >|0| 0x00000031<
    0x00000033 var *__unk_type_kind 0x00000001
    0x00000034 call awD "__defer__" (*__unk_type_kind >|0| 0x00000033<) void
    0x00000035 ret
fn lerp ac9 -> void
    {1 BBs, 8 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000001
    0x00000003 load *__unk_type_kind >|0| 0x00000002<
    0x00000004 call ab9 "lerp" (*__unk_type_kind >|0| 0x00000001<, __unk_type_kind >|0| 0x00000003<, f 0.500000) void
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 call awD "__defer__" (*__unk_type_kind >|0| 0x00000005<) void
    0x00000007 ret
fn distance ad9 -> f
    {1 BBs, 51 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 fsub f >|0| 0x00000002<, f >|0| 0x00000006<
    0x00000008 var *f 0x00000002
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 1
    0x0000000C load *f >|0| 0x0000000B<
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|0| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 1
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 fsub f >|0| 0x0000000C<, f >|0| 0x00000010<
    0x00000012 var *f 0x00000003
    0x00000013 store *f >|0| 0x00000012<, f >|0| 0x00000011<
    0x00000014 var *__unk_type_kind 0x00000001
    0x00000015 memb *__unk_type_kind >|0| 0x00000014<, 2
    0x00000016 load *f >|0| 0x00000015<
    0x00000017 var **__unk_type_kind 0x00000000
    0x00000018 load **__unk_type_kind >|0| 0x00000017<
    0x00000019 memb *__unk_type_kind >|0| 0x00000018<, 2
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fsub f >|0| 0x00000016<, f >|0| 0x0000001A<
    0x0000001C var *f 0x00000004
    0x0000001D store *f >|0| 0x0000001C<, f >|0| 0x0000001B<
    0x0000001E var *__unk_type_kind 0x00000001
    0x0000001F call awD "__defer__" (*__unk_type_kind >|0| 0x0000001E<) void
    0x00000020 var *f 0x00000002
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 var *f 0x00000002
    0x00000023 load *f >|0| 0x00000022<
    0x00000024 fmul f >|0| 0x00000021<, f >|0| 0x00000023<
    0x00000025 var *f 0x00000003
    0x00000026 load *f >|0| 0x00000025<
    0x00000027 var *f 0x00000003
    0x00000028 load *f >|0| 0x00000027<
    0x00000029 fmul f >|0| 0x00000026<, f >|0| 0x00000028<
    0x0000002A fadd f >|0| 0x00000024<, f >|0| 0x00000029<
    0x0000002B var *f 0x00000004
    0x0000002C load *f >|0| 0x0000002B<
    0x0000002D var *f 0x00000004
    0x0000002E load *f >|0| 0x0000002D<
    0x0000002F fmul f >|0| 0x0000002C<, f >|0| 0x0000002E<
    0x00000030 fadd f >|0| 0x0000002A<, f >|0| 0x0000002F<
    0x00000031 call aF9 "sqrtf" (f >|0| 0x00000030<) f
    0x00000032 ret f >|0| 0x00000031<
fn toString ae9 -> __unk_type_kind
    {1 BBs, 19 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 fext f >|0| 0x00000003< to d
    0x00000005 call aEA "__modulus__" (stru, d >|0| 0x00000004<) __unk_type_kind
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fext f >|0| 0x00000009< to d
    0x0000000B call aEA "__modulus__" (__unk_type_kind >|0| 0x00000005<, d >|0| 0x0000000A<) __unk_type_kind
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 2
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fext f >|0| 0x0000000F< to d
    0x00000011 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000000B<, d >|0| 0x00000010<) __unk_type_kind
    0x00000012 ret __unk_type_kind >|0| 0x00000011<
fn print af9 -> void
    {1 BBs, 17 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 fext f >|0| 0x00000003< to d
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 1
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 fext f >|0| 0x00000008< to d
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|0| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 2
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E fext f >|0| 0x0000000D< to d
    0x0000000F call aF8 "printf" (cstroflen 23 "Vector3f {%f, %f, %f}
", d >|0| 0x00000004<, d >|0| 0x00000009<, d >|0| 0x0000000E<) s32
    0x00000010 ret
fn zero ag9 -> void
    {5 BBs, 23 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *f]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 ult u64 >|1| 0x00000000<, u64 16
    0x00000002 cbr u64 >|1| 0x00000001<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 bc *[16] f >|2| 0x00000002< to *f
    0x00000004 var *f 0x00000002
    0x00000005 load *u64 >|0| 0x00000000<
    0x00000006 arracc *f >|2| 0x00000003<, u64 >|2| 0x00000005<
    0x00000007 store *f >|2| 0x00000004<, *f >|2| 0x00000006<
    0x00000008 var **f 0x00000002
    0x00000009 load **f >|2| 0x00000008<
    0x0000000A store *f >|2| 0x00000009<, f 0.000000
    0x0000000B br |3|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 ret
fn identity ah9 -> void
    {1 BBs, 71 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 0
    0x00000009 store *f >|0| 0x00000008<, f 1.000000
    0x0000000A var **f 0x00000001
    0x0000000B load **f >|0| 0x0000000A<
    0x0000000C arracc *f >|0| 0x0000000B<, s32 1
    0x0000000D store *f >|0| 0x0000000C<, f 0.000000
    0x0000000E var **f 0x00000001
    0x0000000F load **f >|0| 0x0000000E<
    0x00000010 arracc *f >|0| 0x0000000F<, s32 2
    0x00000011 store *f >|0| 0x00000010<, f 0.000000
    0x00000012 var **f 0x00000001
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 3
    0x00000015 store *f >|0| 0x00000014<, f 0.000000
    0x00000016 var **f 0x00000001
    0x00000017 load **f >|0| 0x00000016<
    0x00000018 arracc *f >|0| 0x00000017<, s32 4
    0x00000019 store *f >|0| 0x00000018<, f 0.000000
    0x0000001A var **f 0x00000001
    0x0000001B load **f >|0| 0x0000001A<
    0x0000001C arracc *f >|0| 0x0000001B<, s32 5
    0x0000001D store *f >|0| 0x0000001C<, f 1.000000
    0x0000001E var **f 0x00000001
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 6
    0x00000021 store *f >|0| 0x00000020<, f 0.000000
    0x00000022 var **f 0x00000001
    0x00000023 load **f >|0| 0x00000022<
    0x00000024 arracc *f >|0| 0x00000023<, s32 7
    0x00000025 store *f >|0| 0x00000024<, f 0.000000
    0x00000026 var **f 0x00000001
    0x00000027 load **f >|0| 0x00000026<
    0x00000028 arracc *f >|0| 0x00000027<, s32 8
    0x00000029 store *f >|0| 0x00000028<, f 0.000000
    0x0000002A var **f 0x00000001
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 9
    0x0000002D store *f >|0| 0x0000002C<, f 0.000000
    0x0000002E var **f 0x00000001
    0x0000002F load **f >|0| 0x0000002E<
    0x00000030 arracc *f >|0| 0x0000002F<, s32 10
    0x00000031 store *f >|0| 0x00000030<, f 1.000000
    0x00000032 var **f 0x00000001
    0x00000033 load **f >|0| 0x00000032<
    0x00000034 arracc *f >|0| 0x00000033<, s32 11
    0x00000035 store *f >|0| 0x00000034<, f 0.000000
    0x00000036 var **f 0x00000001
    0x00000037 load **f >|0| 0x00000036<
    0x00000038 arracc *f >|0| 0x00000037<, s32 12
    0x00000039 store *f >|0| 0x00000038<, f 0.000000
    0x0000003A var **f 0x00000001
    0x0000003B load **f >|0| 0x0000003A<
    0x0000003C arracc *f >|0| 0x0000003B<, s32 13
    0x0000003D store *f >|0| 0x0000003C<, f 0.000000
    0x0000003E var **f 0x00000001
    0x0000003F load **f >|0| 0x0000003E<
    0x00000040 arracc *f >|0| 0x0000003F<, s32 14
    0x00000041 store *f >|0| 0x00000040<, f 0.000000
    0x00000042 var **f 0x00000001
    0x00000043 load **f >|0| 0x00000042<
    0x00000044 arracc *f >|0| 0x00000043<, s32 15
    0x00000045 store *f >|0| 0x00000044<, f 1.000000
    0x00000046 ret
fn identity ai9 -> void
    {1 BBs, 79 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000002
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *f 0x00000001
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var **f 0x00000002
    0x00000009 load **f >|0| 0x00000008<
    0x0000000A arracc *f >|0| 0x00000009<, s32 0
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000007<
    0x0000000C var **f 0x00000002
    0x0000000D load **f >|0| 0x0000000C<
    0x0000000E arracc *f >|0| 0x0000000D<, s32 1
    0x0000000F store *f >|0| 0x0000000E<, f 0.000000
    0x00000010 var **f 0x00000002
    0x00000011 load **f >|0| 0x00000010<
    0x00000012 arracc *f >|0| 0x00000011<, s32 2
    0x00000013 store *f >|0| 0x00000012<, f 0.000000
    0x00000014 var **f 0x00000002
    0x00000015 load **f >|0| 0x00000014<
    0x00000016 arracc *f >|0| 0x00000015<, s32 3
    0x00000017 store *f >|0| 0x00000016<, f 0.000000
    0x00000018 var **f 0x00000002
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A arracc *f >|0| 0x00000019<, s32 4
    0x0000001B store *f >|0| 0x0000001A<, f 0.000000
    0x0000001C var *f 0x00000001
    0x0000001D load *f >|0| 0x0000001C<
    0x0000001E var **f 0x00000002
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 5
    0x00000021 store *f >|0| 0x00000020<, f >|0| 0x0000001D<
    0x00000022 var **f 0x00000002
    0x00000023 load **f >|0| 0x00000022<
    0x00000024 arracc *f >|0| 0x00000023<, s32 6
    0x00000025 store *f >|0| 0x00000024<, f 0.000000
    0x00000026 var **f 0x00000002
    0x00000027 load **f >|0| 0x00000026<
    0x00000028 arracc *f >|0| 0x00000027<, s32 7
    0x00000029 store *f >|0| 0x00000028<, f 0.000000
    0x0000002A var **f 0x00000002
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 8
    0x0000002D store *f >|0| 0x0000002C<, f 0.000000
    0x0000002E var **f 0x00000002
    0x0000002F load **f >|0| 0x0000002E<
    0x00000030 arracc *f >|0| 0x0000002F<, s32 9
    0x00000031 store *f >|0| 0x00000030<, f 0.000000
    0x00000032 var *f 0x00000001
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 var **f 0x00000002
    0x00000035 load **f >|0| 0x00000034<
    0x00000036 arracc *f >|0| 0x00000035<, s32 10
    0x00000037 store *f >|0| 0x00000036<, f >|0| 0x00000033<
    0x00000038 var **f 0x00000002
    0x00000039 load **f >|0| 0x00000038<
    0x0000003A arracc *f >|0| 0x00000039<, s32 11
    0x0000003B store *f >|0| 0x0000003A<, f 0.000000
    0x0000003C var **f 0x00000002
    0x0000003D load **f >|0| 0x0000003C<
    0x0000003E arracc *f >|0| 0x0000003D<, s32 12
    0x0000003F store *f >|0| 0x0000003E<, f 0.000000
    0x00000040 var **f 0x00000002
    0x00000041 load **f >|0| 0x00000040<
    0x00000042 arracc *f >|0| 0x00000041<, s32 13
    0x00000043 store *f >|0| 0x00000042<, f 0.000000
    0x00000044 var **f 0x00000002
    0x00000045 load **f >|0| 0x00000044<
    0x00000046 arracc *f >|0| 0x00000045<, s32 14
    0x00000047 store *f >|0| 0x00000046<, f 0.000000
    0x00000048 var *f 0x00000001
    0x00000049 load *f >|0| 0x00000048<
    0x0000004A var **f 0x00000002
    0x0000004B load **f >|0| 0x0000004A<
    0x0000004C arracc *f >|0| 0x0000004B<, s32 15
    0x0000004D store *f >|0| 0x0000004C<, f >|0| 0x00000049<
    0x0000004E ret
fn transpose aj9 -> void
    {1 BBs, 127 INSTRs, 8 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 1
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000002
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C var **f 0x00000001
    0x0000000D load **f >|0| 0x0000000C<
    0x0000000E arracc *f >|0| 0x0000000D<, s32 2
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *f 0x00000003
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000F<
    0x00000012 var **f 0x00000001
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 3
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 var *f 0x00000004
    0x00000017 store *f >|0| 0x00000016<, f >|0| 0x00000015<
    0x00000018 var **f 0x00000001
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A arracc *f >|0| 0x00000019<, s32 6
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C var *f 0x00000005
    0x0000001D store *f >|0| 0x0000001C<, f >|0| 0x0000001B<
    0x0000001E var **f 0x00000001
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 7
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 var *f 0x00000006
    0x00000023 store *f >|0| 0x00000022<, f >|0| 0x00000021<
    0x00000024 var **f 0x00000001
    0x00000025 load **f >|0| 0x00000024<
    0x00000026 arracc *f >|0| 0x00000025<, s32 11
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var *f 0x00000007
    0x00000029 store *f >|0| 0x00000028<, f >|0| 0x00000027<
    0x0000002A var **f 0x00000001
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 4
    0x0000002D load *f >|0| 0x0000002C<
    0x0000002E var **f 0x00000001
    0x0000002F load **f >|0| 0x0000002E<
    0x00000030 arracc *f >|0| 0x0000002F<, s32 1
    0x00000031 store *f >|0| 0x00000030<, f >|0| 0x0000002D<
    0x00000032 var **f 0x00000001
    0x00000033 load **f >|0| 0x00000032<
    0x00000034 arracc *f >|0| 0x00000033<, s32 8
    0x00000035 load *f >|0| 0x00000034<
    0x00000036 var **f 0x00000001
    0x00000037 load **f >|0| 0x00000036<
    0x00000038 arracc *f >|0| 0x00000037<, s32 2
    0x00000039 store *f >|0| 0x00000038<, f >|0| 0x00000035<
    0x0000003A var **f 0x00000001
    0x0000003B load **f >|0| 0x0000003A<
    0x0000003C arracc *f >|0| 0x0000003B<, s32 12
    0x0000003D load *f >|0| 0x0000003C<
    0x0000003E var **f 0x00000001
    0x0000003F load **f >|0| 0x0000003E<
    0x00000040 arracc *f >|0| 0x0000003F<, s32 3
    0x00000041 store *f >|0| 0x00000040<, f >|0| 0x0000003D<
    0x00000042 var *f 0x00000002
    0x00000043 load *f >|0| 0x00000042<
    0x00000044 var **f 0x00000001
    0x00000045 load **f >|0| 0x00000044<
    0x00000046 arracc *f >|0| 0x00000045<, s32 4
    0x00000047 store *f >|0| 0x00000046<, f >|0| 0x00000043<
    0x00000048 var **f 0x00000001
    0x00000049 load **f >|0| 0x00000048<
    0x0000004A arracc *f >|0| 0x00000049<, s32 9
    0x0000004B load *f >|0| 0x0000004A<
    0x0000004C var **f 0x00000001
    0x0000004D load **f >|0| 0x0000004C<
    0x0000004E arracc *f >|0| 0x0000004D<, s32 6
    0x0000004F store *f >|0| 0x0000004E<, f >|0| 0x0000004B<
    0x00000050 var **f 0x00000001
    0x00000051 load **f >|0| 0x00000050<
    0x00000052 arracc *f >|0| 0x00000051<, s32 13
    0x00000053 load *f >|0| 0x00000052<
    0x00000054 var **f 0x00000001
    0x00000055 load **f >|0| 0x00000054<
    0x00000056 arracc *f >|0| 0x00000055<, s32 7
    0x00000057 store *f >|0| 0x00000056<, f >|0| 0x00000053<
    0x00000058 var *f 0x00000003
    0x00000059 load *f >|0| 0x00000058<
    0x0000005A var **f 0x00000001
    0x0000005B load **f >|0| 0x0000005A<
    0x0000005C arracc *f >|0| 0x0000005B<, s32 8
    0x0000005D store *f >|0| 0x0000005C<, f >|0| 0x00000059<
    0x0000005E var *f 0x00000005
    0x0000005F load *f >|0| 0x0000005E<
    0x00000060 var **f 0x00000001
    0x00000061 load **f >|0| 0x00000060<
    0x00000062 arracc *f >|0| 0x00000061<, s32 9
    0x00000063 store *f >|0| 0x00000062<, f >|0| 0x0000005F<
    0x00000064 var **f 0x00000001
    0x00000065 load **f >|0| 0x00000064<
    0x00000066 arracc *f >|0| 0x00000065<, s32 14
    0x00000067 load *f >|0| 0x00000066<
    0x00000068 var **f 0x00000001
    0x00000069 load **f >|0| 0x00000068<
    0x0000006A arracc *f >|0| 0x00000069<, s32 11
    0x0000006B store *f >|0| 0x0000006A<, f >|0| 0x00000067<
    0x0000006C var *f 0x00000004
    0x0000006D load *f >|0| 0x0000006C<
    0x0000006E var **f 0x00000001
    0x0000006F load **f >|0| 0x0000006E<
    0x00000070 arracc *f >|0| 0x0000006F<, s32 12
    0x00000071 store *f >|0| 0x00000070<, f >|0| 0x0000006D<
    0x00000072 var *f 0x00000006
    0x00000073 load *f >|0| 0x00000072<
    0x00000074 var **f 0x00000001
    0x00000075 load **f >|0| 0x00000074<
    0x00000076 arracc *f >|0| 0x00000075<, s32 13
    0x00000077 store *f >|0| 0x00000076<, f >|0| 0x00000073<
    0x00000078 var *f 0x00000007
    0x00000079 load *f >|0| 0x00000078<
    0x0000007A var **f 0x00000001
    0x0000007B load **f >|0| 0x0000007A<
    0x0000007C arracc *f >|0| 0x0000007B<, s32 14
    0x0000007D store *f >|0| 0x0000007C<, f >|0| 0x00000079<
    0x0000007E ret
fn determinant ak9 -> f
    {1 BBs, 390 INSTRs, 18 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
    [0x0000000B f]
    [0x0000000C f]
    [0x0000000D f]
    [0x0000000E f]
    [0x0000000F f]
    [0x00000010 f]
    [0x00000011 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 0
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000002
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C var **f 0x00000001
    0x0000000D load **f >|0| 0x0000000C<
    0x0000000E arracc *f >|0| 0x0000000D<, s32 1
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *f 0x00000003
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000F<
    0x00000012 var **f 0x00000001
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 2
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 var *f 0x00000004
    0x00000017 store *f >|0| 0x00000016<, f >|0| 0x00000015<
    0x00000018 var **f 0x00000001
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A arracc *f >|0| 0x00000019<, s32 3
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C var *f 0x00000005
    0x0000001D store *f >|0| 0x0000001C<, f >|0| 0x0000001B<
    0x0000001E var **f 0x00000001
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 4
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 var *f 0x00000006
    0x00000023 store *f >|0| 0x00000022<, f >|0| 0x00000021<
    0x00000024 var **f 0x00000001
    0x00000025 load **f >|0| 0x00000024<
    0x00000026 arracc *f >|0| 0x00000025<, s32 5
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var *f 0x00000007
    0x00000029 store *f >|0| 0x00000028<, f >|0| 0x00000027<
    0x0000002A var **f 0x00000001
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 6
    0x0000002D load *f >|0| 0x0000002C<
    0x0000002E var *f 0x00000008
    0x0000002F store *f >|0| 0x0000002E<, f >|0| 0x0000002D<
    0x00000030 var **f 0x00000001
    0x00000031 load **f >|0| 0x00000030<
    0x00000032 arracc *f >|0| 0x00000031<, s32 7
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 var *f 0x00000009
    0x00000035 store *f >|0| 0x00000034<, f >|0| 0x00000033<
    0x00000036 var **f 0x00000001
    0x00000037 load **f >|0| 0x00000036<
    0x00000038 arracc *f >|0| 0x00000037<, s32 8
    0x00000039 load *f >|0| 0x00000038<
    0x0000003A var *f 0x0000000A
    0x0000003B store *f >|0| 0x0000003A<, f >|0| 0x00000039<
    0x0000003C var **f 0x00000001
    0x0000003D load **f >|0| 0x0000003C<
    0x0000003E arracc *f >|0| 0x0000003D<, s32 9
    0x0000003F load *f >|0| 0x0000003E<
    0x00000040 var *f 0x0000000B
    0x00000041 store *f >|0| 0x00000040<, f >|0| 0x0000003F<
    0x00000042 var **f 0x00000001
    0x00000043 load **f >|0| 0x00000042<
    0x00000044 arracc *f >|0| 0x00000043<, s32 10
    0x00000045 load *f >|0| 0x00000044<
    0x00000046 var *f 0x0000000C
    0x00000047 store *f >|0| 0x00000046<, f >|0| 0x00000045<
    0x00000048 var **f 0x00000001
    0x00000049 load **f >|0| 0x00000048<
    0x0000004A arracc *f >|0| 0x00000049<, s32 11
    0x0000004B load *f >|0| 0x0000004A<
    0x0000004C var *f 0x0000000D
    0x0000004D store *f >|0| 0x0000004C<, f >|0| 0x0000004B<
    0x0000004E var **f 0x00000001
    0x0000004F load **f >|0| 0x0000004E<
    0x00000050 arracc *f >|0| 0x0000004F<, s32 12
    0x00000051 load *f >|0| 0x00000050<
    0x00000052 var *f 0x0000000E
    0x00000053 store *f >|0| 0x00000052<, f >|0| 0x00000051<
    0x00000054 var **f 0x00000001
    0x00000055 load **f >|0| 0x00000054<
    0x00000056 arracc *f >|0| 0x00000055<, s32 13
    0x00000057 load *f >|0| 0x00000056<
    0x00000058 var *f 0x0000000F
    0x00000059 store *f >|0| 0x00000058<, f >|0| 0x00000057<
    0x0000005A var **f 0x00000001
    0x0000005B load **f >|0| 0x0000005A<
    0x0000005C arracc *f >|0| 0x0000005B<, s32 14
    0x0000005D load *f >|0| 0x0000005C<
    0x0000005E var *f 0x00000010
    0x0000005F store *f >|0| 0x0000005E<, f >|0| 0x0000005D<
    0x00000060 var **f 0x00000001
    0x00000061 load **f >|0| 0x00000060<
    0x00000062 arracc *f >|0| 0x00000061<, s32 15
    0x00000063 load *f >|0| 0x00000062<
    0x00000064 var *f 0x00000011
    0x00000065 store *f >|0| 0x00000064<, f >|0| 0x00000063<
    0x00000066 var *f 0x0000000E
    0x00000067 load *f >|0| 0x00000066<
    0x00000068 var *f 0x0000000B
    0x00000069 load *f >|0| 0x00000068<
    0x0000006A fmul f >|0| 0x00000067<, f >|0| 0x00000069<
    0x0000006B var *f 0x00000008
    0x0000006C load *f >|0| 0x0000006B<
    0x0000006D fmul f >|0| 0x0000006A<, f >|0| 0x0000006C<
    0x0000006E var *f 0x00000005
    0x0000006F load *f >|0| 0x0000006E<
    0x00000070 fmul f >|0| 0x0000006D<, f >|0| 0x0000006F<
    0x00000071 var *f 0x0000000A
    0x00000072 load *f >|0| 0x00000071<
    0x00000073 var *f 0x0000000F
    0x00000074 load *f >|0| 0x00000073<
    0x00000075 fmul f >|0| 0x00000072<, f >|0| 0x00000074<
    0x00000076 var *f 0x00000008
    0x00000077 load *f >|0| 0x00000076<
    0x00000078 fmul f >|0| 0x00000075<, f >|0| 0x00000077<
    0x00000079 var *f 0x00000005
    0x0000007A load *f >|0| 0x00000079<
    0x0000007B fmul f >|0| 0x00000078<, f >|0| 0x0000007A<
    0x0000007C fsub f >|0| 0x00000070<, f >|0| 0x0000007B<
    0x0000007D var *f 0x0000000E
    0x0000007E load *f >|0| 0x0000007D<
    0x0000007F var *f 0x00000007
    0x00000080 load *f >|0| 0x0000007F<
    0x00000081 fmul f >|0| 0x0000007E<, f >|0| 0x00000080<
    0x00000082 var *f 0x0000000C
    0x00000083 load *f >|0| 0x00000082<
    0x00000084 fmul f >|0| 0x00000081<, f >|0| 0x00000083<
    0x00000085 var *f 0x00000005
    0x00000086 load *f >|0| 0x00000085<
    0x00000087 fmul f >|0| 0x00000084<, f >|0| 0x00000086<
    0x00000088 fsub f >|0| 0x0000007C<, f >|0| 0x00000087<
    0x00000089 var *f 0x00000006
    0x0000008A load *f >|0| 0x00000089<
    0x0000008B var *f 0x0000000F
    0x0000008C load *f >|0| 0x0000008B<
    0x0000008D fmul f >|0| 0x0000008A<, f >|0| 0x0000008C<
    0x0000008E var *f 0x0000000C
    0x0000008F load *f >|0| 0x0000008E<
    0x00000090 fmul f >|0| 0x0000008D<, f >|0| 0x0000008F<
    0x00000091 var *f 0x00000005
    0x00000092 load *f >|0| 0x00000091<
    0x00000093 fmul f >|0| 0x00000090<, f >|0| 0x00000092<
    0x00000094 fadd f >|0| 0x00000088<, f >|0| 0x00000093<
    0x00000095 var *f 0x0000000A
    0x00000096 load *f >|0| 0x00000095<
    0x00000097 var *f 0x00000007
    0x00000098 load *f >|0| 0x00000097<
    0x00000099 fmul f >|0| 0x00000096<, f >|0| 0x00000098<
    0x0000009A var *f 0x00000010
    0x0000009B load *f >|0| 0x0000009A<
    0x0000009C fmul f >|0| 0x00000099<, f >|0| 0x0000009B<
    0x0000009D var *f 0x00000005
    0x0000009E load *f >|0| 0x0000009D<
    0x0000009F fmul f >|0| 0x0000009C<, f >|0| 0x0000009E<
    0x000000A0 fadd f >|0| 0x00000094<, f >|0| 0x0000009F<
    0x000000A1 var *f 0x00000006
    0x000000A2 load *f >|0| 0x000000A1<
    0x000000A3 var *f 0x0000000B
    0x000000A4 load *f >|0| 0x000000A3<
    0x000000A5 fmul f >|0| 0x000000A2<, f >|0| 0x000000A4<
    0x000000A6 var *f 0x00000010
    0x000000A7 load *f >|0| 0x000000A6<
    0x000000A8 fmul f >|0| 0x000000A5<, f >|0| 0x000000A7<
    0x000000A9 var *f 0x00000005
    0x000000AA load *f >|0| 0x000000A9<
    0x000000AB fmul f >|0| 0x000000A8<, f >|0| 0x000000AA<
    0x000000AC fsub f >|0| 0x000000A0<, f >|0| 0x000000AB<
    0x000000AD var *f 0x0000000E
    0x000000AE load *f >|0| 0x000000AD<
    0x000000AF var *f 0x0000000B
    0x000000B0 load *f >|0| 0x000000AF<
    0x000000B1 fmul f >|0| 0x000000AE<, f >|0| 0x000000B0<
    0x000000B2 var *f 0x00000004
    0x000000B3 load *f >|0| 0x000000B2<
    0x000000B4 fmul f >|0| 0x000000B1<, f >|0| 0x000000B3<
    0x000000B5 var *f 0x00000009
    0x000000B6 load *f >|0| 0x000000B5<
    0x000000B7 fmul f >|0| 0x000000B4<, f >|0| 0x000000B6<
    0x000000B8 fsub f >|0| 0x000000AC<, f >|0| 0x000000B7<
    0x000000B9 var *f 0x0000000A
    0x000000BA load *f >|0| 0x000000B9<
    0x000000BB var *f 0x0000000F
    0x000000BC load *f >|0| 0x000000BB<
    0x000000BD fmul f >|0| 0x000000BA<, f >|0| 0x000000BC<
    0x000000BE var *f 0x00000004
    0x000000BF load *f >|0| 0x000000BE<
    0x000000C0 fmul f >|0| 0x000000BD<, f >|0| 0x000000BF<
    0x000000C1 var *f 0x00000009
    0x000000C2 load *f >|0| 0x000000C1<
    0x000000C3 fmul f >|0| 0x000000C0<, f >|0| 0x000000C2<
    0x000000C4 fadd f >|0| 0x000000B8<, f >|0| 0x000000C3<
    0x000000C5 var *f 0x0000000E
    0x000000C6 load *f >|0| 0x000000C5<
    0x000000C7 var *f 0x00000003
    0x000000C8 load *f >|0| 0x000000C7<
    0x000000C9 fmul f >|0| 0x000000C6<, f >|0| 0x000000C8<
    0x000000CA var *f 0x0000000C
    0x000000CB load *f >|0| 0x000000CA<
    0x000000CC fmul f >|0| 0x000000C9<, f >|0| 0x000000CB<
    0x000000CD var *f 0x00000009
    0x000000CE load *f >|0| 0x000000CD<
    0x000000CF fmul f >|0| 0x000000CC<, f >|0| 0x000000CE<
    0x000000D0 fadd f >|0| 0x000000C4<, f >|0| 0x000000CF<
    0x000000D1 var *f 0x00000002
    0x000000D2 load *f >|0| 0x000000D1<
    0x000000D3 var *f 0x0000000F
    0x000000D4 load *f >|0| 0x000000D3<
    0x000000D5 fmul f >|0| 0x000000D2<, f >|0| 0x000000D4<
    0x000000D6 var *f 0x0000000C
    0x000000D7 load *f >|0| 0x000000D6<
    0x000000D8 fmul f >|0| 0x000000D5<, f >|0| 0x000000D7<
    0x000000D9 var *f 0x00000009
    0x000000DA load *f >|0| 0x000000D9<
    0x000000DB fmul f >|0| 0x000000D8<, f >|0| 0x000000DA<
    0x000000DC fsub f >|0| 0x000000D0<, f >|0| 0x000000DB<
    0x000000DD var *f 0x0000000A
    0x000000DE load *f >|0| 0x000000DD<
    0x000000DF var *f 0x00000003
    0x000000E0 load *f >|0| 0x000000DF<
    0x000000E1 fmul f >|0| 0x000000DE<, f >|0| 0x000000E0<
    0x000000E2 var *f 0x00000010
    0x000000E3 load *f >|0| 0x000000E2<
    0x000000E4 fmul f >|0| 0x000000E1<, f >|0| 0x000000E3<
    0x000000E5 var *f 0x00000009
    0x000000E6 load *f >|0| 0x000000E5<
    0x000000E7 fmul f >|0| 0x000000E4<, f >|0| 0x000000E6<
    0x000000E8 fsub f >|0| 0x000000DC<, f >|0| 0x000000E7<
    0x000000E9 var *f 0x00000002
    0x000000EA load *f >|0| 0x000000E9<
    0x000000EB var *f 0x0000000B
    0x000000EC load *f >|0| 0x000000EB<
    0x000000ED fmul f >|0| 0x000000EA<, f >|0| 0x000000EC<
    0x000000EE var *f 0x00000010
    0x000000EF load *f >|0| 0x000000EE<
    0x000000F0 fmul f >|0| 0x000000ED<, f >|0| 0x000000EF<
    0x000000F1 var *f 0x00000009
    0x000000F2 load *f >|0| 0x000000F1<
    0x000000F3 fmul f >|0| 0x000000F0<, f >|0| 0x000000F2<
    0x000000F4 fadd f >|0| 0x000000E8<, f >|0| 0x000000F3<
    0x000000F5 var *f 0x0000000E
    0x000000F6 load *f >|0| 0x000000F5<
    0x000000F7 var *f 0x00000007
    0x000000F8 load *f >|0| 0x000000F7<
    0x000000F9 fmul f >|0| 0x000000F6<, f >|0| 0x000000F8<
    0x000000FA var *f 0x00000004
    0x000000FB load *f >|0| 0x000000FA<
    0x000000FC fmul f >|0| 0x000000F9<, f >|0| 0x000000FB<
    0x000000FD var *f 0x0000000D
    0x000000FE load *f >|0| 0x000000FD<
    0x000000FF fmul f >|0| 0x000000FC<, f >|0| 0x000000FE<
    0x00000100 fadd f >|0| 0x000000F4<, f >|0| 0x000000FF<
    0x00000101 var *f 0x00000006
    0x00000102 load *f >|0| 0x00000101<
    0x00000103 var *f 0x0000000F
    0x00000104 load *f >|0| 0x00000103<
    0x00000105 fmul f >|0| 0x00000102<, f >|0| 0x00000104<
    0x00000106 var *f 0x00000004
    0x00000107 load *f >|0| 0x00000106<
    0x00000108 fmul f >|0| 0x00000105<, f >|0| 0x00000107<
    0x00000109 var *f 0x0000000D
    0x0000010A load *f >|0| 0x00000109<
    0x0000010B fmul f >|0| 0x00000108<, f >|0| 0x0000010A<
    0x0000010C fsub f >|0| 0x00000100<, f >|0| 0x0000010B<
    0x0000010D var *f 0x0000000E
    0x0000010E load *f >|0| 0x0000010D<
    0x0000010F var *f 0x00000003
    0x00000110 load *f >|0| 0x0000010F<
    0x00000111 fmul f >|0| 0x0000010E<, f >|0| 0x00000110<
    0x00000112 var *f 0x00000008
    0x00000113 load *f >|0| 0x00000112<
    0x00000114 fmul f >|0| 0x00000111<, f >|0| 0x00000113<
    0x00000115 var *f 0x0000000D
    0x00000116 load *f >|0| 0x00000115<
    0x00000117 fmul f >|0| 0x00000114<, f >|0| 0x00000116<
    0x00000118 fsub f >|0| 0x0000010C<, f >|0| 0x00000117<
    0x00000119 var *f 0x00000002
    0x0000011A load *f >|0| 0x00000119<
    0x0000011B var *f 0x0000000F
    0x0000011C load *f >|0| 0x0000011B<
    0x0000011D fmul f >|0| 0x0000011A<, f >|0| 0x0000011C<
    0x0000011E var *f 0x00000008
    0x0000011F load *f >|0| 0x0000011E<
    0x00000120 fmul f >|0| 0x0000011D<, f >|0| 0x0000011F<
    0x00000121 var *f 0x0000000D
    0x00000122 load *f >|0| 0x00000121<
    0x00000123 fmul f >|0| 0x00000120<, f >|0| 0x00000122<
    0x00000124 fadd f >|0| 0x00000118<, f >|0| 0x00000123<
    0x00000125 var *f 0x00000006
    0x00000126 load *f >|0| 0x00000125<
    0x00000127 var *f 0x00000003
    0x00000128 load *f >|0| 0x00000127<
    0x00000129 fmul f >|0| 0x00000126<, f >|0| 0x00000128<
    0x0000012A var *f 0x00000010
    0x0000012B load *f >|0| 0x0000012A<
    0x0000012C fmul f >|0| 0x00000129<, f >|0| 0x0000012B<
    0x0000012D var *f 0x0000000D
    0x0000012E load *f >|0| 0x0000012D<
    0x0000012F fmul f >|0| 0x0000012C<, f >|0| 0x0000012E<
    0x00000130 fadd f >|0| 0x00000124<, f >|0| 0x0000012F<
    0x00000131 var *f 0x00000002
    0x00000132 load *f >|0| 0x00000131<
    0x00000133 var *f 0x00000007
    0x00000134 load *f >|0| 0x00000133<
    0x00000135 fmul f >|0| 0x00000132<, f >|0| 0x00000134<
    0x00000136 var *f 0x00000010
    0x00000137 load *f >|0| 0x00000136<
    0x00000138 fmul f >|0| 0x00000135<, f >|0| 0x00000137<
    0x00000139 var *f 0x0000000D
    0x0000013A load *f >|0| 0x00000139<
    0x0000013B fmul f >|0| 0x00000138<, f >|0| 0x0000013A<
    0x0000013C fsub f >|0| 0x00000130<, f >|0| 0x0000013B<
    0x0000013D var *f 0x0000000A
    0x0000013E load *f >|0| 0x0000013D<
    0x0000013F var *f 0x00000007
    0x00000140 load *f >|0| 0x0000013F<
    0x00000141 fmul f >|0| 0x0000013E<, f >|0| 0x00000140<
    0x00000142 var *f 0x00000004
    0x00000143 load *f >|0| 0x00000142<
    0x00000144 fmul f >|0| 0x00000141<, f >|0| 0x00000143<
    0x00000145 var *f 0x00000011
    0x00000146 load *f >|0| 0x00000145<
    0x00000147 fmul f >|0| 0x00000144<, f >|0| 0x00000146<
    0x00000148 fsub f >|0| 0x0000013C<, f >|0| 0x00000147<
    0x00000149 var *f 0x00000006
    0x0000014A load *f >|0| 0x00000149<
    0x0000014B var *f 0x0000000B
    0x0000014C load *f >|0| 0x0000014B<
    0x0000014D fmul f >|0| 0x0000014A<, f >|0| 0x0000014C<
    0x0000014E var *f 0x00000004
    0x0000014F load *f >|0| 0x0000014E<
    0x00000150 fmul f >|0| 0x0000014D<, f >|0| 0x0000014F<
    0x00000151 var *f 0x00000011
    0x00000152 load *f >|0| 0x00000151<
    0x00000153 fmul f >|0| 0x00000150<, f >|0| 0x00000152<
    0x00000154 fadd f >|0| 0x00000148<, f >|0| 0x00000153<
    0x00000155 var *f 0x0000000A
    0x00000156 load *f >|0| 0x00000155<
    0x00000157 var *f 0x00000003
    0x00000158 load *f >|0| 0x00000157<
    0x00000159 fmul f >|0| 0x00000156<, f >|0| 0x00000158<
    0x0000015A var *f 0x00000008
    0x0000015B load *f >|0| 0x0000015A<
    0x0000015C fmul f >|0| 0x00000159<, f >|0| 0x0000015B<
    0x0000015D var *f 0x00000011
    0x0000015E load *f >|0| 0x0000015D<
    0x0000015F fmul f >|0| 0x0000015C<, f >|0| 0x0000015E<
    0x00000160 fadd f >|0| 0x00000154<, f >|0| 0x0000015F<
    0x00000161 var *f 0x00000002
    0x00000162 load *f >|0| 0x00000161<
    0x00000163 var *f 0x0000000B
    0x00000164 load *f >|0| 0x00000163<
    0x00000165 fmul f >|0| 0x00000162<, f >|0| 0x00000164<
    0x00000166 var *f 0x00000008
    0x00000167 load *f >|0| 0x00000166<
    0x00000168 fmul f >|0| 0x00000165<, f >|0| 0x00000167<
    0x00000169 var *f 0x00000011
    0x0000016A load *f >|0| 0x00000169<
    0x0000016B fmul f >|0| 0x00000168<, f >|0| 0x0000016A<
    0x0000016C fsub f >|0| 0x00000160<, f >|0| 0x0000016B<
    0x0000016D var *f 0x00000006
    0x0000016E load *f >|0| 0x0000016D<
    0x0000016F var *f 0x00000003
    0x00000170 load *f >|0| 0x0000016F<
    0x00000171 fmul f >|0| 0x0000016E<, f >|0| 0x00000170<
    0x00000172 var *f 0x0000000C
    0x00000173 load *f >|0| 0x00000172<
    0x00000174 fmul f >|0| 0x00000171<, f >|0| 0x00000173<
    0x00000175 var *f 0x00000011
    0x00000176 load *f >|0| 0x00000175<
    0x00000177 fmul f >|0| 0x00000174<, f >|0| 0x00000176<
    0x00000178 fsub f >|0| 0x0000016C<, f >|0| 0x00000177<
    0x00000179 var *f 0x00000002
    0x0000017A load *f >|0| 0x00000179<
    0x0000017B var *f 0x00000007
    0x0000017C load *f >|0| 0x0000017B<
    0x0000017D fmul f >|0| 0x0000017A<, f >|0| 0x0000017C<
    0x0000017E var *f 0x0000000C
    0x0000017F load *f >|0| 0x0000017E<
    0x00000180 fmul f >|0| 0x0000017D<, f >|0| 0x0000017F<
    0x00000181 var *f 0x00000011
    0x00000182 load *f >|0| 0x00000181<
    0x00000183 fmul f >|0| 0x00000180<, f >|0| 0x00000182<
    0x00000184 fadd f >|0| 0x00000178<, f >|0| 0x00000183<
    0x00000185 ret f >|0| 0x00000184<
fn inverse al9 -> void
    {3 BBs, 698 INSTRs, 32 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
    [0x0000000B f]
    [0x0000000C f]
    [0x0000000D f]
    [0x0000000E f]
    [0x0000000F f]
    [0x00000010 f]
    [0x00000011 f]
    [0x00000012 f]
    [0x00000013 f]
    [0x00000014 f]
    [0x00000015 f]
    [0x00000016 f]
    [0x00000017 f]
    [0x00000018 f]
    [0x00000019 f]
    [0x0000001A f]
    [0x0000001B f]
    [0x0000001C f]
    [0x0000001D f]
    [0x0000001E f]
    [0x0000001F f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 0
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000002
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C var **f 0x00000001
    0x0000000D load **f >|0| 0x0000000C<
    0x0000000E arracc *f >|0| 0x0000000D<, s32 1
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *f 0x00000003
    0x00000011 store *f >|0| 0x00000010<, f >|0| 0x0000000F<
    0x00000012 var **f 0x00000001
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 2
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 var *f 0x00000004
    0x00000017 store *f >|0| 0x00000016<, f >|0| 0x00000015<
    0x00000018 var **f 0x00000001
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A arracc *f >|0| 0x00000019<, s32 3
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C var *f 0x00000005
    0x0000001D store *f >|0| 0x0000001C<, f >|0| 0x0000001B<
    0x0000001E var **f 0x00000001
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 4
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 var *f 0x00000006
    0x00000023 store *f >|0| 0x00000022<, f >|0| 0x00000021<
    0x00000024 var **f 0x00000001
    0x00000025 load **f >|0| 0x00000024<
    0x00000026 arracc *f >|0| 0x00000025<, s32 5
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var *f 0x00000007
    0x00000029 store *f >|0| 0x00000028<, f >|0| 0x00000027<
    0x0000002A var **f 0x00000001
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 6
    0x0000002D load *f >|0| 0x0000002C<
    0x0000002E var *f 0x00000008
    0x0000002F store *f >|0| 0x0000002E<, f >|0| 0x0000002D<
    0x00000030 var **f 0x00000001
    0x00000031 load **f >|0| 0x00000030<
    0x00000032 arracc *f >|0| 0x00000031<, s32 7
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 var *f 0x00000009
    0x00000035 store *f >|0| 0x00000034<, f >|0| 0x00000033<
    0x00000036 var **f 0x00000001
    0x00000037 load **f >|0| 0x00000036<
    0x00000038 arracc *f >|0| 0x00000037<, s32 8
    0x00000039 load *f >|0| 0x00000038<
    0x0000003A var *f 0x0000000A
    0x0000003B store *f >|0| 0x0000003A<, f >|0| 0x00000039<
    0x0000003C var **f 0x00000001
    0x0000003D load **f >|0| 0x0000003C<
    0x0000003E arracc *f >|0| 0x0000003D<, s32 9
    0x0000003F load *f >|0| 0x0000003E<
    0x00000040 var *f 0x0000000B
    0x00000041 store *f >|0| 0x00000040<, f >|0| 0x0000003F<
    0x00000042 var **f 0x00000001
    0x00000043 load **f >|0| 0x00000042<
    0x00000044 arracc *f >|0| 0x00000043<, s32 10
    0x00000045 load *f >|0| 0x00000044<
    0x00000046 var *f 0x0000000C
    0x00000047 store *f >|0| 0x00000046<, f >|0| 0x00000045<
    0x00000048 var **f 0x00000001
    0x00000049 load **f >|0| 0x00000048<
    0x0000004A arracc *f >|0| 0x00000049<, s32 11
    0x0000004B load *f >|0| 0x0000004A<
    0x0000004C var *f 0x0000000D
    0x0000004D store *f >|0| 0x0000004C<, f >|0| 0x0000004B<
    0x0000004E var **f 0x00000001
    0x0000004F load **f >|0| 0x0000004E<
    0x00000050 arracc *f >|0| 0x0000004F<, s32 12
    0x00000051 load *f >|0| 0x00000050<
    0x00000052 var *f 0x0000000E
    0x00000053 store *f >|0| 0x00000052<, f >|0| 0x00000051<
    0x00000054 var **f 0x00000001
    0x00000055 load **f >|0| 0x00000054<
    0x00000056 arracc *f >|0| 0x00000055<, s32 13
    0x00000057 load *f >|0| 0x00000056<
    0x00000058 var *f 0x0000000F
    0x00000059 store *f >|0| 0x00000058<, f >|0| 0x00000057<
    0x0000005A var **f 0x00000001
    0x0000005B load **f >|0| 0x0000005A<
    0x0000005C arracc *f >|0| 0x0000005B<, s32 14
    0x0000005D load *f >|0| 0x0000005C<
    0x0000005E var *f 0x00000010
    0x0000005F store *f >|0| 0x0000005E<, f >|0| 0x0000005D<
    0x00000060 var **f 0x00000001
    0x00000061 load **f >|0| 0x00000060<
    0x00000062 arracc *f >|0| 0x00000061<, s32 15
    0x00000063 load *f >|0| 0x00000062<
    0x00000064 var *f 0x00000011
    0x00000065 store *f >|0| 0x00000064<, f >|0| 0x00000063<
    0x00000066 var *f 0x00000002
    0x00000067 load *f >|0| 0x00000066<
    0x00000068 var *f 0x00000007
    0x00000069 load *f >|0| 0x00000068<
    0x0000006A fmul f >|0| 0x00000067<, f >|0| 0x00000069<
    0x0000006B var *f 0x00000003
    0x0000006C load *f >|0| 0x0000006B<
    0x0000006D var *f 0x00000006
    0x0000006E load *f >|0| 0x0000006D<
    0x0000006F fmul f >|0| 0x0000006C<, f >|0| 0x0000006E<
    0x00000070 fsub f >|0| 0x0000006A<, f >|0| 0x0000006F<
    0x00000071 var *f 0x00000012
    0x00000072 store *f >|0| 0x00000071<, f >|0| 0x00000070<
    0x00000073 var *f 0x00000002
    0x00000074 load *f >|0| 0x00000073<
    0x00000075 var *f 0x00000008
    0x00000076 load *f >|0| 0x00000075<
    0x00000077 fmul f >|0| 0x00000074<, f >|0| 0x00000076<
    0x00000078 var *f 0x00000004
    0x00000079 load *f >|0| 0x00000078<
    0x0000007A var *f 0x00000006
    0x0000007B load *f >|0| 0x0000007A<
    0x0000007C fmul f >|0| 0x00000079<, f >|0| 0x0000007B<
    0x0000007D fsub f >|0| 0x00000077<, f >|0| 0x0000007C<
    0x0000007E var *f 0x00000013
    0x0000007F store *f >|0| 0x0000007E<, f >|0| 0x0000007D<
    0x00000080 var *f 0x00000002
    0x00000081 load *f >|0| 0x00000080<
    0x00000082 var *f 0x00000009
    0x00000083 load *f >|0| 0x00000082<
    0x00000084 fmul f >|0| 0x00000081<, f >|0| 0x00000083<
    0x00000085 var *f 0x00000005
    0x00000086 load *f >|0| 0x00000085<
    0x00000087 var *f 0x00000006
    0x00000088 load *f >|0| 0x00000087<
    0x00000089 fmul f >|0| 0x00000086<, f >|0| 0x00000088<
    0x0000008A fsub f >|0| 0x00000084<, f >|0| 0x00000089<
    0x0000008B var *f 0x00000014
    0x0000008C store *f >|0| 0x0000008B<, f >|0| 0x0000008A<
    0x0000008D var *f 0x00000003
    0x0000008E load *f >|0| 0x0000008D<
    0x0000008F var *f 0x00000008
    0x00000090 load *f >|0| 0x0000008F<
    0x00000091 fmul f >|0| 0x0000008E<, f >|0| 0x00000090<
    0x00000092 var *f 0x00000004
    0x00000093 load *f >|0| 0x00000092<
    0x00000094 var *f 0x00000007
    0x00000095 load *f >|0| 0x00000094<
    0x00000096 fmul f >|0| 0x00000093<, f >|0| 0x00000095<
    0x00000097 fsub f >|0| 0x00000091<, f >|0| 0x00000096<
    0x00000098 var *f 0x00000015
    0x00000099 store *f >|0| 0x00000098<, f >|0| 0x00000097<
    0x0000009A var *f 0x00000003
    0x0000009B load *f >|0| 0x0000009A<
    0x0000009C var *f 0x00000009
    0x0000009D load *f >|0| 0x0000009C<
    0x0000009E fmul f >|0| 0x0000009B<, f >|0| 0x0000009D<
    0x0000009F var *f 0x00000005
    0x000000A0 load *f >|0| 0x0000009F<
    0x000000A1 var *f 0x00000007
    0x000000A2 load *f >|0| 0x000000A1<
    0x000000A3 fmul f >|0| 0x000000A0<, f >|0| 0x000000A2<
    0x000000A4 fsub f >|0| 0x0000009E<, f >|0| 0x000000A3<
    0x000000A5 var *f 0x00000016
    0x000000A6 store *f >|0| 0x000000A5<, f >|0| 0x000000A4<
    0x000000A7 var *f 0x00000004
    0x000000A8 load *f >|0| 0x000000A7<
    0x000000A9 var *f 0x00000009
    0x000000AA load *f >|0| 0x000000A9<
    0x000000AB fmul f >|0| 0x000000A8<, f >|0| 0x000000AA<
    0x000000AC var *f 0x00000005
    0x000000AD load *f >|0| 0x000000AC<
    0x000000AE var *f 0x00000008
    0x000000AF load *f >|0| 0x000000AE<
    0x000000B0 fmul f >|0| 0x000000AD<, f >|0| 0x000000AF<
    0x000000B1 fsub f >|0| 0x000000AB<, f >|0| 0x000000B0<
    0x000000B2 var *f 0x00000017
    0x000000B3 store *f >|0| 0x000000B2<, f >|0| 0x000000B1<
    0x000000B4 var *f 0x0000000A
    0x000000B5 load *f >|0| 0x000000B4<
    0x000000B6 var *f 0x0000000F
    0x000000B7 load *f >|0| 0x000000B6<
    0x000000B8 fmul f >|0| 0x000000B5<, f >|0| 0x000000B7<
    0x000000B9 var *f 0x0000000B
    0x000000BA load *f >|0| 0x000000B9<
    0x000000BB var *f 0x0000000E
    0x000000BC load *f >|0| 0x000000BB<
    0x000000BD fmul f >|0| 0x000000BA<, f >|0| 0x000000BC<
    0x000000BE fsub f >|0| 0x000000B8<, f >|0| 0x000000BD<
    0x000000BF var *f 0x00000018
    0x000000C0 store *f >|0| 0x000000BF<, f >|0| 0x000000BE<
    0x000000C1 var *f 0x0000000A
    0x000000C2 load *f >|0| 0x000000C1<
    0x000000C3 var *f 0x00000010
    0x000000C4 load *f >|0| 0x000000C3<
    0x000000C5 fmul f >|0| 0x000000C2<, f >|0| 0x000000C4<
    0x000000C6 var *f 0x0000000C
    0x000000C7 load *f >|0| 0x000000C6<
    0x000000C8 var *f 0x0000000E
    0x000000C9 load *f >|0| 0x000000C8<
    0x000000CA fmul f >|0| 0x000000C7<, f >|0| 0x000000C9<
    0x000000CB fsub f >|0| 0x000000C5<, f >|0| 0x000000CA<
    0x000000CC var *f 0x00000019
    0x000000CD store *f >|0| 0x000000CC<, f >|0| 0x000000CB<
    0x000000CE var *f 0x0000000A
    0x000000CF load *f >|0| 0x000000CE<
    0x000000D0 var *f 0x00000011
    0x000000D1 load *f >|0| 0x000000D0<
    0x000000D2 fmul f >|0| 0x000000CF<, f >|0| 0x000000D1<
    0x000000D3 var *f 0x0000000D
    0x000000D4 load *f >|0| 0x000000D3<
    0x000000D5 var *f 0x0000000E
    0x000000D6 load *f >|0| 0x000000D5<
    0x000000D7 fmul f >|0| 0x000000D4<, f >|0| 0x000000D6<
    0x000000D8 fsub f >|0| 0x000000D2<, f >|0| 0x000000D7<
    0x000000D9 var *f 0x0000001A
    0x000000DA store *f >|0| 0x000000D9<, f >|0| 0x000000D8<
    0x000000DB var *f 0x0000000B
    0x000000DC load *f >|0| 0x000000DB<
    0x000000DD var *f 0x00000010
    0x000000DE load *f >|0| 0x000000DD<
    0x000000DF fmul f >|0| 0x000000DC<, f >|0| 0x000000DE<
    0x000000E0 var *f 0x0000000C
    0x000000E1 load *f >|0| 0x000000E0<
    0x000000E2 var *f 0x0000000F
    0x000000E3 load *f >|0| 0x000000E2<
    0x000000E4 fmul f >|0| 0x000000E1<, f >|0| 0x000000E3<
    0x000000E5 fsub f >|0| 0x000000DF<, f >|0| 0x000000E4<
    0x000000E6 var *f 0x0000001B
    0x000000E7 store *f >|0| 0x000000E6<, f >|0| 0x000000E5<
    0x000000E8 var *f 0x0000000B
    0x000000E9 load *f >|0| 0x000000E8<
    0x000000EA var *f 0x00000011
    0x000000EB load *f >|0| 0x000000EA<
    0x000000EC fmul f >|0| 0x000000E9<, f >|0| 0x000000EB<
    0x000000ED var *f 0x0000000D
    0x000000EE load *f >|0| 0x000000ED<
    0x000000EF var *f 0x0000000F
    0x000000F0 load *f >|0| 0x000000EF<
    0x000000F1 fmul f >|0| 0x000000EE<, f >|0| 0x000000F0<
    0x000000F2 fsub f >|0| 0x000000EC<, f >|0| 0x000000F1<
    0x000000F3 var *f 0x0000001C
    0x000000F4 store *f >|0| 0x000000F3<, f >|0| 0x000000F2<
    0x000000F5 var *f 0x0000000C
    0x000000F6 load *f >|0| 0x000000F5<
    0x000000F7 var *f 0x00000011
    0x000000F8 load *f >|0| 0x000000F7<
    0x000000F9 fmul f >|0| 0x000000F6<, f >|0| 0x000000F8<
    0x000000FA var *f 0x0000000D
    0x000000FB load *f >|0| 0x000000FA<
    0x000000FC var *f 0x00000010
    0x000000FD load *f >|0| 0x000000FC<
    0x000000FE fmul f >|0| 0x000000FB<, f >|0| 0x000000FD<
    0x000000FF fsub f >|0| 0x000000F9<, f >|0| 0x000000FE<
    0x00000100 var *f 0x0000001D
    0x00000101 store *f >|0| 0x00000100<, f >|0| 0x000000FF<
    0x00000102 var *f 0x00000012
    0x00000103 load *f >|0| 0x00000102<
    0x00000104 var *f 0x0000001D
    0x00000105 load *f >|0| 0x00000104<
    0x00000106 fmul f >|0| 0x00000103<, f >|0| 0x00000105<
    0x00000107 var *f 0x00000013
    0x00000108 load *f >|0| 0x00000107<
    0x00000109 var *f 0x0000001C
    0x0000010A load *f >|0| 0x00000109<
    0x0000010B fmul f >|0| 0x00000108<, f >|0| 0x0000010A<
    0x0000010C fsub f >|0| 0x00000106<, f >|0| 0x0000010B<
    0x0000010D var *f 0x00000014
    0x0000010E load *f >|0| 0x0000010D<
    0x0000010F var *f 0x0000001B
    0x00000110 load *f >|0| 0x0000010F<
    0x00000111 fmul f >|0| 0x0000010E<, f >|0| 0x00000110<
    0x00000112 fadd f >|0| 0x0000010C<, f >|0| 0x00000111<
    0x00000113 var *f 0x00000015
    0x00000114 load *f >|0| 0x00000113<
    0x00000115 var *f 0x0000001A
    0x00000116 load *f >|0| 0x00000115<
    0x00000117 fmul f >|0| 0x00000114<, f >|0| 0x00000116<
    0x00000118 fadd f >|0| 0x00000112<, f >|0| 0x00000117<
    0x00000119 var *f 0x00000016
    0x0000011A load *f >|0| 0x00000119<
    0x0000011B var *f 0x00000019
    0x0000011C load *f >|0| 0x0000011B<
    0x0000011D fmul f >|0| 0x0000011A<, f >|0| 0x0000011C<
    0x0000011E fsub f >|0| 0x00000118<, f >|0| 0x0000011D<
    0x0000011F var *f 0x00000017
    0x00000120 load *f >|0| 0x0000011F<
    0x00000121 var *f 0x00000018
    0x00000122 load *f >|0| 0x00000121<
    0x00000123 fmul f >|0| 0x00000120<, f >|0| 0x00000122<
    0x00000124 fadd f >|0| 0x0000011E<, f >|0| 0x00000123<
    0x00000125 var *f 0x0000001E
    0x00000126 store *f >|0| 0x00000125<, f >|0| 0x00000124<
    0x00000127 var *f 0x0000001E
    0x00000128 load *f >|0| 0x00000127<
    0x00000129 feq f >|0| 0x00000128<, f 0.000000
    0x0000012A cbr f >|0| 0x00000129<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 var *f 0x0000001E
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|2| 0x00000001<
    0x00000003 var *f 0x0000001F
    0x00000004 store *f >|2| 0x00000003<, f >|2| 0x00000002<
    0x00000005 var *f 0x00000007
    0x00000006 load *f >|2| 0x00000005<
    0x00000007 var *f 0x0000001D
    0x00000008 load *f >|2| 0x00000007<
    0x00000009 fmul f >|2| 0x00000006<, f >|2| 0x00000008<
    0x0000000A var *f 0x00000008
    0x0000000B load *f >|2| 0x0000000A<
    0x0000000C var *f 0x0000001C
    0x0000000D load *f >|2| 0x0000000C<
    0x0000000E fmul f >|2| 0x0000000B<, f >|2| 0x0000000D<
    0x0000000F fsub f >|2| 0x00000009<, f >|2| 0x0000000E<
    0x00000010 var *f 0x00000009
    0x00000011 load *f >|2| 0x00000010<
    0x00000012 var *f 0x0000001B
    0x00000013 load *f >|2| 0x00000012<
    0x00000014 fmul f >|2| 0x00000011<, f >|2| 0x00000013<
    0x00000015 fadd f >|2| 0x0000000F<, f >|2| 0x00000014<
    0x00000016 var *f 0x0000001F
    0x00000017 load *f >|2| 0x00000016<
    0x00000018 fmul f >|2| 0x00000015<, f >|2| 0x00000017<
    0x00000019 var **f 0x00000001
    0x0000001A load **f >|2| 0x00000019<
    0x0000001B arracc *f >|2| 0x0000001A<, s32 0
    0x0000001C store *f >|2| 0x0000001B<, f >|2| 0x00000018<
    0x0000001D var *f 0x00000003
    0x0000001E load *f >|2| 0x0000001D<
    0x0000001F fmul f -1.000000, f >|2| 0x0000001E<
    0x00000020 var *f 0x0000001D
    0x00000021 load *f >|2| 0x00000020<
    0x00000022 fmul f >|2| 0x0000001F<, f >|2| 0x00000021<
    0x00000023 var *f 0x00000004
    0x00000024 load *f >|2| 0x00000023<
    0x00000025 var *f 0x0000001C
    0x00000026 load *f >|2| 0x00000025<
    0x00000027 fmul f >|2| 0x00000024<, f >|2| 0x00000026<
    0x00000028 fadd f >|2| 0x00000022<, f >|2| 0x00000027<
    0x00000029 var *f 0x00000005
    0x0000002A load *f >|2| 0x00000029<
    0x0000002B var *f 0x0000001B
    0x0000002C load *f >|2| 0x0000002B<
    0x0000002D fmul f >|2| 0x0000002A<, f >|2| 0x0000002C<
    0x0000002E fsub f >|2| 0x00000028<, f >|2| 0x0000002D<
    0x0000002F var *f 0x0000001F
    0x00000030 load *f >|2| 0x0000002F<
    0x00000031 fmul f >|2| 0x0000002E<, f >|2| 0x00000030<
    0x00000032 var **f 0x00000001
    0x00000033 load **f >|2| 0x00000032<
    0x00000034 arracc *f >|2| 0x00000033<, s32 1
    0x00000035 store *f >|2| 0x00000034<, f >|2| 0x00000031<
    0x00000036 var *f 0x0000000F
    0x00000037 load *f >|2| 0x00000036<
    0x00000038 var *f 0x00000017
    0x00000039 load *f >|2| 0x00000038<
    0x0000003A fmul f >|2| 0x00000037<, f >|2| 0x00000039<
    0x0000003B var *f 0x00000010
    0x0000003C load *f >|2| 0x0000003B<
    0x0000003D var *f 0x00000016
    0x0000003E load *f >|2| 0x0000003D<
    0x0000003F fmul f >|2| 0x0000003C<, f >|2| 0x0000003E<
    0x00000040 fsub f >|2| 0x0000003A<, f >|2| 0x0000003F<
    0x00000041 var *f 0x00000011
    0x00000042 load *f >|2| 0x00000041<
    0x00000043 var *f 0x00000015
    0x00000044 load *f >|2| 0x00000043<
    0x00000045 fmul f >|2| 0x00000042<, f >|2| 0x00000044<
    0x00000046 fadd f >|2| 0x00000040<, f >|2| 0x00000045<
    0x00000047 var *f 0x0000001F
    0x00000048 load *f >|2| 0x00000047<
    0x00000049 fmul f >|2| 0x00000046<, f >|2| 0x00000048<
    0x0000004A var **f 0x00000001
    0x0000004B load **f >|2| 0x0000004A<
    0x0000004C arracc *f >|2| 0x0000004B<, s32 2
    0x0000004D store *f >|2| 0x0000004C<, f >|2| 0x00000049<
    0x0000004E var *f 0x0000000B
    0x0000004F load *f >|2| 0x0000004E<
    0x00000050 fmul f -1.000000, f >|2| 0x0000004F<
    0x00000051 var *f 0x00000017
    0x00000052 load *f >|2| 0x00000051<
    0x00000053 fmul f >|2| 0x00000050<, f >|2| 0x00000052<
    0x00000054 var *f 0x0000000C
    0x00000055 load *f >|2| 0x00000054<
    0x00000056 var *f 0x00000016
    0x00000057 load *f >|2| 0x00000056<
    0x00000058 fmul f >|2| 0x00000055<, f >|2| 0x00000057<
    0x00000059 fadd f >|2| 0x00000053<, f >|2| 0x00000058<
    0x0000005A var *f 0x0000000D
    0x0000005B load *f >|2| 0x0000005A<
    0x0000005C var *f 0x00000015
    0x0000005D load *f >|2| 0x0000005C<
    0x0000005E fmul f >|2| 0x0000005B<, f >|2| 0x0000005D<
    0x0000005F fsub f >|2| 0x00000059<, f >|2| 0x0000005E<
    0x00000060 var *f 0x0000001F
    0x00000061 load *f >|2| 0x00000060<
    0x00000062 fmul f >|2| 0x0000005F<, f >|2| 0x00000061<
    0x00000063 var **f 0x00000001
    0x00000064 load **f >|2| 0x00000063<
    0x00000065 arracc *f >|2| 0x00000064<, s32 3
    0x00000066 store *f >|2| 0x00000065<, f >|2| 0x00000062<
    0x00000067 var *f 0x00000006
    0x00000068 load *f >|2| 0x00000067<
    0x00000069 fmul f -1.000000, f >|2| 0x00000068<
    0x0000006A var *f 0x0000001D
    0x0000006B load *f >|2| 0x0000006A<
    0x0000006C fmul f >|2| 0x00000069<, f >|2| 0x0000006B<
    0x0000006D var *f 0x00000008
    0x0000006E load *f >|2| 0x0000006D<
    0x0000006F var *f 0x0000001A
    0x00000070 load *f >|2| 0x0000006F<
    0x00000071 fmul f >|2| 0x0000006E<, f >|2| 0x00000070<
    0x00000072 fadd f >|2| 0x0000006C<, f >|2| 0x00000071<
    0x00000073 var *f 0x00000009
    0x00000074 load *f >|2| 0x00000073<
    0x00000075 var *f 0x00000019
    0x00000076 load *f >|2| 0x00000075<
    0x00000077 fmul f >|2| 0x00000074<, f >|2| 0x00000076<
    0x00000078 fsub f >|2| 0x00000072<, f >|2| 0x00000077<
    0x00000079 var *f 0x0000001F
    0x0000007A load *f >|2| 0x00000079<
    0x0000007B fmul f >|2| 0x00000078<, f >|2| 0x0000007A<
    0x0000007C var **f 0x00000001
    0x0000007D load **f >|2| 0x0000007C<
    0x0000007E arracc *f >|2| 0x0000007D<, s32 4
    0x0000007F store *f >|2| 0x0000007E<, f >|2| 0x0000007B<
    0x00000080 var *f 0x00000002
    0x00000081 load *f >|2| 0x00000080<
    0x00000082 var *f 0x0000001D
    0x00000083 load *f >|2| 0x00000082<
    0x00000084 fmul f >|2| 0x00000081<, f >|2| 0x00000083<
    0x00000085 var *f 0x00000004
    0x00000086 load *f >|2| 0x00000085<
    0x00000087 var *f 0x0000001A
    0x00000088 load *f >|2| 0x00000087<
    0x00000089 fmul f >|2| 0x00000086<, f >|2| 0x00000088<
    0x0000008A fsub f >|2| 0x00000084<, f >|2| 0x00000089<
    0x0000008B var *f 0x00000005
    0x0000008C load *f >|2| 0x0000008B<
    0x0000008D var *f 0x00000019
    0x0000008E load *f >|2| 0x0000008D<
    0x0000008F fmul f >|2| 0x0000008C<, f >|2| 0x0000008E<
    0x00000090 fadd f >|2| 0x0000008A<, f >|2| 0x0000008F<
    0x00000091 var *f 0x0000001F
    0x00000092 load *f >|2| 0x00000091<
    0x00000093 fmul f >|2| 0x00000090<, f >|2| 0x00000092<
    0x00000094 var **f 0x00000001
    0x00000095 load **f >|2| 0x00000094<
    0x00000096 arracc *f >|2| 0x00000095<, s32 5
    0x00000097 store *f >|2| 0x00000096<, f >|2| 0x00000093<
    0x00000098 var *f 0x0000000E
    0x00000099 load *f >|2| 0x00000098<
    0x0000009A fmul f -1.000000, f >|2| 0x00000099<
    0x0000009B var *f 0x00000017
    0x0000009C load *f >|2| 0x0000009B<
    0x0000009D fmul f >|2| 0x0000009A<, f >|2| 0x0000009C<
    0x0000009E var *f 0x00000010
    0x0000009F load *f >|2| 0x0000009E<
    0x000000A0 var *f 0x00000014
    0x000000A1 load *f >|2| 0x000000A0<
    0x000000A2 fmul f >|2| 0x0000009F<, f >|2| 0x000000A1<
    0x000000A3 fadd f >|2| 0x0000009D<, f >|2| 0x000000A2<
    0x000000A4 var *f 0x00000011
    0x000000A5 load *f >|2| 0x000000A4<
    0x000000A6 var *f 0x00000013
    0x000000A7 load *f >|2| 0x000000A6<
    0x000000A8 fmul f >|2| 0x000000A5<, f >|2| 0x000000A7<
    0x000000A9 fsub f >|2| 0x000000A3<, f >|2| 0x000000A8<
    0x000000AA var *f 0x0000001F
    0x000000AB load *f >|2| 0x000000AA<
    0x000000AC fmul f >|2| 0x000000A9<, f >|2| 0x000000AB<
    0x000000AD var **f 0x00000001
    0x000000AE load **f >|2| 0x000000AD<
    0x000000AF arracc *f >|2| 0x000000AE<, s32 6
    0x000000B0 store *f >|2| 0x000000AF<, f >|2| 0x000000AC<
    0x000000B1 var *f 0x0000000A
    0x000000B2 load *f >|2| 0x000000B1<
    0x000000B3 var *f 0x00000017
    0x000000B4 load *f >|2| 0x000000B3<
    0x000000B5 fmul f >|2| 0x000000B2<, f >|2| 0x000000B4<
    0x000000B6 var *f 0x0000000C
    0x000000B7 load *f >|2| 0x000000B6<
    0x000000B8 var *f 0x00000014
    0x000000B9 load *f >|2| 0x000000B8<
    0x000000BA fmul f >|2| 0x000000B7<, f >|2| 0x000000B9<
    0x000000BB fsub f >|2| 0x000000B5<, f >|2| 0x000000BA<
    0x000000BC var *f 0x0000000D
    0x000000BD load *f >|2| 0x000000BC<
    0x000000BE var *f 0x00000013
    0x000000BF load *f >|2| 0x000000BE<
    0x000000C0 fmul f >|2| 0x000000BD<, f >|2| 0x000000BF<
    0x000000C1 fadd f >|2| 0x000000BB<, f >|2| 0x000000C0<
    0x000000C2 var *f 0x0000001F
    0x000000C3 load *f >|2| 0x000000C2<
    0x000000C4 fmul f >|2| 0x000000C1<, f >|2| 0x000000C3<
    0x000000C5 var **f 0x00000001
    0x000000C6 load **f >|2| 0x000000C5<
    0x000000C7 arracc *f >|2| 0x000000C6<, s32 7
    0x000000C8 store *f >|2| 0x000000C7<, f >|2| 0x000000C4<
    0x000000C9 var *f 0x00000006
    0x000000CA load *f >|2| 0x000000C9<
    0x000000CB var *f 0x0000001C
    0x000000CC load *f >|2| 0x000000CB<
    0x000000CD fmul f >|2| 0x000000CA<, f >|2| 0x000000CC<
    0x000000CE var *f 0x00000007
    0x000000CF load *f >|2| 0x000000CE<
    0x000000D0 var *f 0x0000001A
    0x000000D1 load *f >|2| 0x000000D0<
    0x000000D2 fmul f >|2| 0x000000CF<, f >|2| 0x000000D1<
    0x000000D3 fsub f >|2| 0x000000CD<, f >|2| 0x000000D2<
    0x000000D4 var *f 0x00000009
    0x000000D5 load *f >|2| 0x000000D4<
    0x000000D6 var *f 0x00000018
    0x000000D7 load *f >|2| 0x000000D6<
    0x000000D8 fmul f >|2| 0x000000D5<, f >|2| 0x000000D7<
    0x000000D9 fadd f >|2| 0x000000D3<, f >|2| 0x000000D8<
    0x000000DA var *f 0x0000001F
    0x000000DB load *f >|2| 0x000000DA<
    0x000000DC fmul f >|2| 0x000000D9<, f >|2| 0x000000DB<
    0x000000DD var **f 0x00000001
    0x000000DE load **f >|2| 0x000000DD<
    0x000000DF arracc *f >|2| 0x000000DE<, s32 8
    0x000000E0 store *f >|2| 0x000000DF<, f >|2| 0x000000DC<
    0x000000E1 var *f 0x00000002
    0x000000E2 load *f >|2| 0x000000E1<
    0x000000E3 fmul f -1.000000, f >|2| 0x000000E2<
    0x000000E4 var *f 0x0000001C
    0x000000E5 load *f >|2| 0x000000E4<
    0x000000E6 fmul f >|2| 0x000000E3<, f >|2| 0x000000E5<
    0x000000E7 var *f 0x00000003
    0x000000E8 load *f >|2| 0x000000E7<
    0x000000E9 var *f 0x0000001A
    0x000000EA load *f >|2| 0x000000E9<
    0x000000EB fmul f >|2| 0x000000E8<, f >|2| 0x000000EA<
    0x000000EC fadd f >|2| 0x000000E6<, f >|2| 0x000000EB<
    0x000000ED var *f 0x00000005
    0x000000EE load *f >|2| 0x000000ED<
    0x000000EF var *f 0x00000018
    0x000000F0 load *f >|2| 0x000000EF<
    0x000000F1 fmul f >|2| 0x000000EE<, f >|2| 0x000000F0<
    0x000000F2 fsub f >|2| 0x000000EC<, f >|2| 0x000000F1<
    0x000000F3 var *f 0x0000001F
    0x000000F4 load *f >|2| 0x000000F3<
    0x000000F5 fmul f >|2| 0x000000F2<, f >|2| 0x000000F4<
    0x000000F6 var **f 0x00000001
    0x000000F7 load **f >|2| 0x000000F6<
    0x000000F8 arracc *f >|2| 0x000000F7<, s32 9
    0x000000F9 store *f >|2| 0x000000F8<, f >|2| 0x000000F5<
    0x000000FA var *f 0x0000000E
    0x000000FB load *f >|2| 0x000000FA<
    0x000000FC var *f 0x00000016
    0x000000FD load *f >|2| 0x000000FC<
    0x000000FE fmul f >|2| 0x000000FB<, f >|2| 0x000000FD<
    0x000000FF var *f 0x0000000F
    0x00000100 load *f >|2| 0x000000FF<
    0x00000101 var *f 0x00000014
    0x00000102 load *f >|2| 0x00000101<
    0x00000103 fmul f >|2| 0x00000100<, f >|2| 0x00000102<
    0x00000104 fsub f >|2| 0x000000FE<, f >|2| 0x00000103<
    0x00000105 var *f 0x00000011
    0x00000106 load *f >|2| 0x00000105<
    0x00000107 var *f 0x00000012
    0x00000108 load *f >|2| 0x00000107<
    0x00000109 fmul f >|2| 0x00000106<, f >|2| 0x00000108<
    0x0000010A fadd f >|2| 0x00000104<, f >|2| 0x00000109<
    0x0000010B var *f 0x0000001F
    0x0000010C load *f >|2| 0x0000010B<
    0x0000010D fmul f >|2| 0x0000010A<, f >|2| 0x0000010C<
    0x0000010E var **f 0x00000001
    0x0000010F load **f >|2| 0x0000010E<
    0x00000110 arracc *f >|2| 0x0000010F<, s32 10
    0x00000111 store *f >|2| 0x00000110<, f >|2| 0x0000010D<
    0x00000112 var *f 0x0000000A
    0x00000113 load *f >|2| 0x00000112<
    0x00000114 fmul f -1.000000, f >|2| 0x00000113<
    0x00000115 var *f 0x00000016
    0x00000116 load *f >|2| 0x00000115<
    0x00000117 fmul f >|2| 0x00000114<, f >|2| 0x00000116<
    0x00000118 var *f 0x0000000B
    0x00000119 load *f >|2| 0x00000118<
    0x0000011A var *f 0x00000014
    0x0000011B load *f >|2| 0x0000011A<
    0x0000011C fmul f >|2| 0x00000119<, f >|2| 0x0000011B<
    0x0000011D fadd f >|2| 0x00000117<, f >|2| 0x0000011C<
    0x0000011E var *f 0x0000000D
    0x0000011F load *f >|2| 0x0000011E<
    0x00000120 var *f 0x00000012
    0x00000121 load *f >|2| 0x00000120<
    0x00000122 fmul f >|2| 0x0000011F<, f >|2| 0x00000121<
    0x00000123 fsub f >|2| 0x0000011D<, f >|2| 0x00000122<
    0x00000124 var *f 0x0000001F
    0x00000125 load *f >|2| 0x00000124<
    0x00000126 fmul f >|2| 0x00000123<, f >|2| 0x00000125<
    0x00000127 var **f 0x00000001
    0x00000128 load **f >|2| 0x00000127<
    0x00000129 arracc *f >|2| 0x00000128<, s32 11
    0x0000012A store *f >|2| 0x00000129<, f >|2| 0x00000126<
    0x0000012B var *f 0x00000006
    0x0000012C load *f >|2| 0x0000012B<
    0x0000012D fmul f -1.000000, f >|2| 0x0000012C<
    0x0000012E var *f 0x0000001B
    0x0000012F load *f >|2| 0x0000012E<
    0x00000130 fmul f >|2| 0x0000012D<, f >|2| 0x0000012F<
    0x00000131 var *f 0x00000007
    0x00000132 load *f >|2| 0x00000131<
    0x00000133 var *f 0x00000019
    0x00000134 load *f >|2| 0x00000133<
    0x00000135 fmul f >|2| 0x00000132<, f >|2| 0x00000134<
    0x00000136 fadd f >|2| 0x00000130<, f >|2| 0x00000135<
    0x00000137 var *f 0x00000008
    0x00000138 load *f >|2| 0x00000137<
    0x00000139 var *f 0x00000018
    0x0000013A load *f >|2| 0x00000139<
    0x0000013B fmul f >|2| 0x00000138<, f >|2| 0x0000013A<
    0x0000013C fsub f >|2| 0x00000136<, f >|2| 0x0000013B<
    0x0000013D var *f 0x0000001F
    0x0000013E load *f >|2| 0x0000013D<
    0x0000013F fmul f >|2| 0x0000013C<, f >|2| 0x0000013E<
    0x00000140 var **f 0x00000001
    0x00000141 load **f >|2| 0x00000140<
    0x00000142 arracc *f >|2| 0x00000141<, s32 12
    0x00000143 store *f >|2| 0x00000142<, f >|2| 0x0000013F<
    0x00000144 var *f 0x00000002
    0x00000145 load *f >|2| 0x00000144<
    0x00000146 var *f 0x0000001B
    0x00000147 load *f >|2| 0x00000146<
    0x00000148 fmul f >|2| 0x00000145<, f >|2| 0x00000147<
    0x00000149 var *f 0x00000003
    0x0000014A load *f >|2| 0x00000149<
    0x0000014B var *f 0x00000019
    0x0000014C load *f >|2| 0x0000014B<
    0x0000014D fmul f >|2| 0x0000014A<, f >|2| 0x0000014C<
    0x0000014E fsub f >|2| 0x00000148<, f >|2| 0x0000014D<
    0x0000014F var *f 0x00000004
    0x00000150 load *f >|2| 0x0000014F<
    0x00000151 var *f 0x00000018
    0x00000152 load *f >|2| 0x00000151<
    0x00000153 fmul f >|2| 0x00000150<, f >|2| 0x00000152<
    0x00000154 fadd f >|2| 0x0000014E<, f >|2| 0x00000153<
    0x00000155 var *f 0x0000001F
    0x00000156 load *f >|2| 0x00000155<
    0x00000157 fmul f >|2| 0x00000154<, f >|2| 0x00000156<
    0x00000158 var **f 0x00000001
    0x00000159 load **f >|2| 0x00000158<
    0x0000015A arracc *f >|2| 0x00000159<, s32 13
    0x0000015B store *f >|2| 0x0000015A<, f >|2| 0x00000157<
    0x0000015C var *f 0x0000000E
    0x0000015D load *f >|2| 0x0000015C<
    0x0000015E fmul f -1.000000, f >|2| 0x0000015D<
    0x0000015F var *f 0x00000015
    0x00000160 load *f >|2| 0x0000015F<
    0x00000161 fmul f >|2| 0x0000015E<, f >|2| 0x00000160<
    0x00000162 var *f 0x0000000F
    0x00000163 load *f >|2| 0x00000162<
    0x00000164 var *f 0x00000013
    0x00000165 load *f >|2| 0x00000164<
    0x00000166 fmul f >|2| 0x00000163<, f >|2| 0x00000165<
    0x00000167 fadd f >|2| 0x00000161<, f >|2| 0x00000166<
    0x00000168 var *f 0x00000010
    0x00000169 load *f >|2| 0x00000168<
    0x0000016A var *f 0x00000012
    0x0000016B load *f >|2| 0x0000016A<
    0x0000016C fmul f >|2| 0x00000169<, f >|2| 0x0000016B<
    0x0000016D fsub f >|2| 0x00000167<, f >|2| 0x0000016C<
    0x0000016E var *f 0x0000001F
    0x0000016F load *f >|2| 0x0000016E<
    0x00000170 fmul f >|2| 0x0000016D<, f >|2| 0x0000016F<
    0x00000171 var **f 0x00000001
    0x00000172 load **f >|2| 0x00000171<
    0x00000173 arracc *f >|2| 0x00000172<, s32 14
    0x00000174 store *f >|2| 0x00000173<, f >|2| 0x00000170<
    0x00000175 var *f 0x0000000A
    0x00000176 load *f >|2| 0x00000175<
    0x00000177 var *f 0x00000015
    0x00000178 load *f >|2| 0x00000177<
    0x00000179 fmul f >|2| 0x00000176<, f >|2| 0x00000178<
    0x0000017A var *f 0x0000000B
    0x0000017B load *f >|2| 0x0000017A<
    0x0000017C var *f 0x00000013
    0x0000017D load *f >|2| 0x0000017C<
    0x0000017E fmul f >|2| 0x0000017B<, f >|2| 0x0000017D<
    0x0000017F fsub f >|2| 0x00000179<, f >|2| 0x0000017E<
    0x00000180 var *f 0x0000000C
    0x00000181 load *f >|2| 0x00000180<
    0x00000182 var *f 0x00000012
    0x00000183 load *f >|2| 0x00000182<
    0x00000184 fmul f >|2| 0x00000181<, f >|2| 0x00000183<
    0x00000185 fadd f >|2| 0x0000017F<, f >|2| 0x00000184<
    0x00000186 var *f 0x0000001F
    0x00000187 load *f >|2| 0x00000186<
    0x00000188 fmul f >|2| 0x00000185<, f >|2| 0x00000187<
    0x00000189 var **f 0x00000001
    0x0000018A load **f >|2| 0x00000189<
    0x0000018B arracc *f >|2| 0x0000018A<, s32 15
    0x0000018C store *f >|2| 0x0000018B<, f >|2| 0x00000188<
    0x0000018D ret
fn toRotationMatrix am9 -> void
    {1 BBs, 23 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 12
    0x00000009 store *f >|0| 0x00000008<, f 0.000000
    0x0000000A var **f 0x00000001
    0x0000000B load **f >|0| 0x0000000A<
    0x0000000C arracc *f >|0| 0x0000000B<, s32 13
    0x0000000D store *f >|0| 0x0000000C<, f 0.000000
    0x0000000E var **f 0x00000001
    0x0000000F load **f >|0| 0x0000000E<
    0x00000010 arracc *f >|0| 0x0000000F<, s32 14
    0x00000011 store *f >|0| 0x00000010<, f 0.000000
    0x00000012 var **f 0x00000001
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 15
    0x00000015 store *f >|0| 0x00000014<, f 1.000000
    0x00000016 ret
fn multiply an9 -> void
    {1 BBs, 638 INSTRs, 36 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 *f]
    [0x00000003 *f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
    [0x0000000B f]
    [0x0000000C f]
    [0x0000000D f]
    [0x0000000E f]
    [0x0000000F f]
    [0x00000010 f]
    [0x00000011 f]
    [0x00000012 f]
    [0x00000013 f]
    [0x00000014 f]
    [0x00000015 f]
    [0x00000016 f]
    [0x00000017 f]
    [0x00000018 f]
    [0x00000019 f]
    [0x0000001A f]
    [0x0000001B f]
    [0x0000001C f]
    [0x0000001D f]
    [0x0000001E f]
    [0x0000001F f]
    [0x00000020 f]
    [0x00000021 f]
    [0x00000022 f]
    [0x00000023 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000002
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *__unk_type_kind 0x00000001
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 bc *[16] f >|0| 0x00000007< to *f
    0x00000009 var **f 0x00000003
    0x0000000A store **f >|0| 0x00000009<, *f >|0| 0x00000008<
    0x0000000B var **f 0x00000002
    0x0000000C load **f >|0| 0x0000000B<
    0x0000000D arracc *f >|0| 0x0000000C<, s32 0
    0x0000000E load *f >|0| 0x0000000D<
    0x0000000F var *f 0x00000004
    0x00000010 store *f >|0| 0x0000000F<, f >|0| 0x0000000E<
    0x00000011 var **f 0x00000002
    0x00000012 load **f >|0| 0x00000011<
    0x00000013 arracc *f >|0| 0x00000012<, s32 1
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 var *f 0x00000005
    0x00000016 store *f >|0| 0x00000015<, f >|0| 0x00000014<
    0x00000017 var **f 0x00000002
    0x00000018 load **f >|0| 0x00000017<
    0x00000019 arracc *f >|0| 0x00000018<, s32 2
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B var *f 0x00000006
    0x0000001C store *f >|0| 0x0000001B<, f >|0| 0x0000001A<
    0x0000001D var **f 0x00000002
    0x0000001E load **f >|0| 0x0000001D<
    0x0000001F arracc *f >|0| 0x0000001E<, s32 3
    0x00000020 load *f >|0| 0x0000001F<
    0x00000021 var *f 0x00000007
    0x00000022 store *f >|0| 0x00000021<, f >|0| 0x00000020<
    0x00000023 var **f 0x00000002
    0x00000024 load **f >|0| 0x00000023<
    0x00000025 arracc *f >|0| 0x00000024<, s32 4
    0x00000026 load *f >|0| 0x00000025<
    0x00000027 var *f 0x00000008
    0x00000028 store *f >|0| 0x00000027<, f >|0| 0x00000026<
    0x00000029 var **f 0x00000002
    0x0000002A load **f >|0| 0x00000029<
    0x0000002B arracc *f >|0| 0x0000002A<, s32 5
    0x0000002C load *f >|0| 0x0000002B<
    0x0000002D var *f 0x00000009
    0x0000002E store *f >|0| 0x0000002D<, f >|0| 0x0000002C<
    0x0000002F var **f 0x00000002
    0x00000030 load **f >|0| 0x0000002F<
    0x00000031 arracc *f >|0| 0x00000030<, s32 6
    0x00000032 load *f >|0| 0x00000031<
    0x00000033 var *f 0x0000000A
    0x00000034 store *f >|0| 0x00000033<, f >|0| 0x00000032<
    0x00000035 var **f 0x00000002
    0x00000036 load **f >|0| 0x00000035<
    0x00000037 arracc *f >|0| 0x00000036<, s32 7
    0x00000038 load *f >|0| 0x00000037<
    0x00000039 var *f 0x0000000B
    0x0000003A store *f >|0| 0x00000039<, f >|0| 0x00000038<
    0x0000003B var **f 0x00000002
    0x0000003C load **f >|0| 0x0000003B<
    0x0000003D arracc *f >|0| 0x0000003C<, s32 8
    0x0000003E load *f >|0| 0x0000003D<
    0x0000003F var *f 0x0000000C
    0x00000040 store *f >|0| 0x0000003F<, f >|0| 0x0000003E<
    0x00000041 var **f 0x00000002
    0x00000042 load **f >|0| 0x00000041<
    0x00000043 arracc *f >|0| 0x00000042<, s32 9
    0x00000044 load *f >|0| 0x00000043<
    0x00000045 var *f 0x0000000D
    0x00000046 store *f >|0| 0x00000045<, f >|0| 0x00000044<
    0x00000047 var **f 0x00000002
    0x00000048 load **f >|0| 0x00000047<
    0x00000049 arracc *f >|0| 0x00000048<, s32 10
    0x0000004A load *f >|0| 0x00000049<
    0x0000004B var *f 0x0000000E
    0x0000004C store *f >|0| 0x0000004B<, f >|0| 0x0000004A<
    0x0000004D var **f 0x00000002
    0x0000004E load **f >|0| 0x0000004D<
    0x0000004F arracc *f >|0| 0x0000004E<, s32 11
    0x00000050 load *f >|0| 0x0000004F<
    0x00000051 var *f 0x0000000F
    0x00000052 store *f >|0| 0x00000051<, f >|0| 0x00000050<
    0x00000053 var **f 0x00000002
    0x00000054 load **f >|0| 0x00000053<
    0x00000055 arracc *f >|0| 0x00000054<, s32 12
    0x00000056 load *f >|0| 0x00000055<
    0x00000057 var *f 0x00000010
    0x00000058 store *f >|0| 0x00000057<, f >|0| 0x00000056<
    0x00000059 var **f 0x00000002
    0x0000005A load **f >|0| 0x00000059<
    0x0000005B arracc *f >|0| 0x0000005A<, s32 13
    0x0000005C load *f >|0| 0x0000005B<
    0x0000005D var *f 0x00000011
    0x0000005E store *f >|0| 0x0000005D<, f >|0| 0x0000005C<
    0x0000005F var **f 0x00000002
    0x00000060 load **f >|0| 0x0000005F<
    0x00000061 arracc *f >|0| 0x00000060<, s32 14
    0x00000062 load *f >|0| 0x00000061<
    0x00000063 var *f 0x00000012
    0x00000064 store *f >|0| 0x00000063<, f >|0| 0x00000062<
    0x00000065 var **f 0x00000002
    0x00000066 load **f >|0| 0x00000065<
    0x00000067 arracc *f >|0| 0x00000066<, s32 15
    0x00000068 load *f >|0| 0x00000067<
    0x00000069 var *f 0x00000013
    0x0000006A store *f >|0| 0x00000069<, f >|0| 0x00000068<
    0x0000006B var **f 0x00000003
    0x0000006C load **f >|0| 0x0000006B<
    0x0000006D arracc *f >|0| 0x0000006C<, s32 0
    0x0000006E load *f >|0| 0x0000006D<
    0x0000006F var *f 0x00000014
    0x00000070 store *f >|0| 0x0000006F<, f >|0| 0x0000006E<
    0x00000071 var **f 0x00000003
    0x00000072 load **f >|0| 0x00000071<
    0x00000073 arracc *f >|0| 0x00000072<, s32 1
    0x00000074 load *f >|0| 0x00000073<
    0x00000075 var *f 0x00000015
    0x00000076 store *f >|0| 0x00000075<, f >|0| 0x00000074<
    0x00000077 var **f 0x00000003
    0x00000078 load **f >|0| 0x00000077<
    0x00000079 arracc *f >|0| 0x00000078<, s32 2
    0x0000007A load *f >|0| 0x00000079<
    0x0000007B var *f 0x00000016
    0x0000007C store *f >|0| 0x0000007B<, f >|0| 0x0000007A<
    0x0000007D var **f 0x00000003
    0x0000007E load **f >|0| 0x0000007D<
    0x0000007F arracc *f >|0| 0x0000007E<, s32 3
    0x00000080 load *f >|0| 0x0000007F<
    0x00000081 var *f 0x00000017
    0x00000082 store *f >|0| 0x00000081<, f >|0| 0x00000080<
    0x00000083 var **f 0x00000003
    0x00000084 load **f >|0| 0x00000083<
    0x00000085 arracc *f >|0| 0x00000084<, s32 4
    0x00000086 load *f >|0| 0x00000085<
    0x00000087 var *f 0x00000018
    0x00000088 store *f >|0| 0x00000087<, f >|0| 0x00000086<
    0x00000089 var **f 0x00000003
    0x0000008A load **f >|0| 0x00000089<
    0x0000008B arracc *f >|0| 0x0000008A<, s32 5
    0x0000008C load *f >|0| 0x0000008B<
    0x0000008D var *f 0x00000019
    0x0000008E store *f >|0| 0x0000008D<, f >|0| 0x0000008C<
    0x0000008F var **f 0x00000003
    0x00000090 load **f >|0| 0x0000008F<
    0x00000091 arracc *f >|0| 0x00000090<, s32 6
    0x00000092 load *f >|0| 0x00000091<
    0x00000093 var *f 0x0000001A
    0x00000094 store *f >|0| 0x00000093<, f >|0| 0x00000092<
    0x00000095 var **f 0x00000003
    0x00000096 load **f >|0| 0x00000095<
    0x00000097 arracc *f >|0| 0x00000096<, s32 7
    0x00000098 load *f >|0| 0x00000097<
    0x00000099 var *f 0x0000001B
    0x0000009A store *f >|0| 0x00000099<, f >|0| 0x00000098<
    0x0000009B var **f 0x00000003
    0x0000009C load **f >|0| 0x0000009B<
    0x0000009D arracc *f >|0| 0x0000009C<, s32 8
    0x0000009E load *f >|0| 0x0000009D<
    0x0000009F var *f 0x0000001C
    0x000000A0 store *f >|0| 0x0000009F<, f >|0| 0x0000009E<
    0x000000A1 var **f 0x00000003
    0x000000A2 load **f >|0| 0x000000A1<
    0x000000A3 arracc *f >|0| 0x000000A2<, s32 9
    0x000000A4 load *f >|0| 0x000000A3<
    0x000000A5 var *f 0x0000001D
    0x000000A6 store *f >|0| 0x000000A5<, f >|0| 0x000000A4<
    0x000000A7 var **f 0x00000003
    0x000000A8 load **f >|0| 0x000000A7<
    0x000000A9 arracc *f >|0| 0x000000A8<, s32 10
    0x000000AA load *f >|0| 0x000000A9<
    0x000000AB var *f 0x0000001E
    0x000000AC store *f >|0| 0x000000AB<, f >|0| 0x000000AA<
    0x000000AD var **f 0x00000003
    0x000000AE load **f >|0| 0x000000AD<
    0x000000AF arracc *f >|0| 0x000000AE<, s32 11
    0x000000B0 load *f >|0| 0x000000AF<
    0x000000B1 var *f 0x0000001F
    0x000000B2 store *f >|0| 0x000000B1<, f >|0| 0x000000B0<
    0x000000B3 var **f 0x00000003
    0x000000B4 load **f >|0| 0x000000B3<
    0x000000B5 arracc *f >|0| 0x000000B4<, s32 12
    0x000000B6 load *f >|0| 0x000000B5<
    0x000000B7 var *f 0x00000020
    0x000000B8 store *f >|0| 0x000000B7<, f >|0| 0x000000B6<
    0x000000B9 var **f 0x00000003
    0x000000BA load **f >|0| 0x000000B9<
    0x000000BB arracc *f >|0| 0x000000BA<, s32 13
    0x000000BC load *f >|0| 0x000000BB<
    0x000000BD var *f 0x00000021
    0x000000BE store *f >|0| 0x000000BD<, f >|0| 0x000000BC<
    0x000000BF var **f 0x00000003
    0x000000C0 load **f >|0| 0x000000BF<
    0x000000C1 arracc *f >|0| 0x000000C0<, s32 14
    0x000000C2 load *f >|0| 0x000000C1<
    0x000000C3 var *f 0x00000022
    0x000000C4 store *f >|0| 0x000000C3<, f >|0| 0x000000C2<
    0x000000C5 var **f 0x00000003
    0x000000C6 load **f >|0| 0x000000C5<
    0x000000C7 arracc *f >|0| 0x000000C6<, s32 15
    0x000000C8 load *f >|0| 0x000000C7<
    0x000000C9 var *f 0x00000023
    0x000000CA store *f >|0| 0x000000C9<, f >|0| 0x000000C8<
    0x000000CB var *f 0x00000014
    0x000000CC load *f >|0| 0x000000CB<
    0x000000CD var *f 0x00000004
    0x000000CE load *f >|0| 0x000000CD<
    0x000000CF fmul f >|0| 0x000000CC<, f >|0| 0x000000CE<
    0x000000D0 var *f 0x00000015
    0x000000D1 load *f >|0| 0x000000D0<
    0x000000D2 var *f 0x00000008
    0x000000D3 load *f >|0| 0x000000D2<
    0x000000D4 fmul f >|0| 0x000000D1<, f >|0| 0x000000D3<
    0x000000D5 fadd f >|0| 0x000000CF<, f >|0| 0x000000D4<
    0x000000D6 var *f 0x00000016
    0x000000D7 load *f >|0| 0x000000D6<
    0x000000D8 var *f 0x0000000C
    0x000000D9 load *f >|0| 0x000000D8<
    0x000000DA fmul f >|0| 0x000000D7<, f >|0| 0x000000D9<
    0x000000DB fadd f >|0| 0x000000D5<, f >|0| 0x000000DA<
    0x000000DC var *f 0x00000017
    0x000000DD load *f >|0| 0x000000DC<
    0x000000DE var *f 0x00000010
    0x000000DF load *f >|0| 0x000000DE<
    0x000000E0 fmul f >|0| 0x000000DD<, f >|0| 0x000000DF<
    0x000000E1 fadd f >|0| 0x000000DB<, f >|0| 0x000000E0<
    0x000000E2 var **f 0x00000002
    0x000000E3 load **f >|0| 0x000000E2<
    0x000000E4 arracc *f >|0| 0x000000E3<, s32 0
    0x000000E5 store *f >|0| 0x000000E4<, f >|0| 0x000000E1<
    0x000000E6 var *f 0x00000014
    0x000000E7 load *f >|0| 0x000000E6<
    0x000000E8 var *f 0x00000005
    0x000000E9 load *f >|0| 0x000000E8<
    0x000000EA fmul f >|0| 0x000000E7<, f >|0| 0x000000E9<
    0x000000EB var *f 0x00000015
    0x000000EC load *f >|0| 0x000000EB<
    0x000000ED var *f 0x00000009
    0x000000EE load *f >|0| 0x000000ED<
    0x000000EF fmul f >|0| 0x000000EC<, f >|0| 0x000000EE<
    0x000000F0 fadd f >|0| 0x000000EA<, f >|0| 0x000000EF<
    0x000000F1 var *f 0x00000016
    0x000000F2 load *f >|0| 0x000000F1<
    0x000000F3 var *f 0x0000000D
    0x000000F4 load *f >|0| 0x000000F3<
    0x000000F5 fmul f >|0| 0x000000F2<, f >|0| 0x000000F4<
    0x000000F6 fadd f >|0| 0x000000F0<, f >|0| 0x000000F5<
    0x000000F7 var *f 0x00000017
    0x000000F8 load *f >|0| 0x000000F7<
    0x000000F9 var *f 0x00000011
    0x000000FA load *f >|0| 0x000000F9<
    0x000000FB fmul f >|0| 0x000000F8<, f >|0| 0x000000FA<
    0x000000FC fadd f >|0| 0x000000F6<, f >|0| 0x000000FB<
    0x000000FD var **f 0x00000002
    0x000000FE load **f >|0| 0x000000FD<
    0x000000FF arracc *f >|0| 0x000000FE<, s32 1
    0x00000100 store *f >|0| 0x000000FF<, f >|0| 0x000000FC<
    0x00000101 var *f 0x00000014
    0x00000102 load *f >|0| 0x00000101<
    0x00000103 var *f 0x00000006
    0x00000104 load *f >|0| 0x00000103<
    0x00000105 fmul f >|0| 0x00000102<, f >|0| 0x00000104<
    0x00000106 var *f 0x00000015
    0x00000107 load *f >|0| 0x00000106<
    0x00000108 var *f 0x0000000A
    0x00000109 load *f >|0| 0x00000108<
    0x0000010A fmul f >|0| 0x00000107<, f >|0| 0x00000109<
    0x0000010B fadd f >|0| 0x00000105<, f >|0| 0x0000010A<
    0x0000010C var *f 0x00000016
    0x0000010D load *f >|0| 0x0000010C<
    0x0000010E var *f 0x0000000E
    0x0000010F load *f >|0| 0x0000010E<
    0x00000110 fmul f >|0| 0x0000010D<, f >|0| 0x0000010F<
    0x00000111 fadd f >|0| 0x0000010B<, f >|0| 0x00000110<
    0x00000112 var *f 0x00000017
    0x00000113 load *f >|0| 0x00000112<
    0x00000114 var *f 0x00000012
    0x00000115 load *f >|0| 0x00000114<
    0x00000116 fmul f >|0| 0x00000113<, f >|0| 0x00000115<
    0x00000117 fadd f >|0| 0x00000111<, f >|0| 0x00000116<
    0x00000118 var **f 0x00000002
    0x00000119 load **f >|0| 0x00000118<
    0x0000011A arracc *f >|0| 0x00000119<, s32 2
    0x0000011B store *f >|0| 0x0000011A<, f >|0| 0x00000117<
    0x0000011C var *f 0x00000014
    0x0000011D load *f >|0| 0x0000011C<
    0x0000011E var *f 0x00000007
    0x0000011F load *f >|0| 0x0000011E<
    0x00000120 fmul f >|0| 0x0000011D<, f >|0| 0x0000011F<
    0x00000121 var *f 0x00000015
    0x00000122 load *f >|0| 0x00000121<
    0x00000123 var *f 0x0000000B
    0x00000124 load *f >|0| 0x00000123<
    0x00000125 fmul f >|0| 0x00000122<, f >|0| 0x00000124<
    0x00000126 fadd f >|0| 0x00000120<, f >|0| 0x00000125<
    0x00000127 var *f 0x00000016
    0x00000128 load *f >|0| 0x00000127<
    0x00000129 var *f 0x0000000F
    0x0000012A load *f >|0| 0x00000129<
    0x0000012B fmul f >|0| 0x00000128<, f >|0| 0x0000012A<
    0x0000012C fadd f >|0| 0x00000126<, f >|0| 0x0000012B<
    0x0000012D var *f 0x00000017
    0x0000012E load *f >|0| 0x0000012D<
    0x0000012F var *f 0x00000013
    0x00000130 load *f >|0| 0x0000012F<
    0x00000131 fmul f >|0| 0x0000012E<, f >|0| 0x00000130<
    0x00000132 fadd f >|0| 0x0000012C<, f >|0| 0x00000131<
    0x00000133 var **f 0x00000002
    0x00000134 load **f >|0| 0x00000133<
    0x00000135 arracc *f >|0| 0x00000134<, s32 3
    0x00000136 store *f >|0| 0x00000135<, f >|0| 0x00000132<
    0x00000137 var *f 0x00000018
    0x00000138 load *f >|0| 0x00000137<
    0x00000139 var *f 0x00000004
    0x0000013A load *f >|0| 0x00000139<
    0x0000013B fmul f >|0| 0x00000138<, f >|0| 0x0000013A<
    0x0000013C var *f 0x00000019
    0x0000013D load *f >|0| 0x0000013C<
    0x0000013E var *f 0x00000008
    0x0000013F load *f >|0| 0x0000013E<
    0x00000140 fmul f >|0| 0x0000013D<, f >|0| 0x0000013F<
    0x00000141 fadd f >|0| 0x0000013B<, f >|0| 0x00000140<
    0x00000142 var *f 0x0000001A
    0x00000143 load *f >|0| 0x00000142<
    0x00000144 var *f 0x0000000C
    0x00000145 load *f >|0| 0x00000144<
    0x00000146 fmul f >|0| 0x00000143<, f >|0| 0x00000145<
    0x00000147 fadd f >|0| 0x00000141<, f >|0| 0x00000146<
    0x00000148 var *f 0x0000001B
    0x00000149 load *f >|0| 0x00000148<
    0x0000014A var *f 0x00000010
    0x0000014B load *f >|0| 0x0000014A<
    0x0000014C fmul f >|0| 0x00000149<, f >|0| 0x0000014B<
    0x0000014D fadd f >|0| 0x00000147<, f >|0| 0x0000014C<
    0x0000014E var **f 0x00000002
    0x0000014F load **f >|0| 0x0000014E<
    0x00000150 arracc *f >|0| 0x0000014F<, s32 4
    0x00000151 store *f >|0| 0x00000150<, f >|0| 0x0000014D<
    0x00000152 var *f 0x00000018
    0x00000153 load *f >|0| 0x00000152<
    0x00000154 var *f 0x00000005
    0x00000155 load *f >|0| 0x00000154<
    0x00000156 fmul f >|0| 0x00000153<, f >|0| 0x00000155<
    0x00000157 var *f 0x00000019
    0x00000158 load *f >|0| 0x00000157<
    0x00000159 var *f 0x00000009
    0x0000015A load *f >|0| 0x00000159<
    0x0000015B fmul f >|0| 0x00000158<, f >|0| 0x0000015A<
    0x0000015C fadd f >|0| 0x00000156<, f >|0| 0x0000015B<
    0x0000015D var *f 0x0000001A
    0x0000015E load *f >|0| 0x0000015D<
    0x0000015F var *f 0x0000000D
    0x00000160 load *f >|0| 0x0000015F<
    0x00000161 fmul f >|0| 0x0000015E<, f >|0| 0x00000160<
    0x00000162 fadd f >|0| 0x0000015C<, f >|0| 0x00000161<
    0x00000163 var *f 0x0000001B
    0x00000164 load *f >|0| 0x00000163<
    0x00000165 var *f 0x00000011
    0x00000166 load *f >|0| 0x00000165<
    0x00000167 fmul f >|0| 0x00000164<, f >|0| 0x00000166<
    0x00000168 fadd f >|0| 0x00000162<, f >|0| 0x00000167<
    0x00000169 var **f 0x00000002
    0x0000016A load **f >|0| 0x00000169<
    0x0000016B arracc *f >|0| 0x0000016A<, s32 5
    0x0000016C store *f >|0| 0x0000016B<, f >|0| 0x00000168<
    0x0000016D var *f 0x00000018
    0x0000016E load *f >|0| 0x0000016D<
    0x0000016F var *f 0x00000006
    0x00000170 load *f >|0| 0x0000016F<
    0x00000171 fmul f >|0| 0x0000016E<, f >|0| 0x00000170<
    0x00000172 var *f 0x00000019
    0x00000173 load *f >|0| 0x00000172<
    0x00000174 var *f 0x0000000A
    0x00000175 load *f >|0| 0x00000174<
    0x00000176 fmul f >|0| 0x00000173<, f >|0| 0x00000175<
    0x00000177 fadd f >|0| 0x00000171<, f >|0| 0x00000176<
    0x00000178 var *f 0x0000001A
    0x00000179 load *f >|0| 0x00000178<
    0x0000017A var *f 0x0000000E
    0x0000017B load *f >|0| 0x0000017A<
    0x0000017C fmul f >|0| 0x00000179<, f >|0| 0x0000017B<
    0x0000017D fadd f >|0| 0x00000177<, f >|0| 0x0000017C<
    0x0000017E var *f 0x0000001B
    0x0000017F load *f >|0| 0x0000017E<
    0x00000180 var *f 0x00000012
    0x00000181 load *f >|0| 0x00000180<
    0x00000182 fmul f >|0| 0x0000017F<, f >|0| 0x00000181<
    0x00000183 fadd f >|0| 0x0000017D<, f >|0| 0x00000182<
    0x00000184 var **f 0x00000002
    0x00000185 load **f >|0| 0x00000184<
    0x00000186 arracc *f >|0| 0x00000185<, s32 6
    0x00000187 store *f >|0| 0x00000186<, f >|0| 0x00000183<
    0x00000188 var *f 0x00000018
    0x00000189 load *f >|0| 0x00000188<
    0x0000018A var *f 0x00000007
    0x0000018B load *f >|0| 0x0000018A<
    0x0000018C fmul f >|0| 0x00000189<, f >|0| 0x0000018B<
    0x0000018D var *f 0x00000019
    0x0000018E load *f >|0| 0x0000018D<
    0x0000018F var *f 0x0000000B
    0x00000190 load *f >|0| 0x0000018F<
    0x00000191 fmul f >|0| 0x0000018E<, f >|0| 0x00000190<
    0x00000192 fadd f >|0| 0x0000018C<, f >|0| 0x00000191<
    0x00000193 var *f 0x0000001A
    0x00000194 load *f >|0| 0x00000193<
    0x00000195 var *f 0x0000000F
    0x00000196 load *f >|0| 0x00000195<
    0x00000197 fmul f >|0| 0x00000194<, f >|0| 0x00000196<
    0x00000198 fadd f >|0| 0x00000192<, f >|0| 0x00000197<
    0x00000199 var *f 0x0000001B
    0x0000019A load *f >|0| 0x00000199<
    0x0000019B var *f 0x00000013
    0x0000019C load *f >|0| 0x0000019B<
    0x0000019D fmul f >|0| 0x0000019A<, f >|0| 0x0000019C<
    0x0000019E fadd f >|0| 0x00000198<, f >|0| 0x0000019D<
    0x0000019F var **f 0x00000002
    0x000001A0 load **f >|0| 0x0000019F<
    0x000001A1 arracc *f >|0| 0x000001A0<, s32 7
    0x000001A2 store *f >|0| 0x000001A1<, f >|0| 0x0000019E<
    0x000001A3 var *f 0x0000001C
    0x000001A4 load *f >|0| 0x000001A3<
    0x000001A5 var *f 0x00000004
    0x000001A6 load *f >|0| 0x000001A5<
    0x000001A7 fmul f >|0| 0x000001A4<, f >|0| 0x000001A6<
    0x000001A8 var *f 0x0000001D
    0x000001A9 load *f >|0| 0x000001A8<
    0x000001AA var *f 0x00000008
    0x000001AB load *f >|0| 0x000001AA<
    0x000001AC fmul f >|0| 0x000001A9<, f >|0| 0x000001AB<
    0x000001AD fadd f >|0| 0x000001A7<, f >|0| 0x000001AC<
    0x000001AE var *f 0x0000001E
    0x000001AF load *f >|0| 0x000001AE<
    0x000001B0 var *f 0x0000000C
    0x000001B1 load *f >|0| 0x000001B0<
    0x000001B2 fmul f >|0| 0x000001AF<, f >|0| 0x000001B1<
    0x000001B3 fadd f >|0| 0x000001AD<, f >|0| 0x000001B2<
    0x000001B4 var *f 0x0000001F
    0x000001B5 load *f >|0| 0x000001B4<
    0x000001B6 var *f 0x00000010
    0x000001B7 load *f >|0| 0x000001B6<
    0x000001B8 fmul f >|0| 0x000001B5<, f >|0| 0x000001B7<
    0x000001B9 fadd f >|0| 0x000001B3<, f >|0| 0x000001B8<
    0x000001BA var **f 0x00000002
    0x000001BB load **f >|0| 0x000001BA<
    0x000001BC arracc *f >|0| 0x000001BB<, s32 8
    0x000001BD store *f >|0| 0x000001BC<, f >|0| 0x000001B9<
    0x000001BE var *f 0x0000001C
    0x000001BF load *f >|0| 0x000001BE<
    0x000001C0 var *f 0x00000005
    0x000001C1 load *f >|0| 0x000001C0<
    0x000001C2 fmul f >|0| 0x000001BF<, f >|0| 0x000001C1<
    0x000001C3 var *f 0x0000001D
    0x000001C4 load *f >|0| 0x000001C3<
    0x000001C5 var *f 0x00000009
    0x000001C6 load *f >|0| 0x000001C5<
    0x000001C7 fmul f >|0| 0x000001C4<, f >|0| 0x000001C6<
    0x000001C8 fadd f >|0| 0x000001C2<, f >|0| 0x000001C7<
    0x000001C9 var *f 0x0000001E
    0x000001CA load *f >|0| 0x000001C9<
    0x000001CB var *f 0x0000000D
    0x000001CC load *f >|0| 0x000001CB<
    0x000001CD fmul f >|0| 0x000001CA<, f >|0| 0x000001CC<
    0x000001CE fadd f >|0| 0x000001C8<, f >|0| 0x000001CD<
    0x000001CF var *f 0x0000001F
    0x000001D0 load *f >|0| 0x000001CF<
    0x000001D1 var *f 0x00000011
    0x000001D2 load *f >|0| 0x000001D1<
    0x000001D3 fmul f >|0| 0x000001D0<, f >|0| 0x000001D2<
    0x000001D4 fadd f >|0| 0x000001CE<, f >|0| 0x000001D3<
    0x000001D5 var **f 0x00000002
    0x000001D6 load **f >|0| 0x000001D5<
    0x000001D7 arracc *f >|0| 0x000001D6<, s32 9
    0x000001D8 store *f >|0| 0x000001D7<, f >|0| 0x000001D4<
    0x000001D9 var *f 0x0000001C
    0x000001DA load *f >|0| 0x000001D9<
    0x000001DB var *f 0x00000006
    0x000001DC load *f >|0| 0x000001DB<
    0x000001DD fmul f >|0| 0x000001DA<, f >|0| 0x000001DC<
    0x000001DE var *f 0x0000001D
    0x000001DF load *f >|0| 0x000001DE<
    0x000001E0 var *f 0x0000000A
    0x000001E1 load *f >|0| 0x000001E0<
    0x000001E2 fmul f >|0| 0x000001DF<, f >|0| 0x000001E1<
    0x000001E3 fadd f >|0| 0x000001DD<, f >|0| 0x000001E2<
    0x000001E4 var *f 0x0000001E
    0x000001E5 load *f >|0| 0x000001E4<
    0x000001E6 var *f 0x0000000E
    0x000001E7 load *f >|0| 0x000001E6<
    0x000001E8 fmul f >|0| 0x000001E5<, f >|0| 0x000001E7<
    0x000001E9 fadd f >|0| 0x000001E3<, f >|0| 0x000001E8<
    0x000001EA var *f 0x0000001F
    0x000001EB load *f >|0| 0x000001EA<
    0x000001EC var *f 0x00000012
    0x000001ED load *f >|0| 0x000001EC<
    0x000001EE fmul f >|0| 0x000001EB<, f >|0| 0x000001ED<
    0x000001EF fadd f >|0| 0x000001E9<, f >|0| 0x000001EE<
    0x000001F0 var **f 0x00000002
    0x000001F1 load **f >|0| 0x000001F0<
    0x000001F2 arracc *f >|0| 0x000001F1<, s32 10
    0x000001F3 store *f >|0| 0x000001F2<, f >|0| 0x000001EF<
    0x000001F4 var *f 0x0000001C
    0x000001F5 load *f >|0| 0x000001F4<
    0x000001F6 var *f 0x00000007
    0x000001F7 load *f >|0| 0x000001F6<
    0x000001F8 fmul f >|0| 0x000001F5<, f >|0| 0x000001F7<
    0x000001F9 var *f 0x0000001D
    0x000001FA load *f >|0| 0x000001F9<
    0x000001FB var *f 0x0000000B
    0x000001FC load *f >|0| 0x000001FB<
    0x000001FD fmul f >|0| 0x000001FA<, f >|0| 0x000001FC<
    0x000001FE fadd f >|0| 0x000001F8<, f >|0| 0x000001FD<
    0x000001FF var *f 0x0000001E
    0x00000200 load *f >|0| 0x000001FF<
    0x00000201 var *f 0x0000000F
    0x00000202 load *f >|0| 0x00000201<
    0x00000203 fmul f >|0| 0x00000200<, f >|0| 0x00000202<
    0x00000204 fadd f >|0| 0x000001FE<, f >|0| 0x00000203<
    0x00000205 var *f 0x0000001F
    0x00000206 load *f >|0| 0x00000205<
    0x00000207 var *f 0x00000013
    0x00000208 load *f >|0| 0x00000207<
    0x00000209 fmul f >|0| 0x00000206<, f >|0| 0x00000208<
    0x0000020A fadd f >|0| 0x00000204<, f >|0| 0x00000209<
    0x0000020B var **f 0x00000002
    0x0000020C load **f >|0| 0x0000020B<
    0x0000020D arracc *f >|0| 0x0000020C<, s32 11
    0x0000020E store *f >|0| 0x0000020D<, f >|0| 0x0000020A<
    0x0000020F var *f 0x00000020
    0x00000210 load *f >|0| 0x0000020F<
    0x00000211 var *f 0x00000004
    0x00000212 load *f >|0| 0x00000211<
    0x00000213 fmul f >|0| 0x00000210<, f >|0| 0x00000212<
    0x00000214 var *f 0x00000021
    0x00000215 load *f >|0| 0x00000214<
    0x00000216 var *f 0x00000008
    0x00000217 load *f >|0| 0x00000216<
    0x00000218 fmul f >|0| 0x00000215<, f >|0| 0x00000217<
    0x00000219 fadd f >|0| 0x00000213<, f >|0| 0x00000218<
    0x0000021A var *f 0x00000022
    0x0000021B load *f >|0| 0x0000021A<
    0x0000021C var *f 0x0000000C
    0x0000021D load *f >|0| 0x0000021C<
    0x0000021E fmul f >|0| 0x0000021B<, f >|0| 0x0000021D<
    0x0000021F fadd f >|0| 0x00000219<, f >|0| 0x0000021E<
    0x00000220 var *f 0x00000023
    0x00000221 load *f >|0| 0x00000220<
    0x00000222 var *f 0x00000010
    0x00000223 load *f >|0| 0x00000222<
    0x00000224 fmul f >|0| 0x00000221<, f >|0| 0x00000223<
    0x00000225 fadd f >|0| 0x0000021F<, f >|0| 0x00000224<
    0x00000226 var **f 0x00000002
    0x00000227 load **f >|0| 0x00000226<
    0x00000228 arracc *f >|0| 0x00000227<, s32 12
    0x00000229 store *f >|0| 0x00000228<, f >|0| 0x00000225<
    0x0000022A var *f 0x00000020
    0x0000022B load *f >|0| 0x0000022A<
    0x0000022C var *f 0x00000005
    0x0000022D load *f >|0| 0x0000022C<
    0x0000022E fmul f >|0| 0x0000022B<, f >|0| 0x0000022D<
    0x0000022F var *f 0x00000021
    0x00000230 load *f >|0| 0x0000022F<
    0x00000231 var *f 0x00000009
    0x00000232 load *f >|0| 0x00000231<
    0x00000233 fmul f >|0| 0x00000230<, f >|0| 0x00000232<
    0x00000234 fadd f >|0| 0x0000022E<, f >|0| 0x00000233<
    0x00000235 var *f 0x00000022
    0x00000236 load *f >|0| 0x00000235<
    0x00000237 var *f 0x0000000D
    0x00000238 load *f >|0| 0x00000237<
    0x00000239 fmul f >|0| 0x00000236<, f >|0| 0x00000238<
    0x0000023A fadd f >|0| 0x00000234<, f >|0| 0x00000239<
    0x0000023B var *f 0x00000023
    0x0000023C load *f >|0| 0x0000023B<
    0x0000023D var *f 0x00000011
    0x0000023E load *f >|0| 0x0000023D<
    0x0000023F fmul f >|0| 0x0000023C<, f >|0| 0x0000023E<
    0x00000240 fadd f >|0| 0x0000023A<, f >|0| 0x0000023F<
    0x00000241 var **f 0x00000002
    0x00000242 load **f >|0| 0x00000241<
    0x00000243 arracc *f >|0| 0x00000242<, s32 13
    0x00000244 store *f >|0| 0x00000243<, f >|0| 0x00000240<
    0x00000245 var *f 0x00000020
    0x00000246 load *f >|0| 0x00000245<
    0x00000247 var *f 0x00000006
    0x00000248 load *f >|0| 0x00000247<
    0x00000249 fmul f >|0| 0x00000246<, f >|0| 0x00000248<
    0x0000024A var *f 0x00000021
    0x0000024B load *f >|0| 0x0000024A<
    0x0000024C var *f 0x0000000A
    0x0000024D load *f >|0| 0x0000024C<
    0x0000024E fmul f >|0| 0x0000024B<, f >|0| 0x0000024D<
    0x0000024F fadd f >|0| 0x00000249<, f >|0| 0x0000024E<
    0x00000250 var *f 0x00000022
    0x00000251 load *f >|0| 0x00000250<
    0x00000252 var *f 0x0000000E
    0x00000253 load *f >|0| 0x00000252<
    0x00000254 fmul f >|0| 0x00000251<, f >|0| 0x00000253<
    0x00000255 fadd f >|0| 0x0000024F<, f >|0| 0x00000254<
    0x00000256 var *f 0x00000023
    0x00000257 load *f >|0| 0x00000256<
    0x00000258 var *f 0x00000012
    0x00000259 load *f >|0| 0x00000258<
    0x0000025A fmul f >|0| 0x00000257<, f >|0| 0x00000259<
    0x0000025B fadd f >|0| 0x00000255<, f >|0| 0x0000025A<
    0x0000025C var **f 0x00000002
    0x0000025D load **f >|0| 0x0000025C<
    0x0000025E arracc *f >|0| 0x0000025D<, s32 14
    0x0000025F store *f >|0| 0x0000025E<, f >|0| 0x0000025B<
    0x00000260 var *f 0x00000020
    0x00000261 load *f >|0| 0x00000260<
    0x00000262 var *f 0x00000007
    0x00000263 load *f >|0| 0x00000262<
    0x00000264 fmul f >|0| 0x00000261<, f >|0| 0x00000263<
    0x00000265 var *f 0x00000021
    0x00000266 load *f >|0| 0x00000265<
    0x00000267 var *f 0x0000000B
    0x00000268 load *f >|0| 0x00000267<
    0x00000269 fmul f >|0| 0x00000266<, f >|0| 0x00000268<
    0x0000026A fadd f >|0| 0x00000264<, f >|0| 0x00000269<
    0x0000026B var *f 0x00000022
    0x0000026C load *f >|0| 0x0000026B<
    0x0000026D var *f 0x0000000F
    0x0000026E load *f >|0| 0x0000026D<
    0x0000026F fmul f >|0| 0x0000026C<, f >|0| 0x0000026E<
    0x00000270 fadd f >|0| 0x0000026A<, f >|0| 0x0000026F<
    0x00000271 var *f 0x00000023
    0x00000272 load *f >|0| 0x00000271<
    0x00000273 var *f 0x00000013
    0x00000274 load *f >|0| 0x00000273<
    0x00000275 fmul f >|0| 0x00000272<, f >|0| 0x00000274<
    0x00000276 fadd f >|0| 0x00000270<, f >|0| 0x00000275<
    0x00000277 var **f 0x00000002
    0x00000278 load **f >|0| 0x00000277<
    0x00000279 arracc *f >|0| 0x00000278<, s32 15
    0x0000027A store *f >|0| 0x00000279<, f >|0| 0x00000276<
    0x0000027B var *__unk_type_kind 0x00000001
    0x0000027C call anD "__defer__" (*__unk_type_kind >|0| 0x0000027B<) void
    0x0000027D ret
fn translate ao9 -> void
    {1 BBs, 135 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000004
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000004
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 0
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000001
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C fmul f >|0| 0x00000009<, f >|0| 0x0000000B<
    0x0000000D var **f 0x00000004
    0x0000000E load **f >|0| 0x0000000D<
    0x0000000F arracc *f >|0| 0x0000000E<, s32 4
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 var *f 0x00000002
    0x00000012 load *f >|0| 0x00000011<
    0x00000013 fmul f >|0| 0x00000010<, f >|0| 0x00000012<
    0x00000014 fadd f >|0| 0x0000000C<, f >|0| 0x00000013<
    0x00000015 var **f 0x00000004
    0x00000016 load **f >|0| 0x00000015<
    0x00000017 arracc *f >|0| 0x00000016<, s32 8
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 var *f 0x00000003
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fmul f >|0| 0x00000018<, f >|0| 0x0000001A<
    0x0000001C fadd f >|0| 0x00000014<, f >|0| 0x0000001B<
    0x0000001D var **f 0x00000004
    0x0000001E load **f >|0| 0x0000001D<
    0x0000001F arracc *f >|0| 0x0000001E<, s32 12
    0x00000020 load *f >|0| 0x0000001F<
    0x00000021 fadd f >|0| 0x0000001C<, f >|0| 0x00000020<
    0x00000022 var **f 0x00000004
    0x00000023 load **f >|0| 0x00000022<
    0x00000024 arracc *f >|0| 0x00000023<, s32 12
    0x00000025 store *f >|0| 0x00000024<, f >|0| 0x00000021<
    0x00000026 var **f 0x00000004
    0x00000027 load **f >|0| 0x00000026<
    0x00000028 arracc *f >|0| 0x00000027<, s32 1
    0x00000029 load *f >|0| 0x00000028<
    0x0000002A var *f 0x00000001
    0x0000002B load *f >|0| 0x0000002A<
    0x0000002C fmul f >|0| 0x00000029<, f >|0| 0x0000002B<
    0x0000002D var **f 0x00000004
    0x0000002E load **f >|0| 0x0000002D<
    0x0000002F arracc *f >|0| 0x0000002E<, s32 5
    0x00000030 load *f >|0| 0x0000002F<
    0x00000031 var *f 0x00000002
    0x00000032 load *f >|0| 0x00000031<
    0x00000033 fmul f >|0| 0x00000030<, f >|0| 0x00000032<
    0x00000034 fadd f >|0| 0x0000002C<, f >|0| 0x00000033<
    0x00000035 var **f 0x00000004
    0x00000036 load **f >|0| 0x00000035<
    0x00000037 arracc *f >|0| 0x00000036<, s32 9
    0x00000038 load *f >|0| 0x00000037<
    0x00000039 var *f 0x00000003
    0x0000003A load *f >|0| 0x00000039<
    0x0000003B fmul f >|0| 0x00000038<, f >|0| 0x0000003A<
    0x0000003C fadd f >|0| 0x00000034<, f >|0| 0x0000003B<
    0x0000003D var **f 0x00000004
    0x0000003E load **f >|0| 0x0000003D<
    0x0000003F arracc *f >|0| 0x0000003E<, s32 13
    0x00000040 load *f >|0| 0x0000003F<
    0x00000041 fadd f >|0| 0x0000003C<, f >|0| 0x00000040<
    0x00000042 var **f 0x00000004
    0x00000043 load **f >|0| 0x00000042<
    0x00000044 arracc *f >|0| 0x00000043<, s32 13
    0x00000045 store *f >|0| 0x00000044<, f >|0| 0x00000041<
    0x00000046 var **f 0x00000004
    0x00000047 load **f >|0| 0x00000046<
    0x00000048 arracc *f >|0| 0x00000047<, s32 2
    0x00000049 load *f >|0| 0x00000048<
    0x0000004A var *f 0x00000001
    0x0000004B load *f >|0| 0x0000004A<
    0x0000004C fmul f >|0| 0x00000049<, f >|0| 0x0000004B<
    0x0000004D var **f 0x00000004
    0x0000004E load **f >|0| 0x0000004D<
    0x0000004F arracc *f >|0| 0x0000004E<, s32 6
    0x00000050 load *f >|0| 0x0000004F<
    0x00000051 var *f 0x00000002
    0x00000052 load *f >|0| 0x00000051<
    0x00000053 fmul f >|0| 0x00000050<, f >|0| 0x00000052<
    0x00000054 fadd f >|0| 0x0000004C<, f >|0| 0x00000053<
    0x00000055 var **f 0x00000004
    0x00000056 load **f >|0| 0x00000055<
    0x00000057 arracc *f >|0| 0x00000056<, s32 10
    0x00000058 load *f >|0| 0x00000057<
    0x00000059 var *f 0x00000003
    0x0000005A load *f >|0| 0x00000059<
    0x0000005B fmul f >|0| 0x00000058<, f >|0| 0x0000005A<
    0x0000005C fadd f >|0| 0x00000054<, f >|0| 0x0000005B<
    0x0000005D var **f 0x00000004
    0x0000005E load **f >|0| 0x0000005D<
    0x0000005F arracc *f >|0| 0x0000005E<, s32 14
    0x00000060 load *f >|0| 0x0000005F<
    0x00000061 fadd f >|0| 0x0000005C<, f >|0| 0x00000060<
    0x00000062 var **f 0x00000004
    0x00000063 load **f >|0| 0x00000062<
    0x00000064 arracc *f >|0| 0x00000063<, s32 14
    0x00000065 store *f >|0| 0x00000064<, f >|0| 0x00000061<
    0x00000066 var **f 0x00000004
    0x00000067 load **f >|0| 0x00000066<
    0x00000068 arracc *f >|0| 0x00000067<, s32 3
    0x00000069 load *f >|0| 0x00000068<
    0x0000006A var *f 0x00000001
    0x0000006B load *f >|0| 0x0000006A<
    0x0000006C fmul f >|0| 0x00000069<, f >|0| 0x0000006B<
    0x0000006D var **f 0x00000004
    0x0000006E load **f >|0| 0x0000006D<
    0x0000006F arracc *f >|0| 0x0000006E<, s32 7
    0x00000070 load *f >|0| 0x0000006F<
    0x00000071 var *f 0x00000002
    0x00000072 load *f >|0| 0x00000071<
    0x00000073 fmul f >|0| 0x00000070<, f >|0| 0x00000072<
    0x00000074 fadd f >|0| 0x0000006C<, f >|0| 0x00000073<
    0x00000075 var **f 0x00000004
    0x00000076 load **f >|0| 0x00000075<
    0x00000077 arracc *f >|0| 0x00000076<, s32 11
    0x00000078 load *f >|0| 0x00000077<
    0x00000079 var *f 0x00000003
    0x0000007A load *f >|0| 0x00000079<
    0x0000007B fmul f >|0| 0x00000078<, f >|0| 0x0000007A<
    0x0000007C fadd f >|0| 0x00000074<, f >|0| 0x0000007B<
    0x0000007D var **f 0x00000004
    0x0000007E load **f >|0| 0x0000007D<
    0x0000007F arracc *f >|0| 0x0000007E<, s32 15
    0x00000080 load *f >|0| 0x0000007F<
    0x00000081 fadd f >|0| 0x0000007C<, f >|0| 0x00000080<
    0x00000082 var **f 0x00000004
    0x00000083 load **f >|0| 0x00000082<
    0x00000084 arracc *f >|0| 0x00000083<, s32 15
    0x00000085 store *f >|0| 0x00000084<, f >|0| 0x00000081<
    0x00000086 ret
fn translate ap9 -> void
    {1 BBs, 152 INSTRs, 6 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 *f]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var *f 0x00000002
    0x00000004 store *f >|0| 0x00000003<, f >|0| 0x00000002<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var *f 0x00000003
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 2
    0x0000000C load *f >|0| 0x0000000B<
    0x0000000D var *f 0x00000004
    0x0000000E store *f >|0| 0x0000000D<, f >|0| 0x0000000C<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 0
    0x00000012 bc *[16] f >|0| 0x00000011< to *f
    0x00000013 var **f 0x00000005
    0x00000014 store **f >|0| 0x00000013<, *f >|0| 0x00000012<
    0x00000015 var **f 0x00000005
    0x00000016 load **f >|0| 0x00000015<
    0x00000017 arracc *f >|0| 0x00000016<, s32 0
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 var *f 0x00000002
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fmul f >|0| 0x00000018<, f >|0| 0x0000001A<
    0x0000001C var **f 0x00000005
    0x0000001D load **f >|0| 0x0000001C<
    0x0000001E arracc *f >|0| 0x0000001D<, s32 4
    0x0000001F load *f >|0| 0x0000001E<
    0x00000020 var *f 0x00000003
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 fmul f >|0| 0x0000001F<, f >|0| 0x00000021<
    0x00000023 fadd f >|0| 0x0000001B<, f >|0| 0x00000022<
    0x00000024 var **f 0x00000005
    0x00000025 load **f >|0| 0x00000024<
    0x00000026 arracc *f >|0| 0x00000025<, s32 8
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var *f 0x00000004
    0x00000029 load *f >|0| 0x00000028<
    0x0000002A fmul f >|0| 0x00000027<, f >|0| 0x00000029<
    0x0000002B fadd f >|0| 0x00000023<, f >|0| 0x0000002A<
    0x0000002C var **f 0x00000005
    0x0000002D load **f >|0| 0x0000002C<
    0x0000002E arracc *f >|0| 0x0000002D<, s32 12
    0x0000002F load *f >|0| 0x0000002E<
    0x00000030 fadd f >|0| 0x0000002B<, f >|0| 0x0000002F<
    0x00000031 var **f 0x00000005
    0x00000032 load **f >|0| 0x00000031<
    0x00000033 arracc *f >|0| 0x00000032<, s32 12
    0x00000034 store *f >|0| 0x00000033<, f >|0| 0x00000030<
    0x00000035 var **f 0x00000005
    0x00000036 load **f >|0| 0x00000035<
    0x00000037 arracc *f >|0| 0x00000036<, s32 1
    0x00000038 load *f >|0| 0x00000037<
    0x00000039 var *f 0x00000002
    0x0000003A load *f >|0| 0x00000039<
    0x0000003B fmul f >|0| 0x00000038<, f >|0| 0x0000003A<
    0x0000003C var **f 0x00000005
    0x0000003D load **f >|0| 0x0000003C<
    0x0000003E arracc *f >|0| 0x0000003D<, s32 5
    0x0000003F load *f >|0| 0x0000003E<
    0x00000040 var *f 0x00000003
    0x00000041 load *f >|0| 0x00000040<
    0x00000042 fmul f >|0| 0x0000003F<, f >|0| 0x00000041<
    0x00000043 fadd f >|0| 0x0000003B<, f >|0| 0x00000042<
    0x00000044 var **f 0x00000005
    0x00000045 load **f >|0| 0x00000044<
    0x00000046 arracc *f >|0| 0x00000045<, s32 9
    0x00000047 load *f >|0| 0x00000046<
    0x00000048 var *f 0x00000004
    0x00000049 load *f >|0| 0x00000048<
    0x0000004A fmul f >|0| 0x00000047<, f >|0| 0x00000049<
    0x0000004B fadd f >|0| 0x00000043<, f >|0| 0x0000004A<
    0x0000004C var **f 0x00000005
    0x0000004D load **f >|0| 0x0000004C<
    0x0000004E arracc *f >|0| 0x0000004D<, s32 13
    0x0000004F load *f >|0| 0x0000004E<
    0x00000050 fadd f >|0| 0x0000004B<, f >|0| 0x0000004F<
    0x00000051 var **f 0x00000005
    0x00000052 load **f >|0| 0x00000051<
    0x00000053 arracc *f >|0| 0x00000052<, s32 13
    0x00000054 store *f >|0| 0x00000053<, f >|0| 0x00000050<
    0x00000055 var **f 0x00000005
    0x00000056 load **f >|0| 0x00000055<
    0x00000057 arracc *f >|0| 0x00000056<, s32 2
    0x00000058 load *f >|0| 0x00000057<
    0x00000059 var *f 0x00000002
    0x0000005A load *f >|0| 0x00000059<
    0x0000005B fmul f >|0| 0x00000058<, f >|0| 0x0000005A<
    0x0000005C var **f 0x00000005
    0x0000005D load **f >|0| 0x0000005C<
    0x0000005E arracc *f >|0| 0x0000005D<, s32 6
    0x0000005F load *f >|0| 0x0000005E<
    0x00000060 var *f 0x00000003
    0x00000061 load *f >|0| 0x00000060<
    0x00000062 fmul f >|0| 0x0000005F<, f >|0| 0x00000061<
    0x00000063 fadd f >|0| 0x0000005B<, f >|0| 0x00000062<
    0x00000064 var **f 0x00000005
    0x00000065 load **f >|0| 0x00000064<
    0x00000066 arracc *f >|0| 0x00000065<, s32 10
    0x00000067 load *f >|0| 0x00000066<
    0x00000068 var *f 0x00000004
    0x00000069 load *f >|0| 0x00000068<
    0x0000006A fmul f >|0| 0x00000067<, f >|0| 0x00000069<
    0x0000006B fadd f >|0| 0x00000063<, f >|0| 0x0000006A<
    0x0000006C var **f 0x00000005
    0x0000006D load **f >|0| 0x0000006C<
    0x0000006E arracc *f >|0| 0x0000006D<, s32 14
    0x0000006F load *f >|0| 0x0000006E<
    0x00000070 fadd f >|0| 0x0000006B<, f >|0| 0x0000006F<
    0x00000071 var **f 0x00000005
    0x00000072 load **f >|0| 0x00000071<
    0x00000073 arracc *f >|0| 0x00000072<, s32 14
    0x00000074 store *f >|0| 0x00000073<, f >|0| 0x00000070<
    0x00000075 var **f 0x00000005
    0x00000076 load **f >|0| 0x00000075<
    0x00000077 arracc *f >|0| 0x00000076<, s32 3
    0x00000078 load *f >|0| 0x00000077<
    0x00000079 var *f 0x00000002
    0x0000007A load *f >|0| 0x00000079<
    0x0000007B fmul f >|0| 0x00000078<, f >|0| 0x0000007A<
    0x0000007C var **f 0x00000005
    0x0000007D load **f >|0| 0x0000007C<
    0x0000007E arracc *f >|0| 0x0000007D<, s32 7
    0x0000007F load *f >|0| 0x0000007E<
    0x00000080 var *f 0x00000003
    0x00000081 load *f >|0| 0x00000080<
    0x00000082 fmul f >|0| 0x0000007F<, f >|0| 0x00000081<
    0x00000083 fadd f >|0| 0x0000007B<, f >|0| 0x00000082<
    0x00000084 var **f 0x00000005
    0x00000085 load **f >|0| 0x00000084<
    0x00000086 arracc *f >|0| 0x00000085<, s32 11
    0x00000087 load *f >|0| 0x00000086<
    0x00000088 var *f 0x00000004
    0x00000089 load *f >|0| 0x00000088<
    0x0000008A fmul f >|0| 0x00000087<, f >|0| 0x00000089<
    0x0000008B fadd f >|0| 0x00000083<, f >|0| 0x0000008A<
    0x0000008C var **f 0x00000005
    0x0000008D load **f >|0| 0x0000008C<
    0x0000008E arracc *f >|0| 0x0000008D<, s32 15
    0x0000008F load *f >|0| 0x0000008E<
    0x00000090 fadd f >|0| 0x0000008B<, f >|0| 0x0000008F<
    0x00000091 var **f 0x00000005
    0x00000092 load **f >|0| 0x00000091<
    0x00000093 arracc *f >|0| 0x00000092<, s32 15
    0x00000094 store *f >|0| 0x00000093<, f >|0| 0x00000090<
    0x00000095 var *__unk_type_kind 0x00000001
    0x00000096 call awD "__defer__" (*__unk_type_kind >|0| 0x00000095<) void
    0x00000097 ret
fn translateFromIdentity aq9 -> void
    {1 BBs, 13 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|0| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 var *f 0x00000003
    0x0000000A load *f >|0| 0x00000009<
    0x0000000B call ao9 "translate" (*__unk_type_kind >|0| 0x00000004<, f >|0| 0x00000006<, f >|0| 0x00000008<, f >|0| 0x0000000A<) void
    0x0000000C ret
fn translateFromIdentity ar9 -> void
    {1 BBs, 11 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|0| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 load *__unk_type_kind >|0| 0x00000005<
    0x00000007 call ap9 "translate" (*__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000006<) void
    0x00000008 var *__unk_type_kind 0x00000001
    0x00000009 call awD "__defer__" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A ret
fn scale as9 -> void
    {1 BBs, 103 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000004
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *f 0x00000001
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var **f 0x00000004
    0x00000009 load **f >|0| 0x00000008<
    0x0000000A arracc *f >|0| 0x00000009<, s32 0
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C fmul f >|0| 0x0000000B<, f >|0| 0x00000007<
    0x0000000D store *f >|0| 0x0000000A<, f >|0| 0x0000000C<
    0x0000000E var *f 0x00000001
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var **f 0x00000004
    0x00000011 load **f >|0| 0x00000010<
    0x00000012 arracc *f >|0| 0x00000011<, s32 1
    0x00000013 load *f >|0| 0x00000012<
    0x00000014 fmul f >|0| 0x00000013<, f >|0| 0x0000000F<
    0x00000015 store *f >|0| 0x00000012<, f >|0| 0x00000014<
    0x00000016 var *f 0x00000001
    0x00000017 load *f >|0| 0x00000016<
    0x00000018 var **f 0x00000004
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A arracc *f >|0| 0x00000019<, s32 2
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C fmul f >|0| 0x0000001B<, f >|0| 0x00000017<
    0x0000001D store *f >|0| 0x0000001A<, f >|0| 0x0000001C<
    0x0000001E var *f 0x00000001
    0x0000001F load *f >|0| 0x0000001E<
    0x00000020 var **f 0x00000004
    0x00000021 load **f >|0| 0x00000020<
    0x00000022 arracc *f >|0| 0x00000021<, s32 3
    0x00000023 load *f >|0| 0x00000022<
    0x00000024 fmul f >|0| 0x00000023<, f >|0| 0x0000001F<
    0x00000025 store *f >|0| 0x00000022<, f >|0| 0x00000024<
    0x00000026 var *f 0x00000002
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var **f 0x00000004
    0x00000029 load **f >|0| 0x00000028<
    0x0000002A arracc *f >|0| 0x00000029<, s32 4
    0x0000002B load *f >|0| 0x0000002A<
    0x0000002C fmul f >|0| 0x0000002B<, f >|0| 0x00000027<
    0x0000002D store *f >|0| 0x0000002A<, f >|0| 0x0000002C<
    0x0000002E var *f 0x00000002
    0x0000002F load *f >|0| 0x0000002E<
    0x00000030 var **f 0x00000004
    0x00000031 load **f >|0| 0x00000030<
    0x00000032 arracc *f >|0| 0x00000031<, s32 5
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 fmul f >|0| 0x00000033<, f >|0| 0x0000002F<
    0x00000035 store *f >|0| 0x00000032<, f >|0| 0x00000034<
    0x00000036 var *f 0x00000002
    0x00000037 load *f >|0| 0x00000036<
    0x00000038 var **f 0x00000004
    0x00000039 load **f >|0| 0x00000038<
    0x0000003A arracc *f >|0| 0x00000039<, s32 6
    0x0000003B load *f >|0| 0x0000003A<
    0x0000003C fmul f >|0| 0x0000003B<, f >|0| 0x00000037<
    0x0000003D store *f >|0| 0x0000003A<, f >|0| 0x0000003C<
    0x0000003E var *f 0x00000002
    0x0000003F load *f >|0| 0x0000003E<
    0x00000040 var **f 0x00000004
    0x00000041 load **f >|0| 0x00000040<
    0x00000042 arracc *f >|0| 0x00000041<, s32 7
    0x00000043 load *f >|0| 0x00000042<
    0x00000044 fmul f >|0| 0x00000043<, f >|0| 0x0000003F<
    0x00000045 store *f >|0| 0x00000042<, f >|0| 0x00000044<
    0x00000046 var *f 0x00000003
    0x00000047 load *f >|0| 0x00000046<
    0x00000048 var **f 0x00000004
    0x00000049 load **f >|0| 0x00000048<
    0x0000004A arracc *f >|0| 0x00000049<, s32 8
    0x0000004B load *f >|0| 0x0000004A<
    0x0000004C fmul f >|0| 0x0000004B<, f >|0| 0x00000047<
    0x0000004D store *f >|0| 0x0000004A<, f >|0| 0x0000004C<
    0x0000004E var *f 0x00000003
    0x0000004F load *f >|0| 0x0000004E<
    0x00000050 var **f 0x00000004
    0x00000051 load **f >|0| 0x00000050<
    0x00000052 arracc *f >|0| 0x00000051<, s32 9
    0x00000053 load *f >|0| 0x00000052<
    0x00000054 fmul f >|0| 0x00000053<, f >|0| 0x0000004F<
    0x00000055 store *f >|0| 0x00000052<, f >|0| 0x00000054<
    0x00000056 var *f 0x00000003
    0x00000057 load *f >|0| 0x00000056<
    0x00000058 var **f 0x00000004
    0x00000059 load **f >|0| 0x00000058<
    0x0000005A arracc *f >|0| 0x00000059<, s32 10
    0x0000005B load *f >|0| 0x0000005A<
    0x0000005C fmul f >|0| 0x0000005B<, f >|0| 0x00000057<
    0x0000005D store *f >|0| 0x0000005A<, f >|0| 0x0000005C<
    0x0000005E var *f 0x00000003
    0x0000005F load *f >|0| 0x0000005E<
    0x00000060 var **f 0x00000004
    0x00000061 load **f >|0| 0x00000060<
    0x00000062 arracc *f >|0| 0x00000061<, s32 11
    0x00000063 load *f >|0| 0x00000062<
    0x00000064 fmul f >|0| 0x00000063<, f >|0| 0x0000005F<
    0x00000065 store *f >|0| 0x00000062<, f >|0| 0x00000064<
    0x00000066 ret
fn scale at9 -> void
    {1 BBs, 120 INSTRs, 6 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 *f]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var *f 0x00000002
    0x00000004 store *f >|0| 0x00000003<, f >|0| 0x00000002<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var *f 0x00000003
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 2
    0x0000000C load *f >|0| 0x0000000B<
    0x0000000D var *f 0x00000004
    0x0000000E store *f >|0| 0x0000000D<, f >|0| 0x0000000C<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 0
    0x00000012 bc *[16] f >|0| 0x00000011< to *f
    0x00000013 var **f 0x00000005
    0x00000014 store **f >|0| 0x00000013<, *f >|0| 0x00000012<
    0x00000015 var *f 0x00000002
    0x00000016 load *f >|0| 0x00000015<
    0x00000017 var **f 0x00000005
    0x00000018 load **f >|0| 0x00000017<
    0x00000019 arracc *f >|0| 0x00000018<, s32 0
    0x0000001A load *f >|0| 0x00000019<
    0x0000001B fmul f >|0| 0x0000001A<, f >|0| 0x00000016<
    0x0000001C store *f >|0| 0x00000019<, f >|0| 0x0000001B<
    0x0000001D var *f 0x00000002
    0x0000001E load *f >|0| 0x0000001D<
    0x0000001F var **f 0x00000005
    0x00000020 load **f >|0| 0x0000001F<
    0x00000021 arracc *f >|0| 0x00000020<, s32 1
    0x00000022 load *f >|0| 0x00000021<
    0x00000023 fmul f >|0| 0x00000022<, f >|0| 0x0000001E<
    0x00000024 store *f >|0| 0x00000021<, f >|0| 0x00000023<
    0x00000025 var *f 0x00000002
    0x00000026 load *f >|0| 0x00000025<
    0x00000027 var **f 0x00000005
    0x00000028 load **f >|0| 0x00000027<
    0x00000029 arracc *f >|0| 0x00000028<, s32 2
    0x0000002A load *f >|0| 0x00000029<
    0x0000002B fmul f >|0| 0x0000002A<, f >|0| 0x00000026<
    0x0000002C store *f >|0| 0x00000029<, f >|0| 0x0000002B<
    0x0000002D var *f 0x00000002
    0x0000002E load *f >|0| 0x0000002D<
    0x0000002F var **f 0x00000005
    0x00000030 load **f >|0| 0x0000002F<
    0x00000031 arracc *f >|0| 0x00000030<, s32 3
    0x00000032 load *f >|0| 0x00000031<
    0x00000033 fmul f >|0| 0x00000032<, f >|0| 0x0000002E<
    0x00000034 store *f >|0| 0x00000031<, f >|0| 0x00000033<
    0x00000035 var *f 0x00000003
    0x00000036 load *f >|0| 0x00000035<
    0x00000037 var **f 0x00000005
    0x00000038 load **f >|0| 0x00000037<
    0x00000039 arracc *f >|0| 0x00000038<, s32 4
    0x0000003A load *f >|0| 0x00000039<
    0x0000003B fmul f >|0| 0x0000003A<, f >|0| 0x00000036<
    0x0000003C store *f >|0| 0x00000039<, f >|0| 0x0000003B<
    0x0000003D var *f 0x00000003
    0x0000003E load *f >|0| 0x0000003D<
    0x0000003F var **f 0x00000005
    0x00000040 load **f >|0| 0x0000003F<
    0x00000041 arracc *f >|0| 0x00000040<, s32 5
    0x00000042 load *f >|0| 0x00000041<
    0x00000043 fmul f >|0| 0x00000042<, f >|0| 0x0000003E<
    0x00000044 store *f >|0| 0x00000041<, f >|0| 0x00000043<
    0x00000045 var *f 0x00000003
    0x00000046 load *f >|0| 0x00000045<
    0x00000047 var **f 0x00000005
    0x00000048 load **f >|0| 0x00000047<
    0x00000049 arracc *f >|0| 0x00000048<, s32 6
    0x0000004A load *f >|0| 0x00000049<
    0x0000004B fmul f >|0| 0x0000004A<, f >|0| 0x00000046<
    0x0000004C store *f >|0| 0x00000049<, f >|0| 0x0000004B<
    0x0000004D var *f 0x00000003
    0x0000004E load *f >|0| 0x0000004D<
    0x0000004F var **f 0x00000005
    0x00000050 load **f >|0| 0x0000004F<
    0x00000051 arracc *f >|0| 0x00000050<, s32 7
    0x00000052 load *f >|0| 0x00000051<
    0x00000053 fmul f >|0| 0x00000052<, f >|0| 0x0000004E<
    0x00000054 store *f >|0| 0x00000051<, f >|0| 0x00000053<
    0x00000055 var *f 0x00000004
    0x00000056 load *f >|0| 0x00000055<
    0x00000057 var **f 0x00000005
    0x00000058 load **f >|0| 0x00000057<
    0x00000059 arracc *f >|0| 0x00000058<, s32 8
    0x0000005A load *f >|0| 0x00000059<
    0x0000005B fmul f >|0| 0x0000005A<, f >|0| 0x00000056<
    0x0000005C store *f >|0| 0x00000059<, f >|0| 0x0000005B<
    0x0000005D var *f 0x00000004
    0x0000005E load *f >|0| 0x0000005D<
    0x0000005F var **f 0x00000005
    0x00000060 load **f >|0| 0x0000005F<
    0x00000061 arracc *f >|0| 0x00000060<, s32 9
    0x00000062 load *f >|0| 0x00000061<
    0x00000063 fmul f >|0| 0x00000062<, f >|0| 0x0000005E<
    0x00000064 store *f >|0| 0x00000061<, f >|0| 0x00000063<
    0x00000065 var *f 0x00000004
    0x00000066 load *f >|0| 0x00000065<
    0x00000067 var **f 0x00000005
    0x00000068 load **f >|0| 0x00000067<
    0x00000069 arracc *f >|0| 0x00000068<, s32 10
    0x0000006A load *f >|0| 0x00000069<
    0x0000006B fmul f >|0| 0x0000006A<, f >|0| 0x00000066<
    0x0000006C store *f >|0| 0x00000069<, f >|0| 0x0000006B<
    0x0000006D var *f 0x00000004
    0x0000006E load *f >|0| 0x0000006D<
    0x0000006F var **f 0x00000005
    0x00000070 load **f >|0| 0x0000006F<
    0x00000071 arracc *f >|0| 0x00000070<, s32 11
    0x00000072 load *f >|0| 0x00000071<
    0x00000073 fmul f >|0| 0x00000072<, f >|0| 0x0000006E<
    0x00000074 store *f >|0| 0x00000071<, f >|0| 0x00000073<
    0x00000075 var *__unk_type_kind 0x00000001
    0x00000076 call awD "__defer__" (*__unk_type_kind >|0| 0x00000075<) void
    0x00000077 ret
fn scaleFromIdentity au9 -> void
    {1 BBs, 13 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|0| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 var *f 0x00000003
    0x0000000A load *f >|0| 0x00000009<
    0x0000000B call as9 "scale" (*__unk_type_kind >|0| 0x00000004<, f >|0| 0x00000006<, f >|0| 0x00000008<, f >|0| 0x0000000A<) void
    0x0000000C ret
fn scaleFromIdentity av9 -> void
    {1 BBs, 11 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|0| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 load *__unk_type_kind >|0| 0x00000005<
    0x00000007 call at9 "scale" (*__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000006<) void
    0x00000008 var *__unk_type_kind 0x00000001
    0x00000009 call awD "__defer__" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A ret
fn rotate aw9 -> void
    {5 BBs, 534 INSTRs, 31 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 *f]
    [0x00000006 f]
    [0x00000007 f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
    [0x0000000B f]
    [0x0000000C f]
    [0x0000000D f]
    [0x0000000E f]
    [0x0000000F f]
    [0x00000010 f]
    [0x00000011 f]
    [0x00000012 f]
    [0x00000013 f]
    [0x00000014 f]
    [0x00000015 f]
    [0x00000016 f]
    [0x00000017 f]
    [0x00000018 f]
    [0x00000019 f]
    [0x0000001A f]
    [0x0000001B f]
    [0x0000001C f]
    [0x0000001D f]
    [0x0000001E f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000005
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *f 0x00000002
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var *f 0x00000002
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fmul f >|0| 0x00000007<, f >|0| 0x00000009<
    0x0000000B var *f 0x00000003
    0x0000000C load *f >|0| 0x0000000B<
    0x0000000D var *f 0x00000003
    0x0000000E load *f >|0| 0x0000000D<
    0x0000000F fmul f >|0| 0x0000000C<, f >|0| 0x0000000E<
    0x00000010 fadd f >|0| 0x0000000A<, f >|0| 0x0000000F<
    0x00000011 var *f 0x00000004
    0x00000012 load *f >|0| 0x00000011<
    0x00000013 var *f 0x00000004
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 fmul f >|0| 0x00000012<, f >|0| 0x00000014<
    0x00000016 fadd f >|0| 0x00000010<, f >|0| 0x00000015<
    0x00000017 call aF9 "sqrtf" (f >|0| 0x00000016<) f
    0x00000018 var *f 0x00000006
    0x00000019 store *f >|0| 0x00000018<, f >|0| 0x00000017<
    0x0000001A var *f 0x00000006
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C feq f >|0| 0x0000001B<, f 0.000000
    0x0000001D cbr f >|0| 0x0000001C<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 var *f 0x00000006
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 fneq f >|2| 0x00000001<, f 1.000000
    0x00000003 cbr f >|2| 0x00000002<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var *f 0x00000006
    0x00000001 load *f >|3| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|3| 0x00000001<
    0x00000003 var *f 0x00000006
    0x00000004 store *f >|3| 0x00000003<, f >|3| 0x00000002<
    0x00000005 var *f 0x00000006
    0x00000006 load *f >|3| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|3| 0x00000007<
    0x00000009 fmul f >|3| 0x00000008<, f >|3| 0x00000006<
    0x0000000A store *f >|3| 0x00000007<, f >|3| 0x00000009<
    0x0000000B var *f 0x00000006
    0x0000000C load *f >|3| 0x0000000B<
    0x0000000D var *f 0x00000003
    0x0000000E load *f >|3| 0x0000000D<
    0x0000000F fmul f >|3| 0x0000000E<, f >|3| 0x0000000C<
    0x00000010 store *f >|3| 0x0000000D<, f >|3| 0x0000000F<
    0x00000011 var *f 0x00000006
    0x00000012 load *f >|3| 0x00000011<
    0x00000013 var *f 0x00000004
    0x00000014 load *f >|3| 0x00000013<
    0x00000015 fmul f >|3| 0x00000014<, f >|3| 0x00000012<
    0x00000016 store *f >|3| 0x00000013<, f >|3| 0x00000015<
    0x00000017 br |4|
  BASICBLOCK |4|
    0x00000000 var *f 0x00000001
    0x00000001 load *f >|4| 0x00000000<
    0x00000002 call at8 "sinf" (f >|4| 0x00000001<) f
    0x00000003 var *f 0x00000007
    0x00000004 store *f >|4| 0x00000003<, f >|4| 0x00000002<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|4| 0x00000005<
    0x00000007 call ap8 "cosf" (f >|4| 0x00000006<) f
    0x00000008 var *f 0x00000008
    0x00000009 store *f >|4| 0x00000008<, f >|4| 0x00000007<
    0x0000000A var *f 0x00000008
    0x0000000B load *f >|4| 0x0000000A<
    0x0000000C fsub f 1.000000, f >|4| 0x0000000B<
    0x0000000D var *f 0x00000009
    0x0000000E store *f >|4| 0x0000000D<, f >|4| 0x0000000C<
    0x0000000F var **f 0x00000005
    0x00000010 load **f >|4| 0x0000000F<
    0x00000011 arracc *f >|4| 0x00000010<, s32 0
    0x00000012 load *f >|4| 0x00000011<
    0x00000013 var *f 0x0000000A
    0x00000014 store *f >|4| 0x00000013<, f >|4| 0x00000012<
    0x00000015 var **f 0x00000005
    0x00000016 load **f >|4| 0x00000015<
    0x00000017 arracc *f >|4| 0x00000016<, s32 1
    0x00000018 load *f >|4| 0x00000017<
    0x00000019 var *f 0x0000000B
    0x0000001A store *f >|4| 0x00000019<, f >|4| 0x00000018<
    0x0000001B var **f 0x00000005
    0x0000001C load **f >|4| 0x0000001B<
    0x0000001D arracc *f >|4| 0x0000001C<, s32 2
    0x0000001E load *f >|4| 0x0000001D<
    0x0000001F var *f 0x0000000C
    0x00000020 store *f >|4| 0x0000001F<, f >|4| 0x0000001E<
    0x00000021 var **f 0x00000005
    0x00000022 load **f >|4| 0x00000021<
    0x00000023 arracc *f >|4| 0x00000022<, s32 3
    0x00000024 load *f >|4| 0x00000023<
    0x00000025 var *f 0x0000000D
    0x00000026 store *f >|4| 0x00000025<, f >|4| 0x00000024<
    0x00000027 var **f 0x00000005
    0x00000028 load **f >|4| 0x00000027<
    0x00000029 arracc *f >|4| 0x00000028<, s32 4
    0x0000002A load *f >|4| 0x00000029<
    0x0000002B var *f 0x0000000E
    0x0000002C store *f >|4| 0x0000002B<, f >|4| 0x0000002A<
    0x0000002D var **f 0x00000005
    0x0000002E load **f >|4| 0x0000002D<
    0x0000002F arracc *f >|4| 0x0000002E<, s32 5
    0x00000030 load *f >|4| 0x0000002F<
    0x00000031 var *f 0x0000000F
    0x00000032 store *f >|4| 0x00000031<, f >|4| 0x00000030<
    0x00000033 var **f 0x00000005
    0x00000034 load **f >|4| 0x00000033<
    0x00000035 arracc *f >|4| 0x00000034<, s32 6
    0x00000036 load *f >|4| 0x00000035<
    0x00000037 var *f 0x00000010
    0x00000038 store *f >|4| 0x00000037<, f >|4| 0x00000036<
    0x00000039 var **f 0x00000005
    0x0000003A load **f >|4| 0x00000039<
    0x0000003B arracc *f >|4| 0x0000003A<, s32 7
    0x0000003C load *f >|4| 0x0000003B<
    0x0000003D var *f 0x00000011
    0x0000003E store *f >|4| 0x0000003D<, f >|4| 0x0000003C<
    0x0000003F var **f 0x00000005
    0x00000040 load **f >|4| 0x0000003F<
    0x00000041 arracc *f >|4| 0x00000040<, s32 8
    0x00000042 load *f >|4| 0x00000041<
    0x00000043 var *f 0x00000012
    0x00000044 store *f >|4| 0x00000043<, f >|4| 0x00000042<
    0x00000045 var **f 0x00000005
    0x00000046 load **f >|4| 0x00000045<
    0x00000047 arracc *f >|4| 0x00000046<, s32 9
    0x00000048 load *f >|4| 0x00000047<
    0x00000049 var *f 0x00000013
    0x0000004A store *f >|4| 0x00000049<, f >|4| 0x00000048<
    0x0000004B var **f 0x00000005
    0x0000004C load **f >|4| 0x0000004B<
    0x0000004D arracc *f >|4| 0x0000004C<, s32 10
    0x0000004E load *f >|4| 0x0000004D<
    0x0000004F var *f 0x00000014
    0x00000050 store *f >|4| 0x0000004F<, f >|4| 0x0000004E<
    0x00000051 var **f 0x00000005
    0x00000052 load **f >|4| 0x00000051<
    0x00000053 arracc *f >|4| 0x00000052<, s32 11
    0x00000054 load *f >|4| 0x00000053<
    0x00000055 var *f 0x00000015
    0x00000056 store *f >|4| 0x00000055<, f >|4| 0x00000054<
    0x00000057 var *f 0x00000002
    0x00000058 load *f >|4| 0x00000057<
    0x00000059 var *f 0x00000002
    0x0000005A load *f >|4| 0x00000059<
    0x0000005B fmul f >|4| 0x00000058<, f >|4| 0x0000005A<
    0x0000005C var *f 0x00000009
    0x0000005D load *f >|4| 0x0000005C<
    0x0000005E fmul f >|4| 0x0000005B<, f >|4| 0x0000005D<
    0x0000005F var *f 0x00000008
    0x00000060 load *f >|4| 0x0000005F<
    0x00000061 fadd f >|4| 0x0000005E<, f >|4| 0x00000060<
    0x00000062 var *f 0x00000016
    0x00000063 store *f >|4| 0x00000062<, f >|4| 0x00000061<
    0x00000064 var *f 0x00000003
    0x00000065 load *f >|4| 0x00000064<
    0x00000066 var *f 0x00000002
    0x00000067 load *f >|4| 0x00000066<
    0x00000068 fmul f >|4| 0x00000065<, f >|4| 0x00000067<
    0x00000069 var *f 0x00000009
    0x0000006A load *f >|4| 0x00000069<
    0x0000006B fmul f >|4| 0x00000068<, f >|4| 0x0000006A<
    0x0000006C var *f 0x00000004
    0x0000006D load *f >|4| 0x0000006C<
    0x0000006E var *f 0x00000007
    0x0000006F load *f >|4| 0x0000006E<
    0x00000070 fmul f >|4| 0x0000006D<, f >|4| 0x0000006F<
    0x00000071 fadd f >|4| 0x0000006B<, f >|4| 0x00000070<
    0x00000072 var *f 0x00000017
    0x00000073 store *f >|4| 0x00000072<, f >|4| 0x00000071<
    0x00000074 var *f 0x00000004
    0x00000075 load *f >|4| 0x00000074<
    0x00000076 var *f 0x00000002
    0x00000077 load *f >|4| 0x00000076<
    0x00000078 fmul f >|4| 0x00000075<, f >|4| 0x00000077<
    0x00000079 var *f 0x00000009
    0x0000007A load *f >|4| 0x00000079<
    0x0000007B fmul f >|4| 0x00000078<, f >|4| 0x0000007A<
    0x0000007C var *f 0x00000003
    0x0000007D load *f >|4| 0x0000007C<
    0x0000007E var *f 0x00000007
    0x0000007F load *f >|4| 0x0000007E<
    0x00000080 fmul f >|4| 0x0000007D<, f >|4| 0x0000007F<
    0x00000081 fsub f >|4| 0x0000007B<, f >|4| 0x00000080<
    0x00000082 var *f 0x00000018
    0x00000083 store *f >|4| 0x00000082<, f >|4| 0x00000081<
    0x00000084 var *f 0x00000002
    0x00000085 load *f >|4| 0x00000084<
    0x00000086 var *f 0x00000003
    0x00000087 load *f >|4| 0x00000086<
    0x00000088 fmul f >|4| 0x00000085<, f >|4| 0x00000087<
    0x00000089 var *f 0x00000009
    0x0000008A load *f >|4| 0x00000089<
    0x0000008B fmul f >|4| 0x00000088<, f >|4| 0x0000008A<
    0x0000008C var *f 0x00000004
    0x0000008D load *f >|4| 0x0000008C<
    0x0000008E var *f 0x00000007
    0x0000008F load *f >|4| 0x0000008E<
    0x00000090 fmul f >|4| 0x0000008D<, f >|4| 0x0000008F<
    0x00000091 fsub f >|4| 0x0000008B<, f >|4| 0x00000090<
    0x00000092 var *f 0x00000019
    0x00000093 store *f >|4| 0x00000092<, f >|4| 0x00000091<
    0x00000094 var *f 0x00000003
    0x00000095 load *f >|4| 0x00000094<
    0x00000096 var *f 0x00000003
    0x00000097 load *f >|4| 0x00000096<
    0x00000098 fmul f >|4| 0x00000095<, f >|4| 0x00000097<
    0x00000099 var *f 0x00000009
    0x0000009A load *f >|4| 0x00000099<
    0x0000009B fmul f >|4| 0x00000098<, f >|4| 0x0000009A<
    0x0000009C var *f 0x00000008
    0x0000009D load *f >|4| 0x0000009C<
    0x0000009E fadd f >|4| 0x0000009B<, f >|4| 0x0000009D<
    0x0000009F var *f 0x0000001A
    0x000000A0 store *f >|4| 0x0000009F<, f >|4| 0x0000009E<
    0x000000A1 var *f 0x00000004
    0x000000A2 load *f >|4| 0x000000A1<
    0x000000A3 var *f 0x00000003
    0x000000A4 load *f >|4| 0x000000A3<
    0x000000A5 fmul f >|4| 0x000000A2<, f >|4| 0x000000A4<
    0x000000A6 var *f 0x00000009
    0x000000A7 load *f >|4| 0x000000A6<
    0x000000A8 fmul f >|4| 0x000000A5<, f >|4| 0x000000A7<
    0x000000A9 var *f 0x00000002
    0x000000AA load *f >|4| 0x000000A9<
    0x000000AB var *f 0x00000007
    0x000000AC load *f >|4| 0x000000AB<
    0x000000AD fmul f >|4| 0x000000AA<, f >|4| 0x000000AC<
    0x000000AE fadd f >|4| 0x000000A8<, f >|4| 0x000000AD<
    0x000000AF var *f 0x0000001B
    0x000000B0 store *f >|4| 0x000000AF<, f >|4| 0x000000AE<
    0x000000B1 var *f 0x00000002
    0x000000B2 load *f >|4| 0x000000B1<
    0x000000B3 var *f 0x00000004
    0x000000B4 load *f >|4| 0x000000B3<
    0x000000B5 fmul f >|4| 0x000000B2<, f >|4| 0x000000B4<
    0x000000B6 var *f 0x00000009
    0x000000B7 load *f >|4| 0x000000B6<
    0x000000B8 fmul f >|4| 0x000000B5<, f >|4| 0x000000B7<
    0x000000B9 var *f 0x00000003
    0x000000BA load *f >|4| 0x000000B9<
    0x000000BB var *f 0x00000007
    0x000000BC load *f >|4| 0x000000BB<
    0x000000BD fmul f >|4| 0x000000BA<, f >|4| 0x000000BC<
    0x000000BE fadd f >|4| 0x000000B8<, f >|4| 0x000000BD<
    0x000000BF var *f 0x0000001C
    0x000000C0 store *f >|4| 0x000000BF<, f >|4| 0x000000BE<
    0x000000C1 var *f 0x00000003
    0x000000C2 load *f >|4| 0x000000C1<
    0x000000C3 var *f 0x00000004
    0x000000C4 load *f >|4| 0x000000C3<
    0x000000C5 fmul f >|4| 0x000000C2<, f >|4| 0x000000C4<
    0x000000C6 var *f 0x00000009
    0x000000C7 load *f >|4| 0x000000C6<
    0x000000C8 fmul f >|4| 0x000000C5<, f >|4| 0x000000C7<
    0x000000C9 var *f 0x00000002
    0x000000CA load *f >|4| 0x000000C9<
    0x000000CB var *f 0x00000007
    0x000000CC load *f >|4| 0x000000CB<
    0x000000CD fmul f >|4| 0x000000CA<, f >|4| 0x000000CC<
    0x000000CE fsub f >|4| 0x000000C8<, f >|4| 0x000000CD<
    0x000000CF var *f 0x0000001D
    0x000000D0 store *f >|4| 0x000000CF<, f >|4| 0x000000CE<
    0x000000D1 var *f 0x00000004
    0x000000D2 load *f >|4| 0x000000D1<
    0x000000D3 var *f 0x00000004
    0x000000D4 load *f >|4| 0x000000D3<
    0x000000D5 fmul f >|4| 0x000000D2<, f >|4| 0x000000D4<
    0x000000D6 var *f 0x00000009
    0x000000D7 load *f >|4| 0x000000D6<
    0x000000D8 fmul f >|4| 0x000000D5<, f >|4| 0x000000D7<
    0x000000D9 var *f 0x00000008
    0x000000DA load *f >|4| 0x000000D9<
    0x000000DB fadd f >|4| 0x000000D8<, f >|4| 0x000000DA<
    0x000000DC var *f 0x0000001E
    0x000000DD store *f >|4| 0x000000DC<, f >|4| 0x000000DB<
    0x000000DE var *f 0x0000000A
    0x000000DF load *f >|4| 0x000000DE<
    0x000000E0 var *f 0x00000016
    0x000000E1 load *f >|4| 0x000000E0<
    0x000000E2 fmul f >|4| 0x000000DF<, f >|4| 0x000000E1<
    0x000000E3 var *f 0x0000000E
    0x000000E4 load *f >|4| 0x000000E3<
    0x000000E5 var *f 0x00000017
    0x000000E6 load *f >|4| 0x000000E5<
    0x000000E7 fmul f >|4| 0x000000E4<, f >|4| 0x000000E6<
    0x000000E8 fadd f >|4| 0x000000E2<, f >|4| 0x000000E7<
    0x000000E9 var *f 0x00000012
    0x000000EA load *f >|4| 0x000000E9<
    0x000000EB var *f 0x00000018
    0x000000EC load *f >|4| 0x000000EB<
    0x000000ED fmul f >|4| 0x000000EA<, f >|4| 0x000000EC<
    0x000000EE fadd f >|4| 0x000000E8<, f >|4| 0x000000ED<
    0x000000EF var **f 0x00000005
    0x000000F0 load **f >|4| 0x000000EF<
    0x000000F1 arracc *f >|4| 0x000000F0<, s32 0
    0x000000F2 store *f >|4| 0x000000F1<, f >|4| 0x000000EE<
    0x000000F3 var *f 0x0000000B
    0x000000F4 load *f >|4| 0x000000F3<
    0x000000F5 var *f 0x00000016
    0x000000F6 load *f >|4| 0x000000F5<
    0x000000F7 fmul f >|4| 0x000000F4<, f >|4| 0x000000F6<
    0x000000F8 var *f 0x0000000F
    0x000000F9 load *f >|4| 0x000000F8<
    0x000000FA var *f 0x00000017
    0x000000FB load *f >|4| 0x000000FA<
    0x000000FC fmul f >|4| 0x000000F9<, f >|4| 0x000000FB<
    0x000000FD fadd f >|4| 0x000000F7<, f >|4| 0x000000FC<
    0x000000FE var *f 0x00000013
    0x000000FF load *f >|4| 0x000000FE<
    0x00000100 var *f 0x00000018
    0x00000101 load *f >|4| 0x00000100<
    0x00000102 fmul f >|4| 0x000000FF<, f >|4| 0x00000101<
    0x00000103 fadd f >|4| 0x000000FD<, f >|4| 0x00000102<
    0x00000104 var **f 0x00000005
    0x00000105 load **f >|4| 0x00000104<
    0x00000106 arracc *f >|4| 0x00000105<, s32 1
    0x00000107 store *f >|4| 0x00000106<, f >|4| 0x00000103<
    0x00000108 var *f 0x0000000C
    0x00000109 load *f >|4| 0x00000108<
    0x0000010A var *f 0x00000016
    0x0000010B load *f >|4| 0x0000010A<
    0x0000010C fmul f >|4| 0x00000109<, f >|4| 0x0000010B<
    0x0000010D var *f 0x00000010
    0x0000010E load *f >|4| 0x0000010D<
    0x0000010F var *f 0x00000017
    0x00000110 load *f >|4| 0x0000010F<
    0x00000111 fmul f >|4| 0x0000010E<, f >|4| 0x00000110<
    0x00000112 fadd f >|4| 0x0000010C<, f >|4| 0x00000111<
    0x00000113 var *f 0x00000014
    0x00000114 load *f >|4| 0x00000113<
    0x00000115 var *f 0x00000018
    0x00000116 load *f >|4| 0x00000115<
    0x00000117 fmul f >|4| 0x00000114<, f >|4| 0x00000116<
    0x00000118 fadd f >|4| 0x00000112<, f >|4| 0x00000117<
    0x00000119 var **f 0x00000005
    0x0000011A load **f >|4| 0x00000119<
    0x0000011B arracc *f >|4| 0x0000011A<, s32 2
    0x0000011C store *f >|4| 0x0000011B<, f >|4| 0x00000118<
    0x0000011D var *f 0x0000000D
    0x0000011E load *f >|4| 0x0000011D<
    0x0000011F var *f 0x00000016
    0x00000120 load *f >|4| 0x0000011F<
    0x00000121 fmul f >|4| 0x0000011E<, f >|4| 0x00000120<
    0x00000122 var *f 0x00000011
    0x00000123 load *f >|4| 0x00000122<
    0x00000124 var *f 0x00000017
    0x00000125 load *f >|4| 0x00000124<
    0x00000126 fmul f >|4| 0x00000123<, f >|4| 0x00000125<
    0x00000127 fadd f >|4| 0x00000121<, f >|4| 0x00000126<
    0x00000128 var *f 0x00000015
    0x00000129 load *f >|4| 0x00000128<
    0x0000012A var *f 0x00000018
    0x0000012B load *f >|4| 0x0000012A<
    0x0000012C fmul f >|4| 0x00000129<, f >|4| 0x0000012B<
    0x0000012D fadd f >|4| 0x00000127<, f >|4| 0x0000012C<
    0x0000012E var **f 0x00000005
    0x0000012F load **f >|4| 0x0000012E<
    0x00000130 arracc *f >|4| 0x0000012F<, s32 3
    0x00000131 store *f >|4| 0x00000130<, f >|4| 0x0000012D<
    0x00000132 var *f 0x0000000A
    0x00000133 load *f >|4| 0x00000132<
    0x00000134 var *f 0x00000019
    0x00000135 load *f >|4| 0x00000134<
    0x00000136 fmul f >|4| 0x00000133<, f >|4| 0x00000135<
    0x00000137 var *f 0x0000000E
    0x00000138 load *f >|4| 0x00000137<
    0x00000139 var *f 0x0000001A
    0x0000013A load *f >|4| 0x00000139<
    0x0000013B fmul f >|4| 0x00000138<, f >|4| 0x0000013A<
    0x0000013C fadd f >|4| 0x00000136<, f >|4| 0x0000013B<
    0x0000013D var *f 0x00000012
    0x0000013E load *f >|4| 0x0000013D<
    0x0000013F var *f 0x0000001B
    0x00000140 load *f >|4| 0x0000013F<
    0x00000141 fmul f >|4| 0x0000013E<, f >|4| 0x00000140<
    0x00000142 fadd f >|4| 0x0000013C<, f >|4| 0x00000141<
    0x00000143 var **f 0x00000005
    0x00000144 load **f >|4| 0x00000143<
    0x00000145 arracc *f >|4| 0x00000144<, s32 4
    0x00000146 store *f >|4| 0x00000145<, f >|4| 0x00000142<
    0x00000147 var *f 0x0000000B
    0x00000148 load *f >|4| 0x00000147<
    0x00000149 var *f 0x00000019
    0x0000014A load *f >|4| 0x00000149<
    0x0000014B fmul f >|4| 0x00000148<, f >|4| 0x0000014A<
    0x0000014C var *f 0x0000000F
    0x0000014D load *f >|4| 0x0000014C<
    0x0000014E var *f 0x0000001A
    0x0000014F load *f >|4| 0x0000014E<
    0x00000150 fmul f >|4| 0x0000014D<, f >|4| 0x0000014F<
    0x00000151 fadd f >|4| 0x0000014B<, f >|4| 0x00000150<
    0x00000152 var *f 0x00000013
    0x00000153 load *f >|4| 0x00000152<
    0x00000154 var *f 0x0000001B
    0x00000155 load *f >|4| 0x00000154<
    0x00000156 fmul f >|4| 0x00000153<, f >|4| 0x00000155<
    0x00000157 fadd f >|4| 0x00000151<, f >|4| 0x00000156<
    0x00000158 var **f 0x00000005
    0x00000159 load **f >|4| 0x00000158<
    0x0000015A arracc *f >|4| 0x00000159<, s32 5
    0x0000015B store *f >|4| 0x0000015A<, f >|4| 0x00000157<
    0x0000015C var *f 0x0000000C
    0x0000015D load *f >|4| 0x0000015C<
    0x0000015E var *f 0x00000019
    0x0000015F load *f >|4| 0x0000015E<
    0x00000160 fmul f >|4| 0x0000015D<, f >|4| 0x0000015F<
    0x00000161 var *f 0x00000010
    0x00000162 load *f >|4| 0x00000161<
    0x00000163 var *f 0x0000001A
    0x00000164 load *f >|4| 0x00000163<
    0x00000165 fmul f >|4| 0x00000162<, f >|4| 0x00000164<
    0x00000166 fadd f >|4| 0x00000160<, f >|4| 0x00000165<
    0x00000167 var *f 0x00000014
    0x00000168 load *f >|4| 0x00000167<
    0x00000169 var *f 0x0000001B
    0x0000016A load *f >|4| 0x00000169<
    0x0000016B fmul f >|4| 0x00000168<, f >|4| 0x0000016A<
    0x0000016C fadd f >|4| 0x00000166<, f >|4| 0x0000016B<
    0x0000016D var **f 0x00000005
    0x0000016E load **f >|4| 0x0000016D<
    0x0000016F arracc *f >|4| 0x0000016E<, s32 6
    0x00000170 store *f >|4| 0x0000016F<, f >|4| 0x0000016C<
    0x00000171 var *f 0x0000000D
    0x00000172 load *f >|4| 0x00000171<
    0x00000173 var *f 0x00000019
    0x00000174 load *f >|4| 0x00000173<
    0x00000175 fmul f >|4| 0x00000172<, f >|4| 0x00000174<
    0x00000176 var *f 0x00000011
    0x00000177 load *f >|4| 0x00000176<
    0x00000178 var *f 0x0000001A
    0x00000179 load *f >|4| 0x00000178<
    0x0000017A fmul f >|4| 0x00000177<, f >|4| 0x00000179<
    0x0000017B fadd f >|4| 0x00000175<, f >|4| 0x0000017A<
    0x0000017C var *f 0x00000015
    0x0000017D load *f >|4| 0x0000017C<
    0x0000017E var *f 0x0000001B
    0x0000017F load *f >|4| 0x0000017E<
    0x00000180 fmul f >|4| 0x0000017D<, f >|4| 0x0000017F<
    0x00000181 fadd f >|4| 0x0000017B<, f >|4| 0x00000180<
    0x00000182 var **f 0x00000005
    0x00000183 load **f >|4| 0x00000182<
    0x00000184 arracc *f >|4| 0x00000183<, s32 7
    0x00000185 store *f >|4| 0x00000184<, f >|4| 0x00000181<
    0x00000186 var *f 0x0000000A
    0x00000187 load *f >|4| 0x00000186<
    0x00000188 var *f 0x0000001C
    0x00000189 load *f >|4| 0x00000188<
    0x0000018A fmul f >|4| 0x00000187<, f >|4| 0x00000189<
    0x0000018B var *f 0x0000000E
    0x0000018C load *f >|4| 0x0000018B<
    0x0000018D var *f 0x0000001D
    0x0000018E load *f >|4| 0x0000018D<
    0x0000018F fmul f >|4| 0x0000018C<, f >|4| 0x0000018E<
    0x00000190 fadd f >|4| 0x0000018A<, f >|4| 0x0000018F<
    0x00000191 var *f 0x00000012
    0x00000192 load *f >|4| 0x00000191<
    0x00000193 var *f 0x0000001E
    0x00000194 load *f >|4| 0x00000193<
    0x00000195 fmul f >|4| 0x00000192<, f >|4| 0x00000194<
    0x00000196 fadd f >|4| 0x00000190<, f >|4| 0x00000195<
    0x00000197 var **f 0x00000005
    0x00000198 load **f >|4| 0x00000197<
    0x00000199 arracc *f >|4| 0x00000198<, s32 8
    0x0000019A store *f >|4| 0x00000199<, f >|4| 0x00000196<
    0x0000019B var *f 0x0000000B
    0x0000019C load *f >|4| 0x0000019B<
    0x0000019D var *f 0x0000001C
    0x0000019E load *f >|4| 0x0000019D<
    0x0000019F fmul f >|4| 0x0000019C<, f >|4| 0x0000019E<
    0x000001A0 var *f 0x0000000F
    0x000001A1 load *f >|4| 0x000001A0<
    0x000001A2 var *f 0x0000001D
    0x000001A3 load *f >|4| 0x000001A2<
    0x000001A4 fmul f >|4| 0x000001A1<, f >|4| 0x000001A3<
    0x000001A5 fadd f >|4| 0x0000019F<, f >|4| 0x000001A4<
    0x000001A6 var *f 0x00000013
    0x000001A7 load *f >|4| 0x000001A6<
    0x000001A8 var *f 0x0000001E
    0x000001A9 load *f >|4| 0x000001A8<
    0x000001AA fmul f >|4| 0x000001A7<, f >|4| 0x000001A9<
    0x000001AB fadd f >|4| 0x000001A5<, f >|4| 0x000001AA<
    0x000001AC var **f 0x00000005
    0x000001AD load **f >|4| 0x000001AC<
    0x000001AE arracc *f >|4| 0x000001AD<, s32 9
    0x000001AF store *f >|4| 0x000001AE<, f >|4| 0x000001AB<
    0x000001B0 var *f 0x0000000C
    0x000001B1 load *f >|4| 0x000001B0<
    0x000001B2 var *f 0x0000001C
    0x000001B3 load *f >|4| 0x000001B2<
    0x000001B4 fmul f >|4| 0x000001B1<, f >|4| 0x000001B3<
    0x000001B5 var *f 0x00000010
    0x000001B6 load *f >|4| 0x000001B5<
    0x000001B7 var *f 0x0000001D
    0x000001B8 load *f >|4| 0x000001B7<
    0x000001B9 fmul f >|4| 0x000001B6<, f >|4| 0x000001B8<
    0x000001BA fadd f >|4| 0x000001B4<, f >|4| 0x000001B9<
    0x000001BB var *f 0x00000014
    0x000001BC load *f >|4| 0x000001BB<
    0x000001BD var *f 0x0000001E
    0x000001BE load *f >|4| 0x000001BD<
    0x000001BF fmul f >|4| 0x000001BC<, f >|4| 0x000001BE<
    0x000001C0 fadd f >|4| 0x000001BA<, f >|4| 0x000001BF<
    0x000001C1 var **f 0x00000005
    0x000001C2 load **f >|4| 0x000001C1<
    0x000001C3 arracc *f >|4| 0x000001C2<, s32 10
    0x000001C4 store *f >|4| 0x000001C3<, f >|4| 0x000001C0<
    0x000001C5 var *f 0x0000000D
    0x000001C6 load *f >|4| 0x000001C5<
    0x000001C7 var *f 0x0000001C
    0x000001C8 load *f >|4| 0x000001C7<
    0x000001C9 fmul f >|4| 0x000001C6<, f >|4| 0x000001C8<
    0x000001CA var *f 0x00000011
    0x000001CB load *f >|4| 0x000001CA<
    0x000001CC var *f 0x0000001D
    0x000001CD load *f >|4| 0x000001CC<
    0x000001CE fmul f >|4| 0x000001CB<, f >|4| 0x000001CD<
    0x000001CF fadd f >|4| 0x000001C9<, f >|4| 0x000001CE<
    0x000001D0 var *f 0x00000015
    0x000001D1 load *f >|4| 0x000001D0<
    0x000001D2 var *f 0x0000001E
    0x000001D3 load *f >|4| 0x000001D2<
    0x000001D4 fmul f >|4| 0x000001D1<, f >|4| 0x000001D3<
    0x000001D5 fadd f >|4| 0x000001CF<, f >|4| 0x000001D4<
    0x000001D6 var **f 0x00000005
    0x000001D7 load **f >|4| 0x000001D6<
    0x000001D8 arracc *f >|4| 0x000001D7<, s32 11
    0x000001D9 store *f >|4| 0x000001D8<, f >|4| 0x000001D5<
    0x000001DA ret
fn rotate ax9 -> void
    {5 BBs, 553 INSTRs, 32 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 __unk_type_kind]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 *f]
    [0x00000007 f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
    [0x0000000B f]
    [0x0000000C f]
    [0x0000000D f]
    [0x0000000E f]
    [0x0000000F f]
    [0x00000010 f]
    [0x00000011 f]
    [0x00000012 f]
    [0x00000013 f]
    [0x00000014 f]
    [0x00000015 f]
    [0x00000016 f]
    [0x00000017 f]
    [0x00000018 f]
    [0x00000019 f]
    [0x0000001A f]
    [0x0000001B f]
    [0x0000001C f]
    [0x0000001D f]
    [0x0000001E f]
    [0x0000001F f]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var *f 0x00000003
    0x00000004 store *f >|0| 0x00000003<, f >|0| 0x00000002<
    0x00000005 var *__unk_type_kind 0x00000002
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var *f 0x00000004
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000002
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 2
    0x0000000C load *f >|0| 0x0000000B<
    0x0000000D var *f 0x00000005
    0x0000000E store *f >|0| 0x0000000D<, f >|0| 0x0000000C<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 0
    0x00000012 bc *[16] f >|0| 0x00000011< to *f
    0x00000013 var **f 0x00000006
    0x00000014 store **f >|0| 0x00000013<, *f >|0| 0x00000012<
    0x00000015 var *f 0x00000003
    0x00000016 load *f >|0| 0x00000015<
    0x00000017 var *f 0x00000003
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 fmul f >|0| 0x00000016<, f >|0| 0x00000018<
    0x0000001A var *f 0x00000004
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C var *f 0x00000004
    0x0000001D load *f >|0| 0x0000001C<
    0x0000001E fmul f >|0| 0x0000001B<, f >|0| 0x0000001D<
    0x0000001F fadd f >|0| 0x00000019<, f >|0| 0x0000001E<
    0x00000020 var *f 0x00000005
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 var *f 0x00000005
    0x00000023 load *f >|0| 0x00000022<
    0x00000024 fmul f >|0| 0x00000021<, f >|0| 0x00000023<
    0x00000025 fadd f >|0| 0x0000001F<, f >|0| 0x00000024<
    0x00000026 call aF9 "sqrtf" (f >|0| 0x00000025<) f
    0x00000027 var *f 0x00000007
    0x00000028 store *f >|0| 0x00000027<, f >|0| 0x00000026<
    0x00000029 var *f 0x00000007
    0x0000002A load *f >|0| 0x00000029<
    0x0000002B feq f >|0| 0x0000002A<, f 0.000000
    0x0000002C cbr f >|0| 0x0000002B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 call awD "__defer__" (*__unk_type_kind >|1| 0x00000000<) void
    0x00000002 ret
  BASICBLOCK |2|
    0x00000000 var *f 0x00000007
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 fneq f >|2| 0x00000001<, f 1.000000
    0x00000003 cbr f >|2| 0x00000002<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var *f 0x00000007
    0x00000001 load *f >|3| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|3| 0x00000001<
    0x00000003 var *f 0x00000007
    0x00000004 store *f >|3| 0x00000003<, f >|3| 0x00000002<
    0x00000005 var *f 0x00000007
    0x00000006 load *f >|3| 0x00000005<
    0x00000007 var *f 0x00000003
    0x00000008 load *f >|3| 0x00000007<
    0x00000009 fmul f >|3| 0x00000008<, f >|3| 0x00000006<
    0x0000000A store *f >|3| 0x00000007<, f >|3| 0x00000009<
    0x0000000B var *f 0x00000007
    0x0000000C load *f >|3| 0x0000000B<
    0x0000000D var *f 0x00000004
    0x0000000E load *f >|3| 0x0000000D<
    0x0000000F fmul f >|3| 0x0000000E<, f >|3| 0x0000000C<
    0x00000010 store *f >|3| 0x0000000D<, f >|3| 0x0000000F<
    0x00000011 var *f 0x00000007
    0x00000012 load *f >|3| 0x00000011<
    0x00000013 var *f 0x00000005
    0x00000014 load *f >|3| 0x00000013<
    0x00000015 fmul f >|3| 0x00000014<, f >|3| 0x00000012<
    0x00000016 store *f >|3| 0x00000013<, f >|3| 0x00000015<
    0x00000017 br |4|
  BASICBLOCK |4|
    0x00000000 var *f 0x00000001
    0x00000001 load *f >|4| 0x00000000<
    0x00000002 call at8 "sinf" (f >|4| 0x00000001<) f
    0x00000003 var *f 0x00000008
    0x00000004 store *f >|4| 0x00000003<, f >|4| 0x00000002<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|4| 0x00000005<
    0x00000007 call ap8 "cosf" (f >|4| 0x00000006<) f
    0x00000008 var *f 0x00000009
    0x00000009 store *f >|4| 0x00000008<, f >|4| 0x00000007<
    0x0000000A var *f 0x00000009
    0x0000000B load *f >|4| 0x0000000A<
    0x0000000C fsub f 1.000000, f >|4| 0x0000000B<
    0x0000000D var *f 0x0000000A
    0x0000000E store *f >|4| 0x0000000D<, f >|4| 0x0000000C<
    0x0000000F var **f 0x00000006
    0x00000010 load **f >|4| 0x0000000F<
    0x00000011 arracc *f >|4| 0x00000010<, s32 0
    0x00000012 load *f >|4| 0x00000011<
    0x00000013 var *f 0x0000000B
    0x00000014 store *f >|4| 0x00000013<, f >|4| 0x00000012<
    0x00000015 var **f 0x00000006
    0x00000016 load **f >|4| 0x00000015<
    0x00000017 arracc *f >|4| 0x00000016<, s32 1
    0x00000018 load *f >|4| 0x00000017<
    0x00000019 var *f 0x0000000C
    0x0000001A store *f >|4| 0x00000019<, f >|4| 0x00000018<
    0x0000001B var **f 0x00000006
    0x0000001C load **f >|4| 0x0000001B<
    0x0000001D arracc *f >|4| 0x0000001C<, s32 2
    0x0000001E load *f >|4| 0x0000001D<
    0x0000001F var *f 0x0000000D
    0x00000020 store *f >|4| 0x0000001F<, f >|4| 0x0000001E<
    0x00000021 var **f 0x00000006
    0x00000022 load **f >|4| 0x00000021<
    0x00000023 arracc *f >|4| 0x00000022<, s32 3
    0x00000024 load *f >|4| 0x00000023<
    0x00000025 var *f 0x0000000E
    0x00000026 store *f >|4| 0x00000025<, f >|4| 0x00000024<
    0x00000027 var **f 0x00000006
    0x00000028 load **f >|4| 0x00000027<
    0x00000029 arracc *f >|4| 0x00000028<, s32 4
    0x0000002A load *f >|4| 0x00000029<
    0x0000002B var *f 0x0000000F
    0x0000002C store *f >|4| 0x0000002B<, f >|4| 0x0000002A<
    0x0000002D var **f 0x00000006
    0x0000002E load **f >|4| 0x0000002D<
    0x0000002F arracc *f >|4| 0x0000002E<, s32 5
    0x00000030 load *f >|4| 0x0000002F<
    0x00000031 var *f 0x00000010
    0x00000032 store *f >|4| 0x00000031<, f >|4| 0x00000030<
    0x00000033 var **f 0x00000006
    0x00000034 load **f >|4| 0x00000033<
    0x00000035 arracc *f >|4| 0x00000034<, s32 6
    0x00000036 load *f >|4| 0x00000035<
    0x00000037 var *f 0x00000011
    0x00000038 store *f >|4| 0x00000037<, f >|4| 0x00000036<
    0x00000039 var **f 0x00000006
    0x0000003A load **f >|4| 0x00000039<
    0x0000003B arracc *f >|4| 0x0000003A<, s32 7
    0x0000003C load *f >|4| 0x0000003B<
    0x0000003D var *f 0x00000012
    0x0000003E store *f >|4| 0x0000003D<, f >|4| 0x0000003C<
    0x0000003F var **f 0x00000006
    0x00000040 load **f >|4| 0x0000003F<
    0x00000041 arracc *f >|4| 0x00000040<, s32 8
    0x00000042 load *f >|4| 0x00000041<
    0x00000043 var *f 0x00000013
    0x00000044 store *f >|4| 0x00000043<, f >|4| 0x00000042<
    0x00000045 var **f 0x00000006
    0x00000046 load **f >|4| 0x00000045<
    0x00000047 arracc *f >|4| 0x00000046<, s32 9
    0x00000048 load *f >|4| 0x00000047<
    0x00000049 var *f 0x00000014
    0x0000004A store *f >|4| 0x00000049<, f >|4| 0x00000048<
    0x0000004B var **f 0x00000006
    0x0000004C load **f >|4| 0x0000004B<
    0x0000004D arracc *f >|4| 0x0000004C<, s32 10
    0x0000004E load *f >|4| 0x0000004D<
    0x0000004F var *f 0x00000015
    0x00000050 store *f >|4| 0x0000004F<, f >|4| 0x0000004E<
    0x00000051 var **f 0x00000006
    0x00000052 load **f >|4| 0x00000051<
    0x00000053 arracc *f >|4| 0x00000052<, s32 11
    0x00000054 load *f >|4| 0x00000053<
    0x00000055 var *f 0x00000016
    0x00000056 store *f >|4| 0x00000055<, f >|4| 0x00000054<
    0x00000057 var *f 0x00000003
    0x00000058 load *f >|4| 0x00000057<
    0x00000059 var *f 0x00000003
    0x0000005A load *f >|4| 0x00000059<
    0x0000005B fmul f >|4| 0x00000058<, f >|4| 0x0000005A<
    0x0000005C var *f 0x0000000A
    0x0000005D load *f >|4| 0x0000005C<
    0x0000005E fmul f >|4| 0x0000005B<, f >|4| 0x0000005D<
    0x0000005F var *f 0x00000009
    0x00000060 load *f >|4| 0x0000005F<
    0x00000061 fadd f >|4| 0x0000005E<, f >|4| 0x00000060<
    0x00000062 var *f 0x00000017
    0x00000063 store *f >|4| 0x00000062<, f >|4| 0x00000061<
    0x00000064 var *f 0x00000004
    0x00000065 load *f >|4| 0x00000064<
    0x00000066 var *f 0x00000003
    0x00000067 load *f >|4| 0x00000066<
    0x00000068 fmul f >|4| 0x00000065<, f >|4| 0x00000067<
    0x00000069 var *f 0x0000000A
    0x0000006A load *f >|4| 0x00000069<
    0x0000006B fmul f >|4| 0x00000068<, f >|4| 0x0000006A<
    0x0000006C var *f 0x00000005
    0x0000006D load *f >|4| 0x0000006C<
    0x0000006E var *f 0x00000008
    0x0000006F load *f >|4| 0x0000006E<
    0x00000070 fmul f >|4| 0x0000006D<, f >|4| 0x0000006F<
    0x00000071 fadd f >|4| 0x0000006B<, f >|4| 0x00000070<
    0x00000072 var *f 0x00000018
    0x00000073 store *f >|4| 0x00000072<, f >|4| 0x00000071<
    0x00000074 var *f 0x00000005
    0x00000075 load *f >|4| 0x00000074<
    0x00000076 var *f 0x00000003
    0x00000077 load *f >|4| 0x00000076<
    0x00000078 fmul f >|4| 0x00000075<, f >|4| 0x00000077<
    0x00000079 var *f 0x0000000A
    0x0000007A load *f >|4| 0x00000079<
    0x0000007B fmul f >|4| 0x00000078<, f >|4| 0x0000007A<
    0x0000007C var *f 0x00000004
    0x0000007D load *f >|4| 0x0000007C<
    0x0000007E var *f 0x00000008
    0x0000007F load *f >|4| 0x0000007E<
    0x00000080 fmul f >|4| 0x0000007D<, f >|4| 0x0000007F<
    0x00000081 fsub f >|4| 0x0000007B<, f >|4| 0x00000080<
    0x00000082 var *f 0x00000019
    0x00000083 store *f >|4| 0x00000082<, f >|4| 0x00000081<
    0x00000084 var *f 0x00000003
    0x00000085 load *f >|4| 0x00000084<
    0x00000086 var *f 0x00000004
    0x00000087 load *f >|4| 0x00000086<
    0x00000088 fmul f >|4| 0x00000085<, f >|4| 0x00000087<
    0x00000089 var *f 0x0000000A
    0x0000008A load *f >|4| 0x00000089<
    0x0000008B fmul f >|4| 0x00000088<, f >|4| 0x0000008A<
    0x0000008C var *f 0x00000005
    0x0000008D load *f >|4| 0x0000008C<
    0x0000008E var *f 0x00000008
    0x0000008F load *f >|4| 0x0000008E<
    0x00000090 fmul f >|4| 0x0000008D<, f >|4| 0x0000008F<
    0x00000091 fsub f >|4| 0x0000008B<, f >|4| 0x00000090<
    0x00000092 var *f 0x0000001A
    0x00000093 store *f >|4| 0x00000092<, f >|4| 0x00000091<
    0x00000094 var *f 0x00000004
    0x00000095 load *f >|4| 0x00000094<
    0x00000096 var *f 0x00000004
    0x00000097 load *f >|4| 0x00000096<
    0x00000098 fmul f >|4| 0x00000095<, f >|4| 0x00000097<
    0x00000099 var *f 0x0000000A
    0x0000009A load *f >|4| 0x00000099<
    0x0000009B fmul f >|4| 0x00000098<, f >|4| 0x0000009A<
    0x0000009C var *f 0x00000009
    0x0000009D load *f >|4| 0x0000009C<
    0x0000009E fadd f >|4| 0x0000009B<, f >|4| 0x0000009D<
    0x0000009F var *f 0x0000001B
    0x000000A0 store *f >|4| 0x0000009F<, f >|4| 0x0000009E<
    0x000000A1 var *f 0x00000005
    0x000000A2 load *f >|4| 0x000000A1<
    0x000000A3 var *f 0x00000004
    0x000000A4 load *f >|4| 0x000000A3<
    0x000000A5 fmul f >|4| 0x000000A2<, f >|4| 0x000000A4<
    0x000000A6 var *f 0x0000000A
    0x000000A7 load *f >|4| 0x000000A6<
    0x000000A8 fmul f >|4| 0x000000A5<, f >|4| 0x000000A7<
    0x000000A9 var *f 0x00000003
    0x000000AA load *f >|4| 0x000000A9<
    0x000000AB var *f 0x00000008
    0x000000AC load *f >|4| 0x000000AB<
    0x000000AD fmul f >|4| 0x000000AA<, f >|4| 0x000000AC<
    0x000000AE fadd f >|4| 0x000000A8<, f >|4| 0x000000AD<
    0x000000AF var *f 0x0000001C
    0x000000B0 store *f >|4| 0x000000AF<, f >|4| 0x000000AE<
    0x000000B1 var *f 0x00000003
    0x000000B2 load *f >|4| 0x000000B1<
    0x000000B3 var *f 0x00000005
    0x000000B4 load *f >|4| 0x000000B3<
    0x000000B5 fmul f >|4| 0x000000B2<, f >|4| 0x000000B4<
    0x000000B6 var *f 0x0000000A
    0x000000B7 load *f >|4| 0x000000B6<
    0x000000B8 fmul f >|4| 0x000000B5<, f >|4| 0x000000B7<
    0x000000B9 var *f 0x00000004
    0x000000BA load *f >|4| 0x000000B9<
    0x000000BB var *f 0x00000008
    0x000000BC load *f >|4| 0x000000BB<
    0x000000BD fmul f >|4| 0x000000BA<, f >|4| 0x000000BC<
    0x000000BE fadd f >|4| 0x000000B8<, f >|4| 0x000000BD<
    0x000000BF var *f 0x0000001D
    0x000000C0 store *f >|4| 0x000000BF<, f >|4| 0x000000BE<
    0x000000C1 var *f 0x00000004
    0x000000C2 load *f >|4| 0x000000C1<
    0x000000C3 var *f 0x00000005
    0x000000C4 load *f >|4| 0x000000C3<
    0x000000C5 fmul f >|4| 0x000000C2<, f >|4| 0x000000C4<
    0x000000C6 var *f 0x0000000A
    0x000000C7 load *f >|4| 0x000000C6<
    0x000000C8 fmul f >|4| 0x000000C5<, f >|4| 0x000000C7<
    0x000000C9 var *f 0x00000003
    0x000000CA load *f >|4| 0x000000C9<
    0x000000CB var *f 0x00000008
    0x000000CC load *f >|4| 0x000000CB<
    0x000000CD fmul f >|4| 0x000000CA<, f >|4| 0x000000CC<
    0x000000CE fsub f >|4| 0x000000C8<, f >|4| 0x000000CD<
    0x000000CF var *f 0x0000001E
    0x000000D0 store *f >|4| 0x000000CF<, f >|4| 0x000000CE<
    0x000000D1 var *f 0x00000005
    0x000000D2 load *f >|4| 0x000000D1<
    0x000000D3 var *f 0x00000005
    0x000000D4 load *f >|4| 0x000000D3<
    0x000000D5 fmul f >|4| 0x000000D2<, f >|4| 0x000000D4<
    0x000000D6 var *f 0x0000000A
    0x000000D7 load *f >|4| 0x000000D6<
    0x000000D8 fmul f >|4| 0x000000D5<, f >|4| 0x000000D7<
    0x000000D9 var *f 0x00000009
    0x000000DA load *f >|4| 0x000000D9<
    0x000000DB fadd f >|4| 0x000000D8<, f >|4| 0x000000DA<
    0x000000DC var *f 0x0000001F
    0x000000DD store *f >|4| 0x000000DC<, f >|4| 0x000000DB<
    0x000000DE var *f 0x0000000B
    0x000000DF load *f >|4| 0x000000DE<
    0x000000E0 var *f 0x00000017
    0x000000E1 load *f >|4| 0x000000E0<
    0x000000E2 fmul f >|4| 0x000000DF<, f >|4| 0x000000E1<
    0x000000E3 var *f 0x0000000F
    0x000000E4 load *f >|4| 0x000000E3<
    0x000000E5 var *f 0x00000018
    0x000000E6 load *f >|4| 0x000000E5<
    0x000000E7 fmul f >|4| 0x000000E4<, f >|4| 0x000000E6<
    0x000000E8 fadd f >|4| 0x000000E2<, f >|4| 0x000000E7<
    0x000000E9 var *f 0x00000013
    0x000000EA load *f >|4| 0x000000E9<
    0x000000EB var *f 0x00000019
    0x000000EC load *f >|4| 0x000000EB<
    0x000000ED fmul f >|4| 0x000000EA<, f >|4| 0x000000EC<
    0x000000EE fadd f >|4| 0x000000E8<, f >|4| 0x000000ED<
    0x000000EF var **f 0x00000006
    0x000000F0 load **f >|4| 0x000000EF<
    0x000000F1 arracc *f >|4| 0x000000F0<, s32 0
    0x000000F2 store *f >|4| 0x000000F1<, f >|4| 0x000000EE<
    0x000000F3 var *f 0x0000000C
    0x000000F4 load *f >|4| 0x000000F3<
    0x000000F5 var *f 0x00000017
    0x000000F6 load *f >|4| 0x000000F5<
    0x000000F7 fmul f >|4| 0x000000F4<, f >|4| 0x000000F6<
    0x000000F8 var *f 0x00000010
    0x000000F9 load *f >|4| 0x000000F8<
    0x000000FA var *f 0x00000018
    0x000000FB load *f >|4| 0x000000FA<
    0x000000FC fmul f >|4| 0x000000F9<, f >|4| 0x000000FB<
    0x000000FD fadd f >|4| 0x000000F7<, f >|4| 0x000000FC<
    0x000000FE var *f 0x00000014
    0x000000FF load *f >|4| 0x000000FE<
    0x00000100 var *f 0x00000019
    0x00000101 load *f >|4| 0x00000100<
    0x00000102 fmul f >|4| 0x000000FF<, f >|4| 0x00000101<
    0x00000103 fadd f >|4| 0x000000FD<, f >|4| 0x00000102<
    0x00000104 var **f 0x00000006
    0x00000105 load **f >|4| 0x00000104<
    0x00000106 arracc *f >|4| 0x00000105<, s32 1
    0x00000107 store *f >|4| 0x00000106<, f >|4| 0x00000103<
    0x00000108 var *f 0x0000000D
    0x00000109 load *f >|4| 0x00000108<
    0x0000010A var *f 0x00000017
    0x0000010B load *f >|4| 0x0000010A<
    0x0000010C fmul f >|4| 0x00000109<, f >|4| 0x0000010B<
    0x0000010D var *f 0x00000011
    0x0000010E load *f >|4| 0x0000010D<
    0x0000010F var *f 0x00000018
    0x00000110 load *f >|4| 0x0000010F<
    0x00000111 fmul f >|4| 0x0000010E<, f >|4| 0x00000110<
    0x00000112 fadd f >|4| 0x0000010C<, f >|4| 0x00000111<
    0x00000113 var *f 0x00000015
    0x00000114 load *f >|4| 0x00000113<
    0x00000115 var *f 0x00000019
    0x00000116 load *f >|4| 0x00000115<
    0x00000117 fmul f >|4| 0x00000114<, f >|4| 0x00000116<
    0x00000118 fadd f >|4| 0x00000112<, f >|4| 0x00000117<
    0x00000119 var **f 0x00000006
    0x0000011A load **f >|4| 0x00000119<
    0x0000011B arracc *f >|4| 0x0000011A<, s32 2
    0x0000011C store *f >|4| 0x0000011B<, f >|4| 0x00000118<
    0x0000011D var *f 0x0000000E
    0x0000011E load *f >|4| 0x0000011D<
    0x0000011F var *f 0x00000017
    0x00000120 load *f >|4| 0x0000011F<
    0x00000121 fmul f >|4| 0x0000011E<, f >|4| 0x00000120<
    0x00000122 var *f 0x00000012
    0x00000123 load *f >|4| 0x00000122<
    0x00000124 var *f 0x00000018
    0x00000125 load *f >|4| 0x00000124<
    0x00000126 fmul f >|4| 0x00000123<, f >|4| 0x00000125<
    0x00000127 fadd f >|4| 0x00000121<, f >|4| 0x00000126<
    0x00000128 var *f 0x00000016
    0x00000129 load *f >|4| 0x00000128<
    0x0000012A var *f 0x00000019
    0x0000012B load *f >|4| 0x0000012A<
    0x0000012C fmul f >|4| 0x00000129<, f >|4| 0x0000012B<
    0x0000012D fadd f >|4| 0x00000127<, f >|4| 0x0000012C<
    0x0000012E var **f 0x00000006
    0x0000012F load **f >|4| 0x0000012E<
    0x00000130 arracc *f >|4| 0x0000012F<, s32 3
    0x00000131 store *f >|4| 0x00000130<, f >|4| 0x0000012D<
    0x00000132 var *f 0x0000000B
    0x00000133 load *f >|4| 0x00000132<
    0x00000134 var *f 0x0000001A
    0x00000135 load *f >|4| 0x00000134<
    0x00000136 fmul f >|4| 0x00000133<, f >|4| 0x00000135<
    0x00000137 var *f 0x0000000F
    0x00000138 load *f >|4| 0x00000137<
    0x00000139 var *f 0x0000001B
    0x0000013A load *f >|4| 0x00000139<
    0x0000013B fmul f >|4| 0x00000138<, f >|4| 0x0000013A<
    0x0000013C fadd f >|4| 0x00000136<, f >|4| 0x0000013B<
    0x0000013D var *f 0x00000013
    0x0000013E load *f >|4| 0x0000013D<
    0x0000013F var *f 0x0000001C
    0x00000140 load *f >|4| 0x0000013F<
    0x00000141 fmul f >|4| 0x0000013E<, f >|4| 0x00000140<
    0x00000142 fadd f >|4| 0x0000013C<, f >|4| 0x00000141<
    0x00000143 var **f 0x00000006
    0x00000144 load **f >|4| 0x00000143<
    0x00000145 arracc *f >|4| 0x00000144<, s32 4
    0x00000146 store *f >|4| 0x00000145<, f >|4| 0x00000142<
    0x00000147 var *f 0x0000000C
    0x00000148 load *f >|4| 0x00000147<
    0x00000149 var *f 0x0000001A
    0x0000014A load *f >|4| 0x00000149<
    0x0000014B fmul f >|4| 0x00000148<, f >|4| 0x0000014A<
    0x0000014C var *f 0x00000010
    0x0000014D load *f >|4| 0x0000014C<
    0x0000014E var *f 0x0000001B
    0x0000014F load *f >|4| 0x0000014E<
    0x00000150 fmul f >|4| 0x0000014D<, f >|4| 0x0000014F<
    0x00000151 fadd f >|4| 0x0000014B<, f >|4| 0x00000150<
    0x00000152 var *f 0x00000014
    0x00000153 load *f >|4| 0x00000152<
    0x00000154 var *f 0x0000001C
    0x00000155 load *f >|4| 0x00000154<
    0x00000156 fmul f >|4| 0x00000153<, f >|4| 0x00000155<
    0x00000157 fadd f >|4| 0x00000151<, f >|4| 0x00000156<
    0x00000158 var **f 0x00000006
    0x00000159 load **f >|4| 0x00000158<
    0x0000015A arracc *f >|4| 0x00000159<, s32 5
    0x0000015B store *f >|4| 0x0000015A<, f >|4| 0x00000157<
    0x0000015C var *f 0x0000000D
    0x0000015D load *f >|4| 0x0000015C<
    0x0000015E var *f 0x0000001A
    0x0000015F load *f >|4| 0x0000015E<
    0x00000160 fmul f >|4| 0x0000015D<, f >|4| 0x0000015F<
    0x00000161 var *f 0x00000011
    0x00000162 load *f >|4| 0x00000161<
    0x00000163 var *f 0x0000001B
    0x00000164 load *f >|4| 0x00000163<
    0x00000165 fmul f >|4| 0x00000162<, f >|4| 0x00000164<
    0x00000166 fadd f >|4| 0x00000160<, f >|4| 0x00000165<
    0x00000167 var *f 0x00000015
    0x00000168 load *f >|4| 0x00000167<
    0x00000169 var *f 0x0000001C
    0x0000016A load *f >|4| 0x00000169<
    0x0000016B fmul f >|4| 0x00000168<, f >|4| 0x0000016A<
    0x0000016C fadd f >|4| 0x00000166<, f >|4| 0x0000016B<
    0x0000016D var **f 0x00000006
    0x0000016E load **f >|4| 0x0000016D<
    0x0000016F arracc *f >|4| 0x0000016E<, s32 6
    0x00000170 store *f >|4| 0x0000016F<, f >|4| 0x0000016C<
    0x00000171 var *f 0x0000000E
    0x00000172 load *f >|4| 0x00000171<
    0x00000173 var *f 0x0000001A
    0x00000174 load *f >|4| 0x00000173<
    0x00000175 fmul f >|4| 0x00000172<, f >|4| 0x00000174<
    0x00000176 var *f 0x00000012
    0x00000177 load *f >|4| 0x00000176<
    0x00000178 var *f 0x0000001B
    0x00000179 load *f >|4| 0x00000178<
    0x0000017A fmul f >|4| 0x00000177<, f >|4| 0x00000179<
    0x0000017B fadd f >|4| 0x00000175<, f >|4| 0x0000017A<
    0x0000017C var *f 0x00000016
    0x0000017D load *f >|4| 0x0000017C<
    0x0000017E var *f 0x0000001C
    0x0000017F load *f >|4| 0x0000017E<
    0x00000180 fmul f >|4| 0x0000017D<, f >|4| 0x0000017F<
    0x00000181 fadd f >|4| 0x0000017B<, f >|4| 0x00000180<
    0x00000182 var **f 0x00000006
    0x00000183 load **f >|4| 0x00000182<
    0x00000184 arracc *f >|4| 0x00000183<, s32 7
    0x00000185 store *f >|4| 0x00000184<, f >|4| 0x00000181<
    0x00000186 var *f 0x0000000B
    0x00000187 load *f >|4| 0x00000186<
    0x00000188 var *f 0x0000001D
    0x00000189 load *f >|4| 0x00000188<
    0x0000018A fmul f >|4| 0x00000187<, f >|4| 0x00000189<
    0x0000018B var *f 0x0000000F
    0x0000018C load *f >|4| 0x0000018B<
    0x0000018D var *f 0x0000001E
    0x0000018E load *f >|4| 0x0000018D<
    0x0000018F fmul f >|4| 0x0000018C<, f >|4| 0x0000018E<
    0x00000190 fadd f >|4| 0x0000018A<, f >|4| 0x0000018F<
    0x00000191 var *f 0x00000013
    0x00000192 load *f >|4| 0x00000191<
    0x00000193 var *f 0x0000001F
    0x00000194 load *f >|4| 0x00000193<
    0x00000195 fmul f >|4| 0x00000192<, f >|4| 0x00000194<
    0x00000196 fadd f >|4| 0x00000190<, f >|4| 0x00000195<
    0x00000197 var **f 0x00000006
    0x00000198 load **f >|4| 0x00000197<
    0x00000199 arracc *f >|4| 0x00000198<, s32 8
    0x0000019A store *f >|4| 0x00000199<, f >|4| 0x00000196<
    0x0000019B var *f 0x0000000C
    0x0000019C load *f >|4| 0x0000019B<
    0x0000019D var *f 0x0000001D
    0x0000019E load *f >|4| 0x0000019D<
    0x0000019F fmul f >|4| 0x0000019C<, f >|4| 0x0000019E<
    0x000001A0 var *f 0x00000010
    0x000001A1 load *f >|4| 0x000001A0<
    0x000001A2 var *f 0x0000001E
    0x000001A3 load *f >|4| 0x000001A2<
    0x000001A4 fmul f >|4| 0x000001A1<, f >|4| 0x000001A3<
    0x000001A5 fadd f >|4| 0x0000019F<, f >|4| 0x000001A4<
    0x000001A6 var *f 0x00000014
    0x000001A7 load *f >|4| 0x000001A6<
    0x000001A8 var *f 0x0000001F
    0x000001A9 load *f >|4| 0x000001A8<
    0x000001AA fmul f >|4| 0x000001A7<, f >|4| 0x000001A9<
    0x000001AB fadd f >|4| 0x000001A5<, f >|4| 0x000001AA<
    0x000001AC var **f 0x00000006
    0x000001AD load **f >|4| 0x000001AC<
    0x000001AE arracc *f >|4| 0x000001AD<, s32 9
    0x000001AF store *f >|4| 0x000001AE<, f >|4| 0x000001AB<
    0x000001B0 var *f 0x0000000D
    0x000001B1 load *f >|4| 0x000001B0<
    0x000001B2 var *f 0x0000001D
    0x000001B3 load *f >|4| 0x000001B2<
    0x000001B4 fmul f >|4| 0x000001B1<, f >|4| 0x000001B3<
    0x000001B5 var *f 0x00000011
    0x000001B6 load *f >|4| 0x000001B5<
    0x000001B7 var *f 0x0000001E
    0x000001B8 load *f >|4| 0x000001B7<
    0x000001B9 fmul f >|4| 0x000001B6<, f >|4| 0x000001B8<
    0x000001BA fadd f >|4| 0x000001B4<, f >|4| 0x000001B9<
    0x000001BB var *f 0x00000015
    0x000001BC load *f >|4| 0x000001BB<
    0x000001BD var *f 0x0000001F
    0x000001BE load *f >|4| 0x000001BD<
    0x000001BF fmul f >|4| 0x000001BC<, f >|4| 0x000001BE<
    0x000001C0 fadd f >|4| 0x000001BA<, f >|4| 0x000001BF<
    0x000001C1 var **f 0x00000006
    0x000001C2 load **f >|4| 0x000001C1<
    0x000001C3 arracc *f >|4| 0x000001C2<, s32 10
    0x000001C4 store *f >|4| 0x000001C3<, f >|4| 0x000001C0<
    0x000001C5 var *f 0x0000000E
    0x000001C6 load *f >|4| 0x000001C5<
    0x000001C7 var *f 0x0000001D
    0x000001C8 load *f >|4| 0x000001C7<
    0x000001C9 fmul f >|4| 0x000001C6<, f >|4| 0x000001C8<
    0x000001CA var *f 0x00000012
    0x000001CB load *f >|4| 0x000001CA<
    0x000001CC var *f 0x0000001E
    0x000001CD load *f >|4| 0x000001CC<
    0x000001CE fmul f >|4| 0x000001CB<, f >|4| 0x000001CD<
    0x000001CF fadd f >|4| 0x000001C9<, f >|4| 0x000001CE<
    0x000001D0 var *f 0x00000016
    0x000001D1 load *f >|4| 0x000001D0<
    0x000001D2 var *f 0x0000001F
    0x000001D3 load *f >|4| 0x000001D2<
    0x000001D4 fmul f >|4| 0x000001D1<, f >|4| 0x000001D3<
    0x000001D5 fadd f >|4| 0x000001CF<, f >|4| 0x000001D4<
    0x000001D6 var **f 0x00000006
    0x000001D7 load **f >|4| 0x000001D6<
    0x000001D8 arracc *f >|4| 0x000001D7<, s32 11
    0x000001D9 store *f >|4| 0x000001D8<, f >|4| 0x000001D5<
    0x000001DA var *__unk_type_kind 0x00000002
    0x000001DB call awD "__defer__" (*__unk_type_kind >|4| 0x000001DA<) void
    0x000001DC ret
fn rotateFromIdentity ay9 -> void
    {1 BBs, 15 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|0| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 var *f 0x00000003
    0x0000000A load *f >|0| 0x00000009<
    0x0000000B var *f 0x00000004
    0x0000000C load *f >|0| 0x0000000B<
    0x0000000D call aw9 "rotate" (*__unk_type_kind >|0| 0x00000004<, f >|0| 0x00000006<, f >|0| 0x00000008<, f >|0| 0x0000000A<, f >|0| 0x0000000C<) void
    0x0000000E ret
fn rotateFromIdentity az9 -> void
    {1 BBs, 13 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|0| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000002
    0x00000008 load *__unk_type_kind >|0| 0x00000007<
    0x00000009 call ax9 "rotate" (*__unk_type_kind >|0| 0x00000004<, f >|0| 0x00000006<, __unk_type_kind >|0| 0x00000008<) void
    0x0000000A var *__unk_type_kind 0x00000002
    0x0000000B call awD "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn frustum a0A -> void
    {1 BBs, 139 INSTRs, 11 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 *f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000007
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *f 0x00000002
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var *f 0x00000001
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fsub f >|0| 0x00000007<, f >|0| 0x00000009<
    0x0000000B var *f 0x00000008
    0x0000000C store *f >|0| 0x0000000B<, f >|0| 0x0000000A<
    0x0000000D var *f 0x00000004
    0x0000000E load *f >|0| 0x0000000D<
    0x0000000F var *f 0x00000003
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 fsub f >|0| 0x0000000E<, f >|0| 0x00000010<
    0x00000012 var *f 0x00000009
    0x00000013 store *f >|0| 0x00000012<, f >|0| 0x00000011<
    0x00000014 var *f 0x00000006
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 var *f 0x00000005
    0x00000017 load *f >|0| 0x00000016<
    0x00000018 fsub f >|0| 0x00000015<, f >|0| 0x00000017<
    0x00000019 var *f 0x0000000A
    0x0000001A store *f >|0| 0x00000019<, f >|0| 0x00000018<
    0x0000001B var *f 0x00000005
    0x0000001C load *f >|0| 0x0000001B<
    0x0000001D fmul f >|0| 0x0000001C<, f 2.000000
    0x0000001E var *f 0x00000008
    0x0000001F load *f >|0| 0x0000001E<
    0x00000020 fdiv f >|0| 0x0000001D<, f >|0| 0x0000001F<
    0x00000021 var **f 0x00000007
    0x00000022 load **f >|0| 0x00000021<
    0x00000023 arracc *f >|0| 0x00000022<, s32 0
    0x00000024 store *f >|0| 0x00000023<, f >|0| 0x00000020<
    0x00000025 var **f 0x00000007
    0x00000026 load **f >|0| 0x00000025<
    0x00000027 arracc *f >|0| 0x00000026<, s32 1
    0x00000028 store *f >|0| 0x00000027<, f 0.000000
    0x00000029 var **f 0x00000007
    0x0000002A load **f >|0| 0x00000029<
    0x0000002B arracc *f >|0| 0x0000002A<, s32 2
    0x0000002C store *f >|0| 0x0000002B<, f 0.000000
    0x0000002D var **f 0x00000007
    0x0000002E load **f >|0| 0x0000002D<
    0x0000002F arracc *f >|0| 0x0000002E<, s32 3
    0x00000030 store *f >|0| 0x0000002F<, f 0.000000
    0x00000031 var **f 0x00000007
    0x00000032 load **f >|0| 0x00000031<
    0x00000033 arracc *f >|0| 0x00000032<, s32 4
    0x00000034 store *f >|0| 0x00000033<, f 0.000000
    0x00000035 var *f 0x00000005
    0x00000036 load *f >|0| 0x00000035<
    0x00000037 fmul f >|0| 0x00000036<, f 2.000000
    0x00000038 var *f 0x00000009
    0x00000039 load *f >|0| 0x00000038<
    0x0000003A fdiv f >|0| 0x00000037<, f >|0| 0x00000039<
    0x0000003B var **f 0x00000007
    0x0000003C load **f >|0| 0x0000003B<
    0x0000003D arracc *f >|0| 0x0000003C<, s32 5
    0x0000003E store *f >|0| 0x0000003D<, f >|0| 0x0000003A<
    0x0000003F var **f 0x00000007
    0x00000040 load **f >|0| 0x0000003F<
    0x00000041 arracc *f >|0| 0x00000040<, s32 6
    0x00000042 store *f >|0| 0x00000041<, f 0.000000
    0x00000043 var **f 0x00000007
    0x00000044 load **f >|0| 0x00000043<
    0x00000045 arracc *f >|0| 0x00000044<, s32 7
    0x00000046 store *f >|0| 0x00000045<, f 0.000000
    0x00000047 var *f 0x00000002
    0x00000048 load *f >|0| 0x00000047<
    0x00000049 var *f 0x00000001
    0x0000004A load *f >|0| 0x00000049<
    0x0000004B fadd f >|0| 0x00000048<, f >|0| 0x0000004A<
    0x0000004C var *f 0x00000008
    0x0000004D load *f >|0| 0x0000004C<
    0x0000004E fdiv f >|0| 0x0000004B<, f >|0| 0x0000004D<
    0x0000004F var **f 0x00000007
    0x00000050 load **f >|0| 0x0000004F<
    0x00000051 arracc *f >|0| 0x00000050<, s32 8
    0x00000052 store *f >|0| 0x00000051<, f >|0| 0x0000004E<
    0x00000053 var *f 0x00000004
    0x00000054 load *f >|0| 0x00000053<
    0x00000055 var *f 0x00000003
    0x00000056 load *f >|0| 0x00000055<
    0x00000057 fadd f >|0| 0x00000054<, f >|0| 0x00000056<
    0x00000058 var *f 0x00000009
    0x00000059 load *f >|0| 0x00000058<
    0x0000005A fdiv f >|0| 0x00000057<, f >|0| 0x00000059<
    0x0000005B var **f 0x00000007
    0x0000005C load **f >|0| 0x0000005B<
    0x0000005D arracc *f >|0| 0x0000005C<, s32 9
    0x0000005E store *f >|0| 0x0000005D<, f >|0| 0x0000005A<
    0x0000005F var *f 0x00000006
    0x00000060 load *f >|0| 0x0000005F<
    0x00000061 var *f 0x00000005
    0x00000062 load *f >|0| 0x00000061<
    0x00000063 fadd f >|0| 0x00000060<, f >|0| 0x00000062<
    0x00000064 fmul f -1.000000, f >|0| 0x00000063<
    0x00000065 var *f 0x0000000A
    0x00000066 load *f >|0| 0x00000065<
    0x00000067 fdiv f >|0| 0x00000064<, f >|0| 0x00000066<
    0x00000068 var **f 0x00000007
    0x00000069 load **f >|0| 0x00000068<
    0x0000006A arracc *f >|0| 0x00000069<, s32 10
    0x0000006B store *f >|0| 0x0000006A<, f >|0| 0x00000067<
    0x0000006C var **f 0x00000007
    0x0000006D load **f >|0| 0x0000006C<
    0x0000006E arracc *f >|0| 0x0000006D<, s32 11
    0x0000006F store *f >|0| 0x0000006E<, f -1.000000
    0x00000070 var **f 0x00000007
    0x00000071 load **f >|0| 0x00000070<
    0x00000072 arracc *f >|0| 0x00000071<, s32 12
    0x00000073 store *f >|0| 0x00000072<, f 0.000000
    0x00000074 var **f 0x00000007
    0x00000075 load **f >|0| 0x00000074<
    0x00000076 arracc *f >|0| 0x00000075<, s32 13
    0x00000077 store *f >|0| 0x00000076<, f 0.000000
    0x00000078 var *f 0x00000006
    0x00000079 load *f >|0| 0x00000078<
    0x0000007A fmul f -1.000000, f >|0| 0x00000079<
    0x0000007B var *f 0x00000005
    0x0000007C load *f >|0| 0x0000007B<
    0x0000007D fmul f >|0| 0x0000007A<, f >|0| 0x0000007C<
    0x0000007E fmul f >|0| 0x0000007D<, f 2.000000
    0x0000007F var *f 0x0000000A
    0x00000080 load *f >|0| 0x0000007F<
    0x00000081 fdiv f >|0| 0x0000007E<, f >|0| 0x00000080<
    0x00000082 var **f 0x00000007
    0x00000083 load **f >|0| 0x00000082<
    0x00000084 arracc *f >|0| 0x00000083<, s32 14
    0x00000085 store *f >|0| 0x00000084<, f >|0| 0x00000081<
    0x00000086 var **f 0x00000007
    0x00000087 load **f >|0| 0x00000086<
    0x00000088 arracc *f >|0| 0x00000087<, s32 15
    0x00000089 store *f >|0| 0x00000088<, f 0.000000
    0x0000008A ret
fn perspective a1A -> void
    {1 BBs, 35 INSTRs, 7 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 var *f 0x00000001
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 fmul f >|0| 0x00000003<, f 3.141593
    0x00000005 fdiv f >|0| 0x00000004<, f 360.000000
    0x00000006 call ax8 "tanf" (f >|0| 0x00000005<) f
    0x00000007 fmul f >|0| 0x00000001<, f >|0| 0x00000006<
    0x00000008 var *f 0x00000005
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A var *f 0x00000005
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C var *f 0x00000002
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E fmul f >|0| 0x0000000B<, f >|0| 0x0000000D<
    0x0000000F var *f 0x00000006
    0x00000010 store *f >|0| 0x0000000F<, f >|0| 0x0000000E<
    0x00000011 var **__unk_type_kind 0x00000000
    0x00000012 load **__unk_type_kind >|0| 0x00000011<
    0x00000013 var *f 0x00000006
    0x00000014 load *f >|0| 0x00000013<
    0x00000015 fmul f -1.000000, f >|0| 0x00000014<
    0x00000016 var *f 0x00000006
    0x00000017 load *f >|0| 0x00000016<
    0x00000018 var *f 0x00000005
    0x00000019 load *f >|0| 0x00000018<
    0x0000001A fmul f -1.000000, f >|0| 0x00000019<
    0x0000001B var *f 0x00000005
    0x0000001C load *f >|0| 0x0000001B<
    0x0000001D var *f 0x00000003
    0x0000001E load *f >|0| 0x0000001D<
    0x0000001F var *f 0x00000004
    0x00000020 load *f >|0| 0x0000001F<
    0x00000021 call a0A "frustum" (*__unk_type_kind >|0| 0x00000012<, f >|0| 0x00000015<, f >|0| 0x00000017<, f >|0| 0x0000001A<, f >|0| 0x0000001C<, f >|0| 0x0000001E<, f >|0| 0x00000020<) void
    0x00000022 ret
fn ortho a2A -> void
    {1 BBs, 128 INSTRs, 11 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 f]
    [0x00000006 f]
    [0x00000007 *f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000007
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *f 0x00000002
    0x00000007 load *f >|0| 0x00000006<
    0x00000008 var *f 0x00000001
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fsub f >|0| 0x00000007<, f >|0| 0x00000009<
    0x0000000B var *f 0x00000008
    0x0000000C store *f >|0| 0x0000000B<, f >|0| 0x0000000A<
    0x0000000D var *f 0x00000004
    0x0000000E load *f >|0| 0x0000000D<
    0x0000000F var *f 0x00000003
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 fsub f >|0| 0x0000000E<, f >|0| 0x00000010<
    0x00000012 var *f 0x00000009
    0x00000013 store *f >|0| 0x00000012<, f >|0| 0x00000011<
    0x00000014 var *f 0x00000006
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 var *f 0x00000005
    0x00000017 load *f >|0| 0x00000016<
    0x00000018 fsub f >|0| 0x00000015<, f >|0| 0x00000017<
    0x00000019 var *f 0x0000000A
    0x0000001A store *f >|0| 0x00000019<, f >|0| 0x00000018<
    0x0000001B var *f 0x00000008
    0x0000001C load *f >|0| 0x0000001B<
    0x0000001D fdiv f 2.000000, f >|0| 0x0000001C<
    0x0000001E var **f 0x00000007
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 0
    0x00000021 store *f >|0| 0x00000020<, f >|0| 0x0000001D<
    0x00000022 var **f 0x00000007
    0x00000023 load **f >|0| 0x00000022<
    0x00000024 arracc *f >|0| 0x00000023<, s32 1
    0x00000025 store *f >|0| 0x00000024<, f 0.000000
    0x00000026 var **f 0x00000007
    0x00000027 load **f >|0| 0x00000026<
    0x00000028 arracc *f >|0| 0x00000027<, s32 2
    0x00000029 store *f >|0| 0x00000028<, f 0.000000
    0x0000002A var **f 0x00000007
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 3
    0x0000002D store *f >|0| 0x0000002C<, f 0.000000
    0x0000002E var **f 0x00000007
    0x0000002F load **f >|0| 0x0000002E<
    0x00000030 arracc *f >|0| 0x0000002F<, s32 4
    0x00000031 store *f >|0| 0x00000030<, f 0.000000
    0x00000032 var *f 0x00000009
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 fdiv f 2.000000, f >|0| 0x00000033<
    0x00000035 var **f 0x00000007
    0x00000036 load **f >|0| 0x00000035<
    0x00000037 arracc *f >|0| 0x00000036<, s32 5
    0x00000038 store *f >|0| 0x00000037<, f >|0| 0x00000034<
    0x00000039 var **f 0x00000007
    0x0000003A load **f >|0| 0x00000039<
    0x0000003B arracc *f >|0| 0x0000003A<, s32 6
    0x0000003C store *f >|0| 0x0000003B<, f 0.000000
    0x0000003D var **f 0x00000007
    0x0000003E load **f >|0| 0x0000003D<
    0x0000003F arracc *f >|0| 0x0000003E<, s32 7
    0x00000040 store *f >|0| 0x0000003F<, f 0.000000
    0x00000041 var **f 0x00000007
    0x00000042 load **f >|0| 0x00000041<
    0x00000043 arracc *f >|0| 0x00000042<, s32 8
    0x00000044 store *f >|0| 0x00000043<, f 0.000000
    0x00000045 var **f 0x00000007
    0x00000046 load **f >|0| 0x00000045<
    0x00000047 arracc *f >|0| 0x00000046<, s32 9
    0x00000048 store *f >|0| 0x00000047<, f 0.000000
    0x00000049 var *f 0x0000000A
    0x0000004A load *f >|0| 0x00000049<
    0x0000004B fdiv f -2.000000, f >|0| 0x0000004A<
    0x0000004C var **f 0x00000007
    0x0000004D load **f >|0| 0x0000004C<
    0x0000004E arracc *f >|0| 0x0000004D<, s32 10
    0x0000004F store *f >|0| 0x0000004E<, f >|0| 0x0000004B<
    0x00000050 var **f 0x00000007
    0x00000051 load **f >|0| 0x00000050<
    0x00000052 arracc *f >|0| 0x00000051<, s32 11
    0x00000053 store *f >|0| 0x00000052<, f 0.000000
    0x00000054 var *f 0x00000001
    0x00000055 load *f >|0| 0x00000054<
    0x00000056 var *f 0x00000002
    0x00000057 load *f >|0| 0x00000056<
    0x00000058 fadd f >|0| 0x00000055<, f >|0| 0x00000057<
    0x00000059 fmul f -1.000000, f >|0| 0x00000058<
    0x0000005A var *f 0x00000008
    0x0000005B load *f >|0| 0x0000005A<
    0x0000005C fdiv f >|0| 0x00000059<, f >|0| 0x0000005B<
    0x0000005D var **f 0x00000007
    0x0000005E load **f >|0| 0x0000005D<
    0x0000005F arracc *f >|0| 0x0000005E<, s32 12
    0x00000060 store *f >|0| 0x0000005F<, f >|0| 0x0000005C<
    0x00000061 var *f 0x00000004
    0x00000062 load *f >|0| 0x00000061<
    0x00000063 var *f 0x00000003
    0x00000064 load *f >|0| 0x00000063<
    0x00000065 fadd f >|0| 0x00000062<, f >|0| 0x00000064<
    0x00000066 fmul f -1.000000, f >|0| 0x00000065<
    0x00000067 var *f 0x00000009
    0x00000068 load *f >|0| 0x00000067<
    0x00000069 fdiv f >|0| 0x00000066<, f >|0| 0x00000068<
    0x0000006A var **f 0x00000007
    0x0000006B load **f >|0| 0x0000006A<
    0x0000006C arracc *f >|0| 0x0000006B<, s32 13
    0x0000006D store *f >|0| 0x0000006C<, f >|0| 0x00000069<
    0x0000006E var *f 0x00000006
    0x0000006F load *f >|0| 0x0000006E<
    0x00000070 var *f 0x00000005
    0x00000071 load *f >|0| 0x00000070<
    0x00000072 fadd f >|0| 0x0000006F<, f >|0| 0x00000071<
    0x00000073 fmul f -1.000000, f >|0| 0x00000072<
    0x00000074 var *f 0x0000000A
    0x00000075 load *f >|0| 0x00000074<
    0x00000076 fdiv f >|0| 0x00000073<, f >|0| 0x00000075<
    0x00000077 var **f 0x00000007
    0x00000078 load **f >|0| 0x00000077<
    0x00000079 arracc *f >|0| 0x00000078<, s32 14
    0x0000007A store *f >|0| 0x00000079<, f >|0| 0x00000076<
    0x0000007B var **f 0x00000007
    0x0000007C load **f >|0| 0x0000007B<
    0x0000007D arracc *f >|0| 0x0000007C<, s32 15
    0x0000007E store *f >|0| 0x0000007D<, f 1.000000
    0x0000007F ret
fn lookAt a3A -> void
    {13 BBs, 468 INSTRs, 25 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *__unk_type_kind]
    [0x00000002 __unk_type_kind]
    [0x00000003 __unk_type_kind]
    [0x00000004 __unk_type_kind]
    [0x00000005 *f]
    [0x00000006 f]
    [0x00000007 f]
    [0x00000008 f]
    [0x00000009 f]
    [0x0000000A f]
    [0x0000000B f]
    [0x0000000C f]
    [0x0000000D f]
    [0x0000000E f]
    [0x0000000F f]
    [0x00000010 f]
    [0x00000011 f]
    [0x00000012 f]
    [0x00000013 f]
    [0x00000014 f]
    [0x00000015 f]
    [0x00000016 f]
    [0x00000017 f]
    [0x00000018 f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000005
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var *__unk_type_kind 0x00000002
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 var *f 0x00000006
    0x0000000A store *f >|0| 0x00000009<, f >|0| 0x00000008<
    0x0000000B var *__unk_type_kind 0x00000002
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E var *f 0x00000007
    0x0000000F store *f >|0| 0x0000000E<, f >|0| 0x0000000D<
    0x00000010 var *__unk_type_kind 0x00000002
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 2
    0x00000012 load *f >|0| 0x00000011<
    0x00000013 var *f 0x00000008
    0x00000014 store *f >|0| 0x00000013<, f >|0| 0x00000012<
    0x00000015 var *__unk_type_kind 0x00000004
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 0
    0x00000017 load *f >|0| 0x00000016<
    0x00000018 var *f 0x00000009
    0x00000019 store *f >|0| 0x00000018<, f >|0| 0x00000017<
    0x0000001A var *__unk_type_kind 0x00000004
    0x0000001B memb *__unk_type_kind >|0| 0x0000001A<, 1
    0x0000001C load *f >|0| 0x0000001B<
    0x0000001D var *f 0x0000000A
    0x0000001E store *f >|0| 0x0000001D<, f >|0| 0x0000001C<
    0x0000001F var *__unk_type_kind 0x00000004
    0x00000020 memb *__unk_type_kind >|0| 0x0000001F<, 2
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 var *f 0x0000000B
    0x00000023 store *f >|0| 0x00000022<, f >|0| 0x00000021<
    0x00000024 var *__unk_type_kind 0x00000003
    0x00000025 memb *__unk_type_kind >|0| 0x00000024<, 0
    0x00000026 load *f >|0| 0x00000025<
    0x00000027 var *f 0x0000000C
    0x00000028 store *f >|0| 0x00000027<, f >|0| 0x00000026<
    0x00000029 var *__unk_type_kind 0x00000003
    0x0000002A memb *__unk_type_kind >|0| 0x00000029<, 1
    0x0000002B load *f >|0| 0x0000002A<
    0x0000002C var *f 0x0000000D
    0x0000002D store *f >|0| 0x0000002C<, f >|0| 0x0000002B<
    0x0000002E var *__unk_type_kind 0x00000003
    0x0000002F memb *__unk_type_kind >|0| 0x0000002E<, 2
    0x00000030 load *f >|0| 0x0000002F<
    0x00000031 var *f 0x0000000E
    0x00000032 store *f >|0| 0x00000031<, f >|0| 0x00000030<
    0x00000033 var *f 0x00000006
    0x00000034 load *f >|0| 0x00000033<
    0x00000035 var *f 0x0000000C
    0x00000036 load *f >|0| 0x00000035<
    0x00000037 feq f >|0| 0x00000034<, f >|0| 0x00000036<
    0x00000038 cbr f >|0| 0x00000037<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *f 0x00000007
    0x00000001 load *f >|1| 0x00000000<
    0x00000002 var *f 0x0000000D
    0x00000003 load *f >|1| 0x00000002<
    0x00000004 feq f >|1| 0x00000001<, f >|1| 0x00000003<
    0x00000005 br |2|
  BASICBLOCK |2|
    0x00000000 phi2 |0| -> bool false, |1| -> f >|1| 0x00000004<
    0x00000001 cbr bool >|2| 0x00000000<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var *f 0x00000008
    0x00000001 load *f >|3| 0x00000000<
    0x00000002 var *f 0x0000000E
    0x00000003 load *f >|3| 0x00000002<
    0x00000004 feq f >|3| 0x00000001<, f >|3| 0x00000003<
    0x00000005 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool false, |3| -> f >|3| 0x00000004<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|5| 0x00000000<
    0x00000002 call ah9 "identity" (*__unk_type_kind >|5| 0x00000001<) void
    0x00000003 br |6|
  BASICBLOCK |6|
    0x00000000 var *f 0x00000006
    0x00000001 load *f >|6| 0x00000000<
    0x00000002 var *f 0x0000000C
    0x00000003 load *f >|6| 0x00000002<
    0x00000004 fsub f >|6| 0x00000001<, f >|6| 0x00000003<
    0x00000005 var *f 0x0000000F
    0x00000006 store *f >|6| 0x00000005<, f >|6| 0x00000004<
    0x00000007 var *f 0x00000007
    0x00000008 load *f >|6| 0x00000007<
    0x00000009 var *f 0x0000000D
    0x0000000A load *f >|6| 0x00000009<
    0x0000000B fsub f >|6| 0x00000008<, f >|6| 0x0000000A<
    0x0000000C var *f 0x00000010
    0x0000000D store *f >|6| 0x0000000C<, f >|6| 0x0000000B<
    0x0000000E var *f 0x00000008
    0x0000000F load *f >|6| 0x0000000E<
    0x00000010 var *f 0x0000000E
    0x00000011 load *f >|6| 0x00000010<
    0x00000012 fsub f >|6| 0x0000000F<, f >|6| 0x00000011<
    0x00000013 var *f 0x00000011
    0x00000014 store *f >|6| 0x00000013<, f >|6| 0x00000012<
    0x00000015 var *f 0x0000000F
    0x00000016 load *f >|6| 0x00000015<
    0x00000017 var *f 0x0000000F
    0x00000018 load *f >|6| 0x00000017<
    0x00000019 fmul f >|6| 0x00000016<, f >|6| 0x00000018<
    0x0000001A var *f 0x00000010
    0x0000001B load *f >|6| 0x0000001A<
    0x0000001C var *f 0x00000010
    0x0000001D load *f >|6| 0x0000001C<
    0x0000001E fmul f >|6| 0x0000001B<, f >|6| 0x0000001D<
    0x0000001F fadd f >|6| 0x00000019<, f >|6| 0x0000001E<
    0x00000020 var *f 0x00000011
    0x00000021 load *f >|6| 0x00000020<
    0x00000022 var *f 0x00000011
    0x00000023 load *f >|6| 0x00000022<
    0x00000024 fmul f >|6| 0x00000021<, f >|6| 0x00000023<
    0x00000025 fadd f >|6| 0x0000001F<, f >|6| 0x00000024<
    0x00000026 call aF9 "sqrtf" (f >|6| 0x00000025<) f
    0x00000027 fdiv f 1.000000, f >|6| 0x00000026<
    0x00000028 var *f 0x00000012
    0x00000029 store *f >|6| 0x00000028<, f >|6| 0x00000027<
    0x0000002A var *f 0x00000012
    0x0000002B load *f >|6| 0x0000002A<
    0x0000002C var *f 0x0000000F
    0x0000002D load *f >|6| 0x0000002C<
    0x0000002E fmul f >|6| 0x0000002D<, f >|6| 0x0000002B<
    0x0000002F store *f >|6| 0x0000002C<, f >|6| 0x0000002E<
    0x00000030 var *f 0x00000012
    0x00000031 load *f >|6| 0x00000030<
    0x00000032 var *f 0x00000010
    0x00000033 load *f >|6| 0x00000032<
    0x00000034 fmul f >|6| 0x00000033<, f >|6| 0x00000031<
    0x00000035 store *f >|6| 0x00000032<, f >|6| 0x00000034<
    0x00000036 var *f 0x00000012
    0x00000037 load *f >|6| 0x00000036<
    0x00000038 var *f 0x00000011
    0x00000039 load *f >|6| 0x00000038<
    0x0000003A fmul f >|6| 0x00000039<, f >|6| 0x00000037<
    0x0000003B store *f >|6| 0x00000038<, f >|6| 0x0000003A<
    0x0000003C var *f 0x0000000A
    0x0000003D load *f >|6| 0x0000003C<
    0x0000003E var *f 0x00000011
    0x0000003F load *f >|6| 0x0000003E<
    0x00000040 fmul f >|6| 0x0000003D<, f >|6| 0x0000003F<
    0x00000041 var *f 0x0000000B
    0x00000042 load *f >|6| 0x00000041<
    0x00000043 var *f 0x00000010
    0x00000044 load *f >|6| 0x00000043<
    0x00000045 fmul f >|6| 0x00000042<, f >|6| 0x00000044<
    0x00000046 fsub f >|6| 0x00000040<, f >|6| 0x00000045<
    0x00000047 var *f 0x00000013
    0x00000048 store *f >|6| 0x00000047<, f >|6| 0x00000046<
    0x00000049 var *f 0x0000000B
    0x0000004A load *f >|6| 0x00000049<
    0x0000004B var *f 0x0000000F
    0x0000004C load *f >|6| 0x0000004B<
    0x0000004D fmul f >|6| 0x0000004A<, f >|6| 0x0000004C<
    0x0000004E var *f 0x00000009
    0x0000004F load *f >|6| 0x0000004E<
    0x00000050 var *f 0x00000011
    0x00000051 load *f >|6| 0x00000050<
    0x00000052 fmul f >|6| 0x0000004F<, f >|6| 0x00000051<
    0x00000053 fsub f >|6| 0x0000004D<, f >|6| 0x00000052<
    0x00000054 var *f 0x00000014
    0x00000055 store *f >|6| 0x00000054<, f >|6| 0x00000053<
    0x00000056 var *f 0x00000009
    0x00000057 load *f >|6| 0x00000056<
    0x00000058 var *f 0x00000010
    0x00000059 load *f >|6| 0x00000058<
    0x0000005A fmul f >|6| 0x00000057<, f >|6| 0x00000059<
    0x0000005B var *f 0x0000000A
    0x0000005C load *f >|6| 0x0000005B<
    0x0000005D var *f 0x0000000F
    0x0000005E load *f >|6| 0x0000005D<
    0x0000005F fmul f >|6| 0x0000005C<, f >|6| 0x0000005E<
    0x00000060 fsub f >|6| 0x0000005A<, f >|6| 0x0000005F<
    0x00000061 var *f 0x00000015
    0x00000062 store *f >|6| 0x00000061<, f >|6| 0x00000060<
    0x00000063 var *f 0x00000013
    0x00000064 load *f >|6| 0x00000063<
    0x00000065 var *f 0x00000013
    0x00000066 load *f >|6| 0x00000065<
    0x00000067 fmul f >|6| 0x00000064<, f >|6| 0x00000066<
    0x00000068 var *f 0x00000014
    0x00000069 load *f >|6| 0x00000068<
    0x0000006A var *f 0x00000014
    0x0000006B load *f >|6| 0x0000006A<
    0x0000006C fmul f >|6| 0x00000069<, f >|6| 0x0000006B<
    0x0000006D fadd f >|6| 0x00000067<, f >|6| 0x0000006C<
    0x0000006E var *f 0x00000015
    0x0000006F load *f >|6| 0x0000006E<
    0x00000070 var *f 0x00000015
    0x00000071 load *f >|6| 0x00000070<
    0x00000072 fmul f >|6| 0x0000006F<, f >|6| 0x00000071<
    0x00000073 fadd f >|6| 0x0000006D<, f >|6| 0x00000072<
    0x00000074 call aF9 "sqrtf" (f >|6| 0x00000073<) f
    0x00000075 var *f 0x00000012
    0x00000076 store *f >|6| 0x00000075<, f >|6| 0x00000074<
    0x00000077 var *f 0x00000012
    0x00000078 load *f >|6| 0x00000077<
    0x00000079 feq f >|6| 0x00000078<, f 0.000000
    0x0000007A cbr f >|6| 0x00000079<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var *f 0x00000013
    0x00000001 store *f >|7| 0x00000000<, f 0.000000
    0x00000002 var *f 0x00000014
    0x00000003 store *f >|7| 0x00000002<, f 0.000000
    0x00000004 var *f 0x00000015
    0x00000005 store *f >|7| 0x00000004<, f 0.000000
    0x00000006 br |9|
  BASICBLOCK |8|
    0x00000000 var *f 0x00000012
    0x00000001 load *f >|8| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|8| 0x00000001<
    0x00000003 var *f 0x00000012
    0x00000004 store *f >|8| 0x00000003<, f >|8| 0x00000002<
    0x00000005 var *f 0x00000012
    0x00000006 load *f >|8| 0x00000005<
    0x00000007 var *f 0x00000013
    0x00000008 load *f >|8| 0x00000007<
    0x00000009 fmul f >|8| 0x00000008<, f >|8| 0x00000006<
    0x0000000A store *f >|8| 0x00000007<, f >|8| 0x00000009<
    0x0000000B var *f 0x00000012
    0x0000000C load *f >|8| 0x0000000B<
    0x0000000D var *f 0x00000014
    0x0000000E load *f >|8| 0x0000000D<
    0x0000000F fmul f >|8| 0x0000000E<, f >|8| 0x0000000C<
    0x00000010 store *f >|8| 0x0000000D<, f >|8| 0x0000000F<
    0x00000011 var *f 0x00000012
    0x00000012 load *f >|8| 0x00000011<
    0x00000013 var *f 0x00000015
    0x00000014 load *f >|8| 0x00000013<
    0x00000015 fmul f >|8| 0x00000014<, f >|8| 0x00000012<
    0x00000016 store *f >|8| 0x00000013<, f >|8| 0x00000015<
    0x00000017 br |9|
  BASICBLOCK |9|
    0x00000000 var *f 0x00000010
    0x00000001 load *f >|9| 0x00000000<
    0x00000002 var *f 0x00000015
    0x00000003 load *f >|9| 0x00000002<
    0x00000004 fmul f >|9| 0x00000001<, f >|9| 0x00000003<
    0x00000005 var *f 0x00000011
    0x00000006 load *f >|9| 0x00000005<
    0x00000007 var *f 0x00000014
    0x00000008 load *f >|9| 0x00000007<
    0x00000009 fmul f >|9| 0x00000006<, f >|9| 0x00000008<
    0x0000000A fsub f >|9| 0x00000004<, f >|9| 0x00000009<
    0x0000000B var *f 0x00000016
    0x0000000C store *f >|9| 0x0000000B<, f >|9| 0x0000000A<
    0x0000000D var *f 0x00000011
    0x0000000E load *f >|9| 0x0000000D<
    0x0000000F var *f 0x00000013
    0x00000010 load *f >|9| 0x0000000F<
    0x00000011 fmul f >|9| 0x0000000E<, f >|9| 0x00000010<
    0x00000012 var *f 0x0000000F
    0x00000013 load *f >|9| 0x00000012<
    0x00000014 var *f 0x00000015
    0x00000015 load *f >|9| 0x00000014<
    0x00000016 fmul f >|9| 0x00000013<, f >|9| 0x00000015<
    0x00000017 fsub f >|9| 0x00000011<, f >|9| 0x00000016<
    0x00000018 var *f 0x00000017
    0x00000019 store *f >|9| 0x00000018<, f >|9| 0x00000017<
    0x0000001A var *f 0x0000000F
    0x0000001B load *f >|9| 0x0000001A<
    0x0000001C var *f 0x00000014
    0x0000001D load *f >|9| 0x0000001C<
    0x0000001E fmul f >|9| 0x0000001B<, f >|9| 0x0000001D<
    0x0000001F var *f 0x00000010
    0x00000020 load *f >|9| 0x0000001F<
    0x00000021 var *f 0x00000013
    0x00000022 load *f >|9| 0x00000021<
    0x00000023 fmul f >|9| 0x00000020<, f >|9| 0x00000022<
    0x00000024 fsub f >|9| 0x0000001E<, f >|9| 0x00000023<
    0x00000025 var *f 0x00000018
    0x00000026 store *f >|9| 0x00000025<, f >|9| 0x00000024<
    0x00000027 var *f 0x00000016
    0x00000028 load *f >|9| 0x00000027<
    0x00000029 var *f 0x00000016
    0x0000002A load *f >|9| 0x00000029<
    0x0000002B fmul f >|9| 0x00000028<, f >|9| 0x0000002A<
    0x0000002C var *f 0x00000017
    0x0000002D load *f >|9| 0x0000002C<
    0x0000002E var *f 0x00000017
    0x0000002F load *f >|9| 0x0000002E<
    0x00000030 fmul f >|9| 0x0000002D<, f >|9| 0x0000002F<
    0x00000031 fadd f >|9| 0x0000002B<, f >|9| 0x00000030<
    0x00000032 var *f 0x00000018
    0x00000033 load *f >|9| 0x00000032<
    0x00000034 var *f 0x00000018
    0x00000035 load *f >|9| 0x00000034<
    0x00000036 fmul f >|9| 0x00000033<, f >|9| 0x00000035<
    0x00000037 fadd f >|9| 0x00000031<, f >|9| 0x00000036<
    0x00000038 call aF9 "sqrtf" (f >|9| 0x00000037<) f
    0x00000039 var *f 0x00000012
    0x0000003A store *f >|9| 0x00000039<, f >|9| 0x00000038<
    0x0000003B var *f 0x00000012
    0x0000003C load *f >|9| 0x0000003B<
    0x0000003D feq f >|9| 0x0000003C<, f 0.000000
    0x0000003E cbr f >|9| 0x0000003D<, |10|, |11|
  BASICBLOCK |10|
    0x00000000 var *f 0x00000016
    0x00000001 store *f >|10| 0x00000000<, f 0.000000
    0x00000002 var *f 0x00000017
    0x00000003 store *f >|10| 0x00000002<, f 0.000000
    0x00000004 var *f 0x00000018
    0x00000005 store *f >|10| 0x00000004<, f 0.000000
    0x00000006 br |12|
  BASICBLOCK |11|
    0x00000000 var *f 0x00000012
    0x00000001 load *f >|11| 0x00000000<
    0x00000002 fdiv f 1.000000, f >|11| 0x00000001<
    0x00000003 var *f 0x00000012
    0x00000004 store *f >|11| 0x00000003<, f >|11| 0x00000002<
    0x00000005 var *f 0x00000012
    0x00000006 load *f >|11| 0x00000005<
    0x00000007 var *f 0x00000016
    0x00000008 load *f >|11| 0x00000007<
    0x00000009 fmul f >|11| 0x00000008<, f >|11| 0x00000006<
    0x0000000A store *f >|11| 0x00000007<, f >|11| 0x00000009<
    0x0000000B var *f 0x00000012
    0x0000000C load *f >|11| 0x0000000B<
    0x0000000D var *f 0x00000017
    0x0000000E load *f >|11| 0x0000000D<
    0x0000000F fmul f >|11| 0x0000000E<, f >|11| 0x0000000C<
    0x00000010 store *f >|11| 0x0000000D<, f >|11| 0x0000000F<
    0x00000011 var *f 0x00000012
    0x00000012 load *f >|11| 0x00000011<
    0x00000013 var *f 0x00000018
    0x00000014 load *f >|11| 0x00000013<
    0x00000015 fmul f >|11| 0x00000014<, f >|11| 0x00000012<
    0x00000016 store *f >|11| 0x00000013<, f >|11| 0x00000015<
    0x00000017 br |12|
  BASICBLOCK |12|
    0x00000000 var *f 0x00000013
    0x00000001 load *f >|12| 0x00000000<
    0x00000002 var **f 0x00000005
    0x00000003 load **f >|12| 0x00000002<
    0x00000004 arracc *f >|12| 0x00000003<, s32 0
    0x00000005 store *f >|12| 0x00000004<, f >|12| 0x00000001<
    0x00000006 var *f 0x00000016
    0x00000007 load *f >|12| 0x00000006<
    0x00000008 var **f 0x00000005
    0x00000009 load **f >|12| 0x00000008<
    0x0000000A arracc *f >|12| 0x00000009<, s32 1
    0x0000000B store *f >|12| 0x0000000A<, f >|12| 0x00000007<
    0x0000000C var *f 0x0000000F
    0x0000000D load *f >|12| 0x0000000C<
    0x0000000E var **f 0x00000005
    0x0000000F load **f >|12| 0x0000000E<
    0x00000010 arracc *f >|12| 0x0000000F<, s32 2
    0x00000011 store *f >|12| 0x00000010<, f >|12| 0x0000000D<
    0x00000012 var **f 0x00000005
    0x00000013 load **f >|12| 0x00000012<
    0x00000014 arracc *f >|12| 0x00000013<, s32 3
    0x00000015 store *f >|12| 0x00000014<, f 0.000000
    0x00000016 var *f 0x00000014
    0x00000017 load *f >|12| 0x00000016<
    0x00000018 var **f 0x00000005
    0x00000019 load **f >|12| 0x00000018<
    0x0000001A arracc *f >|12| 0x00000019<, s32 4
    0x0000001B store *f >|12| 0x0000001A<, f >|12| 0x00000017<
    0x0000001C var *f 0x00000017
    0x0000001D load *f >|12| 0x0000001C<
    0x0000001E var **f 0x00000005
    0x0000001F load **f >|12| 0x0000001E<
    0x00000020 arracc *f >|12| 0x0000001F<, s32 5
    0x00000021 store *f >|12| 0x00000020<, f >|12| 0x0000001D<
    0x00000022 var *f 0x00000010
    0x00000023 load *f >|12| 0x00000022<
    0x00000024 var **f 0x00000005
    0x00000025 load **f >|12| 0x00000024<
    0x00000026 arracc *f >|12| 0x00000025<, s32 6
    0x00000027 store *f >|12| 0x00000026<, f >|12| 0x00000023<
    0x00000028 var **f 0x00000005
    0x00000029 load **f >|12| 0x00000028<
    0x0000002A arracc *f >|12| 0x00000029<, s32 7
    0x0000002B store *f >|12| 0x0000002A<, f 0.000000
    0x0000002C var *f 0x00000015
    0x0000002D load *f >|12| 0x0000002C<
    0x0000002E var **f 0x00000005
    0x0000002F load **f >|12| 0x0000002E<
    0x00000030 arracc *f >|12| 0x0000002F<, s32 8
    0x00000031 store *f >|12| 0x00000030<, f >|12| 0x0000002D<
    0x00000032 var *f 0x00000018
    0x00000033 load *f >|12| 0x00000032<
    0x00000034 var **f 0x00000005
    0x00000035 load **f >|12| 0x00000034<
    0x00000036 arracc *f >|12| 0x00000035<, s32 9
    0x00000037 store *f >|12| 0x00000036<, f >|12| 0x00000033<
    0x00000038 var *f 0x00000011
    0x00000039 load *f >|12| 0x00000038<
    0x0000003A var **f 0x00000005
    0x0000003B load **f >|12| 0x0000003A<
    0x0000003C arracc *f >|12| 0x0000003B<, s32 10
    0x0000003D store *f >|12| 0x0000003C<, f >|12| 0x00000039<
    0x0000003E var **f 0x00000005
    0x0000003F load **f >|12| 0x0000003E<
    0x00000040 arracc *f >|12| 0x0000003F<, s32 11
    0x00000041 store *f >|12| 0x00000040<, f 0.000000
    0x00000042 var *f 0x00000013
    0x00000043 load *f >|12| 0x00000042<
    0x00000044 var *f 0x00000006
    0x00000045 load *f >|12| 0x00000044<
    0x00000046 fmul f >|12| 0x00000043<, f >|12| 0x00000045<
    0x00000047 var *f 0x00000014
    0x00000048 load *f >|12| 0x00000047<
    0x00000049 var *f 0x00000007
    0x0000004A load *f >|12| 0x00000049<
    0x0000004B fmul f >|12| 0x00000048<, f >|12| 0x0000004A<
    0x0000004C fadd f >|12| 0x00000046<, f >|12| 0x0000004B<
    0x0000004D var *f 0x00000015
    0x0000004E load *f >|12| 0x0000004D<
    0x0000004F var *f 0x00000008
    0x00000050 load *f >|12| 0x0000004F<
    0x00000051 fmul f >|12| 0x0000004E<, f >|12| 0x00000050<
    0x00000052 fadd f >|12| 0x0000004C<, f >|12| 0x00000051<
    0x00000053 fmul f -1.000000, f >|12| 0x00000052<
    0x00000054 var **f 0x00000005
    0x00000055 load **f >|12| 0x00000054<
    0x00000056 arracc *f >|12| 0x00000055<, s32 12
    0x00000057 store *f >|12| 0x00000056<, f >|12| 0x00000053<
    0x00000058 var *f 0x00000016
    0x00000059 load *f >|12| 0x00000058<
    0x0000005A var *f 0x00000006
    0x0000005B load *f >|12| 0x0000005A<
    0x0000005C fmul f >|12| 0x00000059<, f >|12| 0x0000005B<
    0x0000005D var *f 0x00000017
    0x0000005E load *f >|12| 0x0000005D<
    0x0000005F var *f 0x00000007
    0x00000060 load *f >|12| 0x0000005F<
    0x00000061 fmul f >|12| 0x0000005E<, f >|12| 0x00000060<
    0x00000062 fadd f >|12| 0x0000005C<, f >|12| 0x00000061<
    0x00000063 var *f 0x00000018
    0x00000064 load *f >|12| 0x00000063<
    0x00000065 var *f 0x00000008
    0x00000066 load *f >|12| 0x00000065<
    0x00000067 fmul f >|12| 0x00000064<, f >|12| 0x00000066<
    0x00000068 fadd f >|12| 0x00000062<, f >|12| 0x00000067<
    0x00000069 fmul f -1.000000, f >|12| 0x00000068<
    0x0000006A var **f 0x00000005
    0x0000006B load **f >|12| 0x0000006A<
    0x0000006C arracc *f >|12| 0x0000006B<, s32 13
    0x0000006D store *f >|12| 0x0000006C<, f >|12| 0x00000069<
    0x0000006E var *f 0x0000000F
    0x0000006F load *f >|12| 0x0000006E<
    0x00000070 var *f 0x00000006
    0x00000071 load *f >|12| 0x00000070<
    0x00000072 fmul f >|12| 0x0000006F<, f >|12| 0x00000071<
    0x00000073 var *f 0x00000010
    0x00000074 load *f >|12| 0x00000073<
    0x00000075 var *f 0x00000007
    0x00000076 load *f >|12| 0x00000075<
    0x00000077 fmul f >|12| 0x00000074<, f >|12| 0x00000076<
    0x00000078 fadd f >|12| 0x00000072<, f >|12| 0x00000077<
    0x00000079 var *f 0x00000011
    0x0000007A load *f >|12| 0x00000079<
    0x0000007B var *f 0x00000008
    0x0000007C load *f >|12| 0x0000007B<
    0x0000007D fmul f >|12| 0x0000007A<, f >|12| 0x0000007C<
    0x0000007E fadd f >|12| 0x00000078<, f >|12| 0x0000007D<
    0x0000007F fmul f -1.000000, f >|12| 0x0000007E<
    0x00000080 var **f 0x00000005
    0x00000081 load **f >|12| 0x00000080<
    0x00000082 arracc *f >|12| 0x00000081<, s32 14
    0x00000083 store *f >|12| 0x00000082<, f >|12| 0x0000007F<
    0x00000084 var **f 0x00000005
    0x00000085 load **f >|12| 0x00000084<
    0x00000086 arracc *f >|12| 0x00000085<, s32 15
    0x00000087 store *f >|12| 0x00000086<, f 1.000000
    0x00000088 var *__unk_type_kind 0x00000002
    0x00000089 call awD "__defer__" (*__unk_type_kind >|12| 0x00000088<) void
    0x0000008A var *__unk_type_kind 0x00000003
    0x0000008B call awD "__defer__" (*__unk_type_kind >|12| 0x0000008A<) void
    0x0000008C var *__unk_type_kind 0x00000004
    0x0000008D call awD "__defer__" (*__unk_type_kind >|12| 0x0000008C<) void
    0x0000008E ret
fn toString a4A -> __unk_type_kind
    {1 BBs, 103 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 0
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fext f >|0| 0x00000009< to d
    0x0000000B call aEA "__modulus__" (stru, d >|0| 0x0000000A<) __unk_type_kind
    0x0000000C var **f 0x00000001
    0x0000000D load **f >|0| 0x0000000C<
    0x0000000E arracc *f >|0| 0x0000000D<, s32 1
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fext f >|0| 0x0000000F< to d
    0x00000011 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000000B<, d >|0| 0x00000010<) __unk_type_kind
    0x00000012 var **f 0x00000001
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 2
    0x00000015 load *f >|0| 0x00000014<
    0x00000016 fext f >|0| 0x00000015< to d
    0x00000017 call aEA "__modulus__" (__unk_type_kind >|0| 0x00000011<, d >|0| 0x00000016<) __unk_type_kind
    0x00000018 var **f 0x00000001
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A arracc *f >|0| 0x00000019<, s32 3
    0x0000001B load *f >|0| 0x0000001A<
    0x0000001C fext f >|0| 0x0000001B< to d
    0x0000001D call aEA "__modulus__" (__unk_type_kind >|0| 0x00000017<, d >|0| 0x0000001C<) __unk_type_kind
    0x0000001E var **f 0x00000001
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 4
    0x00000021 load *f >|0| 0x00000020<
    0x00000022 fext f >|0| 0x00000021< to d
    0x00000023 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000001D<, d >|0| 0x00000022<) __unk_type_kind
    0x00000024 var **f 0x00000001
    0x00000025 load **f >|0| 0x00000024<
    0x00000026 arracc *f >|0| 0x00000025<, s32 5
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 fext f >|0| 0x00000027< to d
    0x00000029 call aEA "__modulus__" (__unk_type_kind >|0| 0x00000023<, d >|0| 0x00000028<) __unk_type_kind
    0x0000002A var **f 0x00000001
    0x0000002B load **f >|0| 0x0000002A<
    0x0000002C arracc *f >|0| 0x0000002B<, s32 6
    0x0000002D load *f >|0| 0x0000002C<
    0x0000002E fext f >|0| 0x0000002D< to d
    0x0000002F call aEA "__modulus__" (__unk_type_kind >|0| 0x00000029<, d >|0| 0x0000002E<) __unk_type_kind
    0x00000030 var **f 0x00000001
    0x00000031 load **f >|0| 0x00000030<
    0x00000032 arracc *f >|0| 0x00000031<, s32 7
    0x00000033 load *f >|0| 0x00000032<
    0x00000034 fext f >|0| 0x00000033< to d
    0x00000035 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000002F<, d >|0| 0x00000034<) __unk_type_kind
    0x00000036 var **f 0x00000001
    0x00000037 load **f >|0| 0x00000036<
    0x00000038 arracc *f >|0| 0x00000037<, s32 8
    0x00000039 load *f >|0| 0x00000038<
    0x0000003A fext f >|0| 0x00000039< to d
    0x0000003B call aEA "__modulus__" (__unk_type_kind >|0| 0x00000035<, d >|0| 0x0000003A<) __unk_type_kind
    0x0000003C var **f 0x00000001
    0x0000003D load **f >|0| 0x0000003C<
    0x0000003E arracc *f >|0| 0x0000003D<, s32 9
    0x0000003F load *f >|0| 0x0000003E<
    0x00000040 fext f >|0| 0x0000003F< to d
    0x00000041 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000003B<, d >|0| 0x00000040<) __unk_type_kind
    0x00000042 var **f 0x00000001
    0x00000043 load **f >|0| 0x00000042<
    0x00000044 arracc *f >|0| 0x00000043<, s32 10
    0x00000045 load *f >|0| 0x00000044<
    0x00000046 fext f >|0| 0x00000045< to d
    0x00000047 call aEA "__modulus__" (__unk_type_kind >|0| 0x00000041<, d >|0| 0x00000046<) __unk_type_kind
    0x00000048 var **f 0x00000001
    0x00000049 load **f >|0| 0x00000048<
    0x0000004A arracc *f >|0| 0x00000049<, s32 11
    0x0000004B load *f >|0| 0x0000004A<
    0x0000004C fext f >|0| 0x0000004B< to d
    0x0000004D call aEA "__modulus__" (__unk_type_kind >|0| 0x00000047<, d >|0| 0x0000004C<) __unk_type_kind
    0x0000004E var **f 0x00000001
    0x0000004F load **f >|0| 0x0000004E<
    0x00000050 arracc *f >|0| 0x0000004F<, s32 12
    0x00000051 load *f >|0| 0x00000050<
    0x00000052 fext f >|0| 0x00000051< to d
    0x00000053 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000004D<, d >|0| 0x00000052<) __unk_type_kind
    0x00000054 var **f 0x00000001
    0x00000055 load **f >|0| 0x00000054<
    0x00000056 arracc *f >|0| 0x00000055<, s32 13
    0x00000057 load *f >|0| 0x00000056<
    0x00000058 fext f >|0| 0x00000057< to d
    0x00000059 call aEA "__modulus__" (__unk_type_kind >|0| 0x00000053<, d >|0| 0x00000058<) __unk_type_kind
    0x0000005A var **f 0x00000001
    0x0000005B load **f >|0| 0x0000005A<
    0x0000005C arracc *f >|0| 0x0000005B<, s32 14
    0x0000005D load *f >|0| 0x0000005C<
    0x0000005E fext f >|0| 0x0000005D< to d
    0x0000005F call aEA "__modulus__" (__unk_type_kind >|0| 0x00000059<, d >|0| 0x0000005E<) __unk_type_kind
    0x00000060 var **f 0x00000001
    0x00000061 load **f >|0| 0x00000060<
    0x00000062 arracc *f >|0| 0x00000061<, s32 15
    0x00000063 load *f >|0| 0x00000062<
    0x00000064 fext f >|0| 0x00000063< to d
    0x00000065 call aEA "__modulus__" (__unk_type_kind >|0| 0x0000005F<, d >|0| 0x00000064<) __unk_type_kind
    0x00000066 ret __unk_type_kind >|0| 0x00000065<
fn print a5A -> void
    {1 BBs, 88 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 bc *[16] f >|0| 0x00000002< to *f
    0x00000004 var **f 0x00000001
    0x00000005 store **f >|0| 0x00000004<, *f >|0| 0x00000003<
    0x00000006 var **f 0x00000001
    0x00000007 load **f >|0| 0x00000006<
    0x00000008 arracc *f >|0| 0x00000007<, s32 0
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A fext f >|0| 0x00000009< to d
    0x0000000B var **f 0x00000001
    0x0000000C load **f >|0| 0x0000000B<
    0x0000000D arracc *f >|0| 0x0000000C<, s32 1
    0x0000000E load *f >|0| 0x0000000D<
    0x0000000F fext f >|0| 0x0000000E< to d
    0x00000010 var **f 0x00000001
    0x00000011 load **f >|0| 0x00000010<
    0x00000012 arracc *f >|0| 0x00000011<, s32 2
    0x00000013 load *f >|0| 0x00000012<
    0x00000014 fext f >|0| 0x00000013< to d
    0x00000015 var **f 0x00000001
    0x00000016 load **f >|0| 0x00000015<
    0x00000017 arracc *f >|0| 0x00000016<, s32 3
    0x00000018 load *f >|0| 0x00000017<
    0x00000019 fext f >|0| 0x00000018< to d
    0x0000001A var **f 0x00000001
    0x0000001B load **f >|0| 0x0000001A<
    0x0000001C arracc *f >|0| 0x0000001B<, s32 4
    0x0000001D load *f >|0| 0x0000001C<
    0x0000001E fext f >|0| 0x0000001D< to d
    0x0000001F var **f 0x00000001
    0x00000020 load **f >|0| 0x0000001F<
    0x00000021 arracc *f >|0| 0x00000020<, s32 5
    0x00000022 load *f >|0| 0x00000021<
    0x00000023 fext f >|0| 0x00000022< to d
    0x00000024 var **f 0x00000001
    0x00000025 load **f >|0| 0x00000024<
    0x00000026 arracc *f >|0| 0x00000025<, s32 6
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 fext f >|0| 0x00000027< to d
    0x00000029 var **f 0x00000001
    0x0000002A load **f >|0| 0x00000029<
    0x0000002B arracc *f >|0| 0x0000002A<, s32 7
    0x0000002C load *f >|0| 0x0000002B<
    0x0000002D fext f >|0| 0x0000002C< to d
    0x0000002E var **f 0x00000001
    0x0000002F load **f >|0| 0x0000002E<
    0x00000030 arracc *f >|0| 0x0000002F<, s32 8
    0x00000031 load *f >|0| 0x00000030<
    0x00000032 fext f >|0| 0x00000031< to d
    0x00000033 var **f 0x00000001
    0x00000034 load **f >|0| 0x00000033<
    0x00000035 arracc *f >|0| 0x00000034<, s32 9
    0x00000036 load *f >|0| 0x00000035<
    0x00000037 fext f >|0| 0x00000036< to d
    0x00000038 var **f 0x00000001
    0x00000039 load **f >|0| 0x00000038<
    0x0000003A arracc *f >|0| 0x00000039<, s32 10
    0x0000003B load *f >|0| 0x0000003A<
    0x0000003C fext f >|0| 0x0000003B< to d
    0x0000003D var **f 0x00000001
    0x0000003E load **f >|0| 0x0000003D<
    0x0000003F arracc *f >|0| 0x0000003E<, s32 11
    0x00000040 load *f >|0| 0x0000003F<
    0x00000041 fext f >|0| 0x00000040< to d
    0x00000042 var **f 0x00000001
    0x00000043 load **f >|0| 0x00000042<
    0x00000044 arracc *f >|0| 0x00000043<, s32 12
    0x00000045 load *f >|0| 0x00000044<
    0x00000046 fext f >|0| 0x00000045< to d
    0x00000047 var **f 0x00000001
    0x00000048 load **f >|0| 0x00000047<
    0x00000049 arracc *f >|0| 0x00000048<, s32 13
    0x0000004A load *f >|0| 0x00000049<
    0x0000004B fext f >|0| 0x0000004A< to d
    0x0000004C var **f 0x00000001
    0x0000004D load **f >|0| 0x0000004C<
    0x0000004E arracc *f >|0| 0x0000004D<, s32 14
    0x0000004F load *f >|0| 0x0000004E<
    0x00000050 fext f >|0| 0x0000004F< to d
    0x00000051 var **f 0x00000001
    0x00000052 load **f >|0| 0x00000051<
    0x00000053 arracc *f >|0| 0x00000052<, s32 15
    0x00000054 load *f >|0| 0x00000053<
    0x00000055 fext f >|0| 0x00000054< to d
    0x00000056 call aF8 "printf" (cstroflen 109 "Matrix4f {
    %ff, %ff, %ff, %ff,
    %ff, %ff, %ff, %ff,
    %ff, %ff, %ff, %ff,
    %ff, %ff, %ff, %ff
}
", d >|0| 0x0000000A<, d >|0| 0x0000000F<, d >|0| 0x00000014<, d >|0| 0x00000019<, d >|0| 0x0000001E<, d >|0| 0x00000023<, d >|0| 0x00000028<, d >|0| 0x0000002D<, d >|0| 0x00000032<, d >|0| 0x00000037<, d >|0| 0x0000003C<, d >|0| 0x00000041<, d >|0| 0x00000046<, d >|0| 0x0000004B<, d >|0| 0x00000050<, d >|0| 0x00000055<) s32
    0x00000057 ret
fn __defer__ a6A -> void
    {3 BBs, 32 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 0
    0x00000003 load **u8 >|1| 0x00000002<
    0x00000004 free *u8 >|1| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 0
    0x00000008 bc null to *u8
    0x00000009 store **u8 >|1| 0x00000007<, *u8 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 1
    0x0000000D zext s32 0 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 2
    0x00000012 zext s32 0 to u64
    0x00000013 store *u64 >|1| 0x00000011<, u64 >|1| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|1| 0x00000014<
    0x00000016 memb *__unk_type_kind >|1| 0x00000015<, 3
    0x00000017 store *u64 >|1| 0x00000016<, u64 0
    0x00000018 br |2|
  BASICBLOCK |2|
    0x00000000 ret
fn __pass__ a7A -> __unk_type_kind
    {6 BBs, 22 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 3
    0x00000002 load *u64 >|0| 0x00000001<
    0x00000003 eq u64 >|0| 0x00000002<, u64 1
    0x00000004 cbr u64 >|0| 0x00000003<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 3
    0x00000002 store *u64 >|1| 0x00000001<, u64 0
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 3
    0x00000002 load *u64 >|2| 0x00000001<
    0x00000003 eq u64 >|2| 0x00000002<, u64 2
    0x00000004 cbr u64 >|2| 0x00000003<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|3| 0x00000000<
    0x00000002 ret __unk_type_kind >|3| 0x00000001<
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 3
    0x00000002 store *u64 >|4| 0x00000001<, u64 1
    0x00000003 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
fn __assign__ a8A -> void
    {14 BBs, 190 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *u8]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 3
    0x00000002 load *u64 >|0| 0x00000001<
    0x00000003 eq u64 >|0| 0x00000002<, u64 2
    0x00000004 cbr u64 >|0| 0x00000003<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call a6A "__defer__" (*__unk_type_kind >|1| 0x00000001<) void
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|1| 0x00000003<, 0
    0x00000005 load **u8 >|1| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|1| 0x00000006<
    0x00000008 memb *__unk_type_kind >|1| 0x00000007<, 0
    0x00000009 store **u8 >|1| 0x00000008<, *u8 >|1| 0x00000005<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|1| 0x0000000A<, 1
    0x0000000C load *u64 >|1| 0x0000000B<
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|1| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|1| 0x0000000E<, 1
    0x00000010 store *u64 >|1| 0x0000000F<, u64 >|1| 0x0000000C<
    0x00000011 var *__unk_type_kind 0x00000001
    0x00000012 memb *__unk_type_kind >|1| 0x00000011<, 2
    0x00000013 load *u64 >|1| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|1| 0x00000014<
    0x00000016 memb *__unk_type_kind >|1| 0x00000015<, 2
    0x00000017 store *u64 >|1| 0x00000016<, u64 >|1| 0x00000013<
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|1| 0x00000018<
    0x0000001A memb *__unk_type_kind >|1| 0x00000019<, 3
    0x0000001B store *u64 >|1| 0x0000001A<, u64 1
    0x0000001C ret
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 3
    0x00000002 load *u64 >|2| 0x00000001<
    0x00000003 eq u64 >|2| 0x00000002<, u64 0
    0x00000004 cbr u64 >|2| 0x00000003<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 eq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |5|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 call a6A "__defer__" (*__unk_type_kind >|4| 0x00000001<) void
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|4| 0x00000003<, 0
    0x00000005 load **u8 >|4| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|4| 0x00000006<
    0x00000008 memb *__unk_type_kind >|4| 0x00000007<, 0
    0x00000009 store **u8 >|4| 0x00000008<, *u8 >|4| 0x00000005<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|4| 0x0000000A<, 1
    0x0000000C load *u64 >|4| 0x0000000B<
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|4| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|4| 0x0000000E<, 1
    0x00000010 store *u64 >|4| 0x0000000F<, u64 >|4| 0x0000000C<
    0x00000011 var *__unk_type_kind 0x00000001
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 2
    0x00000013 load *u64 >|4| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|4| 0x00000014<
    0x00000016 memb *__unk_type_kind >|4| 0x00000015<, 2
    0x00000017 store *u64 >|4| 0x00000016<, u64 >|4| 0x00000013<
    0x00000018 var *__unk_type_kind 0x00000001
    0x00000019 memb *__unk_type_kind >|4| 0x00000018<, 3
    0x0000001A load *u64 >|4| 0x00000019<
    0x0000001B eq u64 >|4| 0x0000001A<, u64 3
    0x0000001C cbr u64 >|4| 0x0000001B<, |11|, |12|
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|5| 0x00000000<, 0
    0x00000002 load **u8 >|5| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|5| 0x00000003<
    0x00000005 memb *__unk_type_kind >|5| 0x00000004<, 0
    0x00000006 load **u8 >|5| 0x00000005<
    0x00000007 uge *u8 >|5| 0x00000002<, *u8 >|5| 0x00000006<
    0x00000008 br |6|
  BASICBLOCK |6|
    0x00000000 phi2 |3| -> bool false, |5| -> *u8 >|5| 0x00000007<
    0x00000001 cbr bool >|6| 0x00000000<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|7| 0x00000000<, 0
    0x00000002 load **u8 >|7| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|7| 0x00000003<
    0x00000005 memb *__unk_type_kind >|7| 0x00000004<, 0
    0x00000006 load **u8 >|7| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|7| 0x00000007<
    0x00000009 memb *__unk_type_kind >|7| 0x00000008<, 2
    0x0000000A load *u64 >|7| 0x00000009<
    0x0000000B i2p u64 >|7| 0x0000000A< to *s8
    0x0000000C bc *s8 >|7| 0x0000000B< to *u8
    0x0000000D add *u8 >|7| 0x00000006<, *u8 >|7| 0x0000000C<
    0x0000000E ult *u8 >|7| 0x00000002<, *u8 >|7| 0x0000000D<
    0x0000000F br |8|
  BASICBLOCK |8|
    0x00000000 phi2 |6| -> bool false, |7| -> *u8 >|7| 0x0000000E<
    0x00000001 cbr bool >|8| 0x00000000<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|9| 0x00000000<, 1
    0x00000002 load *u64 >|9| 0x00000001<
    0x00000003 malloc u8 * u64 >|9| 0x00000002<
    0x00000004 var **u8 0x00000002
    0x00000005 store **u8 >|9| 0x00000004<, *u8 >|9| 0x00000003<
    0x00000006 var **u8 0x00000002
    0x00000007 load **u8 >|9| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000001
    0x00000009 memb *__unk_type_kind >|9| 0x00000008<, 0
    0x0000000A load **u8 >|9| 0x00000009<
    0x0000000B var *__unk_type_kind 0x00000001
    0x0000000C memb *__unk_type_kind >|9| 0x0000000B<, 1
    0x0000000D load *u64 >|9| 0x0000000C<
    0x0000000E bc *u8 >|9| 0x00000007< to *s8
    0x0000000F bc *u8 >|9| 0x0000000A< to *s8
    0x00000010 call aL8 "memcpy" (*s8 >|9| 0x0000000E<, *s8 >|9| 0x0000000F<, u64 >|9| 0x0000000D<) *s8
    0x00000011 var **__unk_type_kind 0x00000000
    0x00000012 load **__unk_type_kind >|9| 0x00000011<
    0x00000013 memb *__unk_type_kind >|9| 0x00000012<, 0
    0x00000014 load **u8 >|9| 0x00000013<
    0x00000015 free *u8 >|9| 0x00000014<
    0x00000016 var **u8 0x00000002
    0x00000017 load **u8 >|9| 0x00000016<
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|9| 0x00000018<
    0x0000001A memb *__unk_type_kind >|9| 0x00000019<, 0
    0x0000001B store **u8 >|9| 0x0000001A<, *u8 >|9| 0x00000017<
    0x0000001C var *__unk_type_kind 0x00000001
    0x0000001D memb *__unk_type_kind >|9| 0x0000001C<, 1
    0x0000001E load *u64 >|9| 0x0000001D<
    0x0000001F var **__unk_type_kind 0x00000000
    0x00000020 load **__unk_type_kind >|9| 0x0000001F<
    0x00000021 memb *__unk_type_kind >|9| 0x00000020<, 1
    0x00000022 store *u64 >|9| 0x00000021<, u64 >|9| 0x0000001E<
    0x00000023 var *__unk_type_kind 0x00000001
    0x00000024 memb *__unk_type_kind >|9| 0x00000023<, 2
    0x00000025 load *u64 >|9| 0x00000024<
    0x00000026 var **__unk_type_kind 0x00000000
    0x00000027 load **__unk_type_kind >|9| 0x00000026<
    0x00000028 memb *__unk_type_kind >|9| 0x00000027<, 2
    0x00000029 store *u64 >|9| 0x00000028<, u64 >|9| 0x00000025<
    0x0000002A var **__unk_type_kind 0x00000000
    0x0000002B load **__unk_type_kind >|9| 0x0000002A<
    0x0000002C memb *__unk_type_kind >|9| 0x0000002B<, 3
    0x0000002D store *u64 >|9| 0x0000002C<, u64 1
    0x0000002E ret
  BASICBLOCK |10|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|10| 0x00000000<
    0x00000002 call a6A "__defer__" (*__unk_type_kind >|10| 0x00000001<) void
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|10| 0x00000003<, 0
    0x00000005 load **u8 >|10| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|10| 0x00000006<
    0x00000008 memb *__unk_type_kind >|10| 0x00000007<, 0
    0x00000009 store **u8 >|10| 0x00000008<, *u8 >|10| 0x00000005<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|10| 0x0000000A<, 1
    0x0000000C load *u64 >|10| 0x0000000B<
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|10| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|10| 0x0000000E<, 1
    0x00000010 store *u64 >|10| 0x0000000F<, u64 >|10| 0x0000000C<
    0x00000011 var *__unk_type_kind 0x00000001
    0x00000012 memb *__unk_type_kind >|10| 0x00000011<, 2
    0x00000013 load *u64 >|10| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|10| 0x00000014<
    0x00000016 memb *__unk_type_kind >|10| 0x00000015<, 2
    0x00000017 store *u64 >|10| 0x00000016<, u64 >|10| 0x00000013<
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|10| 0x00000018<
    0x0000001A memb *__unk_type_kind >|10| 0x00000019<, 3
    0x0000001B store *u64 >|10| 0x0000001A<, u64 0
    0x0000001C ret
  BASICBLOCK |11|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|11| 0x00000000<
    0x00000002 memb *__unk_type_kind >|11| 0x00000001<, 3
    0x00000003 store *u64 >|11| 0x00000002<, u64 3
    0x00000004 br |13|
  BASICBLOCK |12|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|12| 0x00000000<
    0x00000002 memb *__unk_type_kind >|12| 0x00000001<, 3
    0x00000003 store *u64 >|12| 0x00000002<, u64 0
    0x00000004 br |13|
  BASICBLOCK |13|
    0x00000000 ret
fn __equals__ a9A -> bool
    {9 BBs, 53 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 1
    0x00000002 load *u64 >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 1
    0x00000005 load *u64 >|0| 0x00000004<
    0x00000006 neq u64 >|0| 0x00000002<, u64 >|0| 0x00000005<
    0x00000007 cbr u64 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|1| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000001
    0x00000003 call a6A "__defer__" (*__unk_type_kind >|1| 0x00000002<) void
    0x00000004 ret bool false
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000002
    0x00000001 store *u64 >|2| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|3| 0x00000000<, 1
    0x00000002 load *u64 >|3| 0x00000001<
    0x00000003 load *u64 >|2| 0x00000000<
    0x00000004 ult u64 >|3| 0x00000003<, u64 >|3| 0x00000002<
    0x00000005 cbr u64 >|3| 0x00000004<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 0
    0x00000002 var *u64 0x00000002
    0x00000003 load *u64 >|4| 0x00000002<
    0x00000004 load **u8 >|4| 0x00000001<
    0x00000005 arracc *u8 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 load *u8 >|4| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000001
    0x00000008 memb *__unk_type_kind >|4| 0x00000007<, 0
    0x00000009 var *u64 0x00000002
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B load **u8 >|4| 0x00000008<
    0x0000000C arracc *u8 >|4| 0x0000000B<, u64 >|4| 0x0000000A<
    0x0000000D load *u8 >|4| 0x0000000C<
    0x0000000E neq u8 >|4| 0x00000006<, u8 >|4| 0x0000000D<
    0x0000000F cbr u8 >|4| 0x0000000E<, |7|, |8|
  BASICBLOCK |5|
    0x00000000 load *u64 >|2| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|2| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|6| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000001
    0x00000003 call a6A "__defer__" (*__unk_type_kind >|6| 0x00000002<) void
    0x00000004 ret bool true
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|7| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000001
    0x00000003 call a6A "__defer__" (*__unk_type_kind >|7| 0x00000002<) void
    0x00000004 ret bool false
  BASICBLOCK |8|
    0x00000000 br |5|
fn __add__ aAA -> __unk_type_kind
    {1 BBs, 61 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 1
    0x00000002 load *u64 >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 1
    0x00000005 load *u64 >|0| 0x00000004<
    0x00000006 add u64 >|0| 0x00000002<, u64 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000002
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *u64 >|0| 0x00000008<, u64 >|0| 0x00000006<
    0x0000000A var *__unk_type_kind 0x00000002
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 1
    0x0000000C load *u64 >|0| 0x0000000B<
    0x0000000D malloc u8 * u64 >|0| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000002
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 0
    0x00000010 store **u8 >|0| 0x0000000F<, *u8 >|0| 0x0000000D<
    0x00000011 var *__unk_type_kind 0x00000002
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 0
    0x00000013 load **u8 >|0| 0x00000012<
    0x00000014 var *__unk_type_kind 0x00000000
    0x00000015 memb *__unk_type_kind >|0| 0x00000014<, 0
    0x00000016 load **u8 >|0| 0x00000015<
    0x00000017 var *__unk_type_kind 0x00000000
    0x00000018 memb *__unk_type_kind >|0| 0x00000017<, 1
    0x00000019 load *u64 >|0| 0x00000018<
    0x0000001A bc *u8 >|0| 0x00000013< to *s8
    0x0000001B bc *u8 >|0| 0x00000016< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|0| 0x0000001A<, *s8 >|0| 0x0000001B<, u64 >|0| 0x00000019<) *s8
    0x0000001D var *__unk_type_kind 0x00000002
    0x0000001E memb *__unk_type_kind >|0| 0x0000001D<, 0
    0x0000001F var *__unk_type_kind 0x00000000
    0x00000020 memb *__unk_type_kind >|0| 0x0000001F<, 1
    0x00000021 load *u64 >|0| 0x00000020<
    0x00000022 load **u8 >|0| 0x0000001E<
    0x00000023 arracc *u8 >|0| 0x00000022<, u64 >|0| 0x00000021<
    0x00000024 var *__unk_type_kind 0x00000001
    0x00000025 memb *__unk_type_kind >|0| 0x00000024<, 0
    0x00000026 load **u8 >|0| 0x00000025<
    0x00000027 var *__unk_type_kind 0x00000001
    0x00000028 memb *__unk_type_kind >|0| 0x00000027<, 1
    0x00000029 load *u64 >|0| 0x00000028<
    0x0000002A bc *u8 >|0| 0x00000023< to *s8
    0x0000002B bc *u8 >|0| 0x00000026< to *s8
    0x0000002C call aL8 "memcpy" (*s8 >|0| 0x0000002A<, *s8 >|0| 0x0000002B<, u64 >|0| 0x00000029<) *s8
    0x0000002D var *__unk_type_kind 0x00000002
    0x0000002E memb *__unk_type_kind >|0| 0x0000002D<, 1
    0x0000002F load *u64 >|0| 0x0000002E<
    0x00000030 var *__unk_type_kind 0x00000002
    0x00000031 memb *__unk_type_kind >|0| 0x00000030<, 2
    0x00000032 store *u64 >|0| 0x00000031<, u64 >|0| 0x0000002F<
    0x00000033 var *__unk_type_kind 0x00000002
    0x00000034 memb *__unk_type_kind >|0| 0x00000033<, 3
    0x00000035 store *u64 >|0| 0x00000034<, u64 2
    0x00000036 var *__unk_type_kind 0x00000000
    0x00000037 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000036<) void
    0x00000038 var *__unk_type_kind 0x00000001
    0x00000039 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000038<) void
    0x0000003A var *__unk_type_kind 0x00000002
    0x0000003B load *__unk_type_kind >|0| 0x0000003A<
    0x0000003C ret __unk_type_kind >|0| 0x0000003B<
fn __multiply__ aBA -> __unk_type_kind
    {15 BBs, 157 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 __unk_type_kind]
    [0x00000000 u64]
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 sgt s32 >|0| 0x00000001<, s32 0
    0x00000003 cbr s32 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 1
    0x00000002 load *u64 >|1| 0x00000001<
    0x00000003 var *s32 0x00000001
    0x00000004 load *s32 >|1| 0x00000003<
    0x00000005 zext s32 >|1| 0x00000004< to u64
    0x00000006 mul u64 >|1| 0x00000002<, u64 >|1| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000002
    0x00000008 memb *__unk_type_kind >|1| 0x00000007<, 1
    0x00000009 store *u64 >|1| 0x00000008<, u64 >|1| 0x00000006<
    0x0000000A var *__unk_type_kind 0x00000002
    0x0000000B memb *__unk_type_kind >|1| 0x0000000A<, 1
    0x0000000C load *u64 >|1| 0x0000000B<
    0x0000000D malloc u8 * u64 >|1| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000002
    0x0000000F memb *__unk_type_kind >|1| 0x0000000E<, 0
    0x00000010 store **u8 >|1| 0x0000000F<, *u8 >|1| 0x0000000D<
    0x00000011 var *u64 0x00000003
    0x00000012 store *u64 >|1| 0x00000011<, u64 0
    0x00000013 br |4|
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 eq s32 >|2| 0x00000001<, s32 0
    0x00000003 cbr s32 >|2| 0x00000002<, |8|, |9|
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|3| 0x00000000<, 1
    0x00000002 load *u64 >|3| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000002
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 2
    0x00000005 store *u64 >|3| 0x00000004<, u64 >|3| 0x00000002<
    0x00000006 var *__unk_type_kind 0x00000002
    0x00000007 memb *__unk_type_kind >|3| 0x00000006<, 3
    0x00000008 store *u64 >|3| 0x00000007<, u64 2
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A call a6A "__defer__" (*__unk_type_kind >|3| 0x00000009<) void
    0x0000000B var *__unk_type_kind 0x00000002
    0x0000000C load *__unk_type_kind >|3| 0x0000000B<
    0x0000000D ret __unk_type_kind >|3| 0x0000000C<
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 zext s32 >|4| 0x00000001< to u64
    0x00000003 load *u64 >|1| 0x00000011<
    0x00000004 ult u64 >|4| 0x00000003<, u64 >|4| 0x00000002<
    0x00000005 cbr u64 >|4| 0x00000004<, |5|, |7|
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|5| 0x00000000<, 0
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|5| 0x00000002<, 1
    0x00000004 load *u64 >|5| 0x00000003<
    0x00000005 var *u64 0x00000003
    0x00000006 load *u64 >|5| 0x00000005<
    0x00000007 mul u64 >|5| 0x00000004<, u64 >|5| 0x00000006<
    0x00000008 load **u8 >|5| 0x00000001<
    0x00000009 arracc *u8 >|5| 0x00000008<, u64 >|5| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000000
    0x0000000B memb *__unk_type_kind >|5| 0x0000000A<, 0
    0x0000000C load **u8 >|5| 0x0000000B<
    0x0000000D var *__unk_type_kind 0x00000000
    0x0000000E memb *__unk_type_kind >|5| 0x0000000D<, 1
    0x0000000F load *u64 >|5| 0x0000000E<
    0x00000010 bc *u8 >|5| 0x00000009< to *s8
    0x00000011 bc *u8 >|5| 0x0000000C< to *s8
    0x00000012 call aL8 "memcpy" (*s8 >|5| 0x00000010<, *s8 >|5| 0x00000011<, u64 >|5| 0x0000000F<) *s8
    0x00000013 br |6|
  BASICBLOCK |6|
    0x00000000 load *u64 >|1| 0x00000011<
    0x00000001 add u64 >|6| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000011<, u64 >|6| 0x00000001<
    0x00000003 br |4|
  BASICBLOCK |7|
    0x00000000 br |3|
  BASICBLOCK |8|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|8| 0x00000000<, 0
    0x00000002 bc null to *u8
    0x00000003 store **u8 >|8| 0x00000001<, *u8 >|8| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 memb *__unk_type_kind >|8| 0x00000004<, 1
    0x00000006 zext s32 0 to u64
    0x00000007 store *u64 >|8| 0x00000005<, u64 >|8| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000002
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 2
    0x0000000A zext s32 0 to u64
    0x0000000B store *u64 >|8| 0x00000009<, u64 >|8| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000002
    0x0000000D memb *__unk_type_kind >|8| 0x0000000C<, 3
    0x0000000E store *u64 >|8| 0x0000000D<, u64 0
    0x0000000F var *__unk_type_kind 0x00000000
    0x00000010 call a6A "__defer__" (*__unk_type_kind >|8| 0x0000000F<) void
    0x00000011 var *__unk_type_kind 0x00000002
    0x00000012 load *__unk_type_kind >|8| 0x00000011<
    0x00000013 ret __unk_type_kind >|8| 0x00000012<
  BASICBLOCK |9|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|9| 0x00000000<
    0x00000002 sub s32 0, s32 >|9| 0x00000001<
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|9| 0x00000003<, s32 >|9| 0x00000002<
    0x00000005 var *__unk_type_kind 0x00000000
    0x00000006 memb *__unk_type_kind >|9| 0x00000005<, 1
    0x00000007 load *u64 >|9| 0x00000006<
    0x00000008 var *s32 0x00000001
    0x00000009 load *s32 >|9| 0x00000008<
    0x0000000A zext s32 >|9| 0x00000009< to u64
    0x0000000B mul u64 >|9| 0x00000007<, u64 >|9| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000002
    0x0000000D memb *__unk_type_kind >|9| 0x0000000C<, 1
    0x0000000E store *u64 >|9| 0x0000000D<, u64 >|9| 0x0000000B<
    0x0000000F var *__unk_type_kind 0x00000002
    0x00000010 memb *__unk_type_kind >|9| 0x0000000F<, 1
    0x00000011 load *u64 >|9| 0x00000010<
    0x00000012 malloc u8 * u64 >|9| 0x00000011<
    0x00000013 var *__unk_type_kind 0x00000002
    0x00000014 memb *__unk_type_kind >|9| 0x00000013<, 0
    0x00000015 store **u8 >|9| 0x00000014<, *u8 >|9| 0x00000012<
    0x00000016 var *__unk_type_kind 0x00000000
    0x00000017 call aKA "reversed" (*__unk_type_kind >|9| 0x00000016<) __unk_type_kind
    0x00000018 var *__unk_type_kind 0x00000004
    0x00000019 varzi 0x00000004
    0x0000001A call a8A "__assign__" (*__unk_type_kind >|9| 0x00000018<, __unk_type_kind >|9| 0x00000017<) void
    0x0000001B var *u64 0x00000005
    0x0000001C store *u64 >|9| 0x0000001B<, u64 0
    0x0000001D br |11|
  BASICBLOCK |10|
    0x00000000 br |3|
  BASICBLOCK |11|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|11| 0x00000000<
    0x00000002 zext s32 >|11| 0x00000001< to u64
    0x00000003 load *u64 >|9| 0x0000001B<
    0x00000004 ult u64 >|11| 0x00000003<, u64 >|11| 0x00000002<
    0x00000005 cbr u64 >|11| 0x00000004<, |12|, |14|
  BASICBLOCK |12|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|12| 0x00000000<, 0
    0x00000002 var *__unk_type_kind 0x00000004
    0x00000003 memb *__unk_type_kind >|12| 0x00000002<, 1
    0x00000004 load *u64 >|12| 0x00000003<
    0x00000005 var *u64 0x00000005
    0x00000006 load *u64 >|12| 0x00000005<
    0x00000007 mul u64 >|12| 0x00000004<, u64 >|12| 0x00000006<
    0x00000008 load **u8 >|12| 0x00000001<
    0x00000009 arracc *u8 >|12| 0x00000008<, u64 >|12| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000004
    0x0000000B memb *__unk_type_kind >|12| 0x0000000A<, 0
    0x0000000C load **u8 >|12| 0x0000000B<
    0x0000000D var *__unk_type_kind 0x00000004
    0x0000000E memb *__unk_type_kind >|12| 0x0000000D<, 1
    0x0000000F load *u64 >|12| 0x0000000E<
    0x00000010 bc *u8 >|12| 0x00000009< to *s8
    0x00000011 bc *u8 >|12| 0x0000000C< to *s8
    0x00000012 call aL8 "memcpy" (*s8 >|12| 0x00000010<, *s8 >|12| 0x00000011<, u64 >|12| 0x0000000F<) *s8
    0x00000013 br |13|
  BASICBLOCK |13|
    0x00000000 load *u64 >|9| 0x0000001B<
    0x00000001 add u64 >|13| 0x00000000<, u64 1
    0x00000002 store *u64 >|9| 0x0000001B<, u64 >|13| 0x00000001<
    0x00000003 br |11|
  BASICBLOCK |14|
    0x00000000 var *__unk_type_kind 0x00000004
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|14| 0x00000000<) void
    0x00000002 br |10|
fn __modulus__ aCA -> __unk_type_kind
    {3 BBs, 110 INSTRs, 4 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 __unk_type_kind]
    [0x00000003 s64]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aHA "first" (*__unk_type_kind >|0| 0x00000000<, u8 37) s64
    0x00000002 var *s64 0x00000003
    0x00000003 store *s64 >|0| 0x00000002<, s64 >|0| 0x00000001<
    0x00000004 var *s64 0x00000003
    0x00000005 load *s64 >|0| 0x00000004<
    0x00000006 eq s64 >|0| 0x00000005<, s64 -1
    0x00000007 cbr s64 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|1| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 load *__unk_type_kind >|1| 0x00000002<
    0x00000004 ret __unk_type_kind >|1| 0x00000003<
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 1
    0x00000002 load *u64 >|2| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|2| 0x00000003<, 1
    0x00000005 load *u64 >|2| 0x00000004<
    0x00000006 add u64 >|2| 0x00000002<, u64 >|2| 0x00000005<
    0x00000007 zext s32 1 to u64
    0x00000008 sub u64 >|2| 0x00000006<, u64 >|2| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000002
    0x0000000A memb *__unk_type_kind >|2| 0x00000009<, 1
    0x0000000B store *u64 >|2| 0x0000000A<, u64 >|2| 0x00000008<
    0x0000000C var *__unk_type_kind 0x00000002
    0x0000000D memb *__unk_type_kind >|2| 0x0000000C<, 1
    0x0000000E load *u64 >|2| 0x0000000D<
    0x0000000F var *__unk_type_kind 0x00000002
    0x00000010 memb *__unk_type_kind >|2| 0x0000000F<, 2
    0x00000011 store *u64 >|2| 0x00000010<, u64 >|2| 0x0000000E<
    0x00000012 var *__unk_type_kind 0x00000002
    0x00000013 memb *__unk_type_kind >|2| 0x00000012<, 3
    0x00000014 store *u64 >|2| 0x00000013<, u64 2
    0x00000015 var *__unk_type_kind 0x00000002
    0x00000016 memb *__unk_type_kind >|2| 0x00000015<, 1
    0x00000017 load *u64 >|2| 0x00000016<
    0x00000018 malloc u8 * u64 >|2| 0x00000017<
    0x00000019 var *__unk_type_kind 0x00000002
    0x0000001A memb *__unk_type_kind >|2| 0x00000019<, 0
    0x0000001B store **u8 >|2| 0x0000001A<, *u8 >|2| 0x00000018<
    0x0000001C var *__unk_type_kind 0x00000002
    0x0000001D memb *__unk_type_kind >|2| 0x0000001C<, 0
    0x0000001E load **u8 >|2| 0x0000001D<
    0x0000001F var *__unk_type_kind 0x00000000
    0x00000020 memb *__unk_type_kind >|2| 0x0000001F<, 0
    0x00000021 load **u8 >|2| 0x00000020<
    0x00000022 var *s64 0x00000003
    0x00000023 load *s64 >|2| 0x00000022<
    0x00000024 bc *u8 >|2| 0x0000001E< to *s8
    0x00000025 bc *u8 >|2| 0x00000021< to *s8
    0x00000026 reinterp s64 >|2| 0x00000023< to u64
    0x00000027 call aL8 "memcpy" (*s8 >|2| 0x00000024<, *s8 >|2| 0x00000025<, u64 >|2| 0x00000026<) *s8
    0x00000028 var *__unk_type_kind 0x00000002
    0x00000029 memb *__unk_type_kind >|2| 0x00000028<, 0
    0x0000002A var *s64 0x00000003
    0x0000002B load *s64 >|2| 0x0000002A<
    0x0000002C load **u8 >|2| 0x00000029<
    0x0000002D arracc *u8 >|2| 0x0000002C<, s64 >|2| 0x0000002B<
    0x0000002E var *__unk_type_kind 0x00000001
    0x0000002F memb *__unk_type_kind >|2| 0x0000002E<, 0
    0x00000030 load **u8 >|2| 0x0000002F<
    0x00000031 var *__unk_type_kind 0x00000001
    0x00000032 memb *__unk_type_kind >|2| 0x00000031<, 1
    0x00000033 load *u64 >|2| 0x00000032<
    0x00000034 bc *u8 >|2| 0x0000002D< to *s8
    0x00000035 bc *u8 >|2| 0x00000030< to *s8
    0x00000036 call aL8 "memcpy" (*s8 >|2| 0x00000034<, *s8 >|2| 0x00000035<, u64 >|2| 0x00000033<) *s8
    0x00000037 var *__unk_type_kind 0x00000002
    0x00000038 memb *__unk_type_kind >|2| 0x00000037<, 0
    0x00000039 var *s64 0x00000003
    0x0000003A load *s64 >|2| 0x00000039<
    0x0000003B var *__unk_type_kind 0x00000001
    0x0000003C memb *__unk_type_kind >|2| 0x0000003B<, 1
    0x0000003D load *u64 >|2| 0x0000003C<
    0x0000003E reinterp u64 >|2| 0x0000003D< to s64
    0x0000003F add s64 >|2| 0x0000003A<, s64 >|2| 0x0000003E<
    0x00000040 load **u8 >|2| 0x00000038<
    0x00000041 arracc *u8 >|2| 0x00000040<, s64 >|2| 0x0000003F<
    0x00000042 var *__unk_type_kind 0x00000000
    0x00000043 memb *__unk_type_kind >|2| 0x00000042<, 0
    0x00000044 var *s64 0x00000003
    0x00000045 load *s64 >|2| 0x00000044<
    0x00000046 add s64 >|2| 0x00000045<, s64 1
    0x00000047 load **u8 >|2| 0x00000043<
    0x00000048 arracc *u8 >|2| 0x00000047<, s64 >|2| 0x00000046<
    0x00000049 var *__unk_type_kind 0x00000000
    0x0000004A memb *__unk_type_kind >|2| 0x00000049<, 1
    0x0000004B load *u64 >|2| 0x0000004A<
    0x0000004C var *s64 0x00000003
    0x0000004D load *s64 >|2| 0x0000004C<
    0x0000004E reinterp s64 >|2| 0x0000004D< to u64
    0x0000004F sub u64 >|2| 0x0000004B<, u64 >|2| 0x0000004E<
    0x00000050 reinterp s64 1 to u64
    0x00000051 sub u64 >|2| 0x0000004F<, u64 >|2| 0x00000050<
    0x00000052 bc *u8 >|2| 0x00000041< to *s8
    0x00000053 bc *u8 >|2| 0x00000048< to *s8
    0x00000054 call aL8 "memcpy" (*s8 >|2| 0x00000052<, *s8 >|2| 0x00000053<, u64 >|2| 0x00000051<) *s8
    0x00000055 var *__unk_type_kind 0x00000000
    0x00000056 load *__unk_type_kind >|2| 0x00000055<
    0x00000057 call a7A "__pass__" (__unk_type_kind >|2| 0x00000056<) __unk_type_kind
    0x00000058 var *__unk_type_kind 0x00000000
    0x00000059 store *__unk_type_kind >|2| 0x00000058<, __unk_type_kind >|2| 0x00000057<
    0x0000005A var *__unk_type_kind 0x00000000
    0x0000005B call a6A "__defer__" (*__unk_type_kind >|2| 0x0000005A<) void
    0x0000005C var *__unk_type_kind 0x00000001
    0x0000005D call a6A "__defer__" (*__unk_type_kind >|2| 0x0000005C<) void
    0x0000005E var *__unk_type_kind 0x00000002
    0x0000005F load *__unk_type_kind >|2| 0x0000005E<
    0x00000060 ret __unk_type_kind >|2| 0x0000005F<
fn __modulus__ aDA -> __unk_type_kind
    {3 BBs, 111 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 __unk_type_kind]
    [0x00000003 s64]
    [0x00000004 [12] u8]
    [0x00000005 u64]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aHA "first" (*__unk_type_kind >|0| 0x00000000<, u8 37) s64
    0x00000002 var *s64 0x00000003
    0x00000003 store *s64 >|0| 0x00000002<, s64 >|0| 0x00000001<
    0x00000004 var *s64 0x00000003
    0x00000005 load *s64 >|0| 0x00000004<
    0x00000006 eq s64 >|0| 0x00000005<, s64 -1
    0x00000007 cbr s64 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 ret __unk_type_kind >|1| 0x00000001<
  BASICBLOCK |2|
    0x00000000 var *[12] u8 0x00000004
    0x00000001 bc *[12] u8 >|2| 0x00000000< to *u8
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|2| 0x00000002<
    0x00000004 call aH8 "sprintf" (*u8 >|2| 0x00000001<, cstroflen 3 "%d", s32 >|2| 0x00000003<) s32
    0x00000005 var *[12] u8 0x00000004
    0x00000006 bc *[12] u8 >|2| 0x00000005< to *u8
    0x00000007 call ae8 "strlen" (*u8 >|2| 0x00000006<) u64
    0x00000008 var *u64 0x00000005
    0x00000009 store *u64 >|2| 0x00000008<, u64 >|2| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000000
    0x0000000B memb *__unk_type_kind >|2| 0x0000000A<, 1
    0x0000000C load *u64 >|2| 0x0000000B<
    0x0000000D var *u64 0x00000005
    0x0000000E load *u64 >|2| 0x0000000D<
    0x0000000F add u64 >|2| 0x0000000C<, u64 >|2| 0x0000000E<
    0x00000010 sub u64 >|2| 0x0000000F<, u64 1
    0x00000011 var *__unk_type_kind 0x00000002
    0x00000012 memb *__unk_type_kind >|2| 0x00000011<, 1
    0x00000013 store *u64 >|2| 0x00000012<, u64 >|2| 0x00000010<
    0x00000014 var *__unk_type_kind 0x00000002
    0x00000015 memb *__unk_type_kind >|2| 0x00000014<, 1
    0x00000016 load *u64 >|2| 0x00000015<
    0x00000017 var *__unk_type_kind 0x00000002
    0x00000018 memb *__unk_type_kind >|2| 0x00000017<, 2
    0x00000019 store *u64 >|2| 0x00000018<, u64 >|2| 0x00000016<
    0x0000001A var *__unk_type_kind 0x00000002
    0x0000001B memb *__unk_type_kind >|2| 0x0000001A<, 3
    0x0000001C store *u64 >|2| 0x0000001B<, u64 2
    0x0000001D var *__unk_type_kind 0x00000002
    0x0000001E memb *__unk_type_kind >|2| 0x0000001D<, 1
    0x0000001F load *u64 >|2| 0x0000001E<
    0x00000020 malloc u8 * u64 >|2| 0x0000001F<
    0x00000021 var *__unk_type_kind 0x00000002
    0x00000022 memb *__unk_type_kind >|2| 0x00000021<, 0
    0x00000023 store **u8 >|2| 0x00000022<, *u8 >|2| 0x00000020<
    0x00000024 var *__unk_type_kind 0x00000002
    0x00000025 memb *__unk_type_kind >|2| 0x00000024<, 0
    0x00000026 load **u8 >|2| 0x00000025<
    0x00000027 var *__unk_type_kind 0x00000000
    0x00000028 memb *__unk_type_kind >|2| 0x00000027<, 0
    0x00000029 load **u8 >|2| 0x00000028<
    0x0000002A var *s64 0x00000003
    0x0000002B load *s64 >|2| 0x0000002A<
    0x0000002C bc *u8 >|2| 0x00000026< to *s8
    0x0000002D bc *u8 >|2| 0x00000029< to *s8
    0x0000002E reinterp s64 >|2| 0x0000002B< to u64
    0x0000002F call aL8 "memcpy" (*s8 >|2| 0x0000002C<, *s8 >|2| 0x0000002D<, u64 >|2| 0x0000002E<) *s8
    0x00000030 var *__unk_type_kind 0x00000002
    0x00000031 memb *__unk_type_kind >|2| 0x00000030<, 0
    0x00000032 var *s64 0x00000003
    0x00000033 load *s64 >|2| 0x00000032<
    0x00000034 load **u8 >|2| 0x00000031<
    0x00000035 arracc *u8 >|2| 0x00000034<, s64 >|2| 0x00000033<
    0x00000036 var *[12] u8 0x00000004
    0x00000037 bc *[12] u8 >|2| 0x00000036< to *u8
    0x00000038 var *u64 0x00000005
    0x00000039 load *u64 >|2| 0x00000038<
    0x0000003A bc *u8 >|2| 0x00000035< to *s8
    0x0000003B bc *u8 >|2| 0x00000037< to *s8
    0x0000003C call aL8 "memcpy" (*s8 >|2| 0x0000003A<, *s8 >|2| 0x0000003B<, u64 >|2| 0x00000039<) *s8
    0x0000003D var *__unk_type_kind 0x00000002
    0x0000003E memb *__unk_type_kind >|2| 0x0000003D<, 0
    0x0000003F var *s64 0x00000003
    0x00000040 load *s64 >|2| 0x0000003F<
    0x00000041 var *u64 0x00000005
    0x00000042 load *u64 >|2| 0x00000041<
    0x00000043 reinterp u64 >|2| 0x00000042< to s64
    0x00000044 add s64 >|2| 0x00000040<, s64 >|2| 0x00000043<
    0x00000045 load **u8 >|2| 0x0000003E<
    0x00000046 arracc *u8 >|2| 0x00000045<, s64 >|2| 0x00000044<
    0x00000047 var *__unk_type_kind 0x00000000
    0x00000048 memb *__unk_type_kind >|2| 0x00000047<, 0
    0x00000049 var *s64 0x00000003
    0x0000004A load *s64 >|2| 0x00000049<
    0x0000004B add s64 >|2| 0x0000004A<, s64 1
    0x0000004C load **u8 >|2| 0x00000048<
    0x0000004D arracc *u8 >|2| 0x0000004C<, s64 >|2| 0x0000004B<
    0x0000004E var *__unk_type_kind 0x00000000
    0x0000004F memb *__unk_type_kind >|2| 0x0000004E<, 1
    0x00000050 load *u64 >|2| 0x0000004F<
    0x00000051 var *s64 0x00000003
    0x00000052 load *s64 >|2| 0x00000051<
    0x00000053 reinterp s64 >|2| 0x00000052< to u64
    0x00000054 sub u64 >|2| 0x00000050<, u64 >|2| 0x00000053<
    0x00000055 reinterp s64 1 to u64
    0x00000056 sub u64 >|2| 0x00000054<, u64 >|2| 0x00000055<
    0x00000057 bc *u8 >|2| 0x00000046< to *s8
    0x00000058 bc *u8 >|2| 0x0000004D< to *s8
    0x00000059 call aL8 "memcpy" (*s8 >|2| 0x00000057<, *s8 >|2| 0x00000058<, u64 >|2| 0x00000056<) *s8
    0x0000005A var *__unk_type_kind 0x00000000
    0x0000005B load *__unk_type_kind >|2| 0x0000005A<
    0x0000005C call a7A "__pass__" (__unk_type_kind >|2| 0x0000005B<) __unk_type_kind
    0x0000005D var *__unk_type_kind 0x00000000
    0x0000005E store *__unk_type_kind >|2| 0x0000005D<, __unk_type_kind >|2| 0x0000005C<
    0x0000005F var *__unk_type_kind 0x00000000
    0x00000060 call a6A "__defer__" (*__unk_type_kind >|2| 0x0000005F<) void
    0x00000061 var *__unk_type_kind 0x00000002
    0x00000062 load *__unk_type_kind >|2| 0x00000061<
    0x00000063 ret __unk_type_kind >|2| 0x00000062<
fn __modulus__ aEA -> __unk_type_kind
    {3 BBs, 111 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 d]
    [0x00000002 __unk_type_kind]
    [0x00000003 s64]
    [0x00000004 [24] u8]
    [0x00000005 u64]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aHA "first" (*__unk_type_kind >|0| 0x00000000<, u8 37) s64
    0x00000002 var *s64 0x00000003
    0x00000003 store *s64 >|0| 0x00000002<, s64 >|0| 0x00000001<
    0x00000004 var *s64 0x00000003
    0x00000005 load *s64 >|0| 0x00000004<
    0x00000006 eq s64 >|0| 0x00000005<, s64 -1
    0x00000007 cbr s64 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 ret __unk_type_kind >|1| 0x00000001<
  BASICBLOCK |2|
    0x00000000 var *[24] u8 0x00000004
    0x00000001 bc *[24] u8 >|2| 0x00000000< to *u8
    0x00000002 var *d 0x00000001
    0x00000003 load *d >|2| 0x00000002<
    0x00000004 call aH8 "sprintf" (*u8 >|2| 0x00000001<, cstroflen 3 "%f", d >|2| 0x00000003<) s32
    0x00000005 var *[24] u8 0x00000004
    0x00000006 bc *[24] u8 >|2| 0x00000005< to *u8
    0x00000007 call ae8 "strlen" (*u8 >|2| 0x00000006<) u64
    0x00000008 var *u64 0x00000005
    0x00000009 store *u64 >|2| 0x00000008<, u64 >|2| 0x00000007<
    0x0000000A var *__unk_type_kind 0x00000000
    0x0000000B memb *__unk_type_kind >|2| 0x0000000A<, 1
    0x0000000C load *u64 >|2| 0x0000000B<
    0x0000000D var *u64 0x00000005
    0x0000000E load *u64 >|2| 0x0000000D<
    0x0000000F add u64 >|2| 0x0000000C<, u64 >|2| 0x0000000E<
    0x00000010 sub u64 >|2| 0x0000000F<, u64 1
    0x00000011 var *__unk_type_kind 0x00000002
    0x00000012 memb *__unk_type_kind >|2| 0x00000011<, 1
    0x00000013 store *u64 >|2| 0x00000012<, u64 >|2| 0x00000010<
    0x00000014 var *__unk_type_kind 0x00000002
    0x00000015 memb *__unk_type_kind >|2| 0x00000014<, 1
    0x00000016 load *u64 >|2| 0x00000015<
    0x00000017 var *__unk_type_kind 0x00000002
    0x00000018 memb *__unk_type_kind >|2| 0x00000017<, 2
    0x00000019 store *u64 >|2| 0x00000018<, u64 >|2| 0x00000016<
    0x0000001A var *__unk_type_kind 0x00000002
    0x0000001B memb *__unk_type_kind >|2| 0x0000001A<, 3
    0x0000001C store *u64 >|2| 0x0000001B<, u64 2
    0x0000001D var *__unk_type_kind 0x00000002
    0x0000001E memb *__unk_type_kind >|2| 0x0000001D<, 1
    0x0000001F load *u64 >|2| 0x0000001E<
    0x00000020 malloc u8 * u64 >|2| 0x0000001F<
    0x00000021 var *__unk_type_kind 0x00000002
    0x00000022 memb *__unk_type_kind >|2| 0x00000021<, 0
    0x00000023 store **u8 >|2| 0x00000022<, *u8 >|2| 0x00000020<
    0x00000024 var *__unk_type_kind 0x00000002
    0x00000025 memb *__unk_type_kind >|2| 0x00000024<, 0
    0x00000026 load **u8 >|2| 0x00000025<
    0x00000027 var *__unk_type_kind 0x00000000
    0x00000028 memb *__unk_type_kind >|2| 0x00000027<, 0
    0x00000029 load **u8 >|2| 0x00000028<
    0x0000002A var *s64 0x00000003
    0x0000002B load *s64 >|2| 0x0000002A<
    0x0000002C bc *u8 >|2| 0x00000026< to *s8
    0x0000002D bc *u8 >|2| 0x00000029< to *s8
    0x0000002E reinterp s64 >|2| 0x0000002B< to u64
    0x0000002F call aL8 "memcpy" (*s8 >|2| 0x0000002C<, *s8 >|2| 0x0000002D<, u64 >|2| 0x0000002E<) *s8
    0x00000030 var *__unk_type_kind 0x00000002
    0x00000031 memb *__unk_type_kind >|2| 0x00000030<, 0
    0x00000032 var *s64 0x00000003
    0x00000033 load *s64 >|2| 0x00000032<
    0x00000034 load **u8 >|2| 0x00000031<
    0x00000035 arracc *u8 >|2| 0x00000034<, s64 >|2| 0x00000033<
    0x00000036 var *[24] u8 0x00000004
    0x00000037 bc *[24] u8 >|2| 0x00000036< to *u8
    0x00000038 var *u64 0x00000005
    0x00000039 load *u64 >|2| 0x00000038<
    0x0000003A bc *u8 >|2| 0x00000035< to *s8
    0x0000003B bc *u8 >|2| 0x00000037< to *s8
    0x0000003C call aL8 "memcpy" (*s8 >|2| 0x0000003A<, *s8 >|2| 0x0000003B<, u64 >|2| 0x00000039<) *s8
    0x0000003D var *__unk_type_kind 0x00000002
    0x0000003E memb *__unk_type_kind >|2| 0x0000003D<, 0
    0x0000003F var *s64 0x00000003
    0x00000040 load *s64 >|2| 0x0000003F<
    0x00000041 var *u64 0x00000005
    0x00000042 load *u64 >|2| 0x00000041<
    0x00000043 reinterp u64 >|2| 0x00000042< to s64
    0x00000044 add s64 >|2| 0x00000040<, s64 >|2| 0x00000043<
    0x00000045 load **u8 >|2| 0x0000003E<
    0x00000046 arracc *u8 >|2| 0x00000045<, s64 >|2| 0x00000044<
    0x00000047 var *__unk_type_kind 0x00000000
    0x00000048 memb *__unk_type_kind >|2| 0x00000047<, 0
    0x00000049 var *s64 0x00000003
    0x0000004A load *s64 >|2| 0x00000049<
    0x0000004B add s64 >|2| 0x0000004A<, s64 1
    0x0000004C load **u8 >|2| 0x00000048<
    0x0000004D arracc *u8 >|2| 0x0000004C<, s64 >|2| 0x0000004B<
    0x0000004E var *__unk_type_kind 0x00000000
    0x0000004F memb *__unk_type_kind >|2| 0x0000004E<, 1
    0x00000050 load *u64 >|2| 0x0000004F<
    0x00000051 var *s64 0x00000003
    0x00000052 load *s64 >|2| 0x00000051<
    0x00000053 reinterp s64 >|2| 0x00000052< to u64
    0x00000054 sub u64 >|2| 0x00000050<, u64 >|2| 0x00000053<
    0x00000055 reinterp s64 1 to u64
    0x00000056 sub u64 >|2| 0x00000054<, u64 >|2| 0x00000055<
    0x00000057 bc *u8 >|2| 0x00000046< to *s8
    0x00000058 bc *u8 >|2| 0x0000004D< to *s8
    0x00000059 call aL8 "memcpy" (*s8 >|2| 0x00000057<, *s8 >|2| 0x00000058<, u64 >|2| 0x00000056<) *s8
    0x0000005A var *__unk_type_kind 0x00000000
    0x0000005B load *__unk_type_kind >|2| 0x0000005A<
    0x0000005C call a7A "__pass__" (__unk_type_kind >|2| 0x0000005B<) __unk_type_kind
    0x0000005D var *__unk_type_kind 0x00000000
    0x0000005E store *__unk_type_kind >|2| 0x0000005D<, __unk_type_kind >|2| 0x0000005C<
    0x0000005F var *__unk_type_kind 0x00000000
    0x00000060 call a6A "__defer__" (*__unk_type_kind >|2| 0x0000005F<) void
    0x00000061 var *__unk_type_kind 0x00000002
    0x00000062 load *__unk_type_kind >|2| 0x00000061<
    0x00000063 ret __unk_type_kind >|2| 0x00000062<
fn commit aFA -> __unk_type_kind
    {3 BBs, 41 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 3
    0x00000003 store *u64 >|1| 0x00000002<, u64 0
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|1| 0x00000004<
    0x00000006 memb *__unk_type_kind >|1| 0x00000005<, 0
    0x00000007 load **u8 >|1| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000001
    0x00000009 memb *__unk_type_kind >|1| 0x00000008<, 0
    0x0000000A store **u8 >|1| 0x00000009<, *u8 >|1| 0x00000007<
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|1| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|1| 0x0000000C<, 1
    0x0000000E load *u64 >|1| 0x0000000D<
    0x0000000F var *__unk_type_kind 0x00000001
    0x00000010 memb *__unk_type_kind >|1| 0x0000000F<, 1
    0x00000011 store *u64 >|1| 0x00000010<, u64 >|1| 0x0000000E<
    0x00000012 var **__unk_type_kind 0x00000000
    0x00000013 load **__unk_type_kind >|1| 0x00000012<
    0x00000014 memb *__unk_type_kind >|1| 0x00000013<, 2
    0x00000015 load *u64 >|1| 0x00000014<
    0x00000016 var *__unk_type_kind 0x00000001
    0x00000017 memb *__unk_type_kind >|1| 0x00000016<, 2
    0x00000018 store *u64 >|1| 0x00000017<, u64 >|1| 0x00000015<
    0x00000019 var *__unk_type_kind 0x00000001
    0x0000001A memb *__unk_type_kind >|1| 0x00000019<, 3
    0x0000001B store *u64 >|1| 0x0000001A<, u64 2
    0x0000001C var *__unk_type_kind 0x00000001
    0x0000001D load *__unk_type_kind >|1| 0x0000001C<
    0x0000001E ret __unk_type_kind >|1| 0x0000001D<
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 load *__unk_type_kind >|2| 0x00000001<
    0x00000003 ret __unk_type_kind >|2| 0x00000002<
fn donate aGA -> __unk_type_kind
    {3 BBs, 48 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 0
    0x00000003 load **u8 >|1| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 memb *__unk_type_kind >|1| 0x00000004<, 0
    0x00000006 store **u8 >|1| 0x00000005<, *u8 >|1| 0x00000003<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|1| 0x00000007<
    0x00000009 memb *__unk_type_kind >|1| 0x00000008<, 1
    0x0000000A load *u64 >|1| 0x00000009<
    0x0000000B var *__unk_type_kind 0x00000001
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 1
    0x0000000D store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000A<
    0x0000000E var **__unk_type_kind 0x00000000
    0x0000000F load **__unk_type_kind >|1| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|1| 0x0000000F<, 2
    0x00000011 load *u64 >|1| 0x00000010<
    0x00000012 var *__unk_type_kind 0x00000001
    0x00000013 memb *__unk_type_kind >|1| 0x00000012<, 2
    0x00000014 store *u64 >|1| 0x00000013<, u64 >|1| 0x00000011<
    0x00000015 var *__unk_type_kind 0x00000001
    0x00000016 memb *__unk_type_kind >|1| 0x00000015<, 3
    0x00000017 store *u64 >|1| 0x00000016<, u64 2
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|1| 0x00000018<
    0x0000001A memb *__unk_type_kind >|1| 0x00000019<, 3
    0x0000001B store *u64 >|1| 0x0000001A<, u64 0
    0x0000001C var **__unk_type_kind 0x00000000
    0x0000001D load **__unk_type_kind >|1| 0x0000001C<
    0x0000001E call a8A "__assign__" (*__unk_type_kind >|1| 0x0000001D<, stru) void
    0x0000001F var **__unk_type_kind 0x00000000
    0x00000020 load **__unk_type_kind >|1| 0x0000001F<
    0x00000021 memb *__unk_type_kind >|1| 0x00000020<, 3
    0x00000022 store *u64 >|1| 0x00000021<, u64 3
    0x00000023 var *__unk_type_kind 0x00000001
    0x00000024 load *__unk_type_kind >|1| 0x00000023<
    0x00000025 ret __unk_type_kind >|1| 0x00000024<
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 load *__unk_type_kind >|2| 0x00000001<
    0x00000003 ret __unk_type_kind >|2| 0x00000002<
fn first aHA -> s64
    {7 BBs, 32 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u8]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000002
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 1
    0x00000003 load *u64 >|1| 0x00000002<
    0x00000004 load *u64 >|0| 0x00000000<
    0x00000005 ult u64 >|1| 0x00000004<, u64 >|1| 0x00000003<
    0x00000006 cbr u64 >|1| 0x00000005<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 var *u64 0x00000002
    0x00000004 load *u64 >|2| 0x00000003<
    0x00000005 load **u8 >|2| 0x00000002<
    0x00000006 arracc *u8 >|2| 0x00000005<, u64 >|2| 0x00000004<
    0x00000007 load *u8 >|2| 0x00000006<
    0x00000008 var *u8 0x00000001
    0x00000009 load *u8 >|2| 0x00000008<
    0x0000000A eq u8 >|2| 0x00000007<, u8 >|2| 0x00000009<
    0x0000000B cbr u8 >|2| 0x0000000A<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 ret s64 -1
  BASICBLOCK |5|
    0x00000000 var *u64 0x00000002
    0x00000001 load *u64 >|5| 0x00000000<
    0x00000002 reinterp u64 >|5| 0x00000001< to s64
    0x00000003 ret s64 >|5| 0x00000002<
  BASICBLOCK |6|
    0x00000000 br |3|
fn last aIA -> s64
    {7 BBs, 44 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u8]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000002
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 1
    0x00000003 load *u64 >|1| 0x00000002<
    0x00000004 load *u64 >|0| 0x00000000<
    0x00000005 ult u64 >|1| 0x00000004<, u64 >|1| 0x00000003<
    0x00000006 cbr u64 >|1| 0x00000005<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|2| 0x00000003<
    0x00000005 memb *__unk_type_kind >|2| 0x00000004<, 1
    0x00000006 load *u64 >|2| 0x00000005<
    0x00000007 var *u64 0x00000002
    0x00000008 load *u64 >|2| 0x00000007<
    0x00000009 sub u64 >|2| 0x00000006<, u64 >|2| 0x00000008<
    0x0000000A sub u64 >|2| 0x00000009<, u64 1
    0x0000000B load **u8 >|2| 0x00000002<
    0x0000000C arracc *u8 >|2| 0x0000000B<, u64 >|2| 0x0000000A<
    0x0000000D load *u8 >|2| 0x0000000C<
    0x0000000E var *u8 0x00000001
    0x0000000F load *u8 >|2| 0x0000000E<
    0x00000010 eq u8 >|2| 0x0000000D<, u8 >|2| 0x0000000F<
    0x00000011 cbr u8 >|2| 0x00000010<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 ret s64 -1
  BASICBLOCK |5|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|5| 0x00000000<
    0x00000002 memb *__unk_type_kind >|5| 0x00000001<, 1
    0x00000003 load *u64 >|5| 0x00000002<
    0x00000004 var *u64 0x00000002
    0x00000005 load *u64 >|5| 0x00000004<
    0x00000006 sub u64 >|5| 0x00000003<, u64 >|5| 0x00000005<
    0x00000007 sub u64 >|5| 0x00000006<, u64 1
    0x00000008 reinterp u64 >|5| 0x00000007< to s64
    0x00000009 ret s64 >|5| 0x00000008<
  BASICBLOCK |6|
    0x00000000 br |3|
fn reverse aJA -> void
    {5 BBs, 65 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 u8]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 1
    0x00000003 load *u64 >|1| 0x00000002<
    0x00000004 udiv u64 >|1| 0x00000003<, u64 2
    0x00000005 load *u64 >|0| 0x00000000<
    0x00000006 ult u64 >|1| 0x00000005<, u64 >|1| 0x00000004<
    0x00000007 cbr u64 >|1| 0x00000006<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 var *u64 0x00000001
    0x00000004 load *u64 >|2| 0x00000003<
    0x00000005 load **u8 >|2| 0x00000002<
    0x00000006 arracc *u8 >|2| 0x00000005<, u64 >|2| 0x00000004<
    0x00000007 load *u8 >|2| 0x00000006<
    0x00000008 var *u8 0x00000002
    0x00000009 store *u8 >|2| 0x00000008<, u8 >|2| 0x00000007<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|2| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|2| 0x0000000B<, 0
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|2| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|2| 0x0000000E<, 1
    0x00000010 load *u64 >|2| 0x0000000F<
    0x00000011 var *u64 0x00000001
    0x00000012 load *u64 >|2| 0x00000011<
    0x00000013 sub u64 >|2| 0x00000010<, u64 >|2| 0x00000012<
    0x00000014 sub u64 >|2| 0x00000013<, u64 1
    0x00000015 load **u8 >|2| 0x0000000C<
    0x00000016 arracc *u8 >|2| 0x00000015<, u64 >|2| 0x00000014<
    0x00000017 load *u8 >|2| 0x00000016<
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|2| 0x00000018<
    0x0000001A memb *__unk_type_kind >|2| 0x00000019<, 0
    0x0000001B var *u64 0x00000001
    0x0000001C load *u64 >|2| 0x0000001B<
    0x0000001D load **u8 >|2| 0x0000001A<
    0x0000001E arracc *u8 >|2| 0x0000001D<, u64 >|2| 0x0000001C<
    0x0000001F store *u8 >|2| 0x0000001E<, u8 >|2| 0x00000017<
    0x00000020 var *u8 0x00000002
    0x00000021 load *u8 >|2| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000000
    0x00000023 load **__unk_type_kind >|2| 0x00000022<
    0x00000024 memb *__unk_type_kind >|2| 0x00000023<, 0
    0x00000025 var **__unk_type_kind 0x00000000
    0x00000026 load **__unk_type_kind >|2| 0x00000025<
    0x00000027 memb *__unk_type_kind >|2| 0x00000026<, 1
    0x00000028 load *u64 >|2| 0x00000027<
    0x00000029 var *u64 0x00000001
    0x0000002A load *u64 >|2| 0x00000029<
    0x0000002B sub u64 >|2| 0x00000028<, u64 >|2| 0x0000002A<
    0x0000002C sub u64 >|2| 0x0000002B<, u64 1
    0x0000002D load **u8 >|2| 0x00000024<
    0x0000002E arracc *u8 >|2| 0x0000002D<, u64 >|2| 0x0000002C<
    0x0000002F store *u8 >|2| 0x0000002E<, u8 >|2| 0x00000021<
    0x00000030 br |3|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 ret
fn reversed aKA -> __unk_type_kind
    {5 BBs, 64 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 malloc u8 * u64 >|0| 0x00000003<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 0
    0x00000007 store **u8 >|0| 0x00000006<, *u8 >|0| 0x00000004<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B load *u64 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000001
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 1
    0x0000000E store *u64 >|0| 0x0000000D<, u64 >|0| 0x0000000B<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 1
    0x00000012 load *u64 >|0| 0x00000011<
    0x00000013 var *__unk_type_kind 0x00000001
    0x00000014 memb *__unk_type_kind >|0| 0x00000013<, 2
    0x00000015 store *u64 >|0| 0x00000014<, u64 >|0| 0x00000012<
    0x00000016 var *__unk_type_kind 0x00000001
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 3
    0x00000018 store *u64 >|0| 0x00000017<, u64 2
    0x00000019 var *u64 0x00000002
    0x0000001A store *u64 >|0| 0x00000019<, u64 0
    0x0000001B br |1|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 1
    0x00000003 load *u64 >|1| 0x00000002<
    0x00000004 load *u64 >|0| 0x00000019<
    0x00000005 ult u64 >|1| 0x00000004<, u64 >|1| 0x00000003<
    0x00000006 cbr u64 >|1| 0x00000005<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 var *u64 0x00000002
    0x00000004 load *u64 >|2| 0x00000003<
    0x00000005 load **u8 >|2| 0x00000002<
    0x00000006 arracc *u8 >|2| 0x00000005<, u64 >|2| 0x00000004<
    0x00000007 load *u8 >|2| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000001
    0x00000009 memb *__unk_type_kind >|2| 0x00000008<, 0
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|2| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|2| 0x0000000B<, 1
    0x0000000D load *u64 >|2| 0x0000000C<
    0x0000000E var *u64 0x00000002
    0x0000000F load *u64 >|2| 0x0000000E<
    0x00000010 sub u64 >|2| 0x0000000D<, u64 >|2| 0x0000000F<
    0x00000011 sub u64 >|2| 0x00000010<, u64 1
    0x00000012 load **u8 >|2| 0x00000009<
    0x00000013 arracc *u8 >|2| 0x00000012<, u64 >|2| 0x00000011<
    0x00000014 store *u8 >|2| 0x00000013<, u8 >|2| 0x00000007<
    0x00000015 br |3|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000019<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000019<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|4| 0x00000000<
    0x00000002 ret __unk_type_kind >|4| 0x00000001<
fn sub aLA -> __unk_type_kind
    {1 BBs, 15 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
    [0x00000002 u64]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *u64 0x00000001
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 var *u64 0x00000002
    0x00000005 load *u64 >|0| 0x00000004<
    0x00000006 call aMA "range" (*__unk_type_kind >|0| 0x00000001<, u64 >|0| 0x00000003<, u64 >|0| 0x00000005<) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 varzi 0x00000003
    0x00000009 call a8A "__assign__" (*__unk_type_kind >|0| 0x00000007<, __unk_type_kind >|0| 0x00000006<) void
    0x0000000A var *__unk_type_kind 0x00000003
    0x0000000B call a6A "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C var *__unk_type_kind 0x00000003
    0x0000000D call aNA "clone" (*__unk_type_kind >|0| 0x0000000C<) __unk_type_kind
    0x0000000E ret __unk_type_kind >|0| 0x0000000D<
fn range aMA -> __unk_type_kind
    {1 BBs, 31 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
    [0x00000002 u64]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 var *u64 0x00000001
    0x00000004 load *u64 >|0| 0x00000003<
    0x00000005 load **u8 >|0| 0x00000002<
    0x00000006 arracc *u8 >|0| 0x00000005<, u64 >|0| 0x00000004<
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 0
    0x00000009 store **u8 >|0| 0x00000008<, *u8 >|0| 0x00000006<
    0x0000000A var *u64 0x00000002
    0x0000000B load *u64 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000003
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 1
    0x0000000E store *u64 >|0| 0x0000000D<, u64 >|0| 0x0000000B<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 2
    0x00000012 load *u64 >|0| 0x00000011<
    0x00000013 var *u64 0x00000001
    0x00000014 load *u64 >|0| 0x00000013<
    0x00000015 sub u64 >|0| 0x00000012<, u64 >|0| 0x00000014<
    0x00000016 var *__unk_type_kind 0x00000003
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 2
    0x00000018 store *u64 >|0| 0x00000017<, u64 >|0| 0x00000015<
    0x00000019 var *__unk_type_kind 0x00000003
    0x0000001A memb *__unk_type_kind >|0| 0x00000019<, 3
    0x0000001B store *u64 >|0| 0x0000001A<, u64 0
    0x0000001C var *__unk_type_kind 0x00000003
    0x0000001D load *__unk_type_kind >|0| 0x0000001C<
    0x0000001E ret __unk_type_kind >|0| 0x0000001D<
fn clone aNA -> __unk_type_kind
    {1 BBs, 42 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 2
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 malloc u8 * u64 >|0| 0x00000003<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 0
    0x00000007 store **u8 >|0| 0x00000006<, *u8 >|0| 0x00000004<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B load *u64 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000001
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 1
    0x0000000E store *u64 >|0| 0x0000000D<, u64 >|0| 0x0000000B<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 2
    0x00000012 load *u64 >|0| 0x00000011<
    0x00000013 var *__unk_type_kind 0x00000001
    0x00000014 memb *__unk_type_kind >|0| 0x00000013<, 2
    0x00000015 store *u64 >|0| 0x00000014<, u64 >|0| 0x00000012<
    0x00000016 var *__unk_type_kind 0x00000001
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 3
    0x00000018 store *u64 >|0| 0x00000017<, u64 2
    0x00000019 var *__unk_type_kind 0x00000001
    0x0000001A memb *__unk_type_kind >|0| 0x00000019<, 0
    0x0000001B load **u8 >|0| 0x0000001A<
    0x0000001C var **__unk_type_kind 0x00000000
    0x0000001D load **__unk_type_kind >|0| 0x0000001C<
    0x0000001E memb *__unk_type_kind >|0| 0x0000001D<, 0
    0x0000001F load **u8 >|0| 0x0000001E<
    0x00000020 var **__unk_type_kind 0x00000000
    0x00000021 load **__unk_type_kind >|0| 0x00000020<
    0x00000022 memb *__unk_type_kind >|0| 0x00000021<, 1
    0x00000023 load *u64 >|0| 0x00000022<
    0x00000024 bc *u8 >|0| 0x0000001B< to *s8
    0x00000025 bc *u8 >|0| 0x0000001F< to *s8
    0x00000026 call aL8 "memcpy" (*s8 >|0| 0x00000024<, *s8 >|0| 0x00000025<, u64 >|0| 0x00000023<) *s8
    0x00000027 var *__unk_type_kind 0x00000001
    0x00000028 load *__unk_type_kind >|0| 0x00000027<
    0x00000029 ret __unk_type_kind >|0| 0x00000028<
fn equals aOA -> bool
    {9 BBs, 44 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 1
    0x00000006 load *u64 >|0| 0x00000005<
    0x00000007 neq u64 >|0| 0x00000003<, u64 >|0| 0x00000006<
    0x00000008 cbr u64 >|0| 0x00000007<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret bool false
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000002
    0x00000001 store *u64 >|2| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|2| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 var *u64 0x00000002
    0x00000004 load *u64 >|4| 0x00000003<
    0x00000005 load **u8 >|4| 0x00000002<
    0x00000006 arracc *u8 >|4| 0x00000005<, u64 >|4| 0x00000004<
    0x00000007 load *u8 >|4| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000001
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 0
    0x0000000A var *u64 0x00000002
    0x0000000B load *u64 >|4| 0x0000000A<
    0x0000000C load **u8 >|4| 0x00000009<
    0x0000000D arracc *u8 >|4| 0x0000000C<, u64 >|4| 0x0000000B<
    0x0000000E load *u8 >|4| 0x0000000D<
    0x0000000F neq u8 >|4| 0x00000007<, u8 >|4| 0x0000000E<
    0x00000010 cbr u8 >|4| 0x0000000F<, |7|, |8|
  BASICBLOCK |5|
    0x00000000 load *u64 >|2| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|2| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 ret bool true
  BASICBLOCK |7|
    0x00000000 ret bool false
  BASICBLOCK |8|
    0x00000000 br |5|
fn cstr aPA -> *u8
    {1 BBs, 34 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *u8]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 1 to u64
    0x00000005 add u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 malloc u8 * u64 >|0| 0x00000005<
    0x00000007 var **u8 0x00000001
    0x00000008 store **u8 >|0| 0x00000007<, *u8 >|0| 0x00000006<
    0x00000009 var **u8 0x00000001
    0x0000000A load **u8 >|0| 0x00000009<
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|0| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 0
    0x0000000E load **u8 >|0| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 1
    0x00000012 load *u64 >|0| 0x00000011<
    0x00000013 bc *u8 >|0| 0x0000000A< to *s8
    0x00000014 bc *u8 >|0| 0x0000000E< to *s8
    0x00000015 call aL8 "memcpy" (*s8 >|0| 0x00000013<, *s8 >|0| 0x00000014<, u64 >|0| 0x00000012<) *s8
    0x00000016 var **u8 0x00000001
    0x00000017 var **__unk_type_kind 0x00000000
    0x00000018 load **__unk_type_kind >|0| 0x00000017<
    0x00000019 memb *__unk_type_kind >|0| 0x00000018<, 1
    0x0000001A load *u64 >|0| 0x00000019<
    0x0000001B load **u8 >|0| 0x00000016<
    0x0000001C arracc *u8 >|0| 0x0000001B<, u64 >|0| 0x0000001A<
    0x0000001D trunc s32 0 to u8
    0x0000001E store *u8 >|0| 0x0000001C<, u8 >|0| 0x0000001D<
    0x0000001F var **u8 0x00000001
    0x00000020 load **u8 >|0| 0x0000001F<
    0x00000021 ret *u8 >|0| 0x00000020<
fn string aQA -> __unk_type_kind
    {1 BBs, 36 INSTRs, 2 VARs}
    [0x00000000 *u8]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **u8 0x00000000
    0x00000001 load **u8 >|0| 0x00000000<
    0x00000002 call ae8 "strlen" (*u8 >|0| 0x00000001<) u64
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 1
    0x00000005 store *u64 >|0| 0x00000004<, u64 >|0| 0x00000002<
    0x00000006 var *__unk_type_kind 0x00000001
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 1
    0x00000008 load *u64 >|0| 0x00000007<
    0x00000009 malloc u8 * u64 >|0| 0x00000008<
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 0
    0x0000000C store **u8 >|0| 0x0000000B<, *u8 >|0| 0x00000009<
    0x0000000D var *__unk_type_kind 0x00000001
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 0
    0x0000000F load **u8 >|0| 0x0000000E<
    0x00000010 var **u8 0x00000000
    0x00000011 load **u8 >|0| 0x00000010<
    0x00000012 var *__unk_type_kind 0x00000001
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 1
    0x00000014 load *u64 >|0| 0x00000013<
    0x00000015 bc *u8 >|0| 0x0000000F< to *s8
    0x00000016 bc *u8 >|0| 0x00000011< to *s8
    0x00000017 call aL8 "memcpy" (*s8 >|0| 0x00000015<, *s8 >|0| 0x00000016<, u64 >|0| 0x00000014<) *s8
    0x00000018 var *__unk_type_kind 0x00000001
    0x00000019 memb *__unk_type_kind >|0| 0x00000018<, 1
    0x0000001A load *u64 >|0| 0x00000019<
    0x0000001B var *__unk_type_kind 0x00000001
    0x0000001C memb *__unk_type_kind >|0| 0x0000001B<, 2
    0x0000001D store *u64 >|0| 0x0000001C<, u64 >|0| 0x0000001A<
    0x0000001E var *__unk_type_kind 0x00000001
    0x0000001F memb *__unk_type_kind >|0| 0x0000001E<, 3
    0x00000020 store *u64 >|0| 0x0000001F<, u64 2
    0x00000021 var *__unk_type_kind 0x00000001
    0x00000022 load *__unk_type_kind >|0| 0x00000021<
    0x00000023 ret __unk_type_kind >|0| 0x00000022<
fn captPrepare aRA -> bool
    {1 BBs, 69 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 bc null to *__unk_type_kind
    0x00000002 store **__unk_type_kind >|0| 0x00000000<, *__unk_type_kind >|0| 0x00000001<
    0x00000003 gvar *__funcptr_type_kind 0x000008C6
    0x00000004 bc null to __funcptr_type_kind
    0x00000005 store *__funcptr_type_kind >|0| 0x00000003<, __funcptr_type_kind >|0| 0x00000004<
    0x00000006 gvar *__funcptr_type_kind 0x000008C7
    0x00000007 bc null to __funcptr_type_kind
    0x00000008 store *__funcptr_type_kind >|0| 0x00000006<, __funcptr_type_kind >|0| 0x00000007<
    0x00000009 gvar *__funcptr_type_kind 0x000008C8
    0x0000000A bc null to __funcptr_type_kind
    0x0000000B store *__funcptr_type_kind >|0| 0x00000009<, __funcptr_type_kind >|0| 0x0000000A<
    0x0000000C gvar *__funcptr_type_kind 0x000008C9
    0x0000000D bc null to __funcptr_type_kind
    0x0000000E store *__funcptr_type_kind >|0| 0x0000000C<, __funcptr_type_kind >|0| 0x0000000D<
    0x0000000F gvar *u32 0x000008CA
    0x00000010 reinterp s32 60 to u32
    0x00000011 store *u32 >|0| 0x0000000F<, u32 >|0| 0x00000010<
    0x00000012 gvar *__funcptr_type_kind 0x000008CB
    0x00000013 bc null to __funcptr_type_kind
    0x00000014 store *__funcptr_type_kind >|0| 0x00000012<, __funcptr_type_kind >|0| 0x00000013<
    0x00000015 gvar *__funcptr_type_kind 0x000008CD
    0x00000016 bc null to __funcptr_type_kind
    0x00000017 store *__funcptr_type_kind >|0| 0x00000015<, __funcptr_type_kind >|0| 0x00000016<
    0x00000018 gvar *f 0x000008D1
    0x00000019 store *f >|0| 0x00000018<, f 0.000000
    0x0000001A gvar *f 0x000008D2
    0x0000001B store *f >|0| 0x0000001A<, f 0.000000
    0x0000001C gvar *f 0x000008D3
    0x0000001D store *f >|0| 0x0000001C<, f 0.000000
    0x0000001E gvar *bool 0x000008D4
    0x0000001F store *bool >|0| 0x0000001E<, bool false
    0x00000020 gvar *bool 0x000008D5
    0x00000021 store *bool >|0| 0x00000020<, bool true
    0x00000022 gvar **f 0x000008D6
    0x00000023 bc null to *f
    0x00000024 store **f >|0| 0x00000022<, *f >|0| 0x00000023<
    0x00000025 gvar *u64 0x000008D7
    0x00000026 zext s32 0 to u64
    0x00000027 store *u64 >|0| 0x00000025<, u64 >|0| 0x00000026<
    0x00000028 gvar *u64 0x000008D8
    0x00000029 zext s32 0 to u64
    0x0000002A store *u64 >|0| 0x00000028<, u64 >|0| 0x00000029<
    0x0000002B gvar **__unk_type_kind 0x000008D9
    0x0000002C bc null to *__unk_type_kind
    0x0000002D store **__unk_type_kind >|0| 0x0000002B<, *__unk_type_kind >|0| 0x0000002C<
    0x0000002E gvar *u64 0x000008DA
    0x0000002F zext s32 0 to u64
    0x00000030 store *u64 >|0| 0x0000002E<, u64 >|0| 0x0000002F<
    0x00000031 gvar *u64 0x000008DB
    0x00000032 zext s32 0 to u64
    0x00000033 store *u64 >|0| 0x00000031<, u64 >|0| 0x00000032<
    0x00000034 gvar *s32 0x000008DC
    0x00000035 store *s32 >|0| 0x00000034<, s32 0
    0x00000036 gvar **__unk_type_kind 0x000008DD
    0x00000037 bc null to *__unk_type_kind
    0x00000038 store **__unk_type_kind >|0| 0x00000036<, *__unk_type_kind >|0| 0x00000037<
    0x00000039 gvar *u64 0x000008DE
    0x0000003A zext s32 0 to u64
    0x0000003B store *u64 >|0| 0x00000039<, u64 >|0| 0x0000003A<
    0x0000003C gvar *u64 0x000008DF
    0x0000003D zext s32 0 to u64
    0x0000003E store *u64 >|0| 0x0000003C<, u64 >|0| 0x0000003D<
    0x0000003F gvar *bool 0x000008E0
    0x00000040 store *bool >|0| 0x0000003F<, bool false
    0x00000041 call ai5 "glfwInit" () s32
    0x00000042 zext bool false to s32
    0x00000043 neq s32 >|0| 0x00000041<, s32 >|0| 0x00000042<
    0x00000044 ret s32 >|0| 0x00000043<
fn captAddTypical aSA -> void
    {6 BBs, 71 INSTRs, 3 VARs}
    [0x00000000 f]
    [0x00000001 f]
    [0x00000000 *f]
  BASICBLOCK |0|
    0x00000000 gvar *u64 0x000008D7
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 gvar *u64 0x000008D8
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000001<, u64 >|0| 0x00000003<
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *u64 0x000008D8
    0x00000001 load *u64 >|1| 0x00000000<
    0x00000002 eq u64 >|1| 0x00000001<, u64 0
    0x00000003 cbr u64 >|1| 0x00000002<, |3|, |4|
  BASICBLOCK |2|
    0x00000000 var *f 0x00000000
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 gvar **f 0x000008D6
    0x00000003 gvar *u64 0x000008D7
    0x00000004 load *u64 >|2| 0x00000003<
    0x00000005 mul u64 >|2| 0x00000004<, u64 2
    0x00000006 load **f >|2| 0x00000002<
    0x00000007 arracc *f >|2| 0x00000006<, u64 >|2| 0x00000005<
    0x00000008 store *f >|2| 0x00000007<, f >|2| 0x00000001<
    0x00000009 var *f 0x00000001
    0x0000000A load *f >|2| 0x00000009<
    0x0000000B gvar **f 0x000008D6
    0x0000000C gvar *u64 0x000008D7
    0x0000000D load *u64 >|2| 0x0000000C<
    0x0000000E mul u64 >|2| 0x0000000D<, u64 2
    0x0000000F add u64 >|2| 0x0000000E<, u64 1
    0x00000010 load **f >|2| 0x0000000B<
    0x00000011 arracc *f >|2| 0x00000010<, u64 >|2| 0x0000000F<
    0x00000012 store *f >|2| 0x00000011<, f >|2| 0x0000000A<
    0x00000013 gvar *u64 0x000008D7
    0x00000014 zext s32 1 to u64
    0x00000015 load *u64 >|2| 0x00000013<
    0x00000016 add u64 >|2| 0x00000015<, u64 >|2| 0x00000014<
    0x00000017 store *u64 >|2| 0x00000013<, u64 >|2| 0x00000016<
    0x00000018 ret
  BASICBLOCK |3|
    0x00000000 gvar *u64 0x000008D8
    0x00000001 zext s32 4 to u64
    0x00000002 store *u64 >|3| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |5|
  BASICBLOCK |4|
    0x00000000 gvar *u64 0x000008D8
    0x00000001 zext s32 2 to u64
    0x00000002 load *u64 >|4| 0x00000000<
    0x00000003 mul u64 >|4| 0x00000002<, u64 >|4| 0x00000001<
    0x00000004 store *u64 >|4| 0x00000000<, u64 >|4| 0x00000003<
    0x00000005 br |5|
  BASICBLOCK |5|
    0x00000000 gvar *u64 0x000008D8
    0x00000001 load *u64 >|5| 0x00000000<
    0x00000002 mul u64 2, u64 >|5| 0x00000001<
    0x00000003 malloc f * u64 >|5| 0x00000002<
    0x00000004 var **f 0x00000002
    0x00000005 store **f >|5| 0x00000004<, *f >|5| 0x00000003<
    0x00000006 var **f 0x00000002
    0x00000007 load **f >|5| 0x00000006<
    0x00000008 gvar **f 0x000008D6
    0x00000009 load **f >|5| 0x00000008<
    0x0000000A gvar *u64 0x000008D7
    0x0000000B load *u64 >|5| 0x0000000A<
    0x0000000C mul u64 >|5| 0x0000000B<, u64 2
    0x0000000D sizeof f
    0x0000000E mul u64 >|5| 0x0000000C<, u64 >|5| 0x0000000D<
    0x0000000F bc *f >|5| 0x00000007< to *s8
    0x00000010 bc *f >|5| 0x00000009< to *s8
    0x00000011 call aL8 "memcpy" (*s8 >|5| 0x0000000F<, *s8 >|5| 0x00000010<, u64 >|5| 0x0000000E<) *s8
    0x00000012 gvar **f 0x000008D6
    0x00000013 load **f >|5| 0x00000012<
    0x00000014 free *f >|5| 0x00000013<
    0x00000015 var **f 0x00000002
    0x00000016 load **f >|5| 0x00000015<
    0x00000017 gvar **f 0x000008D6
    0x00000018 store **f >|5| 0x00000017<, *f >|5| 0x00000016<
    0x00000019 br |2|
fn captStart aTA -> void
    {1 BBs, 2 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aXA "captStart" (cstroflen 1 "", s32 640, s32 480, bool false) void
    0x00000001 ret
fn captStart aUA -> void
    {1 BBs, 4 INSTRs, 1 VARs}
    [0x00000000 *u8]
  BASICBLOCK |0|
    0x00000000 var **u8 0x00000000
    0x00000001 load **u8 >|0| 0x00000000<
    0x00000002 call aXA "captStart" (*u8 >|0| 0x00000001<, s32 640, s32 480, bool false) void
    0x00000003 ret
fn captStart aVA -> void
    {4 BBs, 8 INSTRs, 1 VARs}
    [0x00000000 bool]
  BASICBLOCK |0|
    0x00000000 var *bool 0x00000000
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 cbr bool >|0| 0x00000001<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aXA "captStart" (cstroflen 1 "", s32 0, s32 0, bool true) void
    0x00000001 br |3|
  BASICBLOCK |2|
    0x00000000 call aXA "captStart" (cstroflen 1 "", s32 640, s32 480, bool false) void
    0x00000001 br |3|
  BASICBLOCK |3|
    0x00000000 ret
fn captStart aWA -> void
    {4 BBs, 12 INSTRs, 2 VARs}
    [0x00000000 *u8]
    [0x00000001 bool]
  BASICBLOCK |0|
    0x00000000 var *bool 0x00000001
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 cbr bool >|0| 0x00000001<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **u8 0x00000000
    0x00000001 load **u8 >|1| 0x00000000<
    0x00000002 call aXA "captStart" (*u8 >|1| 0x00000001<, s32 0, s32 0, bool true) void
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 var **u8 0x00000000
    0x00000001 load **u8 >|2| 0x00000000<
    0x00000002 call aXA "captStart" (*u8 >|2| 0x00000001<, s32 640, s32 480, bool false) void
    0x00000003 br |3|
  BASICBLOCK |3|
    0x00000000 ret
fn captStart aXA -> void
    {38 BBs, 314 INSTRs, 13 VARs}
    [0x00000000 *u8]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 bool]
    [0x00000004 *__unk_type_kind]
    [0x00000005 s32]
    [0x00000006 s32]
    [0x00000007 d]
    [0x00000008 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 call az5 "glfwWindowHint" (s32 139266, s32 3) void
    0x00000001 call az5 "glfwWindowHint" (s32 139267, s32 2) void
    0x00000002 zext bool true to s32
    0x00000003 call az5 "glfwWindowHint" (s32 139270, s32 >|0| 0x00000002<) void
    0x00000004 call az5 "glfwWindowHint" (s32 139272, s32 204801) void
    0x00000005 gvar *bool 0x000008D5
    0x00000006 load *bool >|0| 0x00000005<
    0x00000007 cbr bool >|0| 0x00000006<, |2|, |1|
  BASICBLOCK |1|
    0x00000000 zext bool false to s32
    0x00000001 call az5 "glfwWindowHint" (s32 131075, s32 >|1| 0x00000000<) void
    0x00000002 br |2|
  BASICBLOCK |2|
    0x00000000 bc null to *__unk_type_kind
    0x00000001 var **__unk_type_kind 0x00000004
    0x00000002 store **__unk_type_kind >|2| 0x00000001<, *__unk_type_kind >|2| 0x00000000<
    0x00000003 var *bool 0x00000003
    0x00000004 load *bool >|2| 0x00000003<
    0x00000005 cbr bool >|2| 0x00000004<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 call ao5 "glfwGetPrimaryMonitor" () *__unk_type_kind
    0x00000001 var **__unk_type_kind 0x00000004
    0x00000002 store **__unk_type_kind >|3| 0x00000001<, *__unk_type_kind >|3| 0x00000000<
    0x00000003 br |4|
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 eq s32 >|4| 0x00000001<, s32 0
    0x00000003 cbr s32 >|4| 0x00000002<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|5| 0x00000000<
    0x00000002 eq s32 >|5| 0x00000001<, s32 0
    0x00000003 br |6|
  BASICBLOCK |6|
    0x00000000 phi2 |4| -> bool false, |5| -> s32 >|5| 0x00000002<
    0x00000001 cbr bool >|6| 0x00000000<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var **__unk_type_kind 0x00000004
    0x00000001 load **__unk_type_kind >|7| 0x00000000<
    0x00000002 call au5 "glfwGetVideoMode" (*__unk_type_kind >|7| 0x00000001<) *__unk_type_kind
    0x00000003 var **__unk_type_kind 0x00000005
    0x00000004 store **__unk_type_kind >|7| 0x00000003<, *__unk_type_kind >|7| 0x00000002<
    0x00000005 var **__unk_type_kind 0x00000005
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 0
    0x00000008 load *s32 >|7| 0x00000007<
    0x00000009 var *s32 0x00000001
    0x0000000A store *s32 >|7| 0x00000009<, s32 >|7| 0x00000008<
    0x0000000B var **__unk_type_kind 0x00000005
    0x0000000C load **__unk_type_kind >|7| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|7| 0x0000000C<, 1
    0x0000000E load *s32 >|7| 0x0000000D<
    0x0000000F var *s32 0x00000002
    0x00000010 store *s32 >|7| 0x0000000F<, s32 >|7| 0x0000000E<
    0x00000011 br |8|
  BASICBLOCK |8|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|8| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|8| 0x00000002<
    0x00000004 var **u8 0x00000000
    0x00000005 load **u8 >|8| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000004
    0x00000007 load **__unk_type_kind >|8| 0x00000006<
    0x00000008 bc null to *__unk_type_kind
    0x00000009 call a06 "glfwCreateWindow" (s32 >|8| 0x00000001<, s32 >|8| 0x00000003<, *u8 >|8| 0x00000005<, *__unk_type_kind >|8| 0x00000007<, *__unk_type_kind >|8| 0x00000008<) *__unk_type_kind
    0x0000000A gvar **__unk_type_kind 0x000008C5
    0x0000000B store **__unk_type_kind >|8| 0x0000000A<, *__unk_type_kind >|8| 0x00000009<
    0x0000000C gvar **__unk_type_kind 0x000008C5
    0x0000000D load **__unk_type_kind >|8| 0x0000000C<
    0x0000000E bc null to *__unk_type_kind
    0x0000000F eq *__unk_type_kind >|8| 0x0000000D<, *__unk_type_kind >|8| 0x0000000E<
    0x00000010 cbr *__unk_type_kind >|8| 0x0000000F<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 call aj5 "glfwTerminate" () void
    0x00000001 ret
  BASICBLOCK |10|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|10| 0x00000000<
    0x00000002 call a47 "glfwMakeContextCurrent" (*__unk_type_kind >|10| 0x00000001<) void
    0x00000003 call a77 "glfwSwapInterval" (s32 1) void
    0x00000004 call ah5 "openglInit" () void
    0x00000005 var *u64 0x00000006
    0x00000006 store *u64 >|10| 0x00000005<, u64 0
    0x00000007 br |11|
  BASICBLOCK |11|
    0x00000000 gvar *u64 0x000008D7
    0x00000001 load *u64 >|11| 0x00000000<
    0x00000002 load *u64 >|10| 0x00000005<
    0x00000003 ult u64 >|11| 0x00000002<, u64 >|11| 0x00000001<
    0x00000004 cbr u64 >|11| 0x00000003<, |12|, |14|
  BASICBLOCK |12|
    0x00000000 gvar **f 0x000008D6
    0x00000001 var *u64 0x00000006
    0x00000002 load *u64 >|12| 0x00000001<
    0x00000003 mul u64 >|12| 0x00000002<, u64 2
    0x00000004 load **f >|12| 0x00000000<
    0x00000005 arracc *f >|12| 0x00000004<, u64 >|12| 0x00000003<
    0x00000006 load *f >|12| 0x00000005<
    0x00000007 gvar **f 0x000008D6
    0x00000008 var *u64 0x00000006
    0x00000009 load *u64 >|12| 0x00000008<
    0x0000000A mul u64 >|12| 0x00000009<, u64 2
    0x0000000B add u64 >|12| 0x0000000A<, u64 1
    0x0000000C load **f >|12| 0x00000007<
    0x0000000D arracc *f >|12| 0x0000000C<, u64 >|12| 0x0000000B<
    0x0000000E load *f >|12| 0x0000000D<
    0x0000000F call aFB "captAddFrameModel" (f >|12| 0x00000006<, f >|12| 0x0000000E<) *__unk_type_kind
    0x00000010 br |13|
  BASICBLOCK |13|
    0x00000000 load *u64 >|10| 0x00000005<
    0x00000001 add u64 >|13| 0x00000000<, u64 1
    0x00000002 store *u64 >|10| 0x00000005<, u64 >|13| 0x00000001<
    0x00000003 br |11|
  BASICBLOCK |14|
    0x00000000 reinterp s32 3042 to u32
    0x00000001 call aQ1 "glEnable" (u32 >|14| 0x00000000<) void
    0x00000002 reinterp s32 770 to u32
    0x00000003 reinterp s32 771 to u32
    0x00000004 call aN "glBlendFunc" (u32 >|14| 0x00000002<, u32 >|14| 0x00000003<) void
    0x00000005 gvar *__unk_type_kind 0x000008D0
    0x00000006 call a6B "create" (*__unk_type_kind >|14| 0x00000005<, cstroflen 261 "#version 400 core
layout(location = 0) in vec3 vp;
layout(location = 1) in vec2 texture_coords;
uniform mat4 projection;
uniform mat4 transformation;
out vec2 uvs;
void main() {
uvs = texture_coords;
gl_Position = projection * transformation * vec4(vp, 1.0);
}", cstroflen 210 "#version 400 core
in vec2 uvs;
out vec4 color;
uniform sampler2D texture_sampler;
uniform float opacity;
void main(void) {
color = texture(texture_sampler, uvs);
color.a *= opacity;
if(color.a == 0) discard;
}") void
    0x00000007 gvar *__unk_type_kind 0x000008D0
    0x00000008 call a9B "getUniformLocation" (*__unk_type_kind >|14| 0x00000007<, cstroflen 15 "transformation") s32
    0x00000009 gvar *s32 0x000008DC
    0x0000000A store *s32 >|14| 0x00000009<, s32 >|14| 0x00000008<
    0x0000000B gvar *bool 0x000008D4
    0x0000000C load *bool >|14| 0x0000000B<
    0x0000000D cbr bool >|14| 0x0000000C<, |16|, |15|
  BASICBLOCK |15|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|15| 0x00000000<
    0x00000002 var *s32 0x00000007
    0x00000003 var *s32 0x00000008
    0x00000004 call aC6 "glfwGetFramebufferSize" (*__unk_type_kind >|15| 0x00000001<, *s32 >|15| 0x00000002<, *s32 >|15| 0x00000003<) void
    0x00000005 var *s32 0x00000007
    0x00000006 load *s32 >|15| 0x00000005<
    0x00000007 si2fp s32 >|15| 0x00000006< to f
    0x00000008 var *s32 0x00000008
    0x00000009 load *s32 >|15| 0x00000008<
    0x0000000A si2fp s32 >|15| 0x00000009< to f
    0x0000000B fdiv f >|15| 0x00000007<, f >|15| 0x0000000A<
    0x0000000C gvar *f 0x000008D1
    0x0000000D store *f >|15| 0x0000000C<, f >|15| 0x0000000B<
    0x0000000E gvar *f 0x000008D1
    0x0000000F load *f >|15| 0x0000000E<
    0x00000010 fmul f 800.000000, f >|15| 0x0000000F<
    0x00000011 gvar *f 0x000008D2
    0x00000012 store *f >|15| 0x00000011<, f >|15| 0x00000010<
    0x00000013 gvar *f 0x000008D3
    0x00000014 store *f >|15| 0x00000013<, f 800.000000
    0x00000015 br |16|
  BASICBLOCK |16|
    0x00000000 gvar *bool 0x000008E0
    0x00000001 load *bool >|16| 0x00000000<
    0x00000002 cbr bool >|16| 0x00000001<, |17|, |18|
  BASICBLOCK |17|
    0x00000000 call aKB "captHideMouse" () void
    0x00000001 br |18|
  BASICBLOCK |18|
    0x00000000 gvar *__funcptr_type_kind 0x000008C6
    0x00000001 load *__funcptr_type_kind >|18| 0x00000000<
    0x00000002 bc __funcptr_type_kind >|18| 0x00000001< to *s8
    0x00000003 inz *s8 >|18| 0x00000002<
    0x00000004 cbr bool >|18| 0x00000003<, |19|, |20|
  BASICBLOCK |19|
    0x00000000 gvar *__funcptr_type_kind 0x000008C6
    0x00000001 load *__funcptr_type_kind >|19| 0x00000000<
    0x00000002 calladdr __funcptr_type_kind >|19| 0x00000001<() void
    0x00000003 br |20|
  BASICBLOCK |20|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|20| 0x00000000<
    0x00000002 funcaddr 0xYA
    0x00000003 bc __funcptr_type_kind >|20| 0x00000002< to *s8
    0x00000004 call ao6 "glfwSetMouseButtonCallback" (*__unk_type_kind >|20| 0x00000001<, *s8 >|20| 0x00000003<) *s8
    0x00000005 gvar **__unk_type_kind 0x000008C5
    0x00000006 load **__unk_type_kind >|20| 0x00000005<
    0x00000007 funcaddr 0xZA
    0x00000008 bc __funcptr_type_kind >|20| 0x00000007< to *s8
    0x00000009 call al6 "glfwSetKeyCallback" (*__unk_type_kind >|20| 0x00000006<, *s8 >|20| 0x00000008<) *s8
    0x0000000A call a07 "glfwGetTime" () d
    0x0000000B var *d 0x00000009
    0x0000000C store *d >|20| 0x0000000B<, d >|20| 0x0000000A<
    0x0000000D varzi 0x0000000A
    0x0000000E br |21|
  BASICBLOCK |21|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|21| 0x00000000<
    0x00000002 call a26 "glfwWindowShouldClose" (*__unk_type_kind >|21| 0x00000001<) s32
    0x00000003 inz s32 >|21| 0x00000002<
    0x00000004 cbr bool >|21| 0x00000003<, |23|, |22|
  BASICBLOCK |22|
    0x00000000 call a07 "glfwGetTime" () d
    0x00000001 var *d 0x00000009
    0x00000002 load *d >|22| 0x00000001<
    0x00000003 fsub d >|22| 0x00000000<, d >|22| 0x00000002<
    0x00000004 gvar *u32 0x000008CA
    0x00000005 load *u32 >|22| 0x00000004<
    0x00000006 ui2fp u32 >|22| 0x00000005< to f
    0x00000007 fext f >|22| 0x00000006< to d
    0x00000008 fdiv d 1.000000, d >|22| 0x00000007<
    0x00000009 fgt d >|22| 0x00000003<, d >|22| 0x00000008<
    0x0000000A cbr d >|22| 0x00000009<, |24|, |25|
  BASICBLOCK |23|
    0x00000000 gvar *__funcptr_type_kind 0x000008C7
    0x00000001 load *__funcptr_type_kind >|23| 0x00000000<
    0x00000002 bc __funcptr_type_kind >|23| 0x00000001< to *s8
    0x00000003 inz *s8 >|23| 0x00000002<
    0x00000004 cbr bool >|23| 0x00000003<, |32|, |33|
  BASICBLOCK |24|
    0x00000000 gvar *__funcptr_type_kind 0x000008C9
    0x00000001 load *__funcptr_type_kind >|24| 0x00000000<
    0x00000002 bc __funcptr_type_kind >|24| 0x00000001< to *s8
    0x00000003 inz *s8 >|24| 0x00000002<
    0x00000004 cbr bool >|24| 0x00000003<, |26|, |27|
  BASICBLOCK |25|
    0x00000000 call aS "glClearColor" (f 0.000000, f 0.000000, f 0.000000, f 0.000000) void
    0x00000001 reinterp s32 16384 to u32
    0x00000002 call aQ "glClear" (u32 >|25| 0x00000001<) void
    0x00000003 gvar **__unk_type_kind 0x000008C5
    0x00000004 load **__unk_type_kind >|25| 0x00000003<
    0x00000005 var *s32 0x00000007
    0x00000006 var *s32 0x00000008
    0x00000007 call aC6 "glfwGetFramebufferSize" (*__unk_type_kind >|25| 0x00000004<, *s32 >|25| 0x00000005<, *s32 >|25| 0x00000006<) void
    0x00000008 var *s32 0x00000007
    0x00000009 load *s32 >|25| 0x00000008<
    0x0000000A var *s32 0x00000008
    0x0000000B load *s32 >|25| 0x0000000A<
    0x0000000C call af5 "glViewport" (s32 0, s32 0, s32 >|25| 0x00000009<, s32 >|25| 0x0000000B<) void
    0x0000000D var *s32 0x00000007
    0x0000000E load *s32 >|25| 0x0000000D<
    0x0000000F si2fp s32 >|25| 0x0000000E< to f
    0x00000010 var *s32 0x00000008
    0x00000011 load *s32 >|25| 0x00000010<
    0x00000012 si2fp s32 >|25| 0x00000011< to f
    0x00000013 fdiv f >|25| 0x0000000F<, f >|25| 0x00000012<
    0x00000014 gvar *f 0x000008D1
    0x00000015 store *f >|25| 0x00000014<, f >|25| 0x00000013<
    0x00000016 gvar *bool 0x000008D4
    0x00000017 load *bool >|25| 0x00000016<
    0x00000018 cbr bool >|25| 0x00000017<, |29|, |28|
  BASICBLOCK |26|
    0x00000000 gvar *__funcptr_type_kind 0x000008C9
    0x00000001 load *__funcptr_type_kind >|26| 0x00000000<
    0x00000002 calladdr __funcptr_type_kind >|26| 0x00000001<() void
    0x00000003 br |27|
  BASICBLOCK |27|
    0x00000000 gvar *u32 0x000008CA
    0x00000001 load *u32 >|27| 0x00000000<
    0x00000002 ui2fp u32 >|27| 0x00000001< to f
    0x00000003 fext f >|27| 0x00000002< to d
    0x00000004 fdiv d 1.000000, d >|27| 0x00000003<
    0x00000005 var *d 0x00000009
    0x00000006 load *d >|27| 0x00000005<
    0x00000007 fadd d >|27| 0x00000006<, d >|27| 0x00000004<
    0x00000008 store *d >|27| 0x00000005<, d >|27| 0x00000007<
    0x00000009 br |25|
  BASICBLOCK |28|
    0x00000000 gvar *f 0x000008D1
    0x00000001 load *f >|28| 0x00000000<
    0x00000002 fmul f 800.000000, f >|28| 0x00000001<
    0x00000003 gvar *f 0x000008D2
    0x00000004 store *f >|28| 0x00000003<, f >|28| 0x00000002<
    0x00000005 gvar *f 0x000008D3
    0x00000006 store *f >|28| 0x00000005<, f 800.000000
    0x00000007 br |29|
  BASICBLOCK |29|
    0x00000000 var *__unk_type_kind 0x0000000A
    0x00000001 gvar *f 0x000008D2
    0x00000002 load *f >|29| 0x00000001<
    0x00000003 gvar *f 0x000008D3
    0x00000004 load *f >|29| 0x00000003<
    0x00000005 call a2A "ortho" (*__unk_type_kind >|29| 0x00000000<, f 0.000000, f >|29| 0x00000002<, f >|29| 0x00000004<, f 0.000000, f 1.000000, f -1.000000) void
    0x00000006 gvar *__unk_type_kind 0x000008D0
    0x00000007 call a7B "use" (*__unk_type_kind >|29| 0x00000006<) void
    0x00000008 gvar *__unk_type_kind 0x000008D0
    0x00000009 gvar *__unk_type_kind 0x000008D0
    0x0000000A call a9B "getUniformLocation" (*__unk_type_kind >|29| 0x00000009<, cstroflen 11 "projection") s32
    0x0000000B var *__unk_type_kind 0x0000000A
    0x0000000C load *__unk_type_kind >|29| 0x0000000B<
    0x0000000D call aCB "uploadMatrix4f" (*__unk_type_kind >|29| 0x00000008<, s32 >|29| 0x0000000A<, __unk_type_kind >|29| 0x0000000C<) void
    0x0000000E gvar *__unk_type_kind 0x000008D0
    0x0000000F gvar *__unk_type_kind 0x000008D0
    0x00000010 call a9B "getUniformLocation" (*__unk_type_kind >|29| 0x0000000F<, cstroflen 8 "opacity") s32
    0x00000011 call aAB "uploadFloat" (*__unk_type_kind >|29| 0x0000000E<, s32 >|29| 0x00000010<, f 1.000000) void
    0x00000012 gvar *__funcptr_type_kind 0x000008C8
    0x00000013 load *__funcptr_type_kind >|29| 0x00000012<
    0x00000014 bc __funcptr_type_kind >|29| 0x00000013< to *s8
    0x00000015 inz *s8 >|29| 0x00000014<
    0x00000016 cbr bool >|29| 0x00000015<, |30|, |31|
  BASICBLOCK |30|
    0x00000000 gvar *__funcptr_type_kind 0x000008C8
    0x00000001 load *__funcptr_type_kind >|30| 0x00000000<
    0x00000002 calladdr __funcptr_type_kind >|30| 0x00000001<() void
    0x00000003 br |31|
  BASICBLOCK |31|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|31| 0x00000000<
    0x00000002 call a67 "glfwSwapBuffers" (*__unk_type_kind >|31| 0x00000001<) void
    0x00000003 call aW6 "glfwPollEvents" () void
    0x00000004 br |21|
  BASICBLOCK |32|
    0x00000000 gvar *__funcptr_type_kind 0x000008C7
    0x00000001 load *__funcptr_type_kind >|32| 0x00000000<
    0x00000002 calladdr __funcptr_type_kind >|32| 0x00000001<() void
    0x00000003 br |33|
  BASICBLOCK |33|
    0x00000000 var *u64 0x0000000B
    0x00000001 store *u64 >|33| 0x00000000<, u64 0
    0x00000002 br |34|
  BASICBLOCK |34|
    0x00000000 gvar *u64 0x000008DA
    0x00000001 load *u64 >|34| 0x00000000<
    0x00000002 load *u64 >|33| 0x00000000<
    0x00000003 ult u64 >|34| 0x00000002<, u64 >|34| 0x00000001<
    0x00000004 cbr u64 >|34| 0x00000003<, |35|, |37|
  BASICBLOCK |35|
    0x00000000 gvar **__unk_type_kind 0x000008D9
    0x00000001 load **__unk_type_kind >|35| 0x00000000<
    0x00000002 var *__unk_type_kind 0x0000000C
    0x00000003 load *u64 >|33| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|35| 0x00000001<, u64 >|35| 0x00000003<
    0x00000005 store *__unk_type_kind >|35| 0x00000002<, *__unk_type_kind >|35| 0x00000004<
    0x00000006 var **__unk_type_kind 0x0000000C
    0x00000007 load **__unk_type_kind >|35| 0x00000006<
    0x00000008 memb *__unk_type_kind >|35| 0x00000007<, 0
    0x00000009 call a4B "free" (*__unk_type_kind >|35| 0x00000008<) void
    0x0000000A br |36|
  BASICBLOCK |36|
    0x00000000 load *u64 >|33| 0x00000000<
    0x00000001 add u64 >|36| 0x00000000<, u64 1
    0x00000002 store *u64 >|33| 0x00000000<, u64 >|36| 0x00000001<
    0x00000003 br |34|
  BASICBLOCK |37|
    0x00000000 gvar **__unk_type_kind 0x000008D9
    0x00000001 load **__unk_type_kind >|37| 0x00000000<
    0x00000002 free *__unk_type_kind >|37| 0x00000001<
    0x00000003 gvar **f 0x000008D6
    0x00000004 load **f >|37| 0x00000003<
    0x00000005 free *f >|37| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x000008D0
    0x00000007 call a8B "free" (*__unk_type_kind >|37| 0x00000006<) void
    0x00000008 gvar **__unk_type_kind 0x000008C5
    0x00000009 load **__unk_type_kind >|37| 0x00000008<
    0x0000000A call a16 "glfwDestroyWindow" (*__unk_type_kind >|37| 0x00000009<) void
    0x0000000B call aj5 "glfwTerminate" () void
    0x0000000C var *__unk_type_kind 0x0000000A
    0x0000000D call anD "__defer__" (*__unk_type_kind >|37| 0x0000000C<) void
    0x0000000E ret
fn _captMouseCallback aYA -> void
    {16 BBs, 68 INSTRs, 8 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000000 f]
    [0x00000001 f]
    [0x00000000 f]
    [0x00000001 f]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 eq s32 >|0| 0x00000001<, s32 1
    0x00000003 cbr s32 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__funcptr_type_kind 0x000008CB
    0x00000001 load *__funcptr_type_kind >|1| 0x00000000<
    0x00000002 bc __funcptr_type_kind >|1| 0x00000001< to *s8
    0x00000003 inz *s8 >|1| 0x00000002<
    0x00000004 br |2|
  BASICBLOCK |2|
    0x00000000 phi2 |0| -> bool false, |1| -> bool >|1| 0x00000003<
    0x00000001 cbr bool >|2| 0x00000000<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 gvar *bool 0x000008CC
    0x00000001 load *bool >|3| 0x00000000<
    0x00000002 cbr bool >|3| 0x00000001<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 eq s32 >|4| 0x00000001<, s32 0
    0x00000003 cbr s32 >|4| 0x00000002<, |9|, |10|
  BASICBLOCK |5|
    0x00000000 ret
  BASICBLOCK |6|
    0x00000000 var *f 0x00000004
    0x00000001 var *f 0x00000005
    0x00000002 call aiA "captMouseViewPosition" (*f >|6| 0x00000000<, *f >|6| 0x00000001<) void
    0x00000003 br |8|
  BASICBLOCK |7|
    0x00000000 var *f 0x00000004
    0x00000001 var *f 0x00000005
    0x00000002 call agA "captMouseFramePosition" (*f >|7| 0x00000000<, *f >|7| 0x00000001<) void
    0x00000003 br |8|
  BASICBLOCK |8|
    0x00000000 var *f 0x00000004
    0x00000001 load *f >|8| 0x00000000<
    0x00000002 var *f 0x00000005
    0x00000003 load *f >|8| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|8| 0x00000004<
    0x00000006 add s32 >|8| 0x00000005<, s32 1
    0x00000007 gvar *__funcptr_type_kind 0x000008CB
    0x00000008 load *__funcptr_type_kind >|8| 0x00000007<
    0x00000009 calladdr __funcptr_type_kind >|8| 0x00000008<(f >|8| 0x00000001<, f >|8| 0x00000003<, s32 >|8| 0x00000006<) void
    0x0000000A br |5|
  BASICBLOCK |9|
    0x00000000 gvar *__funcptr_type_kind 0x000008CD
    0x00000001 load *__funcptr_type_kind >|9| 0x00000000<
    0x00000002 bc __funcptr_type_kind >|9| 0x00000001< to *s8
    0x00000003 inz *s8 >|9| 0x00000002<
    0x00000004 br |10|
  BASICBLOCK |10|
    0x00000000 phi2 |4| -> bool false, |9| -> bool >|9| 0x00000003<
    0x00000001 cbr bool >|10| 0x00000000<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 gvar *bool 0x000008CE
    0x00000001 load *bool >|11| 0x00000000<
    0x00000002 cbr bool >|11| 0x00000001<, |13|, |14|
  BASICBLOCK |12|
    0x00000000 br |5|
  BASICBLOCK |13|
    0x00000000 var *f 0x00000006
    0x00000001 var *f 0x00000007
    0x00000002 call aiA "captMouseViewPosition" (*f >|13| 0x00000000<, *f >|13| 0x00000001<) void
    0x00000003 br |15|
  BASICBLOCK |14|
    0x00000000 var *f 0x00000006
    0x00000001 var *f 0x00000007
    0x00000002 call agA "captMouseFramePosition" (*f >|14| 0x00000000<, *f >|14| 0x00000001<) void
    0x00000003 br |15|
  BASICBLOCK |15|
    0x00000000 var *f 0x00000006
    0x00000001 load *f >|15| 0x00000000<
    0x00000002 var *f 0x00000007
    0x00000003 load *f >|15| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|15| 0x00000004<
    0x00000006 add s32 >|15| 0x00000005<, s32 1
    0x00000007 gvar *__funcptr_type_kind 0x000008CD
    0x00000008 load *__funcptr_type_kind >|15| 0x00000007<
    0x00000009 calladdr __funcptr_type_kind >|15| 0x00000008<(f >|15| 0x00000001<, f >|15| 0x00000003<, s32 >|15| 0x00000006<) void
    0x0000000A br |12|
fn _captKeyCallback aZA -> void
    {3 BBs, 18 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
  BASICBLOCK |0|
    0x00000000 gvar *__funcptr_type_kind 0x000008CF
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 bc __funcptr_type_kind >|0| 0x00000001< to *s8
    0x00000003 inz *s8 >|0| 0x00000002<
    0x00000004 cbr bool >|0| 0x00000003<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|1| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|1| 0x00000002<
    0x00000004 var *s32 0x00000003
    0x00000005 load *s32 >|1| 0x00000004<
    0x00000006 var *s32 0x00000004
    0x00000007 load *s32 >|1| 0x00000006<
    0x00000008 gvar *__funcptr_type_kind 0x000008CF
    0x00000009 load *__funcptr_type_kind >|1| 0x00000008<
    0x0000000A calladdr __funcptr_type_kind >|1| 0x00000009<(s32 >|1| 0x00000001<, s32 >|1| 0x00000003<, s32 >|1| 0x00000005<, s32 >|1| 0x00000007<) void
    0x0000000B br |2|
  BASICBLOCK |2|
    0x00000000 ret
fn captViewWidth aaA -> f
    {1 BBs, 3 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *f 0x000008D2
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 ret f >|0| 0x00000001<
fn captViewHeight abA -> f
    {1 BBs, 3 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *f 0x000008D3
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 ret f >|0| 0x00000001<
fn captFrameWidth acA -> s32
    {1 BBs, 8 INSTRs, 2 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *s32 0x00000000
    0x00000003 var *s32 0x00000001
    0x00000004 call aC6 "glfwGetFramebufferSize" (*__unk_type_kind >|0| 0x00000001<, *s32 >|0| 0x00000002<, *s32 >|0| 0x00000003<) void
    0x00000005 var *s32 0x00000000
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 ret s32 >|0| 0x00000006<
fn captFrameHeight adA -> s32
    {1 BBs, 8 INSTRs, 2 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *s32 0x00000000
    0x00000003 var *s32 0x00000001
    0x00000004 call aC6 "glfwGetFramebufferSize" (*__unk_type_kind >|0| 0x00000001<, *s32 >|0| 0x00000002<, *s32 >|0| 0x00000003<) void
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 ret s32 >|0| 0x00000006<
fn captCustomView aeA -> void
    {1 BBs, 11 INSTRs, 2 VARs}
    [0x00000000 f]
    [0x00000001 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000000
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 gvar *f 0x000008D2
    0x00000003 store *f >|0| 0x00000002<, f >|0| 0x00000001<
    0x00000004 var *f 0x00000001
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 gvar *f 0x000008D3
    0x00000007 store *f >|0| 0x00000006<, f >|0| 0x00000005<
    0x00000008 gvar *bool 0x000008D4
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A ret
fn captDefaultView afA -> void
    {1 BBs, 3 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x000008D4
    0x00000001 store *bool >|0| 0x00000000<, bool false
    0x00000002 ret
fn captMouseFramePosition agA -> void
    {1 BBs, 18 INSTRs, 4 VARs}
    [0x00000000 *f]
    [0x00000001 *f]
    [0x00000002 d]
    [0x00000003 d]
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *d 0x00000002
    0x00000003 var *d 0x00000003
    0x00000004 call af6 "glfwGetCursorPos" (*__unk_type_kind >|0| 0x00000001<, *d >|0| 0x00000002<, *d >|0| 0x00000003<) void
    0x00000005 var *d 0x00000002
    0x00000006 load *d >|0| 0x00000005<
    0x00000007 ftrunc d >|0| 0x00000006< to f
    0x00000008 var **f 0x00000000
    0x00000009 load **f >|0| 0x00000008<
    0x0000000A store *f >|0| 0x00000009<, f >|0| 0x00000007<
    0x0000000B var *d 0x00000003
    0x0000000C load *d >|0| 0x0000000B<
    0x0000000D ftrunc d >|0| 0x0000000C< to f
    0x0000000E var **f 0x00000001
    0x0000000F load **f >|0| 0x0000000E<
    0x00000010 store *f >|0| 0x0000000F<, f >|0| 0x0000000D<
    0x00000011 ret
fn captMouseFramePosition ahA -> void
    {1 BBs, 8 INSTRs, 2 VARs}
    [0x00000000 *d]
    [0x00000001 *d]
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var **d 0x00000000
    0x00000003 load **d >|0| 0x00000002<
    0x00000004 var **d 0x00000001
    0x00000005 load **d >|0| 0x00000004<
    0x00000006 call af6 "glfwGetCursorPos" (*__unk_type_kind >|0| 0x00000001<, *d >|0| 0x00000003<, *d >|0| 0x00000005<) void
    0x00000007 ret
fn captMouseViewPosition aiA -> void
    {1 BBs, 28 INSTRs, 4 VARs}
    [0x00000000 *f]
    [0x00000001 *f]
    [0x00000002 d]
    [0x00000003 d]
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *d 0x00000002
    0x00000003 var *d 0x00000003
    0x00000004 call af6 "glfwGetCursorPos" (*__unk_type_kind >|0| 0x00000001<, *d >|0| 0x00000002<, *d >|0| 0x00000003<) void
    0x00000005 var *d 0x00000002
    0x00000006 load *d >|0| 0x00000005<
    0x00000007 ftrunc d >|0| 0x00000006< to f
    0x00000008 call aaA "captViewWidth" () f
    0x00000009 fmul f >|0| 0x00000007<, f >|0| 0x00000008<
    0x0000000A call acA "captFrameWidth" () s32
    0x0000000B si2fp s32 >|0| 0x0000000A< to f
    0x0000000C fdiv f >|0| 0x00000009<, f >|0| 0x0000000B<
    0x0000000D var **f 0x00000000
    0x0000000E load **f >|0| 0x0000000D<
    0x0000000F store *f >|0| 0x0000000E<, f >|0| 0x0000000C<
    0x00000010 var *d 0x00000003
    0x00000011 load *d >|0| 0x00000010<
    0x00000012 ftrunc d >|0| 0x00000011< to f
    0x00000013 call abA "captViewHeight" () f
    0x00000014 fmul f >|0| 0x00000012<, f >|0| 0x00000013<
    0x00000015 call adA "captFrameHeight" () s32
    0x00000016 si2fp s32 >|0| 0x00000015< to f
    0x00000017 fdiv f >|0| 0x00000014<, f >|0| 0x00000016<
    0x00000018 var **f 0x00000001
    0x00000019 load **f >|0| 0x00000018<
    0x0000001A store *f >|0| 0x00000019<, f >|0| 0x00000017<
    0x0000001B ret
fn captResizable ajA -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 bool]
  BASICBLOCK |0|
    0x00000000 var *bool 0x00000000
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 gvar *bool 0x000008D5
    0x00000003 store *bool >|0| 0x00000002<, bool >|0| 0x00000001<
    0x00000004 ret
fn captOnSetup akA -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 __funcptr_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008C6
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 ret
fn captOnExit alA -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 __funcptr_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008C7
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 ret
fn captOnDraw amA -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 __funcptr_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008C8
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 ret
fn captOnStep anA -> void
    {1 BBs, 8 INSTRs, 1 VARs}
    [0x00000000 __funcptr_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008C9
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 gvar *u32 0x000008CA
    0x00000005 reinterp s32 60 to u32
    0x00000006 store *u32 >|0| 0x00000004<, u32 >|0| 0x00000005<
    0x00000007 ret
fn captOnStep aoA -> void
    {4 BBs, 18 INSTRs, 2 VARs}
    [0x00000000 __funcptr_type_kind]
    [0x00000001 u32]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008C9
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 var *u32 0x00000001
    0x00000005 load *u32 >|0| 0x00000004<
    0x00000006 eq u32 >|0| 0x00000005<, u32 0
    0x00000007 cbr u32 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *u32 0x000008CA
    0x00000001 reinterp s32 1000000 to u32
    0x00000002 store *u32 >|1| 0x00000000<, u32 >|1| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 var *u32 0x00000001
    0x00000001 load *u32 >|2| 0x00000000<
    0x00000002 gvar *u32 0x000008CA
    0x00000003 store *u32 >|2| 0x00000002<, u32 >|2| 0x00000001<
    0x00000004 br |3|
  BASICBLOCK |3|
    0x00000000 ret
fn captOnClick apA -> void
    {1 BBs, 9 INSTRs, 2 VARs}
    [0x00000000 __funcptr_type_kind]
    [0x00000001 bool]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008CB
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 var *bool 0x00000001
    0x00000005 load *bool >|0| 0x00000004<
    0x00000006 gvar *bool 0x000008CC
    0x00000007 store *bool >|0| 0x00000006<, bool >|0| 0x00000005<
    0x00000008 ret
fn captOnRelease aqA -> void
    {1 BBs, 9 INSTRs, 2 VARs}
    [0x00000000 __funcptr_type_kind]
    [0x00000001 bool]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008CD
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 var *bool 0x00000001
    0x00000005 load *bool >|0| 0x00000004<
    0x00000006 gvar *bool 0x000008CE
    0x00000007 store *bool >|0| 0x00000006<, bool >|0| 0x00000005<
    0x00000008 ret
fn captOnKey arA -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 __funcptr_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__funcptr_type_kind 0x00000000
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 gvar *__funcptr_type_kind 0x000008CF
    0x00000003 store *__funcptr_type_kind >|0| 0x00000002<, __funcptr_type_kind >|0| 0x00000001<
    0x00000004 ret
fn captColor asA -> __unk_type_kind
    {1 BBs, 8 INSTRs, 3 VARs}
    [0x00000000 f]
    [0x00000001 f]
    [0x00000002 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000000
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 var *f 0x00000001
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 var *f 0x00000002
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 call atA "captColor" (f >|0| 0x00000001<, f >|0| 0x00000003<, f >|0| 0x00000005<, f 1.000000) __unk_type_kind
    0x00000007 ret __unk_type_kind >|0| 0x00000006<
fn captColor atA -> __unk_type_kind
    {1 BBs, 25 INSTRs, 5 VARs}
    [0x00000000 f]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000000
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000004
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *f >|0| 0x00000003<, f >|0| 0x00000001<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000006<
    0x0000000A var *f 0x00000002
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000004
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *f >|0| 0x0000000D<, f >|0| 0x0000000B<
    0x0000000F var *f 0x00000003
    0x00000010 load *f >|0| 0x0000000F<
    0x00000011 var *__unk_type_kind 0x00000004
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 store *f >|0| 0x00000012<, f >|0| 0x00000010<
    0x00000014 var *__unk_type_kind 0x00000004
    0x00000015 call auG "__defer__" (*__unk_type_kind >|0| 0x00000014<) void
    0x00000016 var *__unk_type_kind 0x00000004
    0x00000017 load *__unk_type_kind >|0| 0x00000016<
    0x00000018 ret __unk_type_kind >|0| 0x00000017<
fn captColor auA -> __unk_type_kind
    {1 BBs, 8 INSTRs, 3 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 call avA "captColor" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 255) __unk_type_kind
    0x00000007 ret __unk_type_kind >|0| 0x00000006<
fn captColor avA -> __unk_type_kind
    {1 BBs, 33 INSTRs, 5 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 si2fp s32 >|0| 0x00000001< to f
    0x00000003 fdiv f >|0| 0x00000002<, f 255.000000
    0x00000004 var *__unk_type_kind 0x00000004
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 store *f >|0| 0x00000005<, f >|0| 0x00000003<
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 si2fp s32 >|0| 0x00000008< to f
    0x0000000A fdiv f >|0| 0x00000009<, f 255.000000
    0x0000000B var *__unk_type_kind 0x00000004
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D store *f >|0| 0x0000000C<, f >|0| 0x0000000A<
    0x0000000E var *s32 0x00000002
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 si2fp s32 >|0| 0x0000000F< to f
    0x00000011 fdiv f >|0| 0x00000010<, f 255.000000
    0x00000012 var *__unk_type_kind 0x00000004
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 2
    0x00000014 store *f >|0| 0x00000013<, f >|0| 0x00000011<
    0x00000015 var *s32 0x00000003
    0x00000016 load *s32 >|0| 0x00000015<
    0x00000017 si2fp s32 >|0| 0x00000016< to f
    0x00000018 fdiv f >|0| 0x00000017<, f 255.000000
    0x00000019 var *__unk_type_kind 0x00000004
    0x0000001A memb *__unk_type_kind >|0| 0x00000019<, 3
    0x0000001B store *f >|0| 0x0000001A<, f >|0| 0x00000018<
    0x0000001C var *__unk_type_kind 0x00000004
    0x0000001D call auG "__defer__" (*__unk_type_kind >|0| 0x0000001C<) void
    0x0000001E var *__unk_type_kind 0x00000004
    0x0000001F load *__unk_type_kind >|0| 0x0000001E<
    0x00000020 ret __unk_type_kind >|0| 0x0000001F<
fn captClearColor awA -> void
    {1 BBs, 18 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 1
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 2
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 3
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C call aS "glClearColor" (f >|0| 0x00000002<, f >|0| 0x00000005<, f >|0| 0x00000008<, f >|0| 0x0000000B<) void
    0x0000000D reinterp s32 16384 to u32
    0x0000000E call aQ "glClear" (u32 >|0| 0x0000000D<) void
    0x0000000F var *__unk_type_kind 0x00000000
    0x00000010 call auG "__defer__" (*__unk_type_kind >|0| 0x0000000F<) void
    0x00000011 ret
fn invalidate axA -> void
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 reinterp s32 0 to u32
    0x00000004 store *u32 >|0| 0x00000002<, u32 >|0| 0x00000003<
    0x00000005 ret
fn isValid ayA -> bool
    {1 BBs, 7 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *u32 >|0| 0x00000002<
    0x00000004 zext bool false to u32
    0x00000005 neq u32 >|0| 0x00000003<, u32 >|0| 0x00000004<
    0x00000006 ret u32 >|0| 0x00000005<
fn free azA -> void
    {3 BBs, 13 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *u32 >|0| 0x00000002<
    0x00000004 reinterp s32 0 to u32
    0x00000005 neq u32 >|0| 0x00000003<, u32 >|0| 0x00000004<
    0x00000006 cbr u32 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 0
    0x00000003 call aD1 "glDeleteTextures" (s32 1, *u32 >|1| 0x00000002<) void
    0x00000004 br |2|
  BASICBLOCK |2|
    0x00000000 ret
fn captTexture a0B -> __unk_type_kind
    {1 BBs, 4 INSTRs, 1 VARs}
    [0x00000000 *u8]
  BASICBLOCK |0|
    0x00000000 var **u8 0x00000000
    0x00000001 load **u8 >|0| 0x00000000<
    0x00000002 call a1B "captTexture" (*u8 >|0| 0x00000001<, bool true) __unk_type_kind
    0x00000003 ret __unk_type_kind >|0| 0x00000002<
fn captTexture a1B -> __unk_type_kind
    {5 BBs, 79 INSTRs, 8 VARs}
    [0x00000000 *u8]
    [0x00000001 bool]
    [0x00000002 __unk_type_kind]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 s32]
    [0x00000006 *u8]
    [0x00000007 u32]
  BASICBLOCK |0|
    0x00000000 var **u8 0x00000000
    0x00000001 load **u8 >|0| 0x00000000<
    0x00000002 var *s32 0x00000003
    0x00000003 var *s32 0x00000004
    0x00000004 var *s32 0x00000005
    0x00000005 call aC7 "stbi_load" (*u8 >|0| 0x00000001<, *s32 >|0| 0x00000002<, *s32 >|0| 0x00000003<, *s32 >|0| 0x00000004<, s32 4) *u8
    0x00000006 var **u8 0x00000006
    0x00000007 store **u8 >|0| 0x00000006<, *u8 >|0| 0x00000005<
    0x00000008 var **u8 0x00000006
    0x00000009 load **u8 >|0| 0x00000008<
    0x0000000A bc null to *u8
    0x0000000B eq *u8 >|0| 0x00000009<, *u8 >|0| 0x0000000A<
    0x0000000C cbr *u8 >|0| 0x0000000B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 0
    0x00000002 reinterp s32 0 to u32
    0x00000003 store *u32 >|1| 0x00000001<, u32 >|1| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 call azD "__defer__" (*__unk_type_kind >|1| 0x00000004<) void
    0x00000006 var *__unk_type_kind 0x00000002
    0x00000007 load *__unk_type_kind >|1| 0x00000006<
    0x00000008 ret __unk_type_kind >|1| 0x00000007<
  BASICBLOCK |2|
    0x00000000 var *u32 0x00000007
    0x00000001 store *u32 >|2| 0x00000000<, u32 9728
    0x00000002 var *bool 0x00000001
    0x00000003 load *bool >|2| 0x00000002<
    0x00000004 cbr bool >|2| 0x00000003<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var *u32 0x00000007
    0x00000001 reinterp s32 9729 to u32
    0x00000002 store *u32 >|3| 0x00000000<, u32 >|3| 0x00000001<
    0x00000003 br |4|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 0
    0x00000002 call aq1 "glGenTextures" (s32 1, *u32 >|4| 0x00000001<) void
    0x00000003 var *__unk_type_kind 0x00000002
    0x00000004 memb *__unk_type_kind >|4| 0x00000003<, 0
    0x00000005 load *u32 >|4| 0x00000004<
    0x00000006 reinterp s32 3553 to u32
    0x00000007 call aL "glBindTexture" (u32 >|4| 0x00000006<, u32 >|4| 0x00000005<) void
    0x00000008 var *u32 0x00000007
    0x00000009 load *u32 >|4| 0x00000008<
    0x0000000A reinterp s32 3553 to u32
    0x0000000B reinterp s32 10241 to u32
    0x0000000C call aA5 "glTexParameteri" (u32 >|4| 0x0000000A<, u32 >|4| 0x0000000B<, u32 >|4| 0x00000009<) void
    0x0000000D var *u32 0x00000007
    0x0000000E load *u32 >|4| 0x0000000D<
    0x0000000F reinterp s32 3553 to u32
    0x00000010 reinterp s32 10240 to u32
    0x00000011 call aA5 "glTexParameteri" (u32 >|4| 0x0000000F<, u32 >|4| 0x00000010<, u32 >|4| 0x0000000E<) void
    0x00000012 reinterp s32 3553 to u32
    0x00000013 reinterp s32 10242 to u32
    0x00000014 reinterp s32 33071 to u32
    0x00000015 call aA5 "glTexParameteri" (u32 >|4| 0x00000012<, u32 >|4| 0x00000013<, u32 >|4| 0x00000014<) void
    0x00000016 reinterp s32 3553 to u32
    0x00000017 reinterp s32 10243 to u32
    0x00000018 reinterp s32 33071 to u32
    0x00000019 call aA5 "glTexParameteri" (u32 >|4| 0x00000016<, u32 >|4| 0x00000017<, u32 >|4| 0x00000018<) void
    0x0000001A var *s32 0x00000003
    0x0000001B load *s32 >|4| 0x0000001A<
    0x0000001C var *s32 0x00000004
    0x0000001D load *s32 >|4| 0x0000001C<
    0x0000001E var **u8 0x00000006
    0x0000001F load **u8 >|4| 0x0000001E<
    0x00000020 reinterp s32 3553 to u32
    0x00000021 reinterp s32 6408 to u32
    0x00000022 reinterp s32 6408 to u32
    0x00000023 reinterp s32 5121 to u32
    0x00000024 bc *u8 >|4| 0x0000001F< to *s8
    0x00000025 call a75 "glTexImage2D" (u32 >|4| 0x00000020<, s32 0, u32 >|4| 0x00000021<, s32 >|4| 0x0000001B<, s32 >|4| 0x0000001D<, s32 0, u32 >|4| 0x00000022<, u32 >|4| 0x00000023<, *s8 >|4| 0x00000024<) void
    0x00000026 reinterp s32 3553 to u32
    0x00000027 call aL "glBindTexture" (u32 >|4| 0x00000026<, u32 0) void
    0x00000028 var **u8 0x00000006
    0x00000029 load **u8 >|4| 0x00000028<
    0x0000002A call aD7 "stbi_image_free" (*u8 >|4| 0x00000029<) void
    0x0000002B var *__unk_type_kind 0x00000002
    0x0000002C call azD "__defer__" (*__unk_type_kind >|4| 0x0000002B<) void
    0x0000002D var *__unk_type_kind 0x00000002
    0x0000002E load *__unk_type_kind >|4| 0x0000002D<
    0x0000002F ret __unk_type_kind >|4| 0x0000002E<
fn create a2B -> void
    {1 BBs, 122 INSTRs, 5 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *f]
    [0x00000002 u64]
    [0x00000003 *f]
    [0x00000004 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000002
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 zext u32 3 to u64
    0x00000003 udiv u64 >|0| 0x00000001<, u64 >|0| 0x00000002<
    0x00000004 trunc u64 >|0| 0x00000003< to s32
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 4
    0x00000008 store *s32 >|0| 0x00000007<, s32 >|0| 0x00000004<
    0x00000009 var **__unk_type_kind 0x00000000
    0x0000000A load **__unk_type_kind >|0| 0x00000009<
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 1
    0x0000000C store *u32 >|0| 0x0000000B<, u32 0
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|0| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 1
    0x00000010 gvar *__funcptr_type_kind 0x00000201
    0x00000011 load *__funcptr_type_kind >|0| 0x00000010<
    0x00000012 calladdr __funcptr_type_kind >|0| 0x00000011<(s32 1, *u32 >|0| 0x0000000F<) void
    0x00000013 var **__unk_type_kind 0x00000000
    0x00000014 load **__unk_type_kind >|0| 0x00000013<
    0x00000015 memb *__unk_type_kind >|0| 0x00000014<, 1
    0x00000016 load *u32 >|0| 0x00000015<
    0x00000017 gvar *__funcptr_type_kind 0x0000002F
    0x00000018 load *__funcptr_type_kind >|0| 0x00000017<
    0x00000019 reinterp s32 34962 to u32
    0x0000001A calladdr __funcptr_type_kind >|0| 0x00000018<(u32 >|0| 0x00000019<, u32 >|0| 0x00000016<) void
    0x0000001B sizeof f
    0x0000001C var *u64 0x00000002
    0x0000001D load *u64 >|0| 0x0000001C<
    0x0000001E mul u64 >|0| 0x0000001B<, u64 >|0| 0x0000001D<
    0x0000001F trunc u64 >|0| 0x0000001E< to s32
    0x00000020 var **f 0x00000001
    0x00000021 load **f >|0| 0x00000020<
    0x00000022 gvar *__funcptr_type_kind 0x00000070
    0x00000023 load *__funcptr_type_kind >|0| 0x00000022<
    0x00000024 reinterp s32 34962 to u32
    0x00000025 bc *f >|0| 0x00000021< to *s8
    0x00000026 reinterp s32 35044 to u32
    0x00000027 calladdr __funcptr_type_kind >|0| 0x00000023<(u32 >|0| 0x00000024<, s32 >|0| 0x0000001F<, *s8 >|0| 0x00000025<, u32 >|0| 0x00000026<) void
    0x00000028 var **__unk_type_kind 0x00000000
    0x00000029 load **__unk_type_kind >|0| 0x00000028<
    0x0000002A memb *__unk_type_kind >|0| 0x00000029<, 2
    0x0000002B store *u32 >|0| 0x0000002A<, u32 0
    0x0000002C var **__unk_type_kind 0x00000000
    0x0000002D load **__unk_type_kind >|0| 0x0000002C<
    0x0000002E memb *__unk_type_kind >|0| 0x0000002D<, 2
    0x0000002F gvar *__funcptr_type_kind 0x00000201
    0x00000030 load *__funcptr_type_kind >|0| 0x0000002F<
    0x00000031 calladdr __funcptr_type_kind >|0| 0x00000030<(s32 1, *u32 >|0| 0x0000002E<) void
    0x00000032 var **__unk_type_kind 0x00000000
    0x00000033 load **__unk_type_kind >|0| 0x00000032<
    0x00000034 memb *__unk_type_kind >|0| 0x00000033<, 2
    0x00000035 load *u32 >|0| 0x00000034<
    0x00000036 gvar *__funcptr_type_kind 0x0000002F
    0x00000037 load *__funcptr_type_kind >|0| 0x00000036<
    0x00000038 reinterp s32 34962 to u32
    0x00000039 calladdr __funcptr_type_kind >|0| 0x00000037<(u32 >|0| 0x00000038<, u32 >|0| 0x00000035<) void
    0x0000003A sizeof f
    0x0000003B var *u64 0x00000004
    0x0000003C load *u64 >|0| 0x0000003B<
    0x0000003D mul u64 >|0| 0x0000003A<, u64 >|0| 0x0000003C<
    0x0000003E trunc u64 >|0| 0x0000003D< to s32
    0x0000003F var **f 0x00000003
    0x00000040 load **f >|0| 0x0000003F<
    0x00000041 gvar *__funcptr_type_kind 0x00000070
    0x00000042 load *__funcptr_type_kind >|0| 0x00000041<
    0x00000043 reinterp s32 34962 to u32
    0x00000044 bc *f >|0| 0x00000040< to *s8
    0x00000045 reinterp s32 35044 to u32
    0x00000046 calladdr __funcptr_type_kind >|0| 0x00000042<(u32 >|0| 0x00000043<, s32 >|0| 0x0000003E<, *s8 >|0| 0x00000044<, u32 >|0| 0x00000045<) void
    0x00000047 var **__unk_type_kind 0x00000000
    0x00000048 load **__unk_type_kind >|0| 0x00000047<
    0x00000049 memb *__unk_type_kind >|0| 0x00000048<, 0
    0x0000004A gvar *__funcptr_type_kind 0x0000021B
    0x0000004B load *__funcptr_type_kind >|0| 0x0000004A<
    0x0000004C calladdr __funcptr_type_kind >|0| 0x0000004B<(s32 1, *u32 >|0| 0x00000049<) void
    0x0000004D var **__unk_type_kind 0x00000000
    0x0000004E load **__unk_type_kind >|0| 0x0000004D<
    0x0000004F memb *__unk_type_kind >|0| 0x0000004E<, 0
    0x00000050 load *u32 >|0| 0x0000004F<
    0x00000051 gvar *__funcptr_type_kind 0x0000004C
    0x00000052 load *__funcptr_type_kind >|0| 0x00000051<
    0x00000053 calladdr __funcptr_type_kind >|0| 0x00000052<(u32 >|0| 0x00000050<) void
    0x00000054 gvar *__funcptr_type_kind 0x00000195
    0x00000055 load *__funcptr_type_kind >|0| 0x00000054<
    0x00000056 calladdr __funcptr_type_kind >|0| 0x00000055<(u32 0) void
    0x00000057 var **__unk_type_kind 0x00000000
    0x00000058 load **__unk_type_kind >|0| 0x00000057<
    0x00000059 memb *__unk_type_kind >|0| 0x00000058<, 1
    0x0000005A load *u32 >|0| 0x00000059<
    0x0000005B gvar *__funcptr_type_kind 0x0000002F
    0x0000005C load *__funcptr_type_kind >|0| 0x0000005B<
    0x0000005D reinterp s32 34962 to u32
    0x0000005E calladdr __funcptr_type_kind >|0| 0x0000005C<(u32 >|0| 0x0000005D<, u32 >|0| 0x0000005A<) void
    0x0000005F gvar *__funcptr_type_kind 0x00000832
    0x00000060 load *__funcptr_type_kind >|0| 0x0000005F<
    0x00000061 reinterp s32 5126 to u32
    0x00000062 calladdr __funcptr_type_kind >|0| 0x00000060<(u32 0, s32 3, u32 >|0| 0x00000061<, bool false, s32 0, null) void
    0x00000063 gvar *__funcptr_type_kind 0x00000195
    0x00000064 load *__funcptr_type_kind >|0| 0x00000063<
    0x00000065 calladdr __funcptr_type_kind >|0| 0x00000064<(u32 1) void
    0x00000066 var **__unk_type_kind 0x00000000
    0x00000067 load **__unk_type_kind >|0| 0x00000066<
    0x00000068 memb *__unk_type_kind >|0| 0x00000067<, 2
    0x00000069 load *u32 >|0| 0x00000068<
    0x0000006A gvar *__funcptr_type_kind 0x0000002F
    0x0000006B load *__funcptr_type_kind >|0| 0x0000006A<
    0x0000006C reinterp s32 34962 to u32
    0x0000006D calladdr __funcptr_type_kind >|0| 0x0000006B<(u32 >|0| 0x0000006C<, u32 >|0| 0x00000069<) void
    0x0000006E gvar *__funcptr_type_kind 0x00000832
    0x0000006F load *__funcptr_type_kind >|0| 0x0000006E<
    0x00000070 reinterp s32 5126 to u32
    0x00000071 calladdr __funcptr_type_kind >|0| 0x0000006F<(u32 1, s32 2, u32 >|0| 0x00000070<, bool false, s32 0, null) void
    0x00000072 gvar *__funcptr_type_kind 0x0000002F
    0x00000073 load *__funcptr_type_kind >|0| 0x00000072<
    0x00000074 reinterp s32 34962 to u32
    0x00000075 calladdr __funcptr_type_kind >|0| 0x00000073<(u32 >|0| 0x00000074<, u32 0) void
    0x00000076 gvar *__funcptr_type_kind 0x0000004C
    0x00000077 load *__funcptr_type_kind >|0| 0x00000076<
    0x00000078 calladdr __funcptr_type_kind >|0| 0x00000077<(u32 0) void
    0x00000079 ret
fn draw a3B -> void
    {1 BBs, 14 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *u32 >|0| 0x00000002<
    0x00000004 gvar *__funcptr_type_kind 0x0000004C
    0x00000005 load *__funcptr_type_kind >|0| 0x00000004<
    0x00000006 calladdr __funcptr_type_kind >|0| 0x00000005<(u32 >|0| 0x00000003<) void
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|0| 0x00000007<
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 4
    0x0000000A load *s32 >|0| 0x00000009<
    0x0000000B reinterp s32 4 to u32
    0x0000000C call aJ1 "glDrawArrays" (u32 >|0| 0x0000000B<, s32 0, s32 >|0| 0x0000000A<) void
    0x0000000D ret
fn free a4B -> void
    {1 BBs, 19 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 gvar *__funcptr_type_kind 0x0000012D
    0x00000004 load *__funcptr_type_kind >|0| 0x00000003<
    0x00000005 calladdr __funcptr_type_kind >|0| 0x00000004<(s32 1, *u32 >|0| 0x00000002<) void
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 2
    0x00000009 gvar *__funcptr_type_kind 0x0000012D
    0x0000000A load *__funcptr_type_kind >|0| 0x00000009<
    0x0000000B calladdr __funcptr_type_kind >|0| 0x0000000A<(s32 1, *u32 >|0| 0x00000008<) void
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 0
    0x0000000F gvar *__funcptr_type_kind 0x0000014A
    0x00000010 load *__funcptr_type_kind >|0| 0x0000000F<
    0x00000011 calladdr __funcptr_type_kind >|0| 0x00000010<(s32 1, *u32 >|0| 0x0000000E<) void
    0x00000012 ret
fn captBindTexture a5B -> void
    {1 BBs, 12 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 gvar *__funcptr_type_kind 0x00000009
    0x00000001 load *__funcptr_type_kind >|0| 0x00000000<
    0x00000002 reinterp s32 33984 to u32
    0x00000003 calladdr __funcptr_type_kind >|0| 0x00000001<(u32 >|0| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *u32 >|0| 0x00000005<
    0x00000007 reinterp s32 3553 to u32
    0x00000008 call aL "glBindTexture" (u32 >|0| 0x00000007<, u32 >|0| 0x00000006<) void
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A call azD "__defer__" (*__unk_type_kind >|0| 0x00000009<) void
    0x0000000B ret
fn create a6B -> void
    {9 BBs, 179 INSTRs, 6 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *u8]
    [0x00000002 *u8]
    [0x00000003 s32]
    [0x00000004 *u8]
    [0x00000005 s32]
  BASICBLOCK |0|
    0x00000000 varzi 0x00000003
    0x00000001 varzi 0x00000004
    0x00000002 varzi 0x00000005
    0x00000003 gvar *__funcptr_type_kind 0x0000011A
    0x00000004 load *__funcptr_type_kind >|0| 0x00000003<
    0x00000005 reinterp s32 35633 to u32
    0x00000006 calladdr __funcptr_type_kind >|0| 0x00000004<(u32 >|0| 0x00000005<) u32
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|0| 0x00000007<
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 1
    0x0000000A store *u32 >|0| 0x00000009<, u32 >|0| 0x00000006<
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|0| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 1
    0x0000000E load *u32 >|0| 0x0000000D<
    0x0000000F var **u8 0x00000001
    0x00000010 gvar *__funcptr_type_kind 0x0000060D
    0x00000011 load *__funcptr_type_kind >|0| 0x00000010<
    0x00000012 bc null to *s32
    0x00000013 calladdr __funcptr_type_kind >|0| 0x00000011<(u32 >|0| 0x0000000E<, s32 1, **u8 >|0| 0x0000000F<, *s32 >|0| 0x00000012<) void
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|0| 0x00000014<
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 load *u32 >|0| 0x00000016<
    0x00000018 gvar *__funcptr_type_kind 0x000000C3
    0x00000019 load *__funcptr_type_kind >|0| 0x00000018<
    0x0000001A calladdr __funcptr_type_kind >|0| 0x00000019<(u32 >|0| 0x00000017<) void
    0x0000001B var **__unk_type_kind 0x00000000
    0x0000001C load **__unk_type_kind >|0| 0x0000001B<
    0x0000001D memb *__unk_type_kind >|0| 0x0000001C<, 1
    0x0000001E load *u32 >|0| 0x0000001D<
    0x0000001F var *s32 0x00000005
    0x00000020 gvar *__funcptr_type_kind 0x00000328
    0x00000021 load *__funcptr_type_kind >|0| 0x00000020<
    0x00000022 reinterp s32 35713 to u32
    0x00000023 calladdr __funcptr_type_kind >|0| 0x00000021<(u32 >|0| 0x0000001E<, u32 >|0| 0x00000022<, *s32 >|0| 0x0000001F<) void
    0x00000024 var *s32 0x00000005
    0x00000025 load *s32 >|0| 0x00000024<
    0x00000026 eq s32 >|0| 0x00000025<, s32 0
    0x00000027 cbr s32 >|0| 0x00000026<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call a28 "puts" (cstroflen 32 "Failed to compile vertex shader") s32
    0x00000001 zext s32 1024 to u64
    0x00000002 call aU7 "malloc" (u64 >|1| 0x00000001<) *s8
    0x00000003 var **u8 0x00000004
    0x00000004 bc *s8 >|1| 0x00000002< to *u8
    0x00000005 store **u8 >|1| 0x00000003<, *u8 >|1| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|1| 0x00000006<
    0x00000008 memb *__unk_type_kind >|1| 0x00000007<, 1
    0x00000009 load *u32 >|1| 0x00000008<
    0x0000000A var *s32 0x00000003
    0x0000000B var **u8 0x00000004
    0x0000000C load **u8 >|1| 0x0000000B<
    0x0000000D gvar *__funcptr_type_kind 0x00000327
    0x0000000E load *__funcptr_type_kind >|1| 0x0000000D<
    0x0000000F calladdr __funcptr_type_kind >|1| 0x0000000E<(u32 >|1| 0x00000009<, s32 1024, *s32 >|1| 0x0000000A<, *u8 >|1| 0x0000000C<) void
    0x00000010 var *s32 0x00000003
    0x00000011 load *s32 >|1| 0x00000010<
    0x00000012 neq s32 >|1| 0x00000011<, s32 0
    0x00000013 cbr s32 >|1| 0x00000012<, |3|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *__funcptr_type_kind 0x0000011A
    0x00000001 load *__funcptr_type_kind >|2| 0x00000000<
    0x00000002 reinterp s32 35632 to u32
    0x00000003 calladdr __funcptr_type_kind >|2| 0x00000001<(u32 >|2| 0x00000002<) u32
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 store *u32 >|2| 0x00000006<, u32 >|2| 0x00000003<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|2| 0x00000008<
    0x0000000A memb *__unk_type_kind >|2| 0x00000009<, 2
    0x0000000B load *u32 >|2| 0x0000000A<
    0x0000000C var **u8 0x00000002
    0x0000000D gvar *__funcptr_type_kind 0x0000060D
    0x0000000E load *__funcptr_type_kind >|2| 0x0000000D<
    0x0000000F bc null to *s32
    0x00000010 calladdr __funcptr_type_kind >|2| 0x0000000E<(u32 >|2| 0x0000000B<, s32 1, **u8 >|2| 0x0000000C<, *s32 >|2| 0x0000000F<) void
    0x00000011 var **__unk_type_kind 0x00000000
    0x00000012 load **__unk_type_kind >|2| 0x00000011<
    0x00000013 memb *__unk_type_kind >|2| 0x00000012<, 2
    0x00000014 load *u32 >|2| 0x00000013<
    0x00000015 gvar *__funcptr_type_kind 0x000000C3
    0x00000016 load *__funcptr_type_kind >|2| 0x00000015<
    0x00000017 calladdr __funcptr_type_kind >|2| 0x00000016<(u32 >|2| 0x00000014<) void
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|2| 0x00000018<
    0x0000001A memb *__unk_type_kind >|2| 0x00000019<, 2
    0x0000001B load *u32 >|2| 0x0000001A<
    0x0000001C var *s32 0x00000005
    0x0000001D gvar *__funcptr_type_kind 0x00000328
    0x0000001E load *__funcptr_type_kind >|2| 0x0000001D<
    0x0000001F reinterp s32 35713 to u32
    0x00000020 calladdr __funcptr_type_kind >|2| 0x0000001E<(u32 >|2| 0x0000001B<, u32 >|2| 0x0000001F<, *s32 >|2| 0x0000001C<) void
    0x00000021 var *s32 0x00000005
    0x00000022 load *s32 >|2| 0x00000021<
    0x00000023 eq s32 >|2| 0x00000022<, s32 0
    0x00000024 cbr s32 >|2| 0x00000023<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 var **u8 0x00000004
    0x00000001 load **u8 >|3| 0x00000000<
    0x00000002 call a28 "puts" (*u8 >|3| 0x00000001<) s32
    0x00000003 br |4|
  BASICBLOCK |4|
    0x00000000 var **u8 0x00000004
    0x00000001 load **u8 >|4| 0x00000000<
    0x00000002 bc *u8 >|4| 0x00000001< to *s8
    0x00000003 call aT7 "free" (*s8 >|4| 0x00000002<) void
    0x00000004 br |2|
  BASICBLOCK |5|
    0x00000000 call a28 "puts" (cstroflen 34 "Failed to compile fragment shader") s32
    0x00000001 zext s32 1024 to u64
    0x00000002 call aU7 "malloc" (u64 >|5| 0x00000001<) *s8
    0x00000003 var **u8 0x00000004
    0x00000004 bc *s8 >|5| 0x00000002< to *u8
    0x00000005 store **u8 >|5| 0x00000003<, *u8 >|5| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|5| 0x00000006<
    0x00000008 memb *__unk_type_kind >|5| 0x00000007<, 2
    0x00000009 load *u32 >|5| 0x00000008<
    0x0000000A var *s32 0x00000003
    0x0000000B var **u8 0x00000004
    0x0000000C load **u8 >|5| 0x0000000B<
    0x0000000D gvar *__funcptr_type_kind 0x00000327
    0x0000000E load *__funcptr_type_kind >|5| 0x0000000D<
    0x0000000F calladdr __funcptr_type_kind >|5| 0x0000000E<(u32 >|5| 0x00000009<, s32 1024, *s32 >|5| 0x0000000A<, *u8 >|5| 0x0000000C<) void
    0x00000010 var *s32 0x00000003
    0x00000011 load *s32 >|5| 0x00000010<
    0x00000012 neq s32 >|5| 0x00000011<, s32 0
    0x00000013 cbr s32 >|5| 0x00000012<, |7|, |8|
  BASICBLOCK |6|
    0x00000000 gvar *__funcptr_type_kind 0x00000115
    0x00000001 load *__funcptr_type_kind >|6| 0x00000000<
    0x00000002 calladdr __funcptr_type_kind >|6| 0x00000001<() u32
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|6| 0x00000003<
    0x00000005 memb *__unk_type_kind >|6| 0x00000004<, 0
    0x00000006 store *u32 >|6| 0x00000005<, u32 >|6| 0x00000002<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|6| 0x00000007<
    0x00000009 memb *__unk_type_kind >|6| 0x00000008<, 0
    0x0000000A load *u32 >|6| 0x00000009<
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|6| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|6| 0x0000000C<, 1
    0x0000000E load *u32 >|6| 0x0000000D<
    0x0000000F gvar *__funcptr_type_kind 0x00000015
    0x00000010 load *__funcptr_type_kind >|6| 0x0000000F<
    0x00000011 calladdr __funcptr_type_kind >|6| 0x00000010<(u32 >|6| 0x0000000A<, u32 >|6| 0x0000000E<) void
    0x00000012 var **__unk_type_kind 0x00000000
    0x00000013 load **__unk_type_kind >|6| 0x00000012<
    0x00000014 memb *__unk_type_kind >|6| 0x00000013<, 0
    0x00000015 load *u32 >|6| 0x00000014<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|6| 0x00000016<
    0x00000018 memb *__unk_type_kind >|6| 0x00000017<, 2
    0x00000019 load *u32 >|6| 0x00000018<
    0x0000001A gvar *__funcptr_type_kind 0x00000015
    0x0000001B load *__funcptr_type_kind >|6| 0x0000001A<
    0x0000001C calladdr __funcptr_type_kind >|6| 0x0000001B<(u32 >|6| 0x00000015<, u32 >|6| 0x00000019<) void
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|6| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|6| 0x0000001E<, 0
    0x00000020 load *u32 >|6| 0x0000001F<
    0x00000021 gvar *__funcptr_type_kind 0x000003AE
    0x00000022 load *__funcptr_type_kind >|6| 0x00000021<
    0x00000023 calladdr __funcptr_type_kind >|6| 0x00000022<(u32 >|6| 0x00000020<) void
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|6| 0x00000024<
    0x00000026 memb *__unk_type_kind >|6| 0x00000025<, 0
    0x00000027 load *u32 >|6| 0x00000026<
    0x00000028 gvar *__funcptr_type_kind 0x0000072D
    0x00000029 load *__funcptr_type_kind >|6| 0x00000028<
    0x0000002A calladdr __funcptr_type_kind >|6| 0x00000029<(u32 >|6| 0x00000027<) void
    0x0000002B ret
  BASICBLOCK |7|
    0x00000000 var **u8 0x00000004
    0x00000001 load **u8 >|7| 0x00000000<
    0x00000002 call a28 "puts" (*u8 >|7| 0x00000001<) s32
    0x00000003 br |8|
  BASICBLOCK |8|
    0x00000000 var **u8 0x00000004
    0x00000001 load **u8 >|8| 0x00000000<
    0x00000002 bc *u8 >|8| 0x00000001< to *s8
    0x00000003 call aT7 "free" (*s8 >|8| 0x00000002<) void
    0x00000004 br |6|
fn use a7B -> void
    {1 BBs, 8 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *u32 >|0| 0x00000002<
    0x00000004 gvar *__funcptr_type_kind 0x00000728
    0x00000005 load *__funcptr_type_kind >|0| 0x00000004<
    0x00000006 calladdr __funcptr_type_kind >|0| 0x00000005<(u32 >|0| 0x00000003<) void
    0x00000007 ret
fn free a8B -> void
    {1 BBs, 44 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *u32 >|0| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *u32 >|0| 0x00000006<
    0x00000008 gvar *__funcptr_type_kind 0x00000155
    0x00000009 load *__funcptr_type_kind >|0| 0x00000008<
    0x0000000A calladdr __funcptr_type_kind >|0| 0x00000009<(u32 >|0| 0x00000003<, u32 >|0| 0x00000007<) void
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|0| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 0
    0x0000000E load *u32 >|0| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|0| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 2
    0x00000012 load *u32 >|0| 0x00000011<
    0x00000013 gvar *__funcptr_type_kind 0x00000155
    0x00000014 load *__funcptr_type_kind >|0| 0x00000013<
    0x00000015 calladdr __funcptr_type_kind >|0| 0x00000014<(u32 >|0| 0x0000000E<, u32 >|0| 0x00000012<) void
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|0| 0x00000016<
    0x00000018 memb *__unk_type_kind >|0| 0x00000017<, 1
    0x00000019 load *u32 >|0| 0x00000018<
    0x0000001A gvar *__funcptr_type_kind 0x00000144
    0x0000001B load *__funcptr_type_kind >|0| 0x0000001A<
    0x0000001C calladdr __funcptr_type_kind >|0| 0x0000001B<(u32 >|0| 0x00000019<) void
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|0| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|0| 0x0000001E<, 2
    0x00000020 load *u32 >|0| 0x0000001F<
    0x00000021 gvar *__funcptr_type_kind 0x00000144
    0x00000022 load *__funcptr_type_kind >|0| 0x00000021<
    0x00000023 calladdr __funcptr_type_kind >|0| 0x00000022<(u32 >|0| 0x00000020<) void
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|0| 0x00000024<
    0x00000026 memb *__unk_type_kind >|0| 0x00000025<, 0
    0x00000027 load *u32 >|0| 0x00000026<
    0x00000028 gvar *__funcptr_type_kind 0x0000013B
    0x00000029 load *__funcptr_type_kind >|0| 0x00000028<
    0x0000002A calladdr __funcptr_type_kind >|0| 0x00000029<(u32 >|0| 0x00000027<) void
    0x0000002B ret
fn getUniformLocation a9B -> s32
    {1 BBs, 10 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *u8]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *u32 >|0| 0x00000002<
    0x00000004 var **u8 0x00000001
    0x00000005 load **u8 >|0| 0x00000004<
    0x00000006 gvar *__funcptr_type_kind 0x0000034F
    0x00000007 load *__funcptr_type_kind >|0| 0x00000006<
    0x00000008 calladdr __funcptr_type_kind >|0| 0x00000007<(u32 >|0| 0x00000003<, *u8 >|0| 0x00000005<) s32
    0x00000009 ret s32 >|0| 0x00000008<
fn uploadFloat aAB -> void
    {1 BBs, 8 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 f]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *f 0x00000002
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 gvar *__funcptr_type_kind 0x000006B0
    0x00000005 load *__funcptr_type_kind >|0| 0x00000004<
    0x00000006 calladdr __funcptr_type_kind >|0| 0x00000005<(s32 >|0| 0x00000001<, f >|0| 0x00000003<) void
    0x00000007 ret
fn uploadMatrix4f aBB -> void
    {3 BBs, 16 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000002
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 bc null to *__unk_type_kind
    0x00000003 eq *__unk_type_kind >|0| 0x00000001<, *__unk_type_kind >|0| 0x00000002<
    0x00000004 cbr *__unk_type_kind >|0| 0x00000003<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000002
    0x00000003 load **__unk_type_kind >|2| 0x00000002<
    0x00000004 memb *__unk_type_kind >|2| 0x00000003<, 0
    0x00000005 bc *[16] f >|2| 0x00000004< to *f
    0x00000006 gvar *__funcptr_type_kind 0x0000071B
    0x00000007 load *__funcptr_type_kind >|2| 0x00000006<
    0x00000008 calladdr __funcptr_type_kind >|2| 0x00000007<(s32 >|2| 0x00000001<, s32 1, bool false, *f >|2| 0x00000005<) void
    0x00000009 ret
fn uploadMatrix4f aCB -> void
    {1 BBs, 11 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000002
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 bc *[16] f >|0| 0x00000003< to *f
    0x00000005 gvar *__funcptr_type_kind 0x0000071B
    0x00000006 load *__funcptr_type_kind >|0| 0x00000005<
    0x00000007 calladdr __funcptr_type_kind >|0| 0x00000006<(s32 >|0| 0x00000001<, s32 1, bool false, *f >|0| 0x00000004<) void
    0x00000008 var *__unk_type_kind 0x00000002
    0x00000009 call anD "__defer__" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A ret
fn captDrawTexture aDB -> void
    {9 BBs, 81 INSTRs, 9 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
    [0x00000005 __unk_type_kind]
    [0x00000006 __unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 var *f 0x00000001
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var *f 0x00000002
    0x00000004 load *f >|0| 0x00000003<
    0x00000005 call aq9 "translateFromIdentity" (*__unk_type_kind >|0| 0x00000000<, f >|0| 0x00000002<, f >|0| 0x00000004<, f 0.000000) void
    0x00000006 gvar *__unk_type_kind 0x000008D0
    0x00000007 gvar *s32 0x000008DC
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A load *__unk_type_kind >|0| 0x00000009<
    0x0000000B call aCB "uploadMatrix4f" (*__unk_type_kind >|0| 0x00000006<, s32 >|0| 0x00000008<, __unk_type_kind >|0| 0x0000000A<) void
    0x0000000C var *u64 0x00000006
    0x0000000D store *u64 >|0| 0x0000000C<, u64 0
    0x0000000E br |1|
  BASICBLOCK |1|
    0x00000000 gvar *u64 0x000008DA
    0x00000001 load *u64 >|1| 0x00000000<
    0x00000002 load *u64 >|0| 0x0000000C<
    0x00000003 ult u64 >|1| 0x00000002<, u64 >|1| 0x00000001<
    0x00000004 cbr u64 >|1| 0x00000003<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar **__unk_type_kind 0x000008D9
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000007
    0x00000003 load *u64 >|0| 0x0000000C<
    0x00000004 arracc *__unk_type_kind >|2| 0x00000001<, u64 >|2| 0x00000003<
    0x00000005 store *__unk_type_kind >|2| 0x00000002<, *__unk_type_kind >|2| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000007
    0x00000007 load **__unk_type_kind >|2| 0x00000006<
    0x00000008 memb *__unk_type_kind >|2| 0x00000007<, 1
    0x00000009 load *f >|2| 0x00000008<
    0x0000000A var *f 0x00000003
    0x0000000B load *f >|2| 0x0000000A<
    0x0000000C fneq f >|2| 0x00000009<, f >|2| 0x0000000B<
    0x0000000D cbr f >|2| 0x0000000C<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x0000000C<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x0000000C<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|4| 0x00000000<
    0x00000002 var *f 0x00000004
    0x00000003 load *f >|4| 0x00000002<
    0x00000004 call aGB "captTemporaryModel" (f >|4| 0x00000001<, f >|4| 0x00000003<) __unk_type_kind
    0x00000005 var *__unk_type_kind 0x00000008
    0x00000006 store *__unk_type_kind >|4| 0x00000005<, __unk_type_kind >|4| 0x00000004<
    0x00000007 var *__unk_type_kind 0x00000000
    0x00000008 load *__unk_type_kind >|4| 0x00000007<
    0x00000009 call a5B "captBindTexture" (__unk_type_kind >|4| 0x00000008<) void
    0x0000000A var *__unk_type_kind 0x00000008
    0x0000000B call a3B "draw" (*__unk_type_kind >|4| 0x0000000A<) void
    0x0000000C var *__unk_type_kind 0x00000008
    0x0000000D call a4B "free" (*__unk_type_kind >|4| 0x0000000C<) void
    0x0000000E var *__unk_type_kind 0x00000000
    0x0000000F call azD "__defer__" (*__unk_type_kind >|4| 0x0000000E<) void
    0x00000010 var *__unk_type_kind 0x00000005
    0x00000011 call anD "__defer__" (*__unk_type_kind >|4| 0x00000010<) void
    0x00000012 var *__unk_type_kind 0x00000008
    0x00000013 call atG "__defer__" (*__unk_type_kind >|4| 0x00000012<) void
    0x00000014 ret
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000007
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 2
    0x00000003 load *f >|6| 0x00000002<
    0x00000004 var *f 0x00000004
    0x00000005 load *f >|6| 0x00000004<
    0x00000006 fneq f >|6| 0x00000003<, f >|6| 0x00000005<
    0x00000007 cbr f >|6| 0x00000006<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 br |3|
  BASICBLOCK |8|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|8| 0x00000000<
    0x00000002 call a5B "captBindTexture" (__unk_type_kind >|8| 0x00000001<) void
    0x00000003 var **__unk_type_kind 0x00000007
    0x00000004 load **__unk_type_kind >|8| 0x00000003<
    0x00000005 memb *__unk_type_kind >|8| 0x00000004<, 0
    0x00000006 call a3B "draw" (*__unk_type_kind >|8| 0x00000005<) void
    0x00000007 var *__unk_type_kind 0x00000000
    0x00000008 call azD "__defer__" (*__unk_type_kind >|8| 0x00000007<) void
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A call anD "__defer__" (*__unk_type_kind >|8| 0x00000009<) void
    0x0000000B ret
fn captDrawOpacity aEB -> void
    {1 BBs, 7 INSTRs, 1 VARs}
    [0x00000000 f]
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x000008D0
    0x00000001 gvar *__unk_type_kind 0x000008D0
    0x00000002 call a9B "getUniformLocation" (*__unk_type_kind >|0| 0x00000001<, cstroflen 8 "opacity") s32
    0x00000003 var *f 0x00000000
    0x00000004 load *f >|0| 0x00000003<
    0x00000005 call aAB "uploadFloat" (*__unk_type_kind >|0| 0x00000000<, s32 >|0| 0x00000002<, f >|0| 0x00000004<) void
    0x00000006 ret
fn captAddFrameModel aFB -> *__unk_type_kind
    {6 BBs, 86 INSTRs, 4 VARs}
    [0x00000000 f]
    [0x00000001 f]
    [0x00000002 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 varzi 0x00000002
    0x00000001 var *f 0x00000000
    0x00000002 load *f >|0| 0x00000001<
    0x00000003 var *f 0x00000001
    0x00000004 load *f >|0| 0x00000003<
    0x00000005 call aGB "captTemporaryModel" (f >|0| 0x00000002<, f >|0| 0x00000004<) __unk_type_kind
    0x00000006 var *__unk_type_kind 0x00000002
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 store *__unk_type_kind >|0| 0x00000007<, __unk_type_kind >|0| 0x00000005<
    0x00000009 var *f 0x00000000
    0x0000000A load *f >|0| 0x00000009<
    0x0000000B var *__unk_type_kind 0x00000002
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 1
    0x0000000D store *f >|0| 0x0000000C<, f >|0| 0x0000000A<
    0x0000000E var *f 0x00000001
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 var *__unk_type_kind 0x00000002
    0x00000011 memb *__unk_type_kind >|0| 0x00000010<, 2
    0x00000012 store *f >|0| 0x00000011<, f >|0| 0x0000000F<
    0x00000013 gvar *u64 0x000008DA
    0x00000014 load *u64 >|0| 0x00000013<
    0x00000015 gvar *u64 0x000008DB
    0x00000016 load *u64 >|0| 0x00000015<
    0x00000017 eq u64 >|0| 0x00000014<, u64 >|0| 0x00000016<
    0x00000018 cbr u64 >|0| 0x00000017<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *u64 0x000008DB
    0x00000001 load *u64 >|1| 0x00000000<
    0x00000002 eq u64 >|1| 0x00000001<, u64 0
    0x00000003 cbr u64 >|1| 0x00000002<, |3|, |4|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 load *__unk_type_kind >|2| 0x00000000<
    0x00000002 gvar **__unk_type_kind 0x000008D9
    0x00000003 gvar *u64 0x000008DA
    0x00000004 load *u64 >|2| 0x00000003<
    0x00000005 load **__unk_type_kind >|2| 0x00000002<
    0x00000006 arracc *__unk_type_kind >|2| 0x00000005<, u64 >|2| 0x00000004<
    0x00000007 store *__unk_type_kind >|2| 0x00000006<, __unk_type_kind >|2| 0x00000001<
    0x00000008 gvar *u64 0x000008DA
    0x00000009 zext s32 1 to u64
    0x0000000A load *u64 >|2| 0x00000008<
    0x0000000B add u64 >|2| 0x0000000A<, u64 >|2| 0x00000009<
    0x0000000C store *u64 >|2| 0x00000008<, u64 >|2| 0x0000000B<
    0x0000000D var *__unk_type_kind 0x00000002
    0x0000000E call avG "__defer__" (*__unk_type_kind >|2| 0x0000000D<) void
    0x0000000F gvar **__unk_type_kind 0x000008D9
    0x00000010 gvar *u64 0x000008DA
    0x00000011 load *u64 >|2| 0x00000010<
    0x00000012 sub u64 >|2| 0x00000011<, u64 1
    0x00000013 load **__unk_type_kind >|2| 0x0000000F<
    0x00000014 arracc *__unk_type_kind >|2| 0x00000013<, u64 >|2| 0x00000012<
    0x00000015 memb *__unk_type_kind >|2| 0x00000014<, 0
    0x00000016 ret *__unk_type_kind >|2| 0x00000015<
  BASICBLOCK |3|
    0x00000000 gvar *u64 0x000008DB
    0x00000001 zext s32 8 to u64
    0x00000002 store *u64 >|3| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |5|
  BASICBLOCK |4|
    0x00000000 gvar *u64 0x000008DB
    0x00000001 zext s32 2 to u64
    0x00000002 load *u64 >|4| 0x00000000<
    0x00000003 mul u64 >|4| 0x00000002<, u64 >|4| 0x00000001<
    0x00000004 store *u64 >|4| 0x00000000<, u64 >|4| 0x00000003<
    0x00000005 br |5|
  BASICBLOCK |5|
    0x00000000 gvar *u64 0x000008DB
    0x00000001 load *u64 >|5| 0x00000000<
    0x00000002 malloc __unk_type_kind * u64 >|5| 0x00000001<
    0x00000003 var **__unk_type_kind 0x00000003
    0x00000004 store **__unk_type_kind >|5| 0x00000003<, *__unk_type_kind >|5| 0x00000002<
    0x00000005 var **__unk_type_kind 0x00000003
    0x00000006 load **__unk_type_kind >|5| 0x00000005<
    0x00000007 gvar **__unk_type_kind 0x000008D9
    0x00000008 load **__unk_type_kind >|5| 0x00000007<
    0x00000009 gvar *u64 0x000008DA
    0x0000000A load *u64 >|5| 0x00000009<
    0x0000000B sizeof __unk_type_kind
    0x0000000C mul u64 >|5| 0x0000000A<, u64 >|5| 0x0000000B<
    0x0000000D bc *__unk_type_kind >|5| 0x00000006< to *s8
    0x0000000E bc *__unk_type_kind >|5| 0x00000008< to *s8
    0x0000000F call aL8 "memcpy" (*s8 >|5| 0x0000000D<, *s8 >|5| 0x0000000E<, u64 >|5| 0x0000000C<) *s8
    0x00000010 gvar **__unk_type_kind 0x000008D9
    0x00000011 load **__unk_type_kind >|5| 0x00000010<
    0x00000012 free *__unk_type_kind >|5| 0x00000011<
    0x00000013 var **__unk_type_kind 0x00000003
    0x00000014 load **__unk_type_kind >|5| 0x00000013<
    0x00000015 gvar **__unk_type_kind 0x000008D9
    0x00000016 store **__unk_type_kind >|5| 0x00000015<, *__unk_type_kind >|5| 0x00000014<
    0x00000017 br |2|
fn captTemporaryModel aGB -> __unk_type_kind
    {1 BBs, 160 INSTRs, 9 VARs}
    [0x00000000 f]
    [0x00000001 f]
    [0x00000002 [18] f]
    [0x00000003 [12] f]
    [0x00000004 *f]
    [0x00000005 u64]
    [0x00000006 *f]
    [0x00000007 u64]
    [0x00000008 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *[18] f 0x00000002
    0x00000001 bc *[18] f >|0| 0x00000000< to *f
    0x00000002 var **f 0x00000004
    0x00000003 store **f >|0| 0x00000002<, *f >|0| 0x00000001<
    0x00000004 var *u64 0x00000005
    0x00000005 store *u64 >|0| 0x00000004<, u64 18
    0x00000006 var *[12] f 0x00000003
    0x00000007 bc *[12] f >|0| 0x00000006< to *f
    0x00000008 var **f 0x00000006
    0x00000009 store **f >|0| 0x00000008<, *f >|0| 0x00000007<
    0x0000000A var *u64 0x00000007
    0x0000000B store *u64 >|0| 0x0000000A<, u64 12
    0x0000000C var **f 0x00000004
    0x0000000D load **f >|0| 0x0000000C<
    0x0000000E arracc *f >|0| 0x0000000D<, s32 0
    0x0000000F store *f >|0| 0x0000000E<, f 0.000000
    0x00000010 var *f 0x00000001
    0x00000011 load *f >|0| 0x00000010<
    0x00000012 var **f 0x00000004
    0x00000013 load **f >|0| 0x00000012<
    0x00000014 arracc *f >|0| 0x00000013<, s32 1
    0x00000015 store *f >|0| 0x00000014<, f >|0| 0x00000011<
    0x00000016 var **f 0x00000004
    0x00000017 load **f >|0| 0x00000016<
    0x00000018 arracc *f >|0| 0x00000017<, s32 2
    0x00000019 store *f >|0| 0x00000018<, f 0.000000
    0x0000001A var **f 0x00000004
    0x0000001B load **f >|0| 0x0000001A<
    0x0000001C arracc *f >|0| 0x0000001B<, s32 3
    0x0000001D store *f >|0| 0x0000001C<, f 0.000000
    0x0000001E var **f 0x00000004
    0x0000001F load **f >|0| 0x0000001E<
    0x00000020 arracc *f >|0| 0x0000001F<, s32 4
    0x00000021 store *f >|0| 0x00000020<, f 0.000000
    0x00000022 var **f 0x00000004
    0x00000023 load **f >|0| 0x00000022<
    0x00000024 arracc *f >|0| 0x00000023<, s32 5
    0x00000025 store *f >|0| 0x00000024<, f 0.000000
    0x00000026 var *f 0x00000000
    0x00000027 load *f >|0| 0x00000026<
    0x00000028 var **f 0x00000004
    0x00000029 load **f >|0| 0x00000028<
    0x0000002A arracc *f >|0| 0x00000029<, s32 6
    0x0000002B store *f >|0| 0x0000002A<, f >|0| 0x00000027<
    0x0000002C var **f 0x00000004
    0x0000002D load **f >|0| 0x0000002C<
    0x0000002E arracc *f >|0| 0x0000002D<, s32 7
    0x0000002F store *f >|0| 0x0000002E<, f 0.000000
    0x00000030 var **f 0x00000004
    0x00000031 load **f >|0| 0x00000030<
    0x00000032 arracc *f >|0| 0x00000031<, s32 8
    0x00000033 store *f >|0| 0x00000032<, f 0.000000
    0x00000034 var **f 0x00000004
    0x00000035 load **f >|0| 0x00000034<
    0x00000036 arracc *f >|0| 0x00000035<, s32 9
    0x00000037 store *f >|0| 0x00000036<, f 0.000000
    0x00000038 var *f 0x00000001
    0x00000039 load *f >|0| 0x00000038<
    0x0000003A var **f 0x00000004
    0x0000003B load **f >|0| 0x0000003A<
    0x0000003C arracc *f >|0| 0x0000003B<, s32 10
    0x0000003D store *f >|0| 0x0000003C<, f >|0| 0x00000039<
    0x0000003E var **f 0x00000004
    0x0000003F load **f >|0| 0x0000003E<
    0x00000040 arracc *f >|0| 0x0000003F<, s32 11
    0x00000041 store *f >|0| 0x00000040<, f 0.000000
    0x00000042 var *f 0x00000000
    0x00000043 load *f >|0| 0x00000042<
    0x00000044 var **f 0x00000004
    0x00000045 load **f >|0| 0x00000044<
    0x00000046 arracc *f >|0| 0x00000045<, s32 12
    0x00000047 store *f >|0| 0x00000046<, f >|0| 0x00000043<
    0x00000048 var **f 0x00000004
    0x00000049 load **f >|0| 0x00000048<
    0x0000004A arracc *f >|0| 0x00000049<, s32 13
    0x0000004B store *f >|0| 0x0000004A<, f 0.000000
    0x0000004C var **f 0x00000004
    0x0000004D load **f >|0| 0x0000004C<
    0x0000004E arracc *f >|0| 0x0000004D<, s32 14
    0x0000004F store *f >|0| 0x0000004E<, f 0.000000
    0x00000050 var *f 0x00000000
    0x00000051 load *f >|0| 0x00000050<
    0x00000052 var **f 0x00000004
    0x00000053 load **f >|0| 0x00000052<
    0x00000054 arracc *f >|0| 0x00000053<, s32 15
    0x00000055 store *f >|0| 0x00000054<, f >|0| 0x00000051<
    0x00000056 var *f 0x00000001
    0x00000057 load *f >|0| 0x00000056<
    0x00000058 var **f 0x00000004
    0x00000059 load **f >|0| 0x00000058<
    0x0000005A arracc *f >|0| 0x00000059<, s32 16
    0x0000005B store *f >|0| 0x0000005A<, f >|0| 0x00000057<
    0x0000005C var **f 0x00000004
    0x0000005D load **f >|0| 0x0000005C<
    0x0000005E arracc *f >|0| 0x0000005D<, s32 17
    0x0000005F store *f >|0| 0x0000005E<, f 0.000000
    0x00000060 var **f 0x00000006
    0x00000061 load **f >|0| 0x00000060<
    0x00000062 arracc *f >|0| 0x00000061<, s32 0
    0x00000063 store *f >|0| 0x00000062<, f 0.000000
    0x00000064 var **f 0x00000006
    0x00000065 load **f >|0| 0x00000064<
    0x00000066 arracc *f >|0| 0x00000065<, s32 1
    0x00000067 store *f >|0| 0x00000066<, f 1.000000
    0x00000068 var **f 0x00000006
    0x00000069 load **f >|0| 0x00000068<
    0x0000006A arracc *f >|0| 0x00000069<, s32 2
    0x0000006B store *f >|0| 0x0000006A<, f 0.000000
    0x0000006C var **f 0x00000006
    0x0000006D load **f >|0| 0x0000006C<
    0x0000006E arracc *f >|0| 0x0000006D<, s32 3
    0x0000006F store *f >|0| 0x0000006E<, f 0.000000
    0x00000070 var **f 0x00000006
    0x00000071 load **f >|0| 0x00000070<
    0x00000072 arracc *f >|0| 0x00000071<, s32 4
    0x00000073 store *f >|0| 0x00000072<, f 1.000000
    0x00000074 var **f 0x00000006
    0x00000075 load **f >|0| 0x00000074<
    0x00000076 arracc *f >|0| 0x00000075<, s32 5
    0x00000077 store *f >|0| 0x00000076<, f 0.000000
    0x00000078 var **f 0x00000006
    0x00000079 load **f >|0| 0x00000078<
    0x0000007A arracc *f >|0| 0x00000079<, s32 6
    0x0000007B store *f >|0| 0x0000007A<, f 0.000000
    0x0000007C var **f 0x00000006
    0x0000007D load **f >|0| 0x0000007C<
    0x0000007E arracc *f >|0| 0x0000007D<, s32 7
    0x0000007F store *f >|0| 0x0000007E<, f 1.000000
    0x00000080 var **f 0x00000006
    0x00000081 load **f >|0| 0x00000080<
    0x00000082 arracc *f >|0| 0x00000081<, s32 8
    0x00000083 store *f >|0| 0x00000082<, f 1.000000
    0x00000084 var **f 0x00000006
    0x00000085 load **f >|0| 0x00000084<
    0x00000086 arracc *f >|0| 0x00000085<, s32 9
    0x00000087 store *f >|0| 0x00000086<, f 0.000000
    0x00000088 var **f 0x00000006
    0x00000089 load **f >|0| 0x00000088<
    0x0000008A arracc *f >|0| 0x00000089<, s32 10
    0x0000008B store *f >|0| 0x0000008A<, f 1.000000
    0x0000008C var **f 0x00000006
    0x0000008D load **f >|0| 0x0000008C<
    0x0000008E arracc *f >|0| 0x0000008D<, s32 11
    0x0000008F store *f >|0| 0x0000008E<, f 1.000000
    0x00000090 varzi 0x00000008
    0x00000091 var *__unk_type_kind 0x00000008
    0x00000092 var **f 0x00000004
    0x00000093 load **f >|0| 0x00000092<
    0x00000094 var *u64 0x00000005
    0x00000095 load *u64 >|0| 0x00000094<
    0x00000096 var **f 0x00000006
    0x00000097 load **f >|0| 0x00000096<
    0x00000098 var *u64 0x00000007
    0x00000099 load *u64 >|0| 0x00000098<
    0x0000009A call a2B "create" (*__unk_type_kind >|0| 0x00000091<, *f >|0| 0x00000093<, u64 >|0| 0x00000095<, *f >|0| 0x00000097<, u64 >|0| 0x00000099<) void
    0x0000009B var *__unk_type_kind 0x00000008
    0x0000009C call atG "__defer__" (*__unk_type_kind >|0| 0x0000009B<) void
    0x0000009D var *__unk_type_kind 0x00000008
    0x0000009E load *__unk_type_kind >|0| 0x0000009D<
    0x0000009F ret __unk_type_kind >|0| 0x0000009E<
fn captRandomize aHB -> void
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 bc null to *s64
    0x00000001 call aI7 "time" (*s64 >|0| 0x00000000<) s64
    0x00000002 trunc s64 >|0| 0x00000001< to u32
    0x00000003 call ai7 "srand" (u32 >|0| 0x00000002<) void
    0x00000004 ret
fn captRandom aIB -> d
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call ah7 "rand" () s32
    0x00000001 si2fp s32 >|0| 0x00000000< to d
    0x00000002 si2fp s32 2147483647 to d
    0x00000003 fdiv d >|0| 0x00000001<, d >|0| 0x00000002<
    0x00000004 ret d >|0| 0x00000003<
fn captKeyHeld aJB -> bool
    {1 BBs, 8 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *s32 0x00000000
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 call ad6 "glfwGetKey" (*__unk_type_kind >|0| 0x00000001<, s32 >|0| 0x00000003<) s32
    0x00000005 zext bool true to s32
    0x00000006 eq s32 >|0| 0x00000004<, s32 >|0| 0x00000005<
    0x00000007 ret s32 >|0| 0x00000006<
fn captHideMouse aKB -> void
    {4 BBs, 12 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 inz *__unk_type_kind >|0| 0x00000001<
    0x00000003 cbr bool >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call ab6 "glfwSetInputMode" (*__unk_type_kind >|1| 0x00000001<, s32 208897, s32 212994) void
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 gvar *bool 0x000008E0
    0x00000001 store *bool >|2| 0x00000000<, bool true
    0x00000002 br |3|
  BASICBLOCK |3|
    0x00000000 ret
fn captShowMouse aLB -> void
    {4 BBs, 12 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 inz *__unk_type_kind >|0| 0x00000001<
    0x00000003 cbr bool >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar **__unk_type_kind 0x000008C5
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call ab6 "glfwSetInputMode" (*__unk_type_kind >|1| 0x00000001<, s32 208897, s32 212993) void
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 gvar *bool 0x000008E0
    0x00000001 store *bool >|2| 0x00000000<, bool false
    0x00000002 br |3|
  BASICBLOCK |3|
    0x00000000 ret
fn captTexture aMB -> __unk_type_kind
    {3 BBs, 37 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 *u8]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aPA "cstr" (*__unk_type_kind >|0| 0x00000000<) *u8
    0x00000002 var **u8 0x00000001
    0x00000003 store **u8 >|0| 0x00000002<, *u8 >|0| 0x00000001<
    0x00000004 var **u8 0x00000001
    0x00000005 load **u8 >|0| 0x00000004<
    0x00000006 call a0B "captTexture" (*u8 >|0| 0x00000005<) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000002
    0x00000008 store *__unk_type_kind >|0| 0x00000007<, __unk_type_kind >|0| 0x00000006<
    0x00000009 var **u8 0x00000001
    0x0000000A load **u8 >|0| 0x00000009<
    0x0000000B free *u8 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000002
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 0
    0x0000000E load *u32 >|0| 0x0000000D<
    0x0000000F reinterp s32 0 to u32
    0x00000010 eq u32 >|0| 0x0000000E<, u32 >|0| 0x0000000F<
    0x00000011 cbr u32 >|0| 0x00000010<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 call aF8 "printf" (cstroflen 27 "Error loading texture: %s
", __unk_type_kind >|1| 0x00000001<) s32
    0x00000003 call aE7 "stbi_failure_reason" () *u8
    0x00000004 call aF8 "printf" (cstroflen 12 "Reason: %s
", *u8 >|1| 0x00000003<) s32
    0x00000005 gvar *s32 0x00000004
    0x00000006 load *s32 >|1| 0x00000005<
    0x00000007 gvar *s32 0x00000004
    0x00000008 load *s32 >|1| 0x00000007<
    0x00000009 call af8 "strerror" (s32 >|1| 0x00000008<) *u8
    0x0000000A call aF8 "printf" (cstroflen 15 "[errno %d %s]
", s32 >|1| 0x00000006<, *u8 >|1| 0x00000009<) s32
    0x0000000B br |2|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|2| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000002
    0x00000003 call azD "__defer__" (*__unk_type_kind >|2| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *__unk_type_kind >|2| 0x00000004<
    0x00000006 ret __unk_type_kind >|2| 0x00000005<
fn captTexture aNB -> __unk_type_kind
    {3 BBs, 41 INSTRs, 4 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 bool]
    [0x00000002 *u8]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aPA "cstr" (*__unk_type_kind >|0| 0x00000000<) *u8
    0x00000002 var **u8 0x00000002
    0x00000003 store **u8 >|0| 0x00000002<, *u8 >|0| 0x00000001<
    0x00000004 gvar *s32 0x00000004
    0x00000005 store *s32 >|0| 0x00000004<, s32 0
    0x00000006 var **u8 0x00000002
    0x00000007 load **u8 >|0| 0x00000006<
    0x00000008 var *bool 0x00000001
    0x00000009 load *bool >|0| 0x00000008<
    0x0000000A call a1B "captTexture" (*u8 >|0| 0x00000007<, bool >|0| 0x00000009<) __unk_type_kind
    0x0000000B var *__unk_type_kind 0x00000003
    0x0000000C store *__unk_type_kind >|0| 0x0000000B<, __unk_type_kind >|0| 0x0000000A<
    0x0000000D var *__unk_type_kind 0x00000003
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 0
    0x0000000F load *u32 >|0| 0x0000000E<
    0x00000010 reinterp s32 0 to u32
    0x00000011 eq u32 >|0| 0x0000000F<, u32 >|0| 0x00000010<
    0x00000012 cbr u32 >|0| 0x00000011<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 call aF8 "printf" (cstroflen 27 "Error loading texture: %s
", __unk_type_kind >|1| 0x00000001<) s32
    0x00000003 call aE7 "stbi_failure_reason" () *u8
    0x00000004 call aF8 "printf" (cstroflen 12 "Reason: %s
", *u8 >|1| 0x00000003<) s32
    0x00000005 gvar *s32 0x00000004
    0x00000006 load *s32 >|1| 0x00000005<
    0x00000007 gvar *s32 0x00000004
    0x00000008 load *s32 >|1| 0x00000007<
    0x00000009 call af8 "strerror" (s32 >|1| 0x00000008<) *u8
    0x0000000A call aF8 "printf" (cstroflen 15 "[errno %d %s]
", s32 >|1| 0x00000006<, *u8 >|1| 0x00000009<) s32
    0x0000000B br |2|
  BASICBLOCK |2|
    0x00000000 var **u8 0x00000002
    0x00000001 load **u8 >|2| 0x00000000<
    0x00000002 free *u8 >|2| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 call a6A "__defer__" (*__unk_type_kind >|2| 0x00000003<) void
    0x00000005 var *__unk_type_kind 0x00000003
    0x00000006 call azD "__defer__" (*__unk_type_kind >|2| 0x00000005<) void
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 load *__unk_type_kind >|2| 0x00000007<
    0x00000009 ret __unk_type_kind >|2| 0x00000008<
fn destroy aOB -> void
    {5 BBs, 32 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 1
    0x00000003 load *u64 >|1| 0x00000002<
    0x00000004 load *u64 >|0| 0x00000000<
    0x00000005 ult u64 >|1| 0x00000004<, u64 >|1| 0x00000003<
    0x00000006 cbr u64 >|1| 0x00000005<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|2| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|0| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|2| 0x00000003<, u64 >|2| 0x00000005<
    0x00000007 store *__unk_type_kind >|2| 0x00000004<, *__unk_type_kind >|2| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|2| 0x00000008<
    0x0000000A call azA "free" (*__unk_type_kind >|2| 0x00000009<) void
    0x0000000B br |3|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 free *__unk_type_kind >|4| 0x00000003<
    0x00000005 ret
fn reset aPB -> void
    {1 BBs, 11 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 2
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|0| 0x00000002<, u64 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 3
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|0| 0x00000007<, u64 >|0| 0x00000008<
    0x0000000A ret
fn now aQB -> __unk_type_kind
    {1 BBs, 11 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 var **__unk_type_kind 0x00000000
    0x00000004 load **__unk_type_kind >|0| 0x00000003<
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 2
    0x00000006 load *u64 >|0| 0x00000005<
    0x00000007 load **__unk_type_kind >|0| 0x00000002<
    0x00000008 arracc *__unk_type_kind >|0| 0x00000007<, u64 >|0| 0x00000006<
    0x00000009 load *__unk_type_kind >|0| 0x00000008<
    0x0000000A ret __unk_type_kind >|0| 0x00000009<
fn update aRB -> void
    {3 BBs, 23 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 add u64 >|0| 0x00000003<, u64 1
    0x00000005 store *u64 >|0| 0x00000002<, *u64 >|0| 0x00000004<
    0x00000006 load *u64 >|0| 0x00000002<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|0| 0x00000007<
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 4
    0x0000000A load *u64 >|0| 0x00000009<
    0x0000000B ugt u64 >|0| 0x00000006<, u64 >|0| 0x0000000A<
    0x0000000C cbr u64 >|0| 0x0000000B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 3
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|1| 0x00000002<, u64 >|1| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 call aSB "advance" (*__unk_type_kind >|1| 0x00000006<) void
    0x00000008 br |2|
  BASICBLOCK |2|
    0x00000000 ret
fn advance aSB -> void
    {3 BBs, 20 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 2
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 add u64 >|0| 0x00000003<, u64 1
    0x00000005 store *u64 >|0| 0x00000002<, *u64 >|0| 0x00000004<
    0x00000006 load *u64 >|0| 0x00000002<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|0| 0x00000007<
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 1
    0x0000000A load *u64 >|0| 0x00000009<
    0x0000000B eq u64 >|0| 0x00000006<, u64 >|0| 0x0000000A<
    0x0000000C cbr u64 >|0| 0x0000000B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 2
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|1| 0x00000002<, u64 >|1| 0x00000003<
    0x00000005 br |2|
  BASICBLOCK |2|
    0x00000000 ret
fn newInstance aTB -> __unk_type_kind
    {1 BBs, 18 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 load *__unk_type_kind >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000001
    0x00000004 store *__unk_type_kind >|0| 0x00000003<, __unk_type_kind >|0| 0x00000002<
    0x00000005 var *__unk_type_kind 0x00000001
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 2
    0x00000007 zext s32 0 to u64
    0x00000008 store *u64 >|0| 0x00000006<, u64 >|0| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000001
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 3
    0x0000000B zext s32 0 to u64
    0x0000000C store *u64 >|0| 0x0000000A<, u64 >|0| 0x0000000B<
    0x0000000D var *__unk_type_kind 0x00000001
    0x0000000E call avD "__defer__" (*__unk_type_kind >|0| 0x0000000D<) void
    0x0000000F var *__unk_type_kind 0x00000001
    0x00000010 load *__unk_type_kind >|0| 0x0000000F<
    0x00000011 ret __unk_type_kind >|0| 0x00000010<
fn gameAnimation aUB -> __unk_type_kind
    {10 BBs, 130 INSTRs, 7 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
    [0x00000000 s32]
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 varzi 0x00000004
    0x00000001 var *s32 0x00000003
    0x00000002 load *s32 >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000004
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 4
    0x00000005 zext s32 >|0| 0x00000002< to u64
    0x00000006 store *u64 >|0| 0x00000004<, u64 >|0| 0x00000005<
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 var *s32 0x00000002
    0x0000000A load *s32 >|0| 0x00000009<
    0x0000000B sle s32 >|0| 0x00000008<, s32 >|0| 0x0000000A<
    0x0000000C cbr s32 >|0| 0x0000000B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|1| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|1| 0x00000002<
    0x00000004 sub s32 >|1| 0x00000001<, s32 >|1| 0x00000003<
    0x00000005 add s32 >|1| 0x00000004<, s32 1
    0x00000006 var *__unk_type_kind 0x00000004
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 >|1| 0x00000005< to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var *__unk_type_kind 0x00000004
    0x0000000B memb *__unk_type_kind >|1| 0x0000000A<, 1
    0x0000000C load *u64 >|1| 0x0000000B<
    0x0000000D malloc __unk_type_kind * u64 >|1| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000004
    0x0000000F memb *__unk_type_kind >|1| 0x0000000E<, 0
    0x00000010 store **__unk_type_kind >|1| 0x0000000F<, *__unk_type_kind >|1| 0x0000000D<
    0x00000011 var *s32 0x00000001
    0x00000012 load *s32 >|1| 0x00000011<
    0x00000013 var *s32 0x00000005
    0x00000014 store *s32 >|1| 0x00000013<, s32 >|1| 0x00000012<
    0x00000015 br |4|
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|2| 0x00000002<
    0x00000004 sub s32 >|2| 0x00000001<, s32 >|2| 0x00000003<
    0x00000005 add s32 >|2| 0x00000004<, s32 1
    0x00000006 var *__unk_type_kind 0x00000004
    0x00000007 memb *__unk_type_kind >|2| 0x00000006<, 1
    0x00000008 zext s32 >|2| 0x00000005< to u64
    0x00000009 store *u64 >|2| 0x00000007<, u64 >|2| 0x00000008<
    0x0000000A var *__unk_type_kind 0x00000004
    0x0000000B memb *__unk_type_kind >|2| 0x0000000A<, 1
    0x0000000C load *u64 >|2| 0x0000000B<
    0x0000000D malloc __unk_type_kind * u64 >|2| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000004
    0x0000000F memb *__unk_type_kind >|2| 0x0000000E<, 0
    0x00000010 store **__unk_type_kind >|2| 0x0000000F<, *__unk_type_kind >|2| 0x0000000D<
    0x00000011 var *s32 0x00000002
    0x00000012 load *s32 >|2| 0x00000011<
    0x00000013 var *s32 0x00000006
    0x00000014 store *s32 >|2| 0x00000013<, s32 >|2| 0x00000012<
    0x00000015 br |7|
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|3| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000004
    0x00000003 call avD "__defer__" (*__unk_type_kind >|3| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000004
    0x00000005 load *__unk_type_kind >|3| 0x00000004<
    0x00000006 ret __unk_type_kind >|3| 0x00000005<
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000005
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|4| 0x00000002<
    0x00000004 sle s32 >|4| 0x00000001<, s32 >|4| 0x00000003<
    0x00000005 cbr s32 >|4| 0x00000004<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|5| 0x00000000<
    0x00000002 var *s32 0x00000005
    0x00000003 load *s32 >|5| 0x00000002<
    0x00000004 call aDA "__modulus__" (__unk_type_kind >|5| 0x00000001<, s32 >|5| 0x00000003<) __unk_type_kind
    0x00000005 call a7A "__pass__" (__unk_type_kind >|5| 0x00000004<) __unk_type_kind
    0x00000006 call aNB "captTexture" (__unk_type_kind >|5| 0x00000005<, bool false) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 memb *__unk_type_kind >|5| 0x00000007<, 0
    0x00000009 var *s32 0x00000005
    0x0000000A load *s32 >|5| 0x00000009<
    0x0000000B var *s32 0x00000001
    0x0000000C load *s32 >|5| 0x0000000B<
    0x0000000D sub s32 >|5| 0x0000000A<, s32 >|5| 0x0000000C<
    0x0000000E load **__unk_type_kind >|5| 0x00000008<
    0x0000000F arracc *__unk_type_kind >|5| 0x0000000E<, s32 >|5| 0x0000000D<
    0x00000010 store *__unk_type_kind >|5| 0x0000000F<, __unk_type_kind >|5| 0x00000006<
    0x00000011 var *s32 0x00000005
    0x00000012 load *s32 >|5| 0x00000011<
    0x00000013 add s32 >|5| 0x00000012<, s32 1
    0x00000014 store *s32 >|5| 0x00000011<, s32 >|5| 0x00000013<
    0x00000015 br |4|
  BASICBLOCK |6|
    0x00000000 br |3|
  BASICBLOCK |7|
    0x00000000 var *s32 0x00000006
    0x00000001 load *s32 >|7| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|7| 0x00000002<
    0x00000004 sle s32 >|7| 0x00000001<, s32 >|7| 0x00000003<
    0x00000005 cbr s32 >|7| 0x00000004<, |8|, |9|
  BASICBLOCK |8|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|8| 0x00000000<
    0x00000002 var *s32 0x00000006
    0x00000003 load *s32 >|8| 0x00000002<
    0x00000004 call aDA "__modulus__" (__unk_type_kind >|8| 0x00000001<, s32 >|8| 0x00000003<) __unk_type_kind
    0x00000005 call a7A "__pass__" (__unk_type_kind >|8| 0x00000004<) __unk_type_kind
    0x00000006 call aNB "captTexture" (__unk_type_kind >|8| 0x00000005<, bool false) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 memb *__unk_type_kind >|8| 0x00000007<, 0
    0x00000009 var *__unk_type_kind 0x00000004
    0x0000000A memb *__unk_type_kind >|8| 0x00000009<, 1
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C var *s32 0x00000006
    0x0000000D load *s32 >|8| 0x0000000C<
    0x0000000E zext s32 >|8| 0x0000000D< to u64
    0x0000000F sub u64 >|8| 0x0000000B<, u64 >|8| 0x0000000E<
    0x00000010 var *s32 0x00000002
    0x00000011 load *s32 >|8| 0x00000010<
    0x00000012 zext s32 >|8| 0x00000011< to u64
    0x00000013 add u64 >|8| 0x0000000F<, u64 >|8| 0x00000012<
    0x00000014 zext s32 1 to u64
    0x00000015 sub u64 >|8| 0x00000013<, u64 >|8| 0x00000014<
    0x00000016 load **__unk_type_kind >|8| 0x00000008<
    0x00000017 arracc *__unk_type_kind >|8| 0x00000016<, u64 >|8| 0x00000015<
    0x00000018 store *__unk_type_kind >|8| 0x00000017<, __unk_type_kind >|8| 0x00000006<
    0x00000019 var *s32 0x00000006
    0x0000001A load *s32 >|8| 0x00000019<
    0x0000001B add s32 >|8| 0x0000001A<, s32 1
    0x0000001C store *s32 >|8| 0x00000019<, s32 >|8| 0x0000001B<
    0x0000001D br |7|
  BASICBLOCK |9|
    0x00000000 br |3|
fn gameAnimation aVB -> __unk_type_kind
    {1 BBs, 28 INSTRs, 4 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
    [0x00000002 u64]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000001<
    0x00000005 var *u64 0x00000001
    0x00000006 load *u64 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *u64 >|0| 0x00000008<, u64 >|0| 0x00000006<
    0x0000000A var *__unk_type_kind 0x00000003
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 2
    0x0000000C zext s32 0 to u64
    0x0000000D store *u64 >|0| 0x0000000B<, u64 >|0| 0x0000000C<
    0x0000000E var *__unk_type_kind 0x00000003
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 3
    0x00000010 zext s32 0 to u64
    0x00000011 store *u64 >|0| 0x0000000F<, u64 >|0| 0x00000010<
    0x00000012 var *u64 0x00000002
    0x00000013 load *u64 >|0| 0x00000012<
    0x00000014 var *__unk_type_kind 0x00000003
    0x00000015 memb *__unk_type_kind >|0| 0x00000014<, 4
    0x00000016 store *u64 >|0| 0x00000015<, u64 >|0| 0x00000013<
    0x00000017 var *__unk_type_kind 0x00000003
    0x00000018 call avD "__defer__" (*__unk_type_kind >|0| 0x00000017<) void
    0x00000019 var *__unk_type_kind 0x00000003
    0x0000001A load *__unk_type_kind >|0| 0x00000019<
    0x0000001B ret __unk_type_kind >|0| 0x0000001A<
fn isValid aWB -> bool
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call ayA "isValid" (*__unk_type_kind >|0| 0x00000002<) bool
    0x00000004 ret bool >|0| 0x00000003<
fn gameImageEx aXB -> __unk_type_kind
    {1 BBs, 32 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000005
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *__unk_type_kind >|0| 0x00000003<, __unk_type_kind >|0| 0x00000001<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000005
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *s32 0x00000002
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000005
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *s32 >|0| 0x0000000D<, s32 >|0| 0x0000000B<
    0x0000000F var *s32 0x00000003
    0x00000010 load *s32 >|0| 0x0000000F<
    0x00000011 var *__unk_type_kind 0x00000005
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 store *s32 >|0| 0x00000012<, s32 >|0| 0x00000010<
    0x00000014 var *s32 0x00000004
    0x00000015 load *s32 >|0| 0x00000014<
    0x00000016 var *__unk_type_kind 0x00000005
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 4
    0x00000018 store *s32 >|0| 0x00000017<, s32 >|0| 0x00000015<
    0x00000019 var *__unk_type_kind 0x00000000
    0x0000001A call azD "__defer__" (*__unk_type_kind >|0| 0x00000019<) void
    0x0000001B var *__unk_type_kind 0x00000005
    0x0000001C call axD "__defer__" (*__unk_type_kind >|0| 0x0000001B<) void
    0x0000001D var *__unk_type_kind 0x00000005
    0x0000001E load *__unk_type_kind >|0| 0x0000001D<
    0x0000001F ret __unk_type_kind >|0| 0x0000001E<
fn pickupItem aYB -> void
    {1 BBs, 19 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 2
    0x00000002 load *u64 >|0| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|0| 0x00000003< to *__unk_type_kind
    0x00000005 call aiB "getX" (*__unk_type_kind >|0| 0x00000004<) s32
    0x00000006 si2fp s32 >|0| 0x00000005< to f
    0x00000007 gvar *f 0x00000948
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 fsub f >|0| 0x00000006<, f >|0| 0x00000008<
    0x0000000A var *__unk_type_kind 0x00000000
    0x0000000B bc *__unk_type_kind >|0| 0x0000000A< to *__unk_type_kind
    0x0000000C call ajB "getY" (*__unk_type_kind >|0| 0x0000000B<) s32
    0x0000000D si2fp s32 >|0| 0x0000000C< to f
    0x0000000E gvar *f 0x00000949
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 fsub f >|0| 0x0000000D<, f >|0| 0x0000000F<
    0x00000011 call aZB "pickupItem" (u64 >|0| 0x00000002<, f >|0| 0x00000009<, f >|0| 0x00000010<) void
    0x00000012 ret
fn pickupItem aZB -> void
    {1 BBs, 15 INSTRs, 3 VARs}
    [0x00000000 u64]
    [0x00000001 f]
    [0x00000002 f]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 gvar *u64 0x00000963
    0x00000003 store *u64 >|0| 0x00000002<, u64 >|0| 0x00000001<
    0x00000004 var *f 0x00000001
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 gvar *f 0x00000964
    0x00000007 store *f >|0| 0x00000006<, f >|0| 0x00000005<
    0x00000008 var *f 0x00000002
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A gvar *f 0x00000965
    0x0000000B store *f >|0| 0x0000000A<, f >|0| 0x00000009<
    0x0000000C gvar *__unk_type_kind 0x00000968
    0x0000000D call aQE "rid" (*__unk_type_kind >|0| 0x0000000C<) void
    0x0000000E ret
fn addCollectedResource aaB -> void
    {1 BBs, 20 INSTRs, 4 VARs}
    [0x00000000 u64]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *u64 >|0| 0x00000003<, u64 >|0| 0x00000001<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000006<
    0x0000000A var *f 0x00000002
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000003
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *f >|0| 0x0000000D<, f >|0| 0x0000000B<
    0x0000000F gvar *__unk_type_kind 0x00000971
    0x00000010 var *__unk_type_kind 0x00000003
    0x00000011 load *__unk_type_kind >|0| 0x00000010<
    0x00000012 call awG "add" (*__unk_type_kind >|0| 0x0000000F<, __unk_type_kind >|0| 0x00000011<) void
    0x00000013 ret
fn set abB -> void
    {1 BBs, 37 INSTRs, 7 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 s32]
    [0x00000006 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *s32 >|0| 0x00000004<, s32 >|0| 0x00000001<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B store *s32 >|0| 0x0000000A<, s32 >|0| 0x00000007<
    0x0000000C var *s32 0x00000003
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var **__unk_type_kind 0x00000000
    0x0000000F load **__unk_type_kind >|0| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 2
    0x00000011 store *s32 >|0| 0x00000010<, s32 >|0| 0x0000000D<
    0x00000012 var *s32 0x00000004
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|0| 0x00000014<
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 3
    0x00000017 store *s32 >|0| 0x00000016<, s32 >|0| 0x00000013<
    0x00000018 var *s32 0x00000005
    0x00000019 load *s32 >|0| 0x00000018<
    0x0000001A var **__unk_type_kind 0x00000000
    0x0000001B load **__unk_type_kind >|0| 0x0000001A<
    0x0000001C memb *__unk_type_kind >|0| 0x0000001B<, 4
    0x0000001D store *s32 >|0| 0x0000001C<, s32 >|0| 0x00000019<
    0x0000001E var *s32 0x00000006
    0x0000001F load *s32 >|0| 0x0000001E<
    0x00000020 var **__unk_type_kind 0x00000000
    0x00000021 load **__unk_type_kind >|0| 0x00000020<
    0x00000022 memb *__unk_type_kind >|0| 0x00000021<, 5
    0x00000023 store *s32 >|0| 0x00000022<, s32 >|0| 0x0000001F<
    0x00000024 ret
fn create acB -> void
    {1 BBs, 51 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *s32 >|0| 0x00000004<, s32 >|0| 0x00000001<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B store *s32 >|0| 0x0000000A<, s32 >|0| 0x00000007<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|0| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|0| 0x0000000D<, 2
    0x0000000F store *s32 >|0| 0x0000000E<, s32 0
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|0| 0x00000010<
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 store *s32 >|0| 0x00000012<, s32 0
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|0| 0x00000014<
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 4
    0x00000017 store *s32 >|0| 0x00000016<, s32 1
    0x00000018 var **__unk_type_kind 0x00000000
    0x00000019 load **__unk_type_kind >|0| 0x00000018<
    0x0000001A memb *__unk_type_kind >|0| 0x00000019<, 5
    0x0000001B store *bool >|0| 0x0000001A<, bool false
    0x0000001C var **__unk_type_kind 0x00000000
    0x0000001D load **__unk_type_kind >|0| 0x0000001C<
    0x0000001E memb *__unk_type_kind >|0| 0x0000001D<, 6
    0x0000001F store *bool >|0| 0x0000001E<, bool false
    0x00000020 var **__unk_type_kind 0x00000000
    0x00000021 load **__unk_type_kind >|0| 0x00000020<
    0x00000022 memb *__unk_type_kind >|0| 0x00000021<, 7
    0x00000023 store *bool >|0| 0x00000022<, bool false
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|0| 0x00000024<
    0x00000026 memb *__unk_type_kind >|0| 0x00000025<, 8
    0x00000027 store *bool >|0| 0x00000026<, bool false
    0x00000028 var **__unk_type_kind 0x00000000
    0x00000029 load **__unk_type_kind >|0| 0x00000028<
    0x0000002A memb *__unk_type_kind >|0| 0x00000029<, 9
    0x0000002B bc null to *__unk_type_kind
    0x0000002C store **__unk_type_kind >|0| 0x0000002A<, *__unk_type_kind >|0| 0x0000002B<
    0x0000002D var **__unk_type_kind 0x00000000
    0x0000002E load **__unk_type_kind >|0| 0x0000002D<
    0x0000002F memb *__unk_type_kind >|0| 0x0000002E<, 10
    0x00000030 memb *__unk_type_kind >|0| 0x0000002F<, 0
    0x00000031 call axA "invalidate" (*__unk_type_kind >|0| 0x00000030<) void
    0x00000032 ret
fn create adB -> void
    {1 BBs, 69 INSTRs, 12 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 s32]
    [0x00000006 bool]
    [0x00000007 bool]
    [0x00000008 bool]
    [0x00000009 bool]
    [0x0000000A *__unk_type_kind]
    [0x0000000B __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *s32 >|0| 0x00000004<, s32 >|0| 0x00000001<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 1
    0x0000000B store *s32 >|0| 0x0000000A<, s32 >|0| 0x00000007<
    0x0000000C var *s32 0x00000003
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var **__unk_type_kind 0x00000000
    0x0000000F load **__unk_type_kind >|0| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 2
    0x00000011 store *s32 >|0| 0x00000010<, s32 >|0| 0x0000000D<
    0x00000012 var *s32 0x00000004
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000000
    0x00000015 load **__unk_type_kind >|0| 0x00000014<
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 3
    0x00000017 store *s32 >|0| 0x00000016<, s32 >|0| 0x00000013<
    0x00000018 var *s32 0x00000005
    0x00000019 load *s32 >|0| 0x00000018<
    0x0000001A var **__unk_type_kind 0x00000000
    0x0000001B load **__unk_type_kind >|0| 0x0000001A<
    0x0000001C memb *__unk_type_kind >|0| 0x0000001B<, 4
    0x0000001D store *s32 >|0| 0x0000001C<, s32 >|0| 0x00000019<
    0x0000001E var *bool 0x00000006
    0x0000001F load *bool >|0| 0x0000001E<
    0x00000020 var **__unk_type_kind 0x00000000
    0x00000021 load **__unk_type_kind >|0| 0x00000020<
    0x00000022 memb *__unk_type_kind >|0| 0x00000021<, 5
    0x00000023 store *bool >|0| 0x00000022<, bool >|0| 0x0000001F<
    0x00000024 var *bool 0x00000007
    0x00000025 load *bool >|0| 0x00000024<
    0x00000026 var **__unk_type_kind 0x00000000
    0x00000027 load **__unk_type_kind >|0| 0x00000026<
    0x00000028 memb *__unk_type_kind >|0| 0x00000027<, 6
    0x00000029 store *bool >|0| 0x00000028<, bool >|0| 0x00000025<
    0x0000002A var *bool 0x00000008
    0x0000002B load *bool >|0| 0x0000002A<
    0x0000002C var **__unk_type_kind 0x00000000
    0x0000002D load **__unk_type_kind >|0| 0x0000002C<
    0x0000002E memb *__unk_type_kind >|0| 0x0000002D<, 7
    0x0000002F store *bool >|0| 0x0000002E<, bool >|0| 0x0000002B<
    0x00000030 var *bool 0x00000009
    0x00000031 load *bool >|0| 0x00000030<
    0x00000032 var **__unk_type_kind 0x00000000
    0x00000033 load **__unk_type_kind >|0| 0x00000032<
    0x00000034 memb *__unk_type_kind >|0| 0x00000033<, 8
    0x00000035 store *bool >|0| 0x00000034<, bool >|0| 0x00000031<
    0x00000036 var **__unk_type_kind 0x0000000A
    0x00000037 load **__unk_type_kind >|0| 0x00000036<
    0x00000038 var **__unk_type_kind 0x00000000
    0x00000039 load **__unk_type_kind >|0| 0x00000038<
    0x0000003A memb *__unk_type_kind >|0| 0x00000039<, 9
    0x0000003B store **__unk_type_kind >|0| 0x0000003A<, *__unk_type_kind >|0| 0x00000037<
    0x0000003C var *__unk_type_kind 0x0000000B
    0x0000003D load *__unk_type_kind >|0| 0x0000003C<
    0x0000003E var **__unk_type_kind 0x00000000
    0x0000003F load **__unk_type_kind >|0| 0x0000003E<
    0x00000040 memb *__unk_type_kind >|0| 0x0000003F<, 10
    0x00000041 store *__unk_type_kind >|0| 0x00000040<, __unk_type_kind >|0| 0x0000003D<
    0x00000042 var *__unk_type_kind 0x0000000B
    0x00000043 call axD "__defer__" (*__unk_type_kind >|0| 0x00000042<) void
    0x00000044 ret
fn freeze aeB -> __unk_type_kind
    {1 BBs, 51 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000002
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|0| 0x00000001<
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 1
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 var **__unk_type_kind 0x00000000
    0x0000000A load **__unk_type_kind >|0| 0x00000009<
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 2
    0x0000000C load *s32 >|0| 0x0000000B<
    0x0000000D var **__unk_type_kind 0x00000000
    0x0000000E load **__unk_type_kind >|0| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|0| 0x0000000E<, 3
    0x00000010 load *s32 >|0| 0x0000000F<
    0x00000011 var **__unk_type_kind 0x00000000
    0x00000012 load **__unk_type_kind >|0| 0x00000011<
    0x00000013 memb *__unk_type_kind >|0| 0x00000012<, 4
    0x00000014 load *s32 >|0| 0x00000013<
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|0| 0x00000015<
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 5
    0x00000018 load *bool >|0| 0x00000017<
    0x00000019 var **__unk_type_kind 0x00000000
    0x0000001A load **__unk_type_kind >|0| 0x00000019<
    0x0000001B memb *__unk_type_kind >|0| 0x0000001A<, 6
    0x0000001C load *bool >|0| 0x0000001B<
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|0| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|0| 0x0000001E<, 7
    0x00000020 load *bool >|0| 0x0000001F<
    0x00000021 var **__unk_type_kind 0x00000000
    0x00000022 load **__unk_type_kind >|0| 0x00000021<
    0x00000023 memb *__unk_type_kind >|0| 0x00000022<, 8
    0x00000024 load *bool >|0| 0x00000023<
    0x00000025 var **__unk_type_kind 0x00000000
    0x00000026 load **__unk_type_kind >|0| 0x00000025<
    0x00000027 memb *__unk_type_kind >|0| 0x00000026<, 9
    0x00000028 load **__unk_type_kind >|0| 0x00000027<
    0x00000029 var *__unk_type_kind 0x00000001
    0x0000002A load *__unk_type_kind >|0| 0x00000029<
    0x0000002B call adB "create" (*__unk_type_kind >|0| 0x00000000<, s32 >|0| 0x00000004<, s32 >|0| 0x00000008<, s32 >|0| 0x0000000C<, s32 >|0| 0x00000010<, s32 >|0| 0x00000014<, bool >|0| 0x00000018<, bool >|0| 0x0000001C<, bool >|0| 0x00000020<, bool >|0| 0x00000024<, *__unk_type_kind >|0| 0x00000028<, __unk_type_kind >|0| 0x0000002A<) void
    0x0000002C var *__unk_type_kind 0x00000001
    0x0000002D call axD "__defer__" (*__unk_type_kind >|0| 0x0000002C<) void
    0x0000002E var *__unk_type_kind 0x00000002
    0x0000002F call ayD "__defer__" (*__unk_type_kind >|0| 0x0000002E<) void
    0x00000030 var *__unk_type_kind 0x00000002
    0x00000031 load *__unk_type_kind >|0| 0x00000030<
    0x00000032 ret __unk_type_kind >|0| 0x00000031<
fn thaw afB -> __unk_type_kind
    {1 BBs, 52 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 varzi 0x00000001
    0x00000001 var *__unk_type_kind 0x00000002
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|0| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|0| 0x0000000B<, 2
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var **__unk_type_kind 0x00000000
    0x0000000F load **__unk_type_kind >|0| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 3
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var **__unk_type_kind 0x00000000
    0x00000013 load **__unk_type_kind >|0| 0x00000012<
    0x00000014 memb *__unk_type_kind >|0| 0x00000013<, 4
    0x00000015 load *s32 >|0| 0x00000014<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|0| 0x00000016<
    0x00000018 memb *__unk_type_kind >|0| 0x00000017<, 5
    0x00000019 load *bool >|0| 0x00000018<
    0x0000001A var **__unk_type_kind 0x00000000
    0x0000001B load **__unk_type_kind >|0| 0x0000001A<
    0x0000001C memb *__unk_type_kind >|0| 0x0000001B<, 6
    0x0000001D load *bool >|0| 0x0000001C<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|0| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|0| 0x0000001F<, 7
    0x00000021 load *bool >|0| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000000
    0x00000023 load **__unk_type_kind >|0| 0x00000022<
    0x00000024 memb *__unk_type_kind >|0| 0x00000023<, 8
    0x00000025 load *bool >|0| 0x00000024<
    0x00000026 var **__unk_type_kind 0x00000000
    0x00000027 load **__unk_type_kind >|0| 0x00000026<
    0x00000028 memb *__unk_type_kind >|0| 0x00000027<, 9
    0x00000029 load **__unk_type_kind >|0| 0x00000028<
    0x0000002A var *__unk_type_kind 0x00000001
    0x0000002B load *__unk_type_kind >|0| 0x0000002A<
    0x0000002C call adB "create" (*__unk_type_kind >|0| 0x00000001<, s32 >|0| 0x00000005<, s32 >|0| 0x00000009<, s32 >|0| 0x0000000D<, s32 >|0| 0x00000011<, s32 >|0| 0x00000015<, bool >|0| 0x00000019<, bool >|0| 0x0000001D<, bool >|0| 0x00000021<, bool >|0| 0x00000025<, *__unk_type_kind >|0| 0x00000029<, __unk_type_kind >|0| 0x0000002B<) void
    0x0000002D var *__unk_type_kind 0x00000001
    0x0000002E call axD "__defer__" (*__unk_type_kind >|0| 0x0000002D<) void
    0x0000002F var *__unk_type_kind 0x00000002
    0x00000030 call ayD "__defer__" (*__unk_type_kind >|0| 0x0000002F<) void
    0x00000031 var *__unk_type_kind 0x00000002
    0x00000032 load *__unk_type_kind >|0| 0x00000031<
    0x00000033 ret __unk_type_kind >|0| 0x00000032<
fn getAABB agB -> __unk_type_kind
    {1 BBs, 10 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000003<, s32 >|0| 0x00000007<, s32 64, s32 64) __unk_type_kind
    0x00000009 ret __unk_type_kind >|0| 0x00000008<
fn getAABB ahB -> __unk_type_kind
    {1 BBs, 16 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 add s32 >|0| 0x00000003<, s32 >|0| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|0| 0x00000007<
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 1
    0x0000000A load *s32 >|0| 0x00000009<
    0x0000000B var *s32 0x00000002
    0x0000000C load *s32 >|0| 0x0000000B<
    0x0000000D add s32 >|0| 0x0000000A<, s32 >|0| 0x0000000C<
    0x0000000E call a1 "AABB" (s32 >|0| 0x00000006<, s32 >|0| 0x0000000D<, s32 64, s32 64) __unk_type_kind
    0x0000000F ret __unk_type_kind >|0| 0x0000000E<
fn getX aiB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getY ajB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 1
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getMaxX akB -> s32
    {1 BBs, 12 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 2
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A add s32 >|0| 0x00000004<, s32 >|0| 0x00000009<
    0x0000000B ret s32 >|0| 0x0000000A<
fn getMaxY alB -> s32
    {1 BBs, 12 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 1
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 0
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 3
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A add s32 >|0| 0x00000004<, s32 >|0| 0x00000009<
    0x0000000B ret s32 >|0| 0x0000000A<
fn getVisualX amB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getVisualY anB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 1
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getVisualMaxX aoB -> s32
    {1 BBs, 12 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 1
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 2
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A add s32 >|0| 0x00000004<, s32 >|0| 0x00000009<
    0x0000000B ret s32 >|0| 0x0000000A<
fn getVisualMaxY apB -> s32
    {1 BBs, 12 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 1
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 1
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 3
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A add s32 >|0| 0x00000004<, s32 >|0| 0x00000009<
    0x0000000B ret s32 >|0| 0x0000000A<
fn getWidth aqB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 2
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getHeight arB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 3
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getVisualWidth asB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 2
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn getVisualHeight atB -> s32
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 3
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 ret s32 >|0| 0x00000004<
fn region auB -> __unk_type_kind
    {1 BBs, 23 INSTRs, 5 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000003
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000004
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *__unk_type_kind 0x00000004
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 0
    0x0000000E load *__unk_type_kind >|0| 0x0000000D<
    0x0000000F var *__unk_type_kind 0x00000004
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 1
    0x00000011 store *__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x0000000E<
    0x00000012 var *__unk_type_kind 0x00000004
    0x00000013 call aNE "__defer__" (*__unk_type_kind >|0| 0x00000012<) void
    0x00000014 var *__unk_type_kind 0x00000004
    0x00000015 load *__unk_type_kind >|0| 0x00000014<
    0x00000016 ret __unk_type_kind >|0| 0x00000015<
fn region avB -> __unk_type_kind
    {1 BBs, 29 INSTRs, 9 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 s32]
    [0x00000006 s32]
    [0x00000007 s32]
    [0x00000008 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000003
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000008
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *s32 0x00000004
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000005
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 var *s32 0x00000006
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var *s32 0x00000007
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 call a1 "AABB" (s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 >|0| 0x00000011<, s32 >|0| 0x00000013<) __unk_type_kind
    0x00000015 var *__unk_type_kind 0x00000008
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 store *__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000014<
    0x00000018 var *__unk_type_kind 0x00000008
    0x00000019 call aNE "__defer__" (*__unk_type_kind >|0| 0x00000018<) void
    0x0000001A var *__unk_type_kind 0x00000008
    0x0000001B load *__unk_type_kind >|0| 0x0000001A<
    0x0000001C ret __unk_type_kind >|0| 0x0000001B<
fn platform awB -> __unk_type_kind
    {1 BBs, 28 INSTRs, 5 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 varzi 0x00000004
    0x00000001 var *s32 0x00000000
    0x00000002 load *s32 >|0| 0x00000001<
    0x00000003 var *s32 0x00000001
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 var *s32 0x00000002
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *s32 0x00000003
    0x00000008 load *s32 >|0| 0x00000007<
    0x00000009 call a1 "AABB" (s32 >|0| 0x00000002<, s32 >|0| 0x00000004<, s32 >|0| 0x00000006<, s32 >|0| 0x00000008<) __unk_type_kind
    0x0000000A var *__unk_type_kind 0x00000004
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 0
    0x0000000C store *__unk_type_kind >|0| 0x0000000B<, __unk_type_kind >|0| 0x00000009<
    0x0000000D var *s32 0x00000000
    0x0000000E load *s32 >|0| 0x0000000D<
    0x0000000F var *s32 0x00000001
    0x00000010 load *s32 >|0| 0x0000000F<
    0x00000011 var *s32 0x00000002
    0x00000012 load *s32 >|0| 0x00000011<
    0x00000013 var *s32 0x00000003
    0x00000014 load *s32 >|0| 0x00000013<
    0x00000015 call a1 "AABB" (s32 >|0| 0x0000000E<, s32 >|0| 0x00000010<, s32 >|0| 0x00000012<, s32 >|0| 0x00000014<) __unk_type_kind
    0x00000016 var *__unk_type_kind 0x00000004
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 1
    0x00000018 store *__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x00000015<
    0x00000019 var *__unk_type_kind 0x00000004
    0x0000001A load *__unk_type_kind >|0| 0x00000019<
    0x0000001B ret __unk_type_kind >|0| 0x0000001A<
fn lake axB -> __unk_type_kind
    {1 BBs, 29 INSTRs, 5 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000003
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000004
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *s32 0x00000000
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000001
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 var *s32 0x00000002
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var *s32 0x00000003
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 call a1 "AABB" (s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 >|0| 0x00000011<, s32 >|0| 0x00000013<) __unk_type_kind
    0x00000015 var *__unk_type_kind 0x00000004
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 store *__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000014<
    0x00000018 var *__unk_type_kind 0x00000004
    0x00000019 call aJE "__defer__" (*__unk_type_kind >|0| 0x00000018<) void
    0x0000001A var *__unk_type_kind 0x00000004
    0x0000001B load *__unk_type_kind >|0| 0x0000001A<
    0x0000001C ret __unk_type_kind >|0| 0x0000001B<
fn bridge ayB -> __unk_type_kind
    {1 BBs, 25 INSTRs, 4 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 4) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000003
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 0
    0x00000009 store *__unk_type_kind >|0| 0x00000008<, __unk_type_kind >|0| 0x00000006<
    0x0000000A var *s32 0x00000000
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *s32 0x00000001
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000002
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 call a1 "AABB" (s32 >|0| 0x0000000B<, s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 4) __unk_type_kind
    0x00000011 var *__unk_type_kind 0x00000003
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 1
    0x00000013 store *__unk_type_kind >|0| 0x00000012<, __unk_type_kind >|0| 0x00000010<
    0x00000014 var *__unk_type_kind 0x00000003
    0x00000015 call aIE "__defer__" (*__unk_type_kind >|0| 0x00000014<) void
    0x00000016 var *__unk_type_kind 0x00000003
    0x00000017 load *__unk_type_kind >|0| 0x00000016<
    0x00000018 ret __unk_type_kind >|0| 0x00000017<
fn portal azB -> __unk_type_kind
    {1 BBs, 23 INSTRs, 3 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 add s32 >|0| 0x00000001<, s32 48
    0x00000003 var *s32 0x00000001
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 add s32 >|0| 0x00000004<, s32 64
    0x00000006 call a1 "AABB" (s32 >|0| 0x00000002<, s32 >|0| 0x00000005<, s32 32, s32 64) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000002
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 0
    0x00000009 store *__unk_type_kind >|0| 0x00000008<, __unk_type_kind >|0| 0x00000006<
    0x0000000A var *s32 0x00000000
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C var *s32 0x00000001
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E call a1 "AABB" (s32 >|0| 0x0000000B<, s32 >|0| 0x0000000D<, s32 128, s32 128) __unk_type_kind
    0x0000000F var *__unk_type_kind 0x00000002
    0x00000010 memb *__unk_type_kind >|0| 0x0000000F<, 1
    0x00000011 store *__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x0000000E<
    0x00000012 var *__unk_type_kind 0x00000002
    0x00000013 call aPE "__defer__" (*__unk_type_kind >|0| 0x00000012<) void
    0x00000014 var *__unk_type_kind 0x00000002
    0x00000015 load *__unk_type_kind >|0| 0x00000014<
    0x00000016 ret __unk_type_kind >|0| 0x00000015<
fn decoration a0C -> __unk_type_kind
    {1 BBs, 36 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000003
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000004
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *s32 0x00000001
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000002
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 var *s32 0x00000003
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var *s32 0x00000004
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 call a1 "AABB" (s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 >|0| 0x00000011<, s32 >|0| 0x00000013<) __unk_type_kind
    0x00000015 var *__unk_type_kind 0x00000005
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 store *__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000014<
    0x00000018 var *__unk_type_kind 0x00000000
    0x00000019 load *__unk_type_kind >|0| 0x00000018<
    0x0000001A var *__unk_type_kind 0x00000005
    0x0000001B memb *__unk_type_kind >|0| 0x0000001A<, 2
    0x0000001C store *__unk_type_kind >|0| 0x0000001B<, __unk_type_kind >|0| 0x00000019<
    0x0000001D var *__unk_type_kind 0x00000000
    0x0000001E call azD "__defer__" (*__unk_type_kind >|0| 0x0000001D<) void
    0x0000001F var *__unk_type_kind 0x00000005
    0x00000020 call aME "__defer__" (*__unk_type_kind >|0| 0x0000001F<) void
    0x00000021 var *__unk_type_kind 0x00000005
    0x00000022 load *__unk_type_kind >|0| 0x00000021<
    0x00000023 ret __unk_type_kind >|0| 0x00000022<
fn itemSpawn a1C -> __unk_type_kind
    {1 BBs, 34 INSTRs, 6 VARs}
    [0x00000000 u64]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000003
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000004
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *s32 0x00000001
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000002
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 var *s32 0x00000003
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var *s32 0x00000004
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 call a1 "AABB" (s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 >|0| 0x00000011<, s32 >|0| 0x00000013<) __unk_type_kind
    0x00000015 var *__unk_type_kind 0x00000005
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 store *__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000014<
    0x00000018 var *u64 0x00000000
    0x00000019 load *u64 >|0| 0x00000018<
    0x0000001A var *__unk_type_kind 0x00000005
    0x0000001B memb *__unk_type_kind >|0| 0x0000001A<, 2
    0x0000001C store *u64 >|0| 0x0000001B<, u64 >|0| 0x00000019<
    0x0000001D var *__unk_type_kind 0x00000005
    0x0000001E call aHE "__defer__" (*__unk_type_kind >|0| 0x0000001D<) void
    0x0000001F var *__unk_type_kind 0x00000005
    0x00000020 load *__unk_type_kind >|0| 0x0000001F<
    0x00000021 ret __unk_type_kind >|0| 0x00000020<
fn portalEnabler a2C -> __unk_type_kind
    {1 BBs, 32 INSTRs, 5 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000003
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000004
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *s32 0x00000000
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000001
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 var *s32 0x00000002
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var *s32 0x00000003
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 call a1 "AABB" (s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 >|0| 0x00000011<, s32 >|0| 0x00000013<) __unk_type_kind
    0x00000015 var *__unk_type_kind 0x00000004
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 store *__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000014<
    0x00000018 var *__unk_type_kind 0x00000004
    0x00000019 memb *__unk_type_kind >|0| 0x00000018<, 2
    0x0000001A store *bool >|0| 0x00000019<, bool false
    0x0000001B var *__unk_type_kind 0x00000004
    0x0000001C call aOE "__defer__" (*__unk_type_kind >|0| 0x0000001B<) void
    0x0000001D var *__unk_type_kind 0x00000004
    0x0000001E load *__unk_type_kind >|0| 0x0000001D<
    0x0000001F ret __unk_type_kind >|0| 0x0000001E<
fn update a3C -> bool
    {3 BBs, 20 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 2
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 2
    0x00000004 load *u64 >|0| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|0| 0x00000005<
    0x00000007 memb *__unk_type_kind >|0| 0x00000006<, 2
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 load *u64 >|0| 0x00000008<
    0x0000000A zext s32 1 to u64
    0x0000000B sub u64 >|0| 0x00000009<, u64 >|0| 0x0000000A<
    0x0000000C eq u64 >|0| 0x00000004<, u64 >|0| 0x0000000B<
    0x0000000D cbr u64 >|0| 0x0000000C<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret bool true
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 2
    0x00000003 call aRB "update" (*__unk_type_kind >|2| 0x00000002<) void
    0x00000004 ret bool false
fn now a4C -> __unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 2
    0x00000003 call aQB "now" (*__unk_type_kind >|0| 0x00000002<) __unk_type_kind
    0x00000004 ret __unk_type_kind >|0| 0x00000003<
fn particle a5C -> __unk_type_kind
    {1 BBs, 36 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000003
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000004
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 0
    0x0000000B store *__unk_type_kind >|0| 0x0000000A<, __unk_type_kind >|0| 0x00000008<
    0x0000000C var *s32 0x00000001
    0x0000000D load *s32 >|0| 0x0000000C<
    0x0000000E var *s32 0x00000002
    0x0000000F load *s32 >|0| 0x0000000E<
    0x00000010 var *s32 0x00000003
    0x00000011 load *s32 >|0| 0x00000010<
    0x00000012 var *s32 0x00000004
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 call a1 "AABB" (s32 >|0| 0x0000000D<, s32 >|0| 0x0000000F<, s32 >|0| 0x00000011<, s32 >|0| 0x00000013<) __unk_type_kind
    0x00000015 var *__unk_type_kind 0x00000005
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 store *__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000014<
    0x00000018 var *__unk_type_kind 0x00000000
    0x00000019 call aTB "newInstance" (*__unk_type_kind >|0| 0x00000018<) __unk_type_kind
    0x0000001A var *__unk_type_kind 0x00000005
    0x0000001B memb *__unk_type_kind >|0| 0x0000001A<, 2
    0x0000001C store *__unk_type_kind >|0| 0x0000001B<, __unk_type_kind >|0| 0x00000019<
    0x0000001D var *__unk_type_kind 0x00000000
    0x0000001E call avD "__defer__" (*__unk_type_kind >|0| 0x0000001D<) void
    0x0000001F var *__unk_type_kind 0x00000005
    0x00000020 call aGE "__defer__" (*__unk_type_kind >|0| 0x0000001F<) void
    0x00000021 var *__unk_type_kind 0x00000005
    0x00000022 load *__unk_type_kind >|0| 0x00000021<
    0x00000023 ret __unk_type_kind >|0| 0x00000022<
fn update a6C -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 5
    0x00000003 call aRB "update" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 ret
fn now a7C -> __unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 5
    0x00000003 call aQB "now" (*__unk_type_kind >|0| 0x00000002<) __unk_type_kind
    0x00000004 ret __unk_type_kind >|0| 0x00000003<
fn getAABB a8C -> __unk_type_kind
    {1 BBs, 10 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000003<, s32 >|0| 0x00000007<, s32 64, s32 32) __unk_type_kind
    0x00000009 ret __unk_type_kind >|0| 0x00000008<
fn getAABB a9C -> __unk_type_kind
    {1 BBs, 16 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 add s32 >|0| 0x00000003<, s32 >|0| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|0| 0x00000007<
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 1
    0x0000000A load *s32 >|0| 0x00000009<
    0x0000000B var *s32 0x00000002
    0x0000000C load *s32 >|0| 0x0000000B<
    0x0000000D add s32 >|0| 0x0000000A<, s32 >|0| 0x0000000C<
    0x0000000E call a1 "AABB" (s32 >|0| 0x00000006<, s32 >|0| 0x0000000D<, s32 64, s32 32) __unk_type_kind
    0x0000000F ret __unk_type_kind >|0| 0x0000000E<
fn getDroppedResource aAC -> u64
    {4 BBs, 11 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 call aIB "captRandom" () d
    0x00000001 flt d >|0| 0x00000000<, d 0.250000
    0x00000002 cbr d >|0| 0x00000001<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 6
    0x00000003 load *u64 >|1| 0x00000002<
    0x00000004 br |3|
  BASICBLOCK |2|
    0x00000000 br |3|
  BASICBLOCK |3|
    0x00000000 phi2 |1| -> u64 >|1| 0x00000003<, |2| -> u64 0
    0x00000001 ret u64 >|3| 0x00000000<
fn spider aBC -> __unk_type_kind
    {1 BBs, 10 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call avD "__defer__" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 load *__unk_type_kind >|0| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call aDC "spider" (__unk_type_kind >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<, s32 1, bool false) __unk_type_kind
    0x00000009 ret __unk_type_kind >|0| 0x00000008<
fn spider aCC -> __unk_type_kind
    {1 BBs, 12 INSTRs, 4 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call avD "__defer__" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 load *__unk_type_kind >|0| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 var *s32 0x00000003
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A call aDC "spider" (__unk_type_kind >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<, s32 >|0| 0x00000009<, bool false) __unk_type_kind
    0x0000000B ret __unk_type_kind >|0| 0x0000000A<
fn spider aDC -> __unk_type_kind
    {11 BBs, 79 INSTRs, 6 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 bool]
    [0x00000005 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000005
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000002
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000005
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *bool 0x00000004
    0x0000000B load *bool >|0| 0x0000000A<
    0x0000000C cbr bool >|0| 0x0000000B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 br |3|
  BASICBLOCK |2|
    0x00000000 br |3|
  BASICBLOCK |3|
    0x00000000 phi2 |1| -> s32 -1, |2| -> s32 1
    0x00000001 var *__unk_type_kind 0x00000005
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 2
    0x00000003 store *s32 >|3| 0x00000002<, s32 >|3| 0x00000000<
    0x00000004 var *__unk_type_kind 0x00000005
    0x00000005 memb *__unk_type_kind >|3| 0x00000004<, 3
    0x00000006 store *s32 >|3| 0x00000005<, s32 0
    0x00000007 var *s32 0x00000003
    0x00000008 load *s32 >|3| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A memb *__unk_type_kind >|3| 0x00000009<, 4
    0x0000000B store *s32 >|3| 0x0000000A<, s32 >|3| 0x00000008<
    0x0000000C var *__unk_type_kind 0x00000000
    0x0000000D call aTB "newInstance" (*__unk_type_kind >|3| 0x0000000C<) __unk_type_kind
    0x0000000E var *__unk_type_kind 0x00000005
    0x0000000F memb *__unk_type_kind >|3| 0x0000000E<, 5
    0x00000010 store *__unk_type_kind >|3| 0x0000000F<, __unk_type_kind >|3| 0x0000000D<
    0x00000011 var *__unk_type_kind 0x00000005
    0x00000012 memb *__unk_type_kind >|3| 0x00000011<, 6
    0x00000013 store *u64 >|3| 0x00000012<, u64 0
    0x00000014 var *__unk_type_kind 0x00000000
    0x00000015 memb *__unk_type_kind >|3| 0x00000014<, 0
    0x00000016 load **__unk_type_kind >|3| 0x00000015<
    0x00000017 gvar *__unk_type_kind 0x00000937
    0x00000018 memb *__unk_type_kind >|3| 0x00000017<, 0
    0x00000019 load **__unk_type_kind >|3| 0x00000018<
    0x0000001A eq *__unk_type_kind >|3| 0x00000016<, *__unk_type_kind >|3| 0x00000019<
    0x0000001B cbr *__unk_type_kind >|3| 0x0000001A<, |4|, |5|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 6
    0x00000002 store *u64 >|4| 0x00000001<, u64 1
    0x00000003 br |6|
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|5| 0x00000000<, 0
    0x00000002 load **__unk_type_kind >|5| 0x00000001<
    0x00000003 gvar *__unk_type_kind 0x00000938
    0x00000004 memb *__unk_type_kind >|5| 0x00000003<, 0
    0x00000005 load **__unk_type_kind >|5| 0x00000004<
    0x00000006 eq *__unk_type_kind >|5| 0x00000002<, *__unk_type_kind >|5| 0x00000005<
    0x00000007 cbr *__unk_type_kind >|5| 0x00000006<, |7|, |8|
  BASICBLOCK |6|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|6| 0x00000000<, 0
    0x00000002 load **__unk_type_kind >|6| 0x00000001<
    0x00000003 gvar *__unk_type_kind 0x00000939
    0x00000004 memb *__unk_type_kind >|6| 0x00000003<, 0
    0x00000005 load **__unk_type_kind >|6| 0x00000004<
    0x00000006 eq *__unk_type_kind >|6| 0x00000002<, *__unk_type_kind >|6| 0x00000005<
    0x00000007 cbr *__unk_type_kind >|6| 0x00000006<, |9|, |10|
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|7| 0x00000000<, 6
    0x00000002 store *u64 >|7| 0x00000001<, u64 3
    0x00000003 br |8|
  BASICBLOCK |8|
    0x00000000 br |6|
  BASICBLOCK |9|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|9| 0x00000000<, 6
    0x00000002 store *u64 >|9| 0x00000001<, u64 2
    0x00000003 br |10|
  BASICBLOCK |10|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call avD "__defer__" (*__unk_type_kind >|10| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000005
    0x00000003 call auD "__defer__" (*__unk_type_kind >|10| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000005
    0x00000005 load *__unk_type_kind >|10| 0x00000004<
    0x00000006 ret __unk_type_kind >|10| 0x00000005<
fn update aEC -> void
    {3 BBs, 29 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 6
    0x00000003 call aRB "update" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 5
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 add s32 >|0| 0x00000007<, s32 1
    0x00000009 store *s32 >|0| 0x00000006<, *s32 >|0| 0x00000008<
    0x0000000A load *s32 >|0| 0x00000006<
    0x0000000B var **__unk_type_kind 0x00000000
    0x0000000C load **__unk_type_kind >|0| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 4
    0x0000000E load *s32 >|0| 0x0000000D<
    0x0000000F eq s32 >|0| 0x0000000A<, s32 >|0| 0x0000000E<
    0x00000010 cbr s32 >|0| 0x0000000F<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 memb *__unk_type_kind >|1| 0x00000001<, 5
    0x00000003 store *s32 >|1| 0x00000002<, s32 0
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|1| 0x00000004<
    0x00000006 memb *__unk_type_kind >|1| 0x00000005<, 2
    0x00000007 load *s32 >|1| 0x00000006<
    0x00000008 mul s32 >|1| 0x00000007<, s32 -1
    0x00000009 store *s32 >|1| 0x00000006<, s32 >|1| 0x00000008<
    0x0000000A br |2|
  BASICBLOCK |2|
    0x00000000 ret
fn now aFC -> __unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 6
    0x00000003 call aQB "now" (*__unk_type_kind >|0| 0x00000002<) __unk_type_kind
    0x00000004 ret __unk_type_kind >|0| 0x00000003<
fn getAABB aGC -> __unk_type_kind
    {1 BBs, 10 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call a1 "AABB" (s32 >|0| 0x00000003<, s32 >|0| 0x00000007<, s32 256, s32 64) __unk_type_kind
    0x00000009 ret __unk_type_kind >|0| 0x00000008<
fn swordfish aHC -> __unk_type_kind
    {1 BBs, 14 INSTRs, 5 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call avD "__defer__" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 load *__unk_type_kind >|0| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 var *s32 0x00000003
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A var *s32 0x00000004
    0x0000000B load *s32 >|0| 0x0000000A<
    0x0000000C call aIC "swordfish" (__unk_type_kind >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<, s32 >|0| 0x00000009<, s32 >|0| 0x0000000B<, bool false) __unk_type_kind
    0x0000000D ret __unk_type_kind >|0| 0x0000000C<
fn swordfish aIC -> __unk_type_kind
    {4 BBs, 44 INSTRs, 7 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 bool]
    [0x00000006 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000006
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000001<
    0x00000005 var *s32 0x00000002
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000006
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *s32 >|0| 0x00000008<, s32 >|0| 0x00000006<
    0x0000000A var *bool 0x00000005
    0x0000000B load *bool >|0| 0x0000000A<
    0x0000000C cbr bool >|0| 0x0000000B<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 br |3|
  BASICBLOCK |2|
    0x00000000 br |3|
  BASICBLOCK |3|
    0x00000000 phi2 |1| -> s32 -1, |2| -> s32 1
    0x00000001 var *__unk_type_kind 0x00000006
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 2
    0x00000003 store *s32 >|3| 0x00000002<, s32 >|3| 0x00000000<
    0x00000004 var *s32 0x00000003
    0x00000005 load *s32 >|3| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000006
    0x00000007 memb *__unk_type_kind >|3| 0x00000006<, 3
    0x00000008 store *s32 >|3| 0x00000007<, s32 >|3| 0x00000005<
    0x00000009 var *s32 0x00000004
    0x0000000A load *s32 >|3| 0x00000009<
    0x0000000B var *__unk_type_kind 0x00000006
    0x0000000C memb *__unk_type_kind >|3| 0x0000000B<, 4
    0x0000000D store *s32 >|3| 0x0000000C<, s32 >|3| 0x0000000A<
    0x0000000E var *__unk_type_kind 0x00000006
    0x0000000F memb *__unk_type_kind >|3| 0x0000000E<, 5
    0x00000010 store *s32 >|3| 0x0000000F<, s32 0
    0x00000011 var *__unk_type_kind 0x00000000
    0x00000012 call aTB "newInstance" (*__unk_type_kind >|3| 0x00000011<) __unk_type_kind
    0x00000013 var *__unk_type_kind 0x00000006
    0x00000014 memb *__unk_type_kind >|3| 0x00000013<, 6
    0x00000015 store *__unk_type_kind >|3| 0x00000014<, __unk_type_kind >|3| 0x00000012<
    0x00000016 var *__unk_type_kind 0x00000000
    0x00000017 call avD "__defer__" (*__unk_type_kind >|3| 0x00000016<) void
    0x00000018 var *__unk_type_kind 0x00000006
    0x00000019 call a0E "__defer__" (*__unk_type_kind >|3| 0x00000018<) void
    0x0000001A var *__unk_type_kind 0x00000006
    0x0000001B load *__unk_type_kind >|3| 0x0000001A<
    0x0000001C ret __unk_type_kind >|3| 0x0000001B<
fn loadTextures aJC -> void
    {1 BBs, 705 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call a7A "__pass__" (stru) __unk_type_kind
    0x00000004 call aAA "__add__" (__unk_type_kind >|0| 0x00000002<, __unk_type_kind >|0| 0x00000003<) __unk_type_kind
    0x00000005 call a7A "__pass__" (__unk_type_kind >|0| 0x00000004<) __unk_type_kind
    0x00000006 call aNB "captTexture" (__unk_type_kind >|0| 0x00000005<, bool false) __unk_type_kind
    0x00000007 gvar *__unk_type_kind 0x000008E1
    0x00000008 store *__unk_type_kind >|0| 0x00000007<, __unk_type_kind >|0| 0x00000006<
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A load *__unk_type_kind >|0| 0x00000009<
    0x0000000B call a7A "__pass__" (__unk_type_kind >|0| 0x0000000A<) __unk_type_kind
    0x0000000C call a7A "__pass__" (stru) __unk_type_kind
    0x0000000D call aAA "__add__" (__unk_type_kind >|0| 0x0000000B<, __unk_type_kind >|0| 0x0000000C<) __unk_type_kind
    0x0000000E call a7A "__pass__" (__unk_type_kind >|0| 0x0000000D<) __unk_type_kind
    0x0000000F call aNB "captTexture" (__unk_type_kind >|0| 0x0000000E<, bool false) __unk_type_kind
    0x00000010 gvar *__unk_type_kind 0x000008E2
    0x00000011 store *__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x0000000F<
    0x00000012 var *__unk_type_kind 0x00000000
    0x00000013 load *__unk_type_kind >|0| 0x00000012<
    0x00000014 call a7A "__pass__" (__unk_type_kind >|0| 0x00000013<) __unk_type_kind
    0x00000015 call a7A "__pass__" (stru) __unk_type_kind
    0x00000016 call aAA "__add__" (__unk_type_kind >|0| 0x00000014<, __unk_type_kind >|0| 0x00000015<) __unk_type_kind
    0x00000017 call a7A "__pass__" (__unk_type_kind >|0| 0x00000016<) __unk_type_kind
    0x00000018 call aNB "captTexture" (__unk_type_kind >|0| 0x00000017<, bool false) __unk_type_kind
    0x00000019 gvar *__unk_type_kind 0x000008E3
    0x0000001A store *__unk_type_kind >|0| 0x00000019<, __unk_type_kind >|0| 0x00000018<
    0x0000001B var *__unk_type_kind 0x00000000
    0x0000001C load *__unk_type_kind >|0| 0x0000001B<
    0x0000001D call a7A "__pass__" (__unk_type_kind >|0| 0x0000001C<) __unk_type_kind
    0x0000001E call a7A "__pass__" (stru) __unk_type_kind
    0x0000001F call aAA "__add__" (__unk_type_kind >|0| 0x0000001D<, __unk_type_kind >|0| 0x0000001E<) __unk_type_kind
    0x00000020 call a7A "__pass__" (__unk_type_kind >|0| 0x0000001F<) __unk_type_kind
    0x00000021 call aNB "captTexture" (__unk_type_kind >|0| 0x00000020<, bool false) __unk_type_kind
    0x00000022 gvar *__unk_type_kind 0x000008E4
    0x00000023 store *__unk_type_kind >|0| 0x00000022<, __unk_type_kind >|0| 0x00000021<
    0x00000024 var *__unk_type_kind 0x00000000
    0x00000025 load *__unk_type_kind >|0| 0x00000024<
    0x00000026 call a7A "__pass__" (__unk_type_kind >|0| 0x00000025<) __unk_type_kind
    0x00000027 call a7A "__pass__" (stru) __unk_type_kind
    0x00000028 call aAA "__add__" (__unk_type_kind >|0| 0x00000026<, __unk_type_kind >|0| 0x00000027<) __unk_type_kind
    0x00000029 call a7A "__pass__" (__unk_type_kind >|0| 0x00000028<) __unk_type_kind
    0x0000002A call aNB "captTexture" (__unk_type_kind >|0| 0x00000029<, bool false) __unk_type_kind
    0x0000002B gvar *__unk_type_kind 0x000008E5
    0x0000002C store *__unk_type_kind >|0| 0x0000002B<, __unk_type_kind >|0| 0x0000002A<
    0x0000002D var *__unk_type_kind 0x00000000
    0x0000002E load *__unk_type_kind >|0| 0x0000002D<
    0x0000002F call a7A "__pass__" (__unk_type_kind >|0| 0x0000002E<) __unk_type_kind
    0x00000030 call a7A "__pass__" (stru) __unk_type_kind
    0x00000031 call aAA "__add__" (__unk_type_kind >|0| 0x0000002F<, __unk_type_kind >|0| 0x00000030<) __unk_type_kind
    0x00000032 call a7A "__pass__" (__unk_type_kind >|0| 0x00000031<) __unk_type_kind
    0x00000033 call aNB "captTexture" (__unk_type_kind >|0| 0x00000032<, bool false) __unk_type_kind
    0x00000034 gvar *__unk_type_kind 0x000008E6
    0x00000035 store *__unk_type_kind >|0| 0x00000034<, __unk_type_kind >|0| 0x00000033<
    0x00000036 var *__unk_type_kind 0x00000000
    0x00000037 load *__unk_type_kind >|0| 0x00000036<
    0x00000038 call a7A "__pass__" (__unk_type_kind >|0| 0x00000037<) __unk_type_kind
    0x00000039 call a7A "__pass__" (stru) __unk_type_kind
    0x0000003A call aAA "__add__" (__unk_type_kind >|0| 0x00000038<, __unk_type_kind >|0| 0x00000039<) __unk_type_kind
    0x0000003B call a7A "__pass__" (__unk_type_kind >|0| 0x0000003A<) __unk_type_kind
    0x0000003C call aNB "captTexture" (__unk_type_kind >|0| 0x0000003B<, bool false) __unk_type_kind
    0x0000003D gvar *__unk_type_kind 0x000008E7
    0x0000003E store *__unk_type_kind >|0| 0x0000003D<, __unk_type_kind >|0| 0x0000003C<
    0x0000003F var *__unk_type_kind 0x00000000
    0x00000040 load *__unk_type_kind >|0| 0x0000003F<
    0x00000041 call a7A "__pass__" (__unk_type_kind >|0| 0x00000040<) __unk_type_kind
    0x00000042 call a7A "__pass__" (stru) __unk_type_kind
    0x00000043 call aAA "__add__" (__unk_type_kind >|0| 0x00000041<, __unk_type_kind >|0| 0x00000042<) __unk_type_kind
    0x00000044 call a7A "__pass__" (__unk_type_kind >|0| 0x00000043<) __unk_type_kind
    0x00000045 call aNB "captTexture" (__unk_type_kind >|0| 0x00000044<, bool false) __unk_type_kind
    0x00000046 gvar *__unk_type_kind 0x000008E8
    0x00000047 store *__unk_type_kind >|0| 0x00000046<, __unk_type_kind >|0| 0x00000045<
    0x00000048 var *__unk_type_kind 0x00000000
    0x00000049 load *__unk_type_kind >|0| 0x00000048<
    0x0000004A call a7A "__pass__" (__unk_type_kind >|0| 0x00000049<) __unk_type_kind
    0x0000004B call a7A "__pass__" (stru) __unk_type_kind
    0x0000004C call aAA "__add__" (__unk_type_kind >|0| 0x0000004A<, __unk_type_kind >|0| 0x0000004B<) __unk_type_kind
    0x0000004D call a7A "__pass__" (__unk_type_kind >|0| 0x0000004C<) __unk_type_kind
    0x0000004E call aNB "captTexture" (__unk_type_kind >|0| 0x0000004D<, bool false) __unk_type_kind
    0x0000004F gvar *__unk_type_kind 0x000008E9
    0x00000050 store *__unk_type_kind >|0| 0x0000004F<, __unk_type_kind >|0| 0x0000004E<
    0x00000051 var *__unk_type_kind 0x00000000
    0x00000052 load *__unk_type_kind >|0| 0x00000051<
    0x00000053 call a7A "__pass__" (__unk_type_kind >|0| 0x00000052<) __unk_type_kind
    0x00000054 call a7A "__pass__" (stru) __unk_type_kind
    0x00000055 call aAA "__add__" (__unk_type_kind >|0| 0x00000053<, __unk_type_kind >|0| 0x00000054<) __unk_type_kind
    0x00000056 call a7A "__pass__" (__unk_type_kind >|0| 0x00000055<) __unk_type_kind
    0x00000057 call aNB "captTexture" (__unk_type_kind >|0| 0x00000056<, bool false) __unk_type_kind
    0x00000058 gvar *__unk_type_kind 0x000008EA
    0x00000059 store *__unk_type_kind >|0| 0x00000058<, __unk_type_kind >|0| 0x00000057<
    0x0000005A var *__unk_type_kind 0x00000000
    0x0000005B load *__unk_type_kind >|0| 0x0000005A<
    0x0000005C call a7A "__pass__" (__unk_type_kind >|0| 0x0000005B<) __unk_type_kind
    0x0000005D call a7A "__pass__" (stru) __unk_type_kind
    0x0000005E call aAA "__add__" (__unk_type_kind >|0| 0x0000005C<, __unk_type_kind >|0| 0x0000005D<) __unk_type_kind
    0x0000005F call a7A "__pass__" (__unk_type_kind >|0| 0x0000005E<) __unk_type_kind
    0x00000060 call aNB "captTexture" (__unk_type_kind >|0| 0x0000005F<, bool false) __unk_type_kind
    0x00000061 gvar *__unk_type_kind 0x000008EB
    0x00000062 store *__unk_type_kind >|0| 0x00000061<, __unk_type_kind >|0| 0x00000060<
    0x00000063 var *__unk_type_kind 0x00000000
    0x00000064 load *__unk_type_kind >|0| 0x00000063<
    0x00000065 call a7A "__pass__" (__unk_type_kind >|0| 0x00000064<) __unk_type_kind
    0x00000066 call a7A "__pass__" (stru) __unk_type_kind
    0x00000067 call aAA "__add__" (__unk_type_kind >|0| 0x00000065<, __unk_type_kind >|0| 0x00000066<) __unk_type_kind
    0x00000068 call a7A "__pass__" (__unk_type_kind >|0| 0x00000067<) __unk_type_kind
    0x00000069 call aNB "captTexture" (__unk_type_kind >|0| 0x00000068<, bool false) __unk_type_kind
    0x0000006A gvar *__unk_type_kind 0x000008EC
    0x0000006B store *__unk_type_kind >|0| 0x0000006A<, __unk_type_kind >|0| 0x00000069<
    0x0000006C var *__unk_type_kind 0x00000000
    0x0000006D load *__unk_type_kind >|0| 0x0000006C<
    0x0000006E call a7A "__pass__" (__unk_type_kind >|0| 0x0000006D<) __unk_type_kind
    0x0000006F call a7A "__pass__" (stru) __unk_type_kind
    0x00000070 call aAA "__add__" (__unk_type_kind >|0| 0x0000006E<, __unk_type_kind >|0| 0x0000006F<) __unk_type_kind
    0x00000071 call a7A "__pass__" (__unk_type_kind >|0| 0x00000070<) __unk_type_kind
    0x00000072 call aNB "captTexture" (__unk_type_kind >|0| 0x00000071<, bool false) __unk_type_kind
    0x00000073 gvar *__unk_type_kind 0x000008ED
    0x00000074 store *__unk_type_kind >|0| 0x00000073<, __unk_type_kind >|0| 0x00000072<
    0x00000075 var *__unk_type_kind 0x00000000
    0x00000076 load *__unk_type_kind >|0| 0x00000075<
    0x00000077 call a7A "__pass__" (__unk_type_kind >|0| 0x00000076<) __unk_type_kind
    0x00000078 call a7A "__pass__" (stru) __unk_type_kind
    0x00000079 call aAA "__add__" (__unk_type_kind >|0| 0x00000077<, __unk_type_kind >|0| 0x00000078<) __unk_type_kind
    0x0000007A call a7A "__pass__" (__unk_type_kind >|0| 0x00000079<) __unk_type_kind
    0x0000007B call aNB "captTexture" (__unk_type_kind >|0| 0x0000007A<, bool false) __unk_type_kind
    0x0000007C gvar *__unk_type_kind 0x000008EE
    0x0000007D store *__unk_type_kind >|0| 0x0000007C<, __unk_type_kind >|0| 0x0000007B<
    0x0000007E var *__unk_type_kind 0x00000000
    0x0000007F load *__unk_type_kind >|0| 0x0000007E<
    0x00000080 call a7A "__pass__" (__unk_type_kind >|0| 0x0000007F<) __unk_type_kind
    0x00000081 call a7A "__pass__" (stru) __unk_type_kind
    0x00000082 call aAA "__add__" (__unk_type_kind >|0| 0x00000080<, __unk_type_kind >|0| 0x00000081<) __unk_type_kind
    0x00000083 call a7A "__pass__" (__unk_type_kind >|0| 0x00000082<) __unk_type_kind
    0x00000084 call aNB "captTexture" (__unk_type_kind >|0| 0x00000083<, bool false) __unk_type_kind
    0x00000085 gvar *__unk_type_kind 0x000008EF
    0x00000086 store *__unk_type_kind >|0| 0x00000085<, __unk_type_kind >|0| 0x00000084<
    0x00000087 var *__unk_type_kind 0x00000000
    0x00000088 load *__unk_type_kind >|0| 0x00000087<
    0x00000089 call a7A "__pass__" (__unk_type_kind >|0| 0x00000088<) __unk_type_kind
    0x0000008A call a7A "__pass__" (stru) __unk_type_kind
    0x0000008B call aAA "__add__" (__unk_type_kind >|0| 0x00000089<, __unk_type_kind >|0| 0x0000008A<) __unk_type_kind
    0x0000008C call a7A "__pass__" (__unk_type_kind >|0| 0x0000008B<) __unk_type_kind
    0x0000008D call aNB "captTexture" (__unk_type_kind >|0| 0x0000008C<, bool false) __unk_type_kind
    0x0000008E gvar *__unk_type_kind 0x000008F0
    0x0000008F store *__unk_type_kind >|0| 0x0000008E<, __unk_type_kind >|0| 0x0000008D<
    0x00000090 var *__unk_type_kind 0x00000000
    0x00000091 load *__unk_type_kind >|0| 0x00000090<
    0x00000092 call a7A "__pass__" (__unk_type_kind >|0| 0x00000091<) __unk_type_kind
    0x00000093 call a7A "__pass__" (stru) __unk_type_kind
    0x00000094 call aAA "__add__" (__unk_type_kind >|0| 0x00000092<, __unk_type_kind >|0| 0x00000093<) __unk_type_kind
    0x00000095 call a7A "__pass__" (__unk_type_kind >|0| 0x00000094<) __unk_type_kind
    0x00000096 call aNB "captTexture" (__unk_type_kind >|0| 0x00000095<, bool false) __unk_type_kind
    0x00000097 gvar *__unk_type_kind 0x000008F1
    0x00000098 store *__unk_type_kind >|0| 0x00000097<, __unk_type_kind >|0| 0x00000096<
    0x00000099 var *__unk_type_kind 0x00000000
    0x0000009A load *__unk_type_kind >|0| 0x00000099<
    0x0000009B call a7A "__pass__" (__unk_type_kind >|0| 0x0000009A<) __unk_type_kind
    0x0000009C call a7A "__pass__" (stru) __unk_type_kind
    0x0000009D call aAA "__add__" (__unk_type_kind >|0| 0x0000009B<, __unk_type_kind >|0| 0x0000009C<) __unk_type_kind
    0x0000009E call a7A "__pass__" (__unk_type_kind >|0| 0x0000009D<) __unk_type_kind
    0x0000009F call aNB "captTexture" (__unk_type_kind >|0| 0x0000009E<, bool false) __unk_type_kind
    0x000000A0 gvar *__unk_type_kind 0x000008F2
    0x000000A1 store *__unk_type_kind >|0| 0x000000A0<, __unk_type_kind >|0| 0x0000009F<
    0x000000A2 var *__unk_type_kind 0x00000000
    0x000000A3 load *__unk_type_kind >|0| 0x000000A2<
    0x000000A4 call a7A "__pass__" (__unk_type_kind >|0| 0x000000A3<) __unk_type_kind
    0x000000A5 call a7A "__pass__" (stru) __unk_type_kind
    0x000000A6 call aAA "__add__" (__unk_type_kind >|0| 0x000000A4<, __unk_type_kind >|0| 0x000000A5<) __unk_type_kind
    0x000000A7 call a7A "__pass__" (__unk_type_kind >|0| 0x000000A6<) __unk_type_kind
    0x000000A8 call aNB "captTexture" (__unk_type_kind >|0| 0x000000A7<, bool false) __unk_type_kind
    0x000000A9 gvar *__unk_type_kind 0x000008F3
    0x000000AA store *__unk_type_kind >|0| 0x000000A9<, __unk_type_kind >|0| 0x000000A8<
    0x000000AB var *__unk_type_kind 0x00000000
    0x000000AC load *__unk_type_kind >|0| 0x000000AB<
    0x000000AD call a7A "__pass__" (__unk_type_kind >|0| 0x000000AC<) __unk_type_kind
    0x000000AE call a7A "__pass__" (stru) __unk_type_kind
    0x000000AF call aAA "__add__" (__unk_type_kind >|0| 0x000000AD<, __unk_type_kind >|0| 0x000000AE<) __unk_type_kind
    0x000000B0 call a7A "__pass__" (__unk_type_kind >|0| 0x000000AF<) __unk_type_kind
    0x000000B1 call aNB "captTexture" (__unk_type_kind >|0| 0x000000B0<, bool false) __unk_type_kind
    0x000000B2 gvar *__unk_type_kind 0x000008F4
    0x000000B3 store *__unk_type_kind >|0| 0x000000B2<, __unk_type_kind >|0| 0x000000B1<
    0x000000B4 var *__unk_type_kind 0x00000000
    0x000000B5 load *__unk_type_kind >|0| 0x000000B4<
    0x000000B6 call a7A "__pass__" (__unk_type_kind >|0| 0x000000B5<) __unk_type_kind
    0x000000B7 call a7A "__pass__" (stru) __unk_type_kind
    0x000000B8 call aAA "__add__" (__unk_type_kind >|0| 0x000000B6<, __unk_type_kind >|0| 0x000000B7<) __unk_type_kind
    0x000000B9 call a7A "__pass__" (__unk_type_kind >|0| 0x000000B8<) __unk_type_kind
    0x000000BA call aNB "captTexture" (__unk_type_kind >|0| 0x000000B9<, bool false) __unk_type_kind
    0x000000BB gvar *__unk_type_kind 0x000008F5
    0x000000BC store *__unk_type_kind >|0| 0x000000BB<, __unk_type_kind >|0| 0x000000BA<
    0x000000BD var *__unk_type_kind 0x00000000
    0x000000BE load *__unk_type_kind >|0| 0x000000BD<
    0x000000BF call a7A "__pass__" (__unk_type_kind >|0| 0x000000BE<) __unk_type_kind
    0x000000C0 call a7A "__pass__" (stru) __unk_type_kind
    0x000000C1 call aAA "__add__" (__unk_type_kind >|0| 0x000000BF<, __unk_type_kind >|0| 0x000000C0<) __unk_type_kind
    0x000000C2 call a7A "__pass__" (__unk_type_kind >|0| 0x000000C1<) __unk_type_kind
    0x000000C3 call aNB "captTexture" (__unk_type_kind >|0| 0x000000C2<, bool false) __unk_type_kind
    0x000000C4 gvar *__unk_type_kind 0x000008F6
    0x000000C5 store *__unk_type_kind >|0| 0x000000C4<, __unk_type_kind >|0| 0x000000C3<
    0x000000C6 var *__unk_type_kind 0x00000000
    0x000000C7 load *__unk_type_kind >|0| 0x000000C6<
    0x000000C8 call a7A "__pass__" (__unk_type_kind >|0| 0x000000C7<) __unk_type_kind
    0x000000C9 call a7A "__pass__" (stru) __unk_type_kind
    0x000000CA call aAA "__add__" (__unk_type_kind >|0| 0x000000C8<, __unk_type_kind >|0| 0x000000C9<) __unk_type_kind
    0x000000CB call a7A "__pass__" (__unk_type_kind >|0| 0x000000CA<) __unk_type_kind
    0x000000CC call aNB "captTexture" (__unk_type_kind >|0| 0x000000CB<, bool false) __unk_type_kind
    0x000000CD gvar *__unk_type_kind 0x000008F7
    0x000000CE store *__unk_type_kind >|0| 0x000000CD<, __unk_type_kind >|0| 0x000000CC<
    0x000000CF var *__unk_type_kind 0x00000000
    0x000000D0 load *__unk_type_kind >|0| 0x000000CF<
    0x000000D1 call a7A "__pass__" (__unk_type_kind >|0| 0x000000D0<) __unk_type_kind
    0x000000D2 call a7A "__pass__" (stru) __unk_type_kind
    0x000000D3 call aAA "__add__" (__unk_type_kind >|0| 0x000000D1<, __unk_type_kind >|0| 0x000000D2<) __unk_type_kind
    0x000000D4 call a7A "__pass__" (__unk_type_kind >|0| 0x000000D3<) __unk_type_kind
    0x000000D5 call aNB "captTexture" (__unk_type_kind >|0| 0x000000D4<, bool false) __unk_type_kind
    0x000000D6 gvar *__unk_type_kind 0x000008F8
    0x000000D7 store *__unk_type_kind >|0| 0x000000D6<, __unk_type_kind >|0| 0x000000D5<
    0x000000D8 var *__unk_type_kind 0x00000000
    0x000000D9 load *__unk_type_kind >|0| 0x000000D8<
    0x000000DA call a7A "__pass__" (__unk_type_kind >|0| 0x000000D9<) __unk_type_kind
    0x000000DB call a7A "__pass__" (stru) __unk_type_kind
    0x000000DC call aAA "__add__" (__unk_type_kind >|0| 0x000000DA<, __unk_type_kind >|0| 0x000000DB<) __unk_type_kind
    0x000000DD call a7A "__pass__" (__unk_type_kind >|0| 0x000000DC<) __unk_type_kind
    0x000000DE call aNB "captTexture" (__unk_type_kind >|0| 0x000000DD<, bool false) __unk_type_kind
    0x000000DF gvar *__unk_type_kind 0x000008F9
    0x000000E0 store *__unk_type_kind >|0| 0x000000DF<, __unk_type_kind >|0| 0x000000DE<
    0x000000E1 var *__unk_type_kind 0x00000000
    0x000000E2 load *__unk_type_kind >|0| 0x000000E1<
    0x000000E3 call a7A "__pass__" (__unk_type_kind >|0| 0x000000E2<) __unk_type_kind
    0x000000E4 call a7A "__pass__" (stru) __unk_type_kind
    0x000000E5 call aAA "__add__" (__unk_type_kind >|0| 0x000000E3<, __unk_type_kind >|0| 0x000000E4<) __unk_type_kind
    0x000000E6 call a7A "__pass__" (__unk_type_kind >|0| 0x000000E5<) __unk_type_kind
    0x000000E7 call aNB "captTexture" (__unk_type_kind >|0| 0x000000E6<, bool false) __unk_type_kind
    0x000000E8 gvar *__unk_type_kind 0x000008FA
    0x000000E9 store *__unk_type_kind >|0| 0x000000E8<, __unk_type_kind >|0| 0x000000E7<
    0x000000EA var *__unk_type_kind 0x00000000
    0x000000EB load *__unk_type_kind >|0| 0x000000EA<
    0x000000EC call a7A "__pass__" (__unk_type_kind >|0| 0x000000EB<) __unk_type_kind
    0x000000ED call a7A "__pass__" (stru) __unk_type_kind
    0x000000EE call aAA "__add__" (__unk_type_kind >|0| 0x000000EC<, __unk_type_kind >|0| 0x000000ED<) __unk_type_kind
    0x000000EF call a7A "__pass__" (__unk_type_kind >|0| 0x000000EE<) __unk_type_kind
    0x000000F0 call aNB "captTexture" (__unk_type_kind >|0| 0x000000EF<, bool false) __unk_type_kind
    0x000000F1 gvar *__unk_type_kind 0x000008FB
    0x000000F2 store *__unk_type_kind >|0| 0x000000F1<, __unk_type_kind >|0| 0x000000F0<
    0x000000F3 var *__unk_type_kind 0x00000000
    0x000000F4 load *__unk_type_kind >|0| 0x000000F3<
    0x000000F5 call a7A "__pass__" (__unk_type_kind >|0| 0x000000F4<) __unk_type_kind
    0x000000F6 call a7A "__pass__" (stru) __unk_type_kind
    0x000000F7 call aAA "__add__" (__unk_type_kind >|0| 0x000000F5<, __unk_type_kind >|0| 0x000000F6<) __unk_type_kind
    0x000000F8 call a7A "__pass__" (__unk_type_kind >|0| 0x000000F7<) __unk_type_kind
    0x000000F9 call aNB "captTexture" (__unk_type_kind >|0| 0x000000F8<, bool false) __unk_type_kind
    0x000000FA gvar *__unk_type_kind 0x000008FC
    0x000000FB store *__unk_type_kind >|0| 0x000000FA<, __unk_type_kind >|0| 0x000000F9<
    0x000000FC var *__unk_type_kind 0x00000000
    0x000000FD load *__unk_type_kind >|0| 0x000000FC<
    0x000000FE call a7A "__pass__" (__unk_type_kind >|0| 0x000000FD<) __unk_type_kind
    0x000000FF call a7A "__pass__" (stru) __unk_type_kind
    0x00000100 call aAA "__add__" (__unk_type_kind >|0| 0x000000FE<, __unk_type_kind >|0| 0x000000FF<) __unk_type_kind
    0x00000101 call a7A "__pass__" (__unk_type_kind >|0| 0x00000100<) __unk_type_kind
    0x00000102 call aNB "captTexture" (__unk_type_kind >|0| 0x00000101<, bool false) __unk_type_kind
    0x00000103 gvar *__unk_type_kind 0x000008FD
    0x00000104 store *__unk_type_kind >|0| 0x00000103<, __unk_type_kind >|0| 0x00000102<
    0x00000105 var *__unk_type_kind 0x00000000
    0x00000106 load *__unk_type_kind >|0| 0x00000105<
    0x00000107 call a7A "__pass__" (__unk_type_kind >|0| 0x00000106<) __unk_type_kind
    0x00000108 call a7A "__pass__" (stru) __unk_type_kind
    0x00000109 call aAA "__add__" (__unk_type_kind >|0| 0x00000107<, __unk_type_kind >|0| 0x00000108<) __unk_type_kind
    0x0000010A call a7A "__pass__" (__unk_type_kind >|0| 0x00000109<) __unk_type_kind
    0x0000010B call aNB "captTexture" (__unk_type_kind >|0| 0x0000010A<, bool false) __unk_type_kind
    0x0000010C gvar *__unk_type_kind 0x000008FE
    0x0000010D store *__unk_type_kind >|0| 0x0000010C<, __unk_type_kind >|0| 0x0000010B<
    0x0000010E var *__unk_type_kind 0x00000000
    0x0000010F load *__unk_type_kind >|0| 0x0000010E<
    0x00000110 call a7A "__pass__" (__unk_type_kind >|0| 0x0000010F<) __unk_type_kind
    0x00000111 call a7A "__pass__" (stru) __unk_type_kind
    0x00000112 call aAA "__add__" (__unk_type_kind >|0| 0x00000110<, __unk_type_kind >|0| 0x00000111<) __unk_type_kind
    0x00000113 call a7A "__pass__" (__unk_type_kind >|0| 0x00000112<) __unk_type_kind
    0x00000114 call aNB "captTexture" (__unk_type_kind >|0| 0x00000113<, bool false) __unk_type_kind
    0x00000115 gvar *__unk_type_kind 0x000008FF
    0x00000116 store *__unk_type_kind >|0| 0x00000115<, __unk_type_kind >|0| 0x00000114<
    0x00000117 var *__unk_type_kind 0x00000000
    0x00000118 load *__unk_type_kind >|0| 0x00000117<
    0x00000119 call a7A "__pass__" (__unk_type_kind >|0| 0x00000118<) __unk_type_kind
    0x0000011A call a7A "__pass__" (stru) __unk_type_kind
    0x0000011B call aAA "__add__" (__unk_type_kind >|0| 0x00000119<, __unk_type_kind >|0| 0x0000011A<) __unk_type_kind
    0x0000011C call a7A "__pass__" (__unk_type_kind >|0| 0x0000011B<) __unk_type_kind
    0x0000011D call aNB "captTexture" (__unk_type_kind >|0| 0x0000011C<, bool false) __unk_type_kind
    0x0000011E gvar *__unk_type_kind 0x00000900
    0x0000011F store *__unk_type_kind >|0| 0x0000011E<, __unk_type_kind >|0| 0x0000011D<
    0x00000120 var *__unk_type_kind 0x00000000
    0x00000121 load *__unk_type_kind >|0| 0x00000120<
    0x00000122 call a7A "__pass__" (__unk_type_kind >|0| 0x00000121<) __unk_type_kind
    0x00000123 call a7A "__pass__" (stru) __unk_type_kind
    0x00000124 call aAA "__add__" (__unk_type_kind >|0| 0x00000122<, __unk_type_kind >|0| 0x00000123<) __unk_type_kind
    0x00000125 call a7A "__pass__" (__unk_type_kind >|0| 0x00000124<) __unk_type_kind
    0x00000126 call aNB "captTexture" (__unk_type_kind >|0| 0x00000125<, bool false) __unk_type_kind
    0x00000127 gvar *__unk_type_kind 0x00000901
    0x00000128 store *__unk_type_kind >|0| 0x00000127<, __unk_type_kind >|0| 0x00000126<
    0x00000129 var *__unk_type_kind 0x00000000
    0x0000012A load *__unk_type_kind >|0| 0x00000129<
    0x0000012B call a7A "__pass__" (__unk_type_kind >|0| 0x0000012A<) __unk_type_kind
    0x0000012C call a7A "__pass__" (stru) __unk_type_kind
    0x0000012D call aAA "__add__" (__unk_type_kind >|0| 0x0000012B<, __unk_type_kind >|0| 0x0000012C<) __unk_type_kind
    0x0000012E call a7A "__pass__" (__unk_type_kind >|0| 0x0000012D<) __unk_type_kind
    0x0000012F call aNB "captTexture" (__unk_type_kind >|0| 0x0000012E<, bool false) __unk_type_kind
    0x00000130 gvar *__unk_type_kind 0x00000902
    0x00000131 store *__unk_type_kind >|0| 0x00000130<, __unk_type_kind >|0| 0x0000012F<
    0x00000132 var *__unk_type_kind 0x00000000
    0x00000133 load *__unk_type_kind >|0| 0x00000132<
    0x00000134 call a7A "__pass__" (__unk_type_kind >|0| 0x00000133<) __unk_type_kind
    0x00000135 call a7A "__pass__" (stru) __unk_type_kind
    0x00000136 call aAA "__add__" (__unk_type_kind >|0| 0x00000134<, __unk_type_kind >|0| 0x00000135<) __unk_type_kind
    0x00000137 call a7A "__pass__" (__unk_type_kind >|0| 0x00000136<) __unk_type_kind
    0x00000138 call aNB "captTexture" (__unk_type_kind >|0| 0x00000137<, bool false) __unk_type_kind
    0x00000139 gvar *__unk_type_kind 0x00000903
    0x0000013A store *__unk_type_kind >|0| 0x00000139<, __unk_type_kind >|0| 0x00000138<
    0x0000013B var *__unk_type_kind 0x00000000
    0x0000013C load *__unk_type_kind >|0| 0x0000013B<
    0x0000013D call a7A "__pass__" (__unk_type_kind >|0| 0x0000013C<) __unk_type_kind
    0x0000013E call a7A "__pass__" (stru) __unk_type_kind
    0x0000013F call aAA "__add__" (__unk_type_kind >|0| 0x0000013D<, __unk_type_kind >|0| 0x0000013E<) __unk_type_kind
    0x00000140 call a7A "__pass__" (__unk_type_kind >|0| 0x0000013F<) __unk_type_kind
    0x00000141 call aNB "captTexture" (__unk_type_kind >|0| 0x00000140<, bool false) __unk_type_kind
    0x00000142 gvar *__unk_type_kind 0x00000904
    0x00000143 store *__unk_type_kind >|0| 0x00000142<, __unk_type_kind >|0| 0x00000141<
    0x00000144 var *__unk_type_kind 0x00000000
    0x00000145 load *__unk_type_kind >|0| 0x00000144<
    0x00000146 call a7A "__pass__" (__unk_type_kind >|0| 0x00000145<) __unk_type_kind
    0x00000147 call a7A "__pass__" (stru) __unk_type_kind
    0x00000148 call aAA "__add__" (__unk_type_kind >|0| 0x00000146<, __unk_type_kind >|0| 0x00000147<) __unk_type_kind
    0x00000149 call a7A "__pass__" (__unk_type_kind >|0| 0x00000148<) __unk_type_kind
    0x0000014A call aNB "captTexture" (__unk_type_kind >|0| 0x00000149<, bool false) __unk_type_kind
    0x0000014B gvar *__unk_type_kind 0x00000905
    0x0000014C store *__unk_type_kind >|0| 0x0000014B<, __unk_type_kind >|0| 0x0000014A<
    0x0000014D var *__unk_type_kind 0x00000000
    0x0000014E load *__unk_type_kind >|0| 0x0000014D<
    0x0000014F call a7A "__pass__" (__unk_type_kind >|0| 0x0000014E<) __unk_type_kind
    0x00000150 call a7A "__pass__" (stru) __unk_type_kind
    0x00000151 call aAA "__add__" (__unk_type_kind >|0| 0x0000014F<, __unk_type_kind >|0| 0x00000150<) __unk_type_kind
    0x00000152 call a7A "__pass__" (__unk_type_kind >|0| 0x00000151<) __unk_type_kind
    0x00000153 call aNB "captTexture" (__unk_type_kind >|0| 0x00000152<, bool false) __unk_type_kind
    0x00000154 gvar *__unk_type_kind 0x00000906
    0x00000155 store *__unk_type_kind >|0| 0x00000154<, __unk_type_kind >|0| 0x00000153<
    0x00000156 var *__unk_type_kind 0x00000000
    0x00000157 load *__unk_type_kind >|0| 0x00000156<
    0x00000158 call a7A "__pass__" (__unk_type_kind >|0| 0x00000157<) __unk_type_kind
    0x00000159 call a7A "__pass__" (stru) __unk_type_kind
    0x0000015A call aAA "__add__" (__unk_type_kind >|0| 0x00000158<, __unk_type_kind >|0| 0x00000159<) __unk_type_kind
    0x0000015B call a7A "__pass__" (__unk_type_kind >|0| 0x0000015A<) __unk_type_kind
    0x0000015C call aNB "captTexture" (__unk_type_kind >|0| 0x0000015B<, bool false) __unk_type_kind
    0x0000015D gvar *__unk_type_kind 0x00000907
    0x0000015E store *__unk_type_kind >|0| 0x0000015D<, __unk_type_kind >|0| 0x0000015C<
    0x0000015F var *__unk_type_kind 0x00000000
    0x00000160 load *__unk_type_kind >|0| 0x0000015F<
    0x00000161 call a7A "__pass__" (__unk_type_kind >|0| 0x00000160<) __unk_type_kind
    0x00000162 call a7A "__pass__" (stru) __unk_type_kind
    0x00000163 call aAA "__add__" (__unk_type_kind >|0| 0x00000161<, __unk_type_kind >|0| 0x00000162<) __unk_type_kind
    0x00000164 call a7A "__pass__" (__unk_type_kind >|0| 0x00000163<) __unk_type_kind
    0x00000165 call aNB "captTexture" (__unk_type_kind >|0| 0x00000164<, bool false) __unk_type_kind
    0x00000166 gvar *__unk_type_kind 0x00000908
    0x00000167 store *__unk_type_kind >|0| 0x00000166<, __unk_type_kind >|0| 0x00000165<
    0x00000168 var *__unk_type_kind 0x00000000
    0x00000169 load *__unk_type_kind >|0| 0x00000168<
    0x0000016A call a7A "__pass__" (__unk_type_kind >|0| 0x00000169<) __unk_type_kind
    0x0000016B call a7A "__pass__" (stru) __unk_type_kind
    0x0000016C call aAA "__add__" (__unk_type_kind >|0| 0x0000016A<, __unk_type_kind >|0| 0x0000016B<) __unk_type_kind
    0x0000016D call a7A "__pass__" (__unk_type_kind >|0| 0x0000016C<) __unk_type_kind
    0x0000016E call aNB "captTexture" (__unk_type_kind >|0| 0x0000016D<, bool false) __unk_type_kind
    0x0000016F gvar *__unk_type_kind 0x00000909
    0x00000170 store *__unk_type_kind >|0| 0x0000016F<, __unk_type_kind >|0| 0x0000016E<
    0x00000171 var *__unk_type_kind 0x00000000
    0x00000172 load *__unk_type_kind >|0| 0x00000171<
    0x00000173 call a7A "__pass__" (__unk_type_kind >|0| 0x00000172<) __unk_type_kind
    0x00000174 call a7A "__pass__" (stru) __unk_type_kind
    0x00000175 call aAA "__add__" (__unk_type_kind >|0| 0x00000173<, __unk_type_kind >|0| 0x00000174<) __unk_type_kind
    0x00000176 call a7A "__pass__" (__unk_type_kind >|0| 0x00000175<) __unk_type_kind
    0x00000177 call aNB "captTexture" (__unk_type_kind >|0| 0x00000176<, bool false) __unk_type_kind
    0x00000178 gvar *__unk_type_kind 0x0000090A
    0x00000179 store *__unk_type_kind >|0| 0x00000178<, __unk_type_kind >|0| 0x00000177<
    0x0000017A var *__unk_type_kind 0x00000000
    0x0000017B load *__unk_type_kind >|0| 0x0000017A<
    0x0000017C call a7A "__pass__" (__unk_type_kind >|0| 0x0000017B<) __unk_type_kind
    0x0000017D call a7A "__pass__" (stru) __unk_type_kind
    0x0000017E call aAA "__add__" (__unk_type_kind >|0| 0x0000017C<, __unk_type_kind >|0| 0x0000017D<) __unk_type_kind
    0x0000017F call a7A "__pass__" (__unk_type_kind >|0| 0x0000017E<) __unk_type_kind
    0x00000180 call aNB "captTexture" (__unk_type_kind >|0| 0x0000017F<, bool false) __unk_type_kind
    0x00000181 gvar *__unk_type_kind 0x0000090B
    0x00000182 store *__unk_type_kind >|0| 0x00000181<, __unk_type_kind >|0| 0x00000180<
    0x00000183 var *__unk_type_kind 0x00000000
    0x00000184 load *__unk_type_kind >|0| 0x00000183<
    0x00000185 call a7A "__pass__" (__unk_type_kind >|0| 0x00000184<) __unk_type_kind
    0x00000186 call a7A "__pass__" (stru) __unk_type_kind
    0x00000187 call aAA "__add__" (__unk_type_kind >|0| 0x00000185<, __unk_type_kind >|0| 0x00000186<) __unk_type_kind
    0x00000188 call a7A "__pass__" (__unk_type_kind >|0| 0x00000187<) __unk_type_kind
    0x00000189 call aNB "captTexture" (__unk_type_kind >|0| 0x00000188<, bool false) __unk_type_kind
    0x0000018A gvar *__unk_type_kind 0x0000090C
    0x0000018B store *__unk_type_kind >|0| 0x0000018A<, __unk_type_kind >|0| 0x00000189<
    0x0000018C var *__unk_type_kind 0x00000000
    0x0000018D load *__unk_type_kind >|0| 0x0000018C<
    0x0000018E call a7A "__pass__" (__unk_type_kind >|0| 0x0000018D<) __unk_type_kind
    0x0000018F call a7A "__pass__" (stru) __unk_type_kind
    0x00000190 call aAA "__add__" (__unk_type_kind >|0| 0x0000018E<, __unk_type_kind >|0| 0x0000018F<) __unk_type_kind
    0x00000191 call a7A "__pass__" (__unk_type_kind >|0| 0x00000190<) __unk_type_kind
    0x00000192 call aNB "captTexture" (__unk_type_kind >|0| 0x00000191<, bool false) __unk_type_kind
    0x00000193 gvar *__unk_type_kind 0x0000090D
    0x00000194 store *__unk_type_kind >|0| 0x00000193<, __unk_type_kind >|0| 0x00000192<
    0x00000195 var *__unk_type_kind 0x00000000
    0x00000196 load *__unk_type_kind >|0| 0x00000195<
    0x00000197 call a7A "__pass__" (__unk_type_kind >|0| 0x00000196<) __unk_type_kind
    0x00000198 call a7A "__pass__" (stru) __unk_type_kind
    0x00000199 call aAA "__add__" (__unk_type_kind >|0| 0x00000197<, __unk_type_kind >|0| 0x00000198<) __unk_type_kind
    0x0000019A call a7A "__pass__" (__unk_type_kind >|0| 0x00000199<) __unk_type_kind
    0x0000019B call aNB "captTexture" (__unk_type_kind >|0| 0x0000019A<, bool false) __unk_type_kind
    0x0000019C gvar *__unk_type_kind 0x0000090E
    0x0000019D store *__unk_type_kind >|0| 0x0000019C<, __unk_type_kind >|0| 0x0000019B<
    0x0000019E var *__unk_type_kind 0x00000000
    0x0000019F load *__unk_type_kind >|0| 0x0000019E<
    0x000001A0 call a7A "__pass__" (__unk_type_kind >|0| 0x0000019F<) __unk_type_kind
    0x000001A1 call a7A "__pass__" (stru) __unk_type_kind
    0x000001A2 call aAA "__add__" (__unk_type_kind >|0| 0x000001A0<, __unk_type_kind >|0| 0x000001A1<) __unk_type_kind
    0x000001A3 call a7A "__pass__" (__unk_type_kind >|0| 0x000001A2<) __unk_type_kind
    0x000001A4 call aNB "captTexture" (__unk_type_kind >|0| 0x000001A3<, bool false) __unk_type_kind
    0x000001A5 gvar *__unk_type_kind 0x0000090F
    0x000001A6 store *__unk_type_kind >|0| 0x000001A5<, __unk_type_kind >|0| 0x000001A4<
    0x000001A7 var *__unk_type_kind 0x00000000
    0x000001A8 load *__unk_type_kind >|0| 0x000001A7<
    0x000001A9 call a7A "__pass__" (__unk_type_kind >|0| 0x000001A8<) __unk_type_kind
    0x000001AA call a7A "__pass__" (stru) __unk_type_kind
    0x000001AB call aAA "__add__" (__unk_type_kind >|0| 0x000001A9<, __unk_type_kind >|0| 0x000001AA<) __unk_type_kind
    0x000001AC call a7A "__pass__" (__unk_type_kind >|0| 0x000001AB<) __unk_type_kind
    0x000001AD call aNB "captTexture" (__unk_type_kind >|0| 0x000001AC<, bool false) __unk_type_kind
    0x000001AE gvar *__unk_type_kind 0x00000910
    0x000001AF store *__unk_type_kind >|0| 0x000001AE<, __unk_type_kind >|0| 0x000001AD<
    0x000001B0 var *__unk_type_kind 0x00000000
    0x000001B1 load *__unk_type_kind >|0| 0x000001B0<
    0x000001B2 call a7A "__pass__" (__unk_type_kind >|0| 0x000001B1<) __unk_type_kind
    0x000001B3 call a7A "__pass__" (stru) __unk_type_kind
    0x000001B4 call aAA "__add__" (__unk_type_kind >|0| 0x000001B2<, __unk_type_kind >|0| 0x000001B3<) __unk_type_kind
    0x000001B5 call a7A "__pass__" (__unk_type_kind >|0| 0x000001B4<) __unk_type_kind
    0x000001B6 call aNB "captTexture" (__unk_type_kind >|0| 0x000001B5<, bool false) __unk_type_kind
    0x000001B7 gvar *__unk_type_kind 0x00000911
    0x000001B8 store *__unk_type_kind >|0| 0x000001B7<, __unk_type_kind >|0| 0x000001B6<
    0x000001B9 var *__unk_type_kind 0x00000000
    0x000001BA load *__unk_type_kind >|0| 0x000001B9<
    0x000001BB call a7A "__pass__" (__unk_type_kind >|0| 0x000001BA<) __unk_type_kind
    0x000001BC call a7A "__pass__" (stru) __unk_type_kind
    0x000001BD call aAA "__add__" (__unk_type_kind >|0| 0x000001BB<, __unk_type_kind >|0| 0x000001BC<) __unk_type_kind
    0x000001BE call a7A "__pass__" (__unk_type_kind >|0| 0x000001BD<) __unk_type_kind
    0x000001BF call aNB "captTexture" (__unk_type_kind >|0| 0x000001BE<, bool false) __unk_type_kind
    0x000001C0 gvar *__unk_type_kind 0x00000912
    0x000001C1 store *__unk_type_kind >|0| 0x000001C0<, __unk_type_kind >|0| 0x000001BF<
    0x000001C2 var *__unk_type_kind 0x00000000
    0x000001C3 load *__unk_type_kind >|0| 0x000001C2<
    0x000001C4 call a7A "__pass__" (__unk_type_kind >|0| 0x000001C3<) __unk_type_kind
    0x000001C5 call a7A "__pass__" (stru) __unk_type_kind
    0x000001C6 call aAA "__add__" (__unk_type_kind >|0| 0x000001C4<, __unk_type_kind >|0| 0x000001C5<) __unk_type_kind
    0x000001C7 call a7A "__pass__" (__unk_type_kind >|0| 0x000001C6<) __unk_type_kind
    0x000001C8 call aNB "captTexture" (__unk_type_kind >|0| 0x000001C7<, bool false) __unk_type_kind
    0x000001C9 gvar *__unk_type_kind 0x00000913
    0x000001CA store *__unk_type_kind >|0| 0x000001C9<, __unk_type_kind >|0| 0x000001C8<
    0x000001CB var *__unk_type_kind 0x00000000
    0x000001CC load *__unk_type_kind >|0| 0x000001CB<
    0x000001CD call a7A "__pass__" (__unk_type_kind >|0| 0x000001CC<) __unk_type_kind
    0x000001CE call a7A "__pass__" (stru) __unk_type_kind
    0x000001CF call aAA "__add__" (__unk_type_kind >|0| 0x000001CD<, __unk_type_kind >|0| 0x000001CE<) __unk_type_kind
    0x000001D0 call a7A "__pass__" (__unk_type_kind >|0| 0x000001CF<) __unk_type_kind
    0x000001D1 call aNB "captTexture" (__unk_type_kind >|0| 0x000001D0<, bool false) __unk_type_kind
    0x000001D2 gvar *__unk_type_kind 0x00000914
    0x000001D3 store *__unk_type_kind >|0| 0x000001D2<, __unk_type_kind >|0| 0x000001D1<
    0x000001D4 var *__unk_type_kind 0x00000000
    0x000001D5 load *__unk_type_kind >|0| 0x000001D4<
    0x000001D6 call a7A "__pass__" (__unk_type_kind >|0| 0x000001D5<) __unk_type_kind
    0x000001D7 call a7A "__pass__" (stru) __unk_type_kind
    0x000001D8 call aAA "__add__" (__unk_type_kind >|0| 0x000001D6<, __unk_type_kind >|0| 0x000001D7<) __unk_type_kind
    0x000001D9 call a7A "__pass__" (__unk_type_kind >|0| 0x000001D8<) __unk_type_kind
    0x000001DA call aNB "captTexture" (__unk_type_kind >|0| 0x000001D9<, bool false) __unk_type_kind
    0x000001DB gvar *__unk_type_kind 0x00000915
    0x000001DC store *__unk_type_kind >|0| 0x000001DB<, __unk_type_kind >|0| 0x000001DA<
    0x000001DD var *__unk_type_kind 0x00000000
    0x000001DE load *__unk_type_kind >|0| 0x000001DD<
    0x000001DF call a7A "__pass__" (__unk_type_kind >|0| 0x000001DE<) __unk_type_kind
    0x000001E0 call a7A "__pass__" (stru) __unk_type_kind
    0x000001E1 call aAA "__add__" (__unk_type_kind >|0| 0x000001DF<, __unk_type_kind >|0| 0x000001E0<) __unk_type_kind
    0x000001E2 call a7A "__pass__" (__unk_type_kind >|0| 0x000001E1<) __unk_type_kind
    0x000001E3 call aNB "captTexture" (__unk_type_kind >|0| 0x000001E2<, bool false) __unk_type_kind
    0x000001E4 gvar *__unk_type_kind 0x00000916
    0x000001E5 store *__unk_type_kind >|0| 0x000001E4<, __unk_type_kind >|0| 0x000001E3<
    0x000001E6 var *__unk_type_kind 0x00000000
    0x000001E7 load *__unk_type_kind >|0| 0x000001E6<
    0x000001E8 call a7A "__pass__" (__unk_type_kind >|0| 0x000001E7<) __unk_type_kind
    0x000001E9 call a7A "__pass__" (stru) __unk_type_kind
    0x000001EA call aAA "__add__" (__unk_type_kind >|0| 0x000001E8<, __unk_type_kind >|0| 0x000001E9<) __unk_type_kind
    0x000001EB call a7A "__pass__" (__unk_type_kind >|0| 0x000001EA<) __unk_type_kind
    0x000001EC call aNB "captTexture" (__unk_type_kind >|0| 0x000001EB<, bool false) __unk_type_kind
    0x000001ED gvar *__unk_type_kind 0x00000917
    0x000001EE store *__unk_type_kind >|0| 0x000001ED<, __unk_type_kind >|0| 0x000001EC<
    0x000001EF var *__unk_type_kind 0x00000000
    0x000001F0 load *__unk_type_kind >|0| 0x000001EF<
    0x000001F1 call a7A "__pass__" (__unk_type_kind >|0| 0x000001F0<) __unk_type_kind
    0x000001F2 call a7A "__pass__" (stru) __unk_type_kind
    0x000001F3 call aAA "__add__" (__unk_type_kind >|0| 0x000001F1<, __unk_type_kind >|0| 0x000001F2<) __unk_type_kind
    0x000001F4 call a7A "__pass__" (__unk_type_kind >|0| 0x000001F3<) __unk_type_kind
    0x000001F5 call aNB "captTexture" (__unk_type_kind >|0| 0x000001F4<, bool false) __unk_type_kind
    0x000001F6 gvar *__unk_type_kind 0x00000918
    0x000001F7 store *__unk_type_kind >|0| 0x000001F6<, __unk_type_kind >|0| 0x000001F5<
    0x000001F8 var *__unk_type_kind 0x00000000
    0x000001F9 load *__unk_type_kind >|0| 0x000001F8<
    0x000001FA call a7A "__pass__" (__unk_type_kind >|0| 0x000001F9<) __unk_type_kind
    0x000001FB call a7A "__pass__" (stru) __unk_type_kind
    0x000001FC call aAA "__add__" (__unk_type_kind >|0| 0x000001FA<, __unk_type_kind >|0| 0x000001FB<) __unk_type_kind
    0x000001FD call a7A "__pass__" (__unk_type_kind >|0| 0x000001FC<) __unk_type_kind
    0x000001FE call aNB "captTexture" (__unk_type_kind >|0| 0x000001FD<, bool false) __unk_type_kind
    0x000001FF gvar *__unk_type_kind 0x00000919
    0x00000200 store *__unk_type_kind >|0| 0x000001FF<, __unk_type_kind >|0| 0x000001FE<
    0x00000201 var *__unk_type_kind 0x00000000
    0x00000202 load *__unk_type_kind >|0| 0x00000201<
    0x00000203 call a7A "__pass__" (__unk_type_kind >|0| 0x00000202<) __unk_type_kind
    0x00000204 call a7A "__pass__" (stru) __unk_type_kind
    0x00000205 call aAA "__add__" (__unk_type_kind >|0| 0x00000203<, __unk_type_kind >|0| 0x00000204<) __unk_type_kind
    0x00000206 call a7A "__pass__" (__unk_type_kind >|0| 0x00000205<) __unk_type_kind
    0x00000207 call aNB "captTexture" (__unk_type_kind >|0| 0x00000206<, bool false) __unk_type_kind
    0x00000208 gvar *__unk_type_kind 0x0000091A
    0x00000209 store *__unk_type_kind >|0| 0x00000208<, __unk_type_kind >|0| 0x00000207<
    0x0000020A var *__unk_type_kind 0x00000000
    0x0000020B load *__unk_type_kind >|0| 0x0000020A<
    0x0000020C call a7A "__pass__" (__unk_type_kind >|0| 0x0000020B<) __unk_type_kind
    0x0000020D call a7A "__pass__" (stru) __unk_type_kind
    0x0000020E call aAA "__add__" (__unk_type_kind >|0| 0x0000020C<, __unk_type_kind >|0| 0x0000020D<) __unk_type_kind
    0x0000020F call a7A "__pass__" (__unk_type_kind >|0| 0x0000020E<) __unk_type_kind
    0x00000210 call aNB "captTexture" (__unk_type_kind >|0| 0x0000020F<, bool false) __unk_type_kind
    0x00000211 gvar *__unk_type_kind 0x0000091B
    0x00000212 store *__unk_type_kind >|0| 0x00000211<, __unk_type_kind >|0| 0x00000210<
    0x00000213 var *__unk_type_kind 0x00000000
    0x00000214 load *__unk_type_kind >|0| 0x00000213<
    0x00000215 call a7A "__pass__" (__unk_type_kind >|0| 0x00000214<) __unk_type_kind
    0x00000216 call a7A "__pass__" (stru) __unk_type_kind
    0x00000217 call aAA "__add__" (__unk_type_kind >|0| 0x00000215<, __unk_type_kind >|0| 0x00000216<) __unk_type_kind
    0x00000218 call a7A "__pass__" (__unk_type_kind >|0| 0x00000217<) __unk_type_kind
    0x00000219 call aNB "captTexture" (__unk_type_kind >|0| 0x00000218<, bool false) __unk_type_kind
    0x0000021A gvar *__unk_type_kind 0x0000091C
    0x0000021B store *__unk_type_kind >|0| 0x0000021A<, __unk_type_kind >|0| 0x00000219<
    0x0000021C var *__unk_type_kind 0x00000000
    0x0000021D load *__unk_type_kind >|0| 0x0000021C<
    0x0000021E call a7A "__pass__" (__unk_type_kind >|0| 0x0000021D<) __unk_type_kind
    0x0000021F call a7A "__pass__" (stru) __unk_type_kind
    0x00000220 call aAA "__add__" (__unk_type_kind >|0| 0x0000021E<, __unk_type_kind >|0| 0x0000021F<) __unk_type_kind
    0x00000221 call a7A "__pass__" (__unk_type_kind >|0| 0x00000220<) __unk_type_kind
    0x00000222 call aNB "captTexture" (__unk_type_kind >|0| 0x00000221<, bool false) __unk_type_kind
    0x00000223 gvar *__unk_type_kind 0x0000091D
    0x00000224 store *__unk_type_kind >|0| 0x00000223<, __unk_type_kind >|0| 0x00000222<
    0x00000225 var *__unk_type_kind 0x00000000
    0x00000226 load *__unk_type_kind >|0| 0x00000225<
    0x00000227 call a7A "__pass__" (__unk_type_kind >|0| 0x00000226<) __unk_type_kind
    0x00000228 call a7A "__pass__" (stru) __unk_type_kind
    0x00000229 call aAA "__add__" (__unk_type_kind >|0| 0x00000227<, __unk_type_kind >|0| 0x00000228<) __unk_type_kind
    0x0000022A call a7A "__pass__" (__unk_type_kind >|0| 0x00000229<) __unk_type_kind
    0x0000022B call aNB "captTexture" (__unk_type_kind >|0| 0x0000022A<, bool false) __unk_type_kind
    0x0000022C gvar *__unk_type_kind 0x0000091E
    0x0000022D store *__unk_type_kind >|0| 0x0000022C<, __unk_type_kind >|0| 0x0000022B<
    0x0000022E var *__unk_type_kind 0x00000000
    0x0000022F load *__unk_type_kind >|0| 0x0000022E<
    0x00000230 call a7A "__pass__" (__unk_type_kind >|0| 0x0000022F<) __unk_type_kind
    0x00000231 call a7A "__pass__" (stru) __unk_type_kind
    0x00000232 call aAA "__add__" (__unk_type_kind >|0| 0x00000230<, __unk_type_kind >|0| 0x00000231<) __unk_type_kind
    0x00000233 call a7A "__pass__" (__unk_type_kind >|0| 0x00000232<) __unk_type_kind
    0x00000234 call aNB "captTexture" (__unk_type_kind >|0| 0x00000233<, bool false) __unk_type_kind
    0x00000235 gvar *__unk_type_kind 0x0000091F
    0x00000236 store *__unk_type_kind >|0| 0x00000235<, __unk_type_kind >|0| 0x00000234<
    0x00000237 var *__unk_type_kind 0x00000000
    0x00000238 load *__unk_type_kind >|0| 0x00000237<
    0x00000239 call a7A "__pass__" (__unk_type_kind >|0| 0x00000238<) __unk_type_kind
    0x0000023A call a7A "__pass__" (stru) __unk_type_kind
    0x0000023B call aAA "__add__" (__unk_type_kind >|0| 0x00000239<, __unk_type_kind >|0| 0x0000023A<) __unk_type_kind
    0x0000023C call a7A "__pass__" (__unk_type_kind >|0| 0x0000023B<) __unk_type_kind
    0x0000023D call aNB "captTexture" (__unk_type_kind >|0| 0x0000023C<, bool false) __unk_type_kind
    0x0000023E gvar *__unk_type_kind 0x00000920
    0x0000023F store *__unk_type_kind >|0| 0x0000023E<, __unk_type_kind >|0| 0x0000023D<
    0x00000240 var *__unk_type_kind 0x00000000
    0x00000241 load *__unk_type_kind >|0| 0x00000240<
    0x00000242 call a7A "__pass__" (__unk_type_kind >|0| 0x00000241<) __unk_type_kind
    0x00000243 call a7A "__pass__" (stru) __unk_type_kind
    0x00000244 call aAA "__add__" (__unk_type_kind >|0| 0x00000242<, __unk_type_kind >|0| 0x00000243<) __unk_type_kind
    0x00000245 call a7A "__pass__" (__unk_type_kind >|0| 0x00000244<) __unk_type_kind
    0x00000246 call aNB "captTexture" (__unk_type_kind >|0| 0x00000245<, bool false) __unk_type_kind
    0x00000247 gvar *__unk_type_kind 0x00000921
    0x00000248 store *__unk_type_kind >|0| 0x00000247<, __unk_type_kind >|0| 0x00000246<
    0x00000249 var *__unk_type_kind 0x00000000
    0x0000024A load *__unk_type_kind >|0| 0x00000249<
    0x0000024B call a7A "__pass__" (__unk_type_kind >|0| 0x0000024A<) __unk_type_kind
    0x0000024C call a7A "__pass__" (stru) __unk_type_kind
    0x0000024D call aAA "__add__" (__unk_type_kind >|0| 0x0000024B<, __unk_type_kind >|0| 0x0000024C<) __unk_type_kind
    0x0000024E call a7A "__pass__" (__unk_type_kind >|0| 0x0000024D<) __unk_type_kind
    0x0000024F call aNB "captTexture" (__unk_type_kind >|0| 0x0000024E<, bool false) __unk_type_kind
    0x00000250 gvar *__unk_type_kind 0x00000922
    0x00000251 store *__unk_type_kind >|0| 0x00000250<, __unk_type_kind >|0| 0x0000024F<
    0x00000252 var *__unk_type_kind 0x00000000
    0x00000253 load *__unk_type_kind >|0| 0x00000252<
    0x00000254 call a7A "__pass__" (__unk_type_kind >|0| 0x00000253<) __unk_type_kind
    0x00000255 call a7A "__pass__" (stru) __unk_type_kind
    0x00000256 call aAA "__add__" (__unk_type_kind >|0| 0x00000254<, __unk_type_kind >|0| 0x00000255<) __unk_type_kind
    0x00000257 call a7A "__pass__" (__unk_type_kind >|0| 0x00000256<) __unk_type_kind
    0x00000258 call aNB "captTexture" (__unk_type_kind >|0| 0x00000257<, bool false) __unk_type_kind
    0x00000259 gvar *__unk_type_kind 0x00000923
    0x0000025A store *__unk_type_kind >|0| 0x00000259<, __unk_type_kind >|0| 0x00000258<
    0x0000025B var *__unk_type_kind 0x00000000
    0x0000025C load *__unk_type_kind >|0| 0x0000025B<
    0x0000025D call a7A "__pass__" (__unk_type_kind >|0| 0x0000025C<) __unk_type_kind
    0x0000025E call a7A "__pass__" (stru) __unk_type_kind
    0x0000025F call aAA "__add__" (__unk_type_kind >|0| 0x0000025D<, __unk_type_kind >|0| 0x0000025E<) __unk_type_kind
    0x00000260 call a7A "__pass__" (__unk_type_kind >|0| 0x0000025F<) __unk_type_kind
    0x00000261 call aNB "captTexture" (__unk_type_kind >|0| 0x00000260<, bool false) __unk_type_kind
    0x00000262 gvar *__unk_type_kind 0x00000924
    0x00000263 store *__unk_type_kind >|0| 0x00000262<, __unk_type_kind >|0| 0x00000261<
    0x00000264 var *__unk_type_kind 0x00000000
    0x00000265 load *__unk_type_kind >|0| 0x00000264<
    0x00000266 call a7A "__pass__" (__unk_type_kind >|0| 0x00000265<) __unk_type_kind
    0x00000267 call a7A "__pass__" (stru) __unk_type_kind
    0x00000268 call aAA "__add__" (__unk_type_kind >|0| 0x00000266<, __unk_type_kind >|0| 0x00000267<) __unk_type_kind
    0x00000269 call a7A "__pass__" (__unk_type_kind >|0| 0x00000268<) __unk_type_kind
    0x0000026A call aNB "captTexture" (__unk_type_kind >|0| 0x00000269<, bool false) __unk_type_kind
    0x0000026B gvar *__unk_type_kind 0x00000925
    0x0000026C store *__unk_type_kind >|0| 0x0000026B<, __unk_type_kind >|0| 0x0000026A<
    0x0000026D var *__unk_type_kind 0x00000000
    0x0000026E load *__unk_type_kind >|0| 0x0000026D<
    0x0000026F call a7A "__pass__" (__unk_type_kind >|0| 0x0000026E<) __unk_type_kind
    0x00000270 call a7A "__pass__" (stru) __unk_type_kind
    0x00000271 call aAA "__add__" (__unk_type_kind >|0| 0x0000026F<, __unk_type_kind >|0| 0x00000270<) __unk_type_kind
    0x00000272 call a7A "__pass__" (__unk_type_kind >|0| 0x00000271<) __unk_type_kind
    0x00000273 call aNB "captTexture" (__unk_type_kind >|0| 0x00000272<, bool false) __unk_type_kind
    0x00000274 gvar *__unk_type_kind 0x00000926
    0x00000275 store *__unk_type_kind >|0| 0x00000274<, __unk_type_kind >|0| 0x00000273<
    0x00000276 var *__unk_type_kind 0x00000000
    0x00000277 load *__unk_type_kind >|0| 0x00000276<
    0x00000278 call a7A "__pass__" (__unk_type_kind >|0| 0x00000277<) __unk_type_kind
    0x00000279 call a7A "__pass__" (stru) __unk_type_kind
    0x0000027A call aAA "__add__" (__unk_type_kind >|0| 0x00000278<, __unk_type_kind >|0| 0x00000279<) __unk_type_kind
    0x0000027B call a7A "__pass__" (__unk_type_kind >|0| 0x0000027A<) __unk_type_kind
    0x0000027C call aNB "captTexture" (__unk_type_kind >|0| 0x0000027B<, bool false) __unk_type_kind
    0x0000027D gvar *__unk_type_kind 0x00000927
    0x0000027E store *__unk_type_kind >|0| 0x0000027D<, __unk_type_kind >|0| 0x0000027C<
    0x0000027F var *__unk_type_kind 0x00000000
    0x00000280 load *__unk_type_kind >|0| 0x0000027F<
    0x00000281 call a7A "__pass__" (__unk_type_kind >|0| 0x00000280<) __unk_type_kind
    0x00000282 call a7A "__pass__" (stru) __unk_type_kind
    0x00000283 call aAA "__add__" (__unk_type_kind >|0| 0x00000281<, __unk_type_kind >|0| 0x00000282<) __unk_type_kind
    0x00000284 call a7A "__pass__" (__unk_type_kind >|0| 0x00000283<) __unk_type_kind
    0x00000285 call aNB "captTexture" (__unk_type_kind >|0| 0x00000284<, bool false) __unk_type_kind
    0x00000286 gvar *__unk_type_kind 0x00000928
    0x00000287 store *__unk_type_kind >|0| 0x00000286<, __unk_type_kind >|0| 0x00000285<
    0x00000288 var *__unk_type_kind 0x00000000
    0x00000289 load *__unk_type_kind >|0| 0x00000288<
    0x0000028A call a7A "__pass__" (__unk_type_kind >|0| 0x00000289<) __unk_type_kind
    0x0000028B call a7A "__pass__" (stru) __unk_type_kind
    0x0000028C call aAA "__add__" (__unk_type_kind >|0| 0x0000028A<, __unk_type_kind >|0| 0x0000028B<) __unk_type_kind
    0x0000028D call a7A "__pass__" (__unk_type_kind >|0| 0x0000028C<) __unk_type_kind
    0x0000028E call aNB "captTexture" (__unk_type_kind >|0| 0x0000028D<, bool false) __unk_type_kind
    0x0000028F gvar *__unk_type_kind 0x00000929
    0x00000290 store *__unk_type_kind >|0| 0x0000028F<, __unk_type_kind >|0| 0x0000028E<
    0x00000291 var *__unk_type_kind 0x00000000
    0x00000292 load *__unk_type_kind >|0| 0x00000291<
    0x00000293 call a7A "__pass__" (__unk_type_kind >|0| 0x00000292<) __unk_type_kind
    0x00000294 call a7A "__pass__" (stru) __unk_type_kind
    0x00000295 call aAA "__add__" (__unk_type_kind >|0| 0x00000293<, __unk_type_kind >|0| 0x00000294<) __unk_type_kind
    0x00000296 call a7A "__pass__" (__unk_type_kind >|0| 0x00000295<) __unk_type_kind
    0x00000297 call aNB "captTexture" (__unk_type_kind >|0| 0x00000296<, bool false) __unk_type_kind
    0x00000298 gvar *__unk_type_kind 0x0000092A
    0x00000299 store *__unk_type_kind >|0| 0x00000298<, __unk_type_kind >|0| 0x00000297<
    0x0000029A var *__unk_type_kind 0x00000000
    0x0000029B load *__unk_type_kind >|0| 0x0000029A<
    0x0000029C call a7A "__pass__" (__unk_type_kind >|0| 0x0000029B<) __unk_type_kind
    0x0000029D call a7A "__pass__" (stru) __unk_type_kind
    0x0000029E call aAA "__add__" (__unk_type_kind >|0| 0x0000029C<, __unk_type_kind >|0| 0x0000029D<) __unk_type_kind
    0x0000029F call a7A "__pass__" (__unk_type_kind >|0| 0x0000029E<) __unk_type_kind
    0x000002A0 call aNB "captTexture" (__unk_type_kind >|0| 0x0000029F<, bool false) __unk_type_kind
    0x000002A1 gvar *__unk_type_kind 0x0000092B
    0x000002A2 store *__unk_type_kind >|0| 0x000002A1<, __unk_type_kind >|0| 0x000002A0<
    0x000002A3 var *__unk_type_kind 0x00000000
    0x000002A4 load *__unk_type_kind >|0| 0x000002A3<
    0x000002A5 call a7A "__pass__" (__unk_type_kind >|0| 0x000002A4<) __unk_type_kind
    0x000002A6 call a7A "__pass__" (stru) __unk_type_kind
    0x000002A7 call aAA "__add__" (__unk_type_kind >|0| 0x000002A5<, __unk_type_kind >|0| 0x000002A6<) __unk_type_kind
    0x000002A8 call a7A "__pass__" (__unk_type_kind >|0| 0x000002A7<) __unk_type_kind
    0x000002A9 call aNB "captTexture" (__unk_type_kind >|0| 0x000002A8<, bool false) __unk_type_kind
    0x000002AA gvar *__unk_type_kind 0x0000092C
    0x000002AB store *__unk_type_kind >|0| 0x000002AA<, __unk_type_kind >|0| 0x000002A9<
    0x000002AC var *__unk_type_kind 0x00000000
    0x000002AD load *__unk_type_kind >|0| 0x000002AC<
    0x000002AE call a7A "__pass__" (__unk_type_kind >|0| 0x000002AD<) __unk_type_kind
    0x000002AF call a7A "__pass__" (stru) __unk_type_kind
    0x000002B0 call aAA "__add__" (__unk_type_kind >|0| 0x000002AE<, __unk_type_kind >|0| 0x000002AF<) __unk_type_kind
    0x000002B1 call a7A "__pass__" (__unk_type_kind >|0| 0x000002B0<) __unk_type_kind
    0x000002B2 call aNB "captTexture" (__unk_type_kind >|0| 0x000002B1<, bool false) __unk_type_kind
    0x000002B3 gvar *__unk_type_kind 0x0000092D
    0x000002B4 store *__unk_type_kind >|0| 0x000002B3<, __unk_type_kind >|0| 0x000002B2<
    0x000002B5 var *__unk_type_kind 0x00000000
    0x000002B6 load *__unk_type_kind >|0| 0x000002B5<
    0x000002B7 call a7A "__pass__" (__unk_type_kind >|0| 0x000002B6<) __unk_type_kind
    0x000002B8 call a7A "__pass__" (stru) __unk_type_kind
    0x000002B9 call aAA "__add__" (__unk_type_kind >|0| 0x000002B7<, __unk_type_kind >|0| 0x000002B8<) __unk_type_kind
    0x000002BA call a7A "__pass__" (__unk_type_kind >|0| 0x000002B9<) __unk_type_kind
    0x000002BB call aNB "captTexture" (__unk_type_kind >|0| 0x000002BA<, bool false) __unk_type_kind
    0x000002BC gvar *__unk_type_kind 0x0000092E
    0x000002BD store *__unk_type_kind >|0| 0x000002BC<, __unk_type_kind >|0| 0x000002BB<
    0x000002BE var *__unk_type_kind 0x00000000
    0x000002BF call a6A "__defer__" (*__unk_type_kind >|0| 0x000002BE<) void
    0x000002C0 ret
fn destroyTextures aKC -> void
    {1 BBs, 157 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x000008E1
    0x00000001 call azA "free" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 gvar *__unk_type_kind 0x000008E2
    0x00000003 call azA "free" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 gvar *__unk_type_kind 0x000008E3
    0x00000005 call azA "free" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 gvar *__unk_type_kind 0x000008E4
    0x00000007 call azA "free" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 gvar *__unk_type_kind 0x000008E5
    0x00000009 call azA "free" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A gvar *__unk_type_kind 0x000008E6
    0x0000000B call azA "free" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x000008E7
    0x0000000D call azA "free" (*__unk_type_kind >|0| 0x0000000C<) void
    0x0000000E gvar *__unk_type_kind 0x000008E8
    0x0000000F call azA "free" (*__unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x000008E9
    0x00000011 call azA "free" (*__unk_type_kind >|0| 0x00000010<) void
    0x00000012 gvar *__unk_type_kind 0x000008EA
    0x00000013 call azA "free" (*__unk_type_kind >|0| 0x00000012<) void
    0x00000014 gvar *__unk_type_kind 0x000008EB
    0x00000015 call azA "free" (*__unk_type_kind >|0| 0x00000014<) void
    0x00000016 gvar *__unk_type_kind 0x000008EC
    0x00000017 call azA "free" (*__unk_type_kind >|0| 0x00000016<) void
    0x00000018 gvar *__unk_type_kind 0x000008ED
    0x00000019 call azA "free" (*__unk_type_kind >|0| 0x00000018<) void
    0x0000001A gvar *__unk_type_kind 0x000008EE
    0x0000001B call azA "free" (*__unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x000008EF
    0x0000001D call azA "free" (*__unk_type_kind >|0| 0x0000001C<) void
    0x0000001E gvar *__unk_type_kind 0x000008F0
    0x0000001F call azA "free" (*__unk_type_kind >|0| 0x0000001E<) void
    0x00000020 gvar *__unk_type_kind 0x000008F1
    0x00000021 call azA "free" (*__unk_type_kind >|0| 0x00000020<) void
    0x00000022 gvar *__unk_type_kind 0x000008F2
    0x00000023 call azA "free" (*__unk_type_kind >|0| 0x00000022<) void
    0x00000024 gvar *__unk_type_kind 0x000008F3
    0x00000025 call azA "free" (*__unk_type_kind >|0| 0x00000024<) void
    0x00000026 gvar *__unk_type_kind 0x000008F4
    0x00000027 call azA "free" (*__unk_type_kind >|0| 0x00000026<) void
    0x00000028 gvar *__unk_type_kind 0x000008F5
    0x00000029 call azA "free" (*__unk_type_kind >|0| 0x00000028<) void
    0x0000002A gvar *__unk_type_kind 0x000008F6
    0x0000002B call azA "free" (*__unk_type_kind >|0| 0x0000002A<) void
    0x0000002C gvar *__unk_type_kind 0x000008F7
    0x0000002D call azA "free" (*__unk_type_kind >|0| 0x0000002C<) void
    0x0000002E gvar *__unk_type_kind 0x000008F8
    0x0000002F call azA "free" (*__unk_type_kind >|0| 0x0000002E<) void
    0x00000030 gvar *__unk_type_kind 0x000008F9
    0x00000031 call azA "free" (*__unk_type_kind >|0| 0x00000030<) void
    0x00000032 gvar *__unk_type_kind 0x000008FA
    0x00000033 call azA "free" (*__unk_type_kind >|0| 0x00000032<) void
    0x00000034 gvar *__unk_type_kind 0x000008FB
    0x00000035 call azA "free" (*__unk_type_kind >|0| 0x00000034<) void
    0x00000036 gvar *__unk_type_kind 0x000008FC
    0x00000037 call azA "free" (*__unk_type_kind >|0| 0x00000036<) void
    0x00000038 gvar *__unk_type_kind 0x000008FD
    0x00000039 call azA "free" (*__unk_type_kind >|0| 0x00000038<) void
    0x0000003A gvar *__unk_type_kind 0x000008FE
    0x0000003B call azA "free" (*__unk_type_kind >|0| 0x0000003A<) void
    0x0000003C gvar *__unk_type_kind 0x000008FF
    0x0000003D call azA "free" (*__unk_type_kind >|0| 0x0000003C<) void
    0x0000003E gvar *__unk_type_kind 0x00000900
    0x0000003F call azA "free" (*__unk_type_kind >|0| 0x0000003E<) void
    0x00000040 gvar *__unk_type_kind 0x00000901
    0x00000041 call azA "free" (*__unk_type_kind >|0| 0x00000040<) void
    0x00000042 gvar *__unk_type_kind 0x00000902
    0x00000043 call azA "free" (*__unk_type_kind >|0| 0x00000042<) void
    0x00000044 gvar *__unk_type_kind 0x00000903
    0x00000045 call azA "free" (*__unk_type_kind >|0| 0x00000044<) void
    0x00000046 gvar *__unk_type_kind 0x00000904
    0x00000047 call azA "free" (*__unk_type_kind >|0| 0x00000046<) void
    0x00000048 gvar *__unk_type_kind 0x00000905
    0x00000049 call azA "free" (*__unk_type_kind >|0| 0x00000048<) void
    0x0000004A gvar *__unk_type_kind 0x00000906
    0x0000004B call azA "free" (*__unk_type_kind >|0| 0x0000004A<) void
    0x0000004C gvar *__unk_type_kind 0x00000907
    0x0000004D call azA "free" (*__unk_type_kind >|0| 0x0000004C<) void
    0x0000004E gvar *__unk_type_kind 0x00000908
    0x0000004F call azA "free" (*__unk_type_kind >|0| 0x0000004E<) void
    0x00000050 gvar *__unk_type_kind 0x00000909
    0x00000051 call azA "free" (*__unk_type_kind >|0| 0x00000050<) void
    0x00000052 gvar *__unk_type_kind 0x0000090A
    0x00000053 call azA "free" (*__unk_type_kind >|0| 0x00000052<) void
    0x00000054 gvar *__unk_type_kind 0x0000090B
    0x00000055 call azA "free" (*__unk_type_kind >|0| 0x00000054<) void
    0x00000056 gvar *__unk_type_kind 0x0000090C
    0x00000057 call azA "free" (*__unk_type_kind >|0| 0x00000056<) void
    0x00000058 gvar *__unk_type_kind 0x0000090D
    0x00000059 call azA "free" (*__unk_type_kind >|0| 0x00000058<) void
    0x0000005A gvar *__unk_type_kind 0x0000090E
    0x0000005B call azA "free" (*__unk_type_kind >|0| 0x0000005A<) void
    0x0000005C gvar *__unk_type_kind 0x0000090F
    0x0000005D call azA "free" (*__unk_type_kind >|0| 0x0000005C<) void
    0x0000005E gvar *__unk_type_kind 0x00000910
    0x0000005F call azA "free" (*__unk_type_kind >|0| 0x0000005E<) void
    0x00000060 gvar *__unk_type_kind 0x00000911
    0x00000061 call azA "free" (*__unk_type_kind >|0| 0x00000060<) void
    0x00000062 gvar *__unk_type_kind 0x00000912
    0x00000063 call azA "free" (*__unk_type_kind >|0| 0x00000062<) void
    0x00000064 gvar *__unk_type_kind 0x00000913
    0x00000065 call azA "free" (*__unk_type_kind >|0| 0x00000064<) void
    0x00000066 gvar *__unk_type_kind 0x00000914
    0x00000067 call azA "free" (*__unk_type_kind >|0| 0x00000066<) void
    0x00000068 gvar *__unk_type_kind 0x00000915
    0x00000069 call azA "free" (*__unk_type_kind >|0| 0x00000068<) void
    0x0000006A gvar *__unk_type_kind 0x00000916
    0x0000006B call azA "free" (*__unk_type_kind >|0| 0x0000006A<) void
    0x0000006C gvar *__unk_type_kind 0x00000917
    0x0000006D call azA "free" (*__unk_type_kind >|0| 0x0000006C<) void
    0x0000006E gvar *__unk_type_kind 0x00000918
    0x0000006F call azA "free" (*__unk_type_kind >|0| 0x0000006E<) void
    0x00000070 gvar *__unk_type_kind 0x00000919
    0x00000071 call azA "free" (*__unk_type_kind >|0| 0x00000070<) void
    0x00000072 gvar *__unk_type_kind 0x0000091A
    0x00000073 call azA "free" (*__unk_type_kind >|0| 0x00000072<) void
    0x00000074 gvar *__unk_type_kind 0x0000091B
    0x00000075 call azA "free" (*__unk_type_kind >|0| 0x00000074<) void
    0x00000076 gvar *__unk_type_kind 0x0000091C
    0x00000077 call azA "free" (*__unk_type_kind >|0| 0x00000076<) void
    0x00000078 gvar *__unk_type_kind 0x0000091D
    0x00000079 call azA "free" (*__unk_type_kind >|0| 0x00000078<) void
    0x0000007A gvar *__unk_type_kind 0x0000091E
    0x0000007B call azA "free" (*__unk_type_kind >|0| 0x0000007A<) void
    0x0000007C gvar *__unk_type_kind 0x0000091F
    0x0000007D call azA "free" (*__unk_type_kind >|0| 0x0000007C<) void
    0x0000007E gvar *__unk_type_kind 0x00000920
    0x0000007F call azA "free" (*__unk_type_kind >|0| 0x0000007E<) void
    0x00000080 gvar *__unk_type_kind 0x00000921
    0x00000081 call azA "free" (*__unk_type_kind >|0| 0x00000080<) void
    0x00000082 gvar *__unk_type_kind 0x00000922
    0x00000083 call azA "free" (*__unk_type_kind >|0| 0x00000082<) void
    0x00000084 gvar *__unk_type_kind 0x00000923
    0x00000085 call azA "free" (*__unk_type_kind >|0| 0x00000084<) void
    0x00000086 gvar *__unk_type_kind 0x00000924
    0x00000087 call azA "free" (*__unk_type_kind >|0| 0x00000086<) void
    0x00000088 gvar *__unk_type_kind 0x00000925
    0x00000089 call azA "free" (*__unk_type_kind >|0| 0x00000088<) void
    0x0000008A gvar *__unk_type_kind 0x00000926
    0x0000008B call azA "free" (*__unk_type_kind >|0| 0x0000008A<) void
    0x0000008C gvar *__unk_type_kind 0x00000927
    0x0000008D call azA "free" (*__unk_type_kind >|0| 0x0000008C<) void
    0x0000008E gvar *__unk_type_kind 0x00000928
    0x0000008F call azA "free" (*__unk_type_kind >|0| 0x0000008E<) void
    0x00000090 gvar *__unk_type_kind 0x00000929
    0x00000091 call azA "free" (*__unk_type_kind >|0| 0x00000090<) void
    0x00000092 gvar *__unk_type_kind 0x0000092A
    0x00000093 call azA "free" (*__unk_type_kind >|0| 0x00000092<) void
    0x00000094 gvar *__unk_type_kind 0x0000092B
    0x00000095 call azA "free" (*__unk_type_kind >|0| 0x00000094<) void
    0x00000096 gvar *__unk_type_kind 0x0000092C
    0x00000097 call azA "free" (*__unk_type_kind >|0| 0x00000096<) void
    0x00000098 gvar *__unk_type_kind 0x0000092D
    0x00000099 call azA "free" (*__unk_type_kind >|0| 0x00000098<) void
    0x0000009A gvar *__unk_type_kind 0x0000092E
    0x0000009B call azA "free" (*__unk_type_kind >|0| 0x0000009A<) void
    0x0000009C ret
fn loadAnimations aLC -> void
    {1 BBs, 174 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call a7A "__pass__" (stru) __unk_type_kind
    0x00000004 call aAA "__add__" (__unk_type_kind >|0| 0x00000002<, __unk_type_kind >|0| 0x00000003<) __unk_type_kind
    0x00000005 call a7A "__pass__" (__unk_type_kind >|0| 0x00000004<) __unk_type_kind
    0x00000006 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000005<, s32 0, s32 3, s32 10) __unk_type_kind
    0x00000007 gvar *__unk_type_kind 0x0000092F
    0x00000008 store *__unk_type_kind >|0| 0x00000007<, __unk_type_kind >|0| 0x00000006<
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A load *__unk_type_kind >|0| 0x00000009<
    0x0000000B call a7A "__pass__" (__unk_type_kind >|0| 0x0000000A<) __unk_type_kind
    0x0000000C call a7A "__pass__" (stru) __unk_type_kind
    0x0000000D call aAA "__add__" (__unk_type_kind >|0| 0x0000000B<, __unk_type_kind >|0| 0x0000000C<) __unk_type_kind
    0x0000000E call a7A "__pass__" (__unk_type_kind >|0| 0x0000000D<) __unk_type_kind
    0x0000000F call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000000E<, s32 0, s32 3, s32 10) __unk_type_kind
    0x00000010 gvar *__unk_type_kind 0x00000930
    0x00000011 store *__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x0000000F<
    0x00000012 var *__unk_type_kind 0x00000000
    0x00000013 load *__unk_type_kind >|0| 0x00000012<
    0x00000014 call a7A "__pass__" (__unk_type_kind >|0| 0x00000013<) __unk_type_kind
    0x00000015 call a7A "__pass__" (stru) __unk_type_kind
    0x00000016 call aAA "__add__" (__unk_type_kind >|0| 0x00000014<, __unk_type_kind >|0| 0x00000015<) __unk_type_kind
    0x00000017 call a7A "__pass__" (__unk_type_kind >|0| 0x00000016<) __unk_type_kind
    0x00000018 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000017<, s32 0, s32 3, s32 4) __unk_type_kind
    0x00000019 gvar *__unk_type_kind 0x00000931
    0x0000001A store *__unk_type_kind >|0| 0x00000019<, __unk_type_kind >|0| 0x00000018<
    0x0000001B var *__unk_type_kind 0x00000000
    0x0000001C load *__unk_type_kind >|0| 0x0000001B<
    0x0000001D call a7A "__pass__" (__unk_type_kind >|0| 0x0000001C<) __unk_type_kind
    0x0000001E call a7A "__pass__" (stru) __unk_type_kind
    0x0000001F call aAA "__add__" (__unk_type_kind >|0| 0x0000001D<, __unk_type_kind >|0| 0x0000001E<) __unk_type_kind
    0x00000020 call a7A "__pass__" (__unk_type_kind >|0| 0x0000001F<) __unk_type_kind
    0x00000021 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000020<, s32 0, s32 5, s32 6) __unk_type_kind
    0x00000022 gvar *__unk_type_kind 0x00000932
    0x00000023 store *__unk_type_kind >|0| 0x00000022<, __unk_type_kind >|0| 0x00000021<
    0x00000024 var *__unk_type_kind 0x00000000
    0x00000025 load *__unk_type_kind >|0| 0x00000024<
    0x00000026 call a7A "__pass__" (__unk_type_kind >|0| 0x00000025<) __unk_type_kind
    0x00000027 call a7A "__pass__" (stru) __unk_type_kind
    0x00000028 call aAA "__add__" (__unk_type_kind >|0| 0x00000026<, __unk_type_kind >|0| 0x00000027<) __unk_type_kind
    0x00000029 call a7A "__pass__" (__unk_type_kind >|0| 0x00000028<) __unk_type_kind
    0x0000002A call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000029<, s32 0, s32 5, s32 6) __unk_type_kind
    0x0000002B gvar *__unk_type_kind 0x00000933
    0x0000002C store *__unk_type_kind >|0| 0x0000002B<, __unk_type_kind >|0| 0x0000002A<
    0x0000002D var *__unk_type_kind 0x00000000
    0x0000002E load *__unk_type_kind >|0| 0x0000002D<
    0x0000002F call a7A "__pass__" (__unk_type_kind >|0| 0x0000002E<) __unk_type_kind
    0x00000030 call a7A "__pass__" (stru) __unk_type_kind
    0x00000031 call aAA "__add__" (__unk_type_kind >|0| 0x0000002F<, __unk_type_kind >|0| 0x00000030<) __unk_type_kind
    0x00000032 call a7A "__pass__" (__unk_type_kind >|0| 0x00000031<) __unk_type_kind
    0x00000033 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000032<, s32 0, s32 5, s32 6) __unk_type_kind
    0x00000034 gvar *__unk_type_kind 0x00000934
    0x00000035 store *__unk_type_kind >|0| 0x00000034<, __unk_type_kind >|0| 0x00000033<
    0x00000036 var *__unk_type_kind 0x00000000
    0x00000037 load *__unk_type_kind >|0| 0x00000036<
    0x00000038 call a7A "__pass__" (__unk_type_kind >|0| 0x00000037<) __unk_type_kind
    0x00000039 call a7A "__pass__" (stru) __unk_type_kind
    0x0000003A call aAA "__add__" (__unk_type_kind >|0| 0x00000038<, __unk_type_kind >|0| 0x00000039<) __unk_type_kind
    0x0000003B call a7A "__pass__" (__unk_type_kind >|0| 0x0000003A<) __unk_type_kind
    0x0000003C call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000003B<, s32 0, s32 3, s32 6) __unk_type_kind
    0x0000003D gvar *__unk_type_kind 0x00000935
    0x0000003E store *__unk_type_kind >|0| 0x0000003D<, __unk_type_kind >|0| 0x0000003C<
    0x0000003F var *__unk_type_kind 0x00000000
    0x00000040 load *__unk_type_kind >|0| 0x0000003F<
    0x00000041 call a7A "__pass__" (__unk_type_kind >|0| 0x00000040<) __unk_type_kind
    0x00000042 call a7A "__pass__" (stru) __unk_type_kind
    0x00000043 call aAA "__add__" (__unk_type_kind >|0| 0x00000041<, __unk_type_kind >|0| 0x00000042<) __unk_type_kind
    0x00000044 call a7A "__pass__" (__unk_type_kind >|0| 0x00000043<) __unk_type_kind
    0x00000045 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000044<, s32 0, s32 5, s32 6) __unk_type_kind
    0x00000046 gvar *__unk_type_kind 0x00000936
    0x00000047 store *__unk_type_kind >|0| 0x00000046<, __unk_type_kind >|0| 0x00000045<
    0x00000048 var *__unk_type_kind 0x00000000
    0x00000049 load *__unk_type_kind >|0| 0x00000048<
    0x0000004A call a7A "__pass__" (__unk_type_kind >|0| 0x00000049<) __unk_type_kind
    0x0000004B call a7A "__pass__" (stru) __unk_type_kind
    0x0000004C call aAA "__add__" (__unk_type_kind >|0| 0x0000004A<, __unk_type_kind >|0| 0x0000004B<) __unk_type_kind
    0x0000004D call a7A "__pass__" (__unk_type_kind >|0| 0x0000004C<) __unk_type_kind
    0x0000004E call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000004D<, s32 0, s32 3, s32 4) __unk_type_kind
    0x0000004F gvar *__unk_type_kind 0x00000937
    0x00000050 store *__unk_type_kind >|0| 0x0000004F<, __unk_type_kind >|0| 0x0000004E<
    0x00000051 var *__unk_type_kind 0x00000000
    0x00000052 load *__unk_type_kind >|0| 0x00000051<
    0x00000053 call a7A "__pass__" (__unk_type_kind >|0| 0x00000052<) __unk_type_kind
    0x00000054 call a7A "__pass__" (stru) __unk_type_kind
    0x00000055 call aAA "__add__" (__unk_type_kind >|0| 0x00000053<, __unk_type_kind >|0| 0x00000054<) __unk_type_kind
    0x00000056 call a7A "__pass__" (__unk_type_kind >|0| 0x00000055<) __unk_type_kind
    0x00000057 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000056<, s32 0, s32 3, s32 4) __unk_type_kind
    0x00000058 gvar *__unk_type_kind 0x00000938
    0x00000059 store *__unk_type_kind >|0| 0x00000058<, __unk_type_kind >|0| 0x00000057<
    0x0000005A var *__unk_type_kind 0x00000000
    0x0000005B load *__unk_type_kind >|0| 0x0000005A<
    0x0000005C call a7A "__pass__" (__unk_type_kind >|0| 0x0000005B<) __unk_type_kind
    0x0000005D call a7A "__pass__" (stru) __unk_type_kind
    0x0000005E call aAA "__add__" (__unk_type_kind >|0| 0x0000005C<, __unk_type_kind >|0| 0x0000005D<) __unk_type_kind
    0x0000005F call a7A "__pass__" (__unk_type_kind >|0| 0x0000005E<) __unk_type_kind
    0x00000060 call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000005F<, s32 0, s32 1, s32 15) __unk_type_kind
    0x00000061 gvar *__unk_type_kind 0x00000939
    0x00000062 store *__unk_type_kind >|0| 0x00000061<, __unk_type_kind >|0| 0x00000060<
    0x00000063 var *__unk_type_kind 0x00000000
    0x00000064 load *__unk_type_kind >|0| 0x00000063<
    0x00000065 call a7A "__pass__" (__unk_type_kind >|0| 0x00000064<) __unk_type_kind
    0x00000066 call a7A "__pass__" (stru) __unk_type_kind
    0x00000067 call aAA "__add__" (__unk_type_kind >|0| 0x00000065<, __unk_type_kind >|0| 0x00000066<) __unk_type_kind
    0x00000068 call a7A "__pass__" (__unk_type_kind >|0| 0x00000067<) __unk_type_kind
    0x00000069 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000068<, s32 0, s32 1, s32 30) __unk_type_kind
    0x0000006A gvar *__unk_type_kind 0x0000093A
    0x0000006B store *__unk_type_kind >|0| 0x0000006A<, __unk_type_kind >|0| 0x00000069<
    0x0000006C var *__unk_type_kind 0x00000000
    0x0000006D load *__unk_type_kind >|0| 0x0000006C<
    0x0000006E call a7A "__pass__" (__unk_type_kind >|0| 0x0000006D<) __unk_type_kind
    0x0000006F call a7A "__pass__" (stru) __unk_type_kind
    0x00000070 call aAA "__add__" (__unk_type_kind >|0| 0x0000006E<, __unk_type_kind >|0| 0x0000006F<) __unk_type_kind
    0x00000071 call a7A "__pass__" (__unk_type_kind >|0| 0x00000070<) __unk_type_kind
    0x00000072 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000071<, s32 4, s32 0, s32 15) __unk_type_kind
    0x00000073 gvar *__unk_type_kind 0x0000093B
    0x00000074 store *__unk_type_kind >|0| 0x00000073<, __unk_type_kind >|0| 0x00000072<
    0x00000075 var *__unk_type_kind 0x00000000
    0x00000076 load *__unk_type_kind >|0| 0x00000075<
    0x00000077 call a7A "__pass__" (__unk_type_kind >|0| 0x00000076<) __unk_type_kind
    0x00000078 call a7A "__pass__" (stru) __unk_type_kind
    0x00000079 call aAA "__add__" (__unk_type_kind >|0| 0x00000077<, __unk_type_kind >|0| 0x00000078<) __unk_type_kind
    0x0000007A call a7A "__pass__" (__unk_type_kind >|0| 0x00000079<) __unk_type_kind
    0x0000007B call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000007A<, s32 0, s32 4, s32 15) __unk_type_kind
    0x0000007C gvar *__unk_type_kind 0x0000093C
    0x0000007D store *__unk_type_kind >|0| 0x0000007C<, __unk_type_kind >|0| 0x0000007B<
    0x0000007E var *__unk_type_kind 0x00000000
    0x0000007F load *__unk_type_kind >|0| 0x0000007E<
    0x00000080 call a7A "__pass__" (__unk_type_kind >|0| 0x0000007F<) __unk_type_kind
    0x00000081 call a7A "__pass__" (stru) __unk_type_kind
    0x00000082 call aAA "__add__" (__unk_type_kind >|0| 0x00000080<, __unk_type_kind >|0| 0x00000081<) __unk_type_kind
    0x00000083 call a7A "__pass__" (__unk_type_kind >|0| 0x00000082<) __unk_type_kind
    0x00000084 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000083<, s32 0, s32 16, s32 5) __unk_type_kind
    0x00000085 gvar *__unk_type_kind 0x0000093D
    0x00000086 store *__unk_type_kind >|0| 0x00000085<, __unk_type_kind >|0| 0x00000084<
    0x00000087 var *__unk_type_kind 0x00000000
    0x00000088 load *__unk_type_kind >|0| 0x00000087<
    0x00000089 call a7A "__pass__" (__unk_type_kind >|0| 0x00000088<) __unk_type_kind
    0x0000008A call a7A "__pass__" (stru) __unk_type_kind
    0x0000008B call aAA "__add__" (__unk_type_kind >|0| 0x00000089<, __unk_type_kind >|0| 0x0000008A<) __unk_type_kind
    0x0000008C call a7A "__pass__" (__unk_type_kind >|0| 0x0000008B<) __unk_type_kind
    0x0000008D call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000008C<, s32 0, s32 4, s32 1) __unk_type_kind
    0x0000008E gvar *__unk_type_kind 0x0000093E
    0x0000008F store *__unk_type_kind >|0| 0x0000008E<, __unk_type_kind >|0| 0x0000008D<
    0x00000090 var *__unk_type_kind 0x00000000
    0x00000091 load *__unk_type_kind >|0| 0x00000090<
    0x00000092 call a7A "__pass__" (__unk_type_kind >|0| 0x00000091<) __unk_type_kind
    0x00000093 call a7A "__pass__" (stru) __unk_type_kind
    0x00000094 call aAA "__add__" (__unk_type_kind >|0| 0x00000092<, __unk_type_kind >|0| 0x00000093<) __unk_type_kind
    0x00000095 call a7A "__pass__" (__unk_type_kind >|0| 0x00000094<) __unk_type_kind
    0x00000096 call aUB "gameAnimation" (__unk_type_kind >|0| 0x00000095<, s32 0, s32 1, s32 1) __unk_type_kind
    0x00000097 gvar *__unk_type_kind 0x0000093F
    0x00000098 store *__unk_type_kind >|0| 0x00000097<, __unk_type_kind >|0| 0x00000096<
    0x00000099 var *__unk_type_kind 0x00000000
    0x0000009A load *__unk_type_kind >|0| 0x00000099<
    0x0000009B call a7A "__pass__" (__unk_type_kind >|0| 0x0000009A<) __unk_type_kind
    0x0000009C call a7A "__pass__" (stru) __unk_type_kind
    0x0000009D call aAA "__add__" (__unk_type_kind >|0| 0x0000009B<, __unk_type_kind >|0| 0x0000009C<) __unk_type_kind
    0x0000009E call a7A "__pass__" (__unk_type_kind >|0| 0x0000009D<) __unk_type_kind
    0x0000009F call aUB "gameAnimation" (__unk_type_kind >|0| 0x0000009E<, s32 0, s32 1, s32 20) __unk_type_kind
    0x000000A0 gvar *__unk_type_kind 0x00000940
    0x000000A1 store *__unk_type_kind >|0| 0x000000A0<, __unk_type_kind >|0| 0x0000009F<
    0x000000A2 var *__unk_type_kind 0x00000000
    0x000000A3 load *__unk_type_kind >|0| 0x000000A2<
    0x000000A4 call a7A "__pass__" (__unk_type_kind >|0| 0x000000A3<) __unk_type_kind
    0x000000A5 call a7A "__pass__" (stru) __unk_type_kind
    0x000000A6 call aAA "__add__" (__unk_type_kind >|0| 0x000000A4<, __unk_type_kind >|0| 0x000000A5<) __unk_type_kind
    0x000000A7 call a7A "__pass__" (__unk_type_kind >|0| 0x000000A6<) __unk_type_kind
    0x000000A8 call aUB "gameAnimation" (__unk_type_kind >|0| 0x000000A7<, s32 0, s32 7, s32 5) __unk_type_kind
    0x000000A9 gvar *__unk_type_kind 0x00000941
    0x000000AA store *__unk_type_kind >|0| 0x000000A9<, __unk_type_kind >|0| 0x000000A8<
    0x000000AB var *__unk_type_kind 0x00000000
    0x000000AC call a6A "__defer__" (*__unk_type_kind >|0| 0x000000AB<) void
    0x000000AD ret
fn destroyAnimations aMC -> void
    {1 BBs, 37 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x0000092F
    0x00000001 call aOB "destroy" (*__unk_type_kind >|0| 0x00000000<) void
    0x00000002 gvar *__unk_type_kind 0x00000931
    0x00000003 call aOB "destroy" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 gvar *__unk_type_kind 0x00000932
    0x00000005 call aOB "destroy" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 gvar *__unk_type_kind 0x00000933
    0x00000007 call aOB "destroy" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 gvar *__unk_type_kind 0x00000934
    0x00000009 call aOB "destroy" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A gvar *__unk_type_kind 0x00000935
    0x0000000B call aOB "destroy" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000936
    0x0000000D call aOB "destroy" (*__unk_type_kind >|0| 0x0000000C<) void
    0x0000000E gvar *__unk_type_kind 0x00000937
    0x0000000F call aOB "destroy" (*__unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x00000938
    0x00000011 call aOB "destroy" (*__unk_type_kind >|0| 0x00000010<) void
    0x00000012 gvar *__unk_type_kind 0x00000939
    0x00000013 call aOB "destroy" (*__unk_type_kind >|0| 0x00000012<) void
    0x00000014 gvar *__unk_type_kind 0x0000093A
    0x00000015 call aOB "destroy" (*__unk_type_kind >|0| 0x00000014<) void
    0x00000016 gvar *__unk_type_kind 0x0000093B
    0x00000017 call aOB "destroy" (*__unk_type_kind >|0| 0x00000016<) void
    0x00000018 gvar *__unk_type_kind 0x0000093C
    0x00000019 call aOB "destroy" (*__unk_type_kind >|0| 0x00000018<) void
    0x0000001A gvar *__unk_type_kind 0x0000093D
    0x0000001B call aOB "destroy" (*__unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x0000093E
    0x0000001D call aOB "destroy" (*__unk_type_kind >|0| 0x0000001C<) void
    0x0000001E gvar *__unk_type_kind 0x0000093F
    0x0000001F call aOB "destroy" (*__unk_type_kind >|0| 0x0000001E<) void
    0x00000020 gvar *__unk_type_kind 0x00000940
    0x00000021 call aOB "destroy" (*__unk_type_kind >|0| 0x00000020<) void
    0x00000022 gvar *__unk_type_kind 0x00000941
    0x00000023 call aOB "destroy" (*__unk_type_kind >|0| 0x00000022<) void
    0x00000024 ret
fn loadAssets aNC -> void
    {1 BBs, 18 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 call a6D "where" () __unk_type_kind
    0x00000001 call a7A "__pass__" (__unk_type_kind >|0| 0x00000000<) __unk_type_kind
    0x00000002 call a7A "__pass__" (stru) __unk_type_kind
    0x00000003 call aAA "__add__" (__unk_type_kind >|0| 0x00000001<, __unk_type_kind >|0| 0x00000002<) __unk_type_kind
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 varzi 0x00000000
    0x00000006 call a8A "__assign__" (*__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000003<) void
    0x00000007 var *__unk_type_kind 0x00000000
    0x00000008 load *__unk_type_kind >|0| 0x00000007<
    0x00000009 call a7A "__pass__" (__unk_type_kind >|0| 0x00000008<) __unk_type_kind
    0x0000000A call aJC "loadTextures" (__unk_type_kind >|0| 0x00000009<) void
    0x0000000B var *__unk_type_kind 0x00000000
    0x0000000C load *__unk_type_kind >|0| 0x0000000B<
    0x0000000D call a7A "__pass__" (__unk_type_kind >|0| 0x0000000C<) __unk_type_kind
    0x0000000E call aLC "loadAnimations" (__unk_type_kind >|0| 0x0000000D<) void
    0x0000000F var *__unk_type_kind 0x00000000
    0x00000010 call a6A "__defer__" (*__unk_type_kind >|0| 0x0000000F<) void
    0x00000011 ret
fn destroyAssets aOC -> void
    {1 BBs, 21 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aKC "destroyTextures" () void
    0x00000001 call aMC "destroyAnimations" () void
    0x00000002 gvar *__unk_type_kind 0x00000959
    0x00000003 call aMG "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 gvar *__unk_type_kind 0x0000095A
    0x00000005 call aNG "__defer__" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 gvar *__unk_type_kind 0x0000095B
    0x00000007 call aOG "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 gvar *__unk_type_kind 0x0000095C
    0x00000009 call aPG "__defer__" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A gvar *__unk_type_kind 0x0000095D
    0x0000000B call aQG "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x0000095E
    0x0000000D call aRG "__defer__" (*__unk_type_kind >|0| 0x0000000C<) void
    0x0000000E gvar *__unk_type_kind 0x00000966
    0x0000000F call aSG "__defer__" (*__unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x00000967
    0x00000011 call aTG "__defer__" (*__unk_type_kind >|0| 0x00000010<) void
    0x00000012 gvar *__unk_type_kind 0x00000971
    0x00000013 call aUG "__defer__" (*__unk_type_kind >|0| 0x00000012<) void
    0x00000014 ret
fn setupState aPC -> void
    {1 BBs, 116 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call a9 "controlScheme" (s32 32, s32 83, s32 65, s32 68, s32 74, s32 75, s32 256, s32 87) __unk_type_kind
    0x00000001 gvar *__unk_type_kind 0x00000943
    0x00000002 store *__unk_type_kind >|0| 0x00000001<, __unk_type_kind >|0| 0x00000000<
    0x00000003 call a9 "controlScheme" (s32 265, s32 264, s32 263, s32 262, s32 32, s32 340, s32 256, s32 265) __unk_type_kind
    0x00000004 gvar *__unk_type_kind 0x00000944
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000003<
    0x00000006 gvar *__unk_type_kind 0x00000943
    0x00000007 load *__unk_type_kind >|0| 0x00000006<
    0x00000008 gvar *__unk_type_kind 0x00000942
    0x00000009 store *__unk_type_kind >|0| 0x00000008<, __unk_type_kind >|0| 0x00000007<
    0x0000000A gvar *d 0x0000094B
    0x0000000B store *d >|0| 0x0000000A<, d 0.000000
    0x0000000C gvar *d 0x0000094C
    0x0000000D store *d >|0| 0x0000000C<, d 0.000000
    0x0000000E gvar *bool 0x0000094F
    0x0000000F store *bool >|0| 0x0000000E<, bool false
    0x00000010 gvar *bool 0x00000950
    0x00000011 store *bool >|0| 0x00000010<, bool false
    0x00000012 gvar *s32 0x00000951
    0x00000013 store *s32 >|0| 0x00000012<, s32 0
    0x00000014 gvar *s32 0x00000957
    0x00000015 store *s32 >|0| 0x00000014<, s32 0
    0x00000016 gvar *f 0x00000958
    0x00000017 store *f >|0| 0x00000016<, f 1920.000000
    0x00000018 gvar *u64 0x00000963
    0x00000019 store *u64 >|0| 0x00000018<, u64 0
    0x0000001A gvar *f 0x00000964
    0x0000001B store *f >|0| 0x0000001A<, f 0.000000
    0x0000001C gvar *f 0x00000965
    0x0000001D store *f >|0| 0x0000001C<, f 0.000000
    0x0000001E gvar *bool 0x0000096A
    0x0000001F store *bool >|0| 0x0000001E<, bool false
    0x00000020 gvar *f 0x0000096B
    0x00000021 store *f >|0| 0x00000020<, f 0.000000
    0x00000022 gvar *s32 0x0000096C
    0x00000023 store *s32 >|0| 0x00000022<, s32 0
    0x00000024 gvar *s32 0x0000096D
    0x00000025 store *s32 >|0| 0x00000024<, s32 0
    0x00000026 call aED "clearInventory" () void
    0x00000027 gvar *__unk_type_kind 0x0000091D
    0x00000028 load *__unk_type_kind >|0| 0x00000027<
    0x00000029 gvar *[10] __unk_type_kind 0x00000970
    0x0000002A bc *[10] __unk_type_kind >|0| 0x00000029< to *__unk_type_kind
    0x0000002B arracc *__unk_type_kind >|0| 0x0000002A<, s32 0
    0x0000002C store *__unk_type_kind >|0| 0x0000002B<, __unk_type_kind >|0| 0x00000028<
    0x0000002D gvar *__unk_type_kind 0x0000091E
    0x0000002E load *__unk_type_kind >|0| 0x0000002D<
    0x0000002F gvar *[10] __unk_type_kind 0x00000970
    0x00000030 bc *[10] __unk_type_kind >|0| 0x0000002F< to *__unk_type_kind
    0x00000031 arracc *__unk_type_kind >|0| 0x00000030<, s32 1
    0x00000032 store *__unk_type_kind >|0| 0x00000031<, __unk_type_kind >|0| 0x0000002E<
    0x00000033 gvar *__unk_type_kind 0x0000091F
    0x00000034 load *__unk_type_kind >|0| 0x00000033<
    0x00000035 gvar *[10] __unk_type_kind 0x00000970
    0x00000036 bc *[10] __unk_type_kind >|0| 0x00000035< to *__unk_type_kind
    0x00000037 arracc *__unk_type_kind >|0| 0x00000036<, s32 2
    0x00000038 store *__unk_type_kind >|0| 0x00000037<, __unk_type_kind >|0| 0x00000034<
    0x00000039 gvar *__unk_type_kind 0x00000920
    0x0000003A load *__unk_type_kind >|0| 0x00000039<
    0x0000003B gvar *[10] __unk_type_kind 0x00000970
    0x0000003C bc *[10] __unk_type_kind >|0| 0x0000003B< to *__unk_type_kind
    0x0000003D arracc *__unk_type_kind >|0| 0x0000003C<, s32 3
    0x0000003E store *__unk_type_kind >|0| 0x0000003D<, __unk_type_kind >|0| 0x0000003A<
    0x0000003F gvar *__unk_type_kind 0x00000921
    0x00000040 load *__unk_type_kind >|0| 0x0000003F<
    0x00000041 gvar *[10] __unk_type_kind 0x00000970
    0x00000042 bc *[10] __unk_type_kind >|0| 0x00000041< to *__unk_type_kind
    0x00000043 arracc *__unk_type_kind >|0| 0x00000042<, s32 4
    0x00000044 store *__unk_type_kind >|0| 0x00000043<, __unk_type_kind >|0| 0x00000040<
    0x00000045 gvar *__unk_type_kind 0x00000922
    0x00000046 load *__unk_type_kind >|0| 0x00000045<
    0x00000047 gvar *[10] __unk_type_kind 0x00000970
    0x00000048 bc *[10] __unk_type_kind >|0| 0x00000047< to *__unk_type_kind
    0x00000049 arracc *__unk_type_kind >|0| 0x00000048<, s32 5
    0x0000004A store *__unk_type_kind >|0| 0x00000049<, __unk_type_kind >|0| 0x00000046<
    0x0000004B gvar *__unk_type_kind 0x00000923
    0x0000004C load *__unk_type_kind >|0| 0x0000004B<
    0x0000004D gvar *[10] __unk_type_kind 0x00000970
    0x0000004E bc *[10] __unk_type_kind >|0| 0x0000004D< to *__unk_type_kind
    0x0000004F arracc *__unk_type_kind >|0| 0x0000004E<, s32 6
    0x00000050 store *__unk_type_kind >|0| 0x0000004F<, __unk_type_kind >|0| 0x0000004C<
    0x00000051 gvar *__unk_type_kind 0x00000924
    0x00000052 load *__unk_type_kind >|0| 0x00000051<
    0x00000053 gvar *[10] __unk_type_kind 0x00000970
    0x00000054 bc *[10] __unk_type_kind >|0| 0x00000053< to *__unk_type_kind
    0x00000055 arracc *__unk_type_kind >|0| 0x00000054<, s32 7
    0x00000056 store *__unk_type_kind >|0| 0x00000055<, __unk_type_kind >|0| 0x00000052<
    0x00000057 gvar *__unk_type_kind 0x00000925
    0x00000058 load *__unk_type_kind >|0| 0x00000057<
    0x00000059 gvar *[10] __unk_type_kind 0x00000970
    0x0000005A bc *[10] __unk_type_kind >|0| 0x00000059< to *__unk_type_kind
    0x0000005B arracc *__unk_type_kind >|0| 0x0000005A<, s32 8
    0x0000005C store *__unk_type_kind >|0| 0x0000005B<, __unk_type_kind >|0| 0x00000058<
    0x0000005D gvar *__unk_type_kind 0x00000926
    0x0000005E load *__unk_type_kind >|0| 0x0000005D<
    0x0000005F gvar *[10] __unk_type_kind 0x00000970
    0x00000060 bc *[10] __unk_type_kind >|0| 0x0000005F< to *__unk_type_kind
    0x00000061 arracc *__unk_type_kind >|0| 0x00000060<, s32 9
    0x00000062 store *__unk_type_kind >|0| 0x00000061<, __unk_type_kind >|0| 0x0000005E<
    0x00000063 gvar *[18] u64 0x00000973
    0x00000064 bc *[18] u64 >|0| 0x00000063< to *u64
    0x00000065 arracc *u64 >|0| 0x00000064<, s32 0
    0x00000066 store *u64 >|0| 0x00000065<, u64 2
    0x00000067 gvar *[18] __unk_type_kind 0x00000974
    0x00000068 bc *[18] __unk_type_kind >|0| 0x00000067< to *__unk_type_kind
    0x00000069 arracc *__unk_type_kind >|0| 0x00000068<, s32 0
    0x0000006A call abB "set" (*__unk_type_kind >|0| 0x00000069<, s32 0, s32 0, s32 0, s32 5, s32 0, s32 0) void
    0x0000006B gvar *[18] u64 0x00000973
    0x0000006C bc *[18] u64 >|0| 0x0000006B< to *u64
    0x0000006D arracc *u64 >|0| 0x0000006C<, s32 1
    0x0000006E store *u64 >|0| 0x0000006D<, u64 3
    0x0000006F gvar *[18] __unk_type_kind 0x00000974
    0x00000070 bc *[18] __unk_type_kind >|0| 0x0000006F< to *__unk_type_kind
    0x00000071 arracc *__unk_type_kind >|0| 0x00000070<, s32 1
    0x00000072 call abB "set" (*__unk_type_kind >|0| 0x00000071<, s32 3, s32 0, s32 0, s32 0, s32 0, s32 0) void
    0x00000073 ret
fn gotoScene aQC -> void
    {17 BBs, 50 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 eq s32 >|0| 0x00000001<, s32 1
    0x00000003 cbr s32 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aUC "gotoScene1" () void
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 eq s32 >|2| 0x00000001<, s32 2
    0x00000003 cbr s32 >|2| 0x00000002<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 call aVC "gotoScene2" () void
    0x00000001 ret
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 eq s32 >|4| 0x00000001<, s32 3
    0x00000003 cbr s32 >|4| 0x00000002<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aWC "gotoScene3" () void
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 eq s32 >|6| 0x00000001<, s32 4
    0x00000003 cbr s32 >|6| 0x00000002<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aXC "gotoScene4" () void
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|8| 0x00000000<
    0x00000002 eq s32 >|8| 0x00000001<, s32 5
    0x00000003 cbr s32 >|8| 0x00000002<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 call aYC "gotoScene5" () void
    0x00000001 ret
  BASICBLOCK |10|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|10| 0x00000000<
    0x00000002 eq s32 >|10| 0x00000001<, s32 6
    0x00000003 cbr s32 >|10| 0x00000002<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 call aZC "gotoScene6" () void
    0x00000001 ret
  BASICBLOCK |12|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|12| 0x00000000<
    0x00000002 eq s32 >|12| 0x00000001<, s32 7
    0x00000003 cbr s32 >|12| 0x00000002<, |13|, |14|
  BASICBLOCK |13|
    0x00000000 call aaC "gotoScene7" () void
    0x00000001 ret
  BASICBLOCK |14|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|14| 0x00000000<
    0x00000002 eq s32 >|14| 0x00000001<, s32 8
    0x00000003 cbr s32 >|14| 0x00000002<, |15|, |16|
  BASICBLOCK |15|
    0x00000000 call abC "gotoScene8" () void
    0x00000001 ret
  BASICBLOCK |16|
    0x00000000 call adC "gotoWinScreen" () void
    0x00000001 ret
fn scenePresets aRC -> void
    {1 BBs, 42 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *f 0x00000948
    0x00000001 store *f >|0| 0x00000000<, f 0.000000
    0x00000002 gvar *f 0x00000949
    0x00000003 store *f >|0| 0x00000002<, f 0.000000
    0x00000004 gvar *bool 0x00000950
    0x00000005 store *bool >|0| 0x00000004<, bool false
    0x00000006 gvar *s32 0x00000951
    0x00000007 store *s32 >|0| 0x00000006<, s32 0
    0x00000008 gvar *__unk_type_kind 0x00000959
    0x00000009 call a1E "clear" (*__unk_type_kind >|0| 0x00000008<) void
    0x0000000A gvar *__unk_type_kind 0x0000095A
    0x0000000B call a2E "clear" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x0000095B
    0x0000000D call a3E "clear" (*__unk_type_kind >|0| 0x0000000C<) void
    0x0000000E gvar *__unk_type_kind 0x0000095C
    0x0000000F call a4E "clear" (*__unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x0000095D
    0x00000011 call a5E "clear" (*__unk_type_kind >|0| 0x00000010<) void
    0x00000012 gvar *u64 0x00000963
    0x00000013 store *u64 >|0| 0x00000012<, u64 0
    0x00000014 gvar *__unk_type_kind 0x0000095E
    0x00000015 call a6E "clear" (*__unk_type_kind >|0| 0x00000014<) void
    0x00000016 gvar *__unk_type_kind 0x0000095F
    0x00000017 call a7E "rid" (*__unk_type_kind >|0| 0x00000016<) void
    0x00000018 gvar *bool 0x00000961
    0x00000019 store *bool >|0| 0x00000018<, bool false
    0x0000001A gvar *__unk_type_kind 0x00000962
    0x0000001B call a8E "rid" (*__unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x00000966
    0x0000001D call a9E "clear" (*__unk_type_kind >|0| 0x0000001C<) void
    0x0000001E gvar *__unk_type_kind 0x00000967
    0x0000001F call aAE "clear" (*__unk_type_kind >|0| 0x0000001E<) void
    0x00000020 gvar *__unk_type_kind 0x00000971
    0x00000021 call aBE "clear" (*__unk_type_kind >|0| 0x00000020<) void
    0x00000022 gvar *__unk_type_kind 0x00000968
    0x00000023 call aCE "rid" (*__unk_type_kind >|0| 0x00000022<) void
    0x00000024 gvar *__unk_type_kind 0x00000969
    0x00000025 call aDE "rid" (*__unk_type_kind >|0| 0x00000024<) void
    0x00000026 gvar *__unk_type_kind 0x00000976
    0x00000027 gvar **__unk_type_kind 0x00000975
    0x00000028 store **__unk_type_kind >|0| 0x00000027<, *__unk_type_kind >|0| 0x00000026<
    0x00000029 ret
fn sceneDefaultShadows aSC -> void
    {1 BBs, 15 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 gvar *__unk_type_kind 0x000008FB
    0x00000002 load *__unk_type_kind >|0| 0x00000001<
    0x00000003 call aXB "gameImageEx" (__unk_type_kind >|0| 0x00000002<, s32 0, s32 0, s32 64, s32 64) __unk_type_kind
    0x00000004 call aeB "freeze" (*__unk_type_kind >|0| 0x00000000<, __unk_type_kind >|0| 0x00000003<) __unk_type_kind
    0x00000005 gvar *__unk_type_kind 0x00000946
    0x00000006 store *__unk_type_kind >|0| 0x00000005<, __unk_type_kind >|0| 0x00000004<
    0x00000007 gvar *__unk_type_kind 0x00000945
    0x00000008 gvar *__unk_type_kind 0x000008FB
    0x00000009 load *__unk_type_kind >|0| 0x00000008<
    0x0000000A call aXB "gameImageEx" (__unk_type_kind >|0| 0x00000009<, s32 0, s32 0, s32 64, s32 64) __unk_type_kind
    0x0000000B call aeB "freeze" (*__unk_type_kind >|0| 0x00000007<, __unk_type_kind >|0| 0x0000000A<) __unk_type_kind
    0x0000000C gvar *__unk_type_kind 0x00000947
    0x0000000D store *__unk_type_kind >|0| 0x0000000C<, __unk_type_kind >|0| 0x0000000B<
    0x0000000E ret
fn gotoTitleScreen aTC -> void
    {1 BBs, 28 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 0
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 2560.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 512, s32 544, s32 256, s32 256, s32 1) void
    0x0000000B call ahC "createPlatform" (s32 1088, s32 320, s32 256, s32 256, s32 0) void
    0x0000000C call ahC "createPlatform" (s32 64, s32 704, s32 256, s32 128, s32 0) void
    0x0000000D gvar *__unk_type_kind 0x0000095A
    0x0000000E call axB "lake" (s32 0, s32 768, s32 2560, s32 512) __unk_type_kind
    0x0000000F call aEF "add" (*__unk_type_kind >|0| 0x0000000D<, __unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x0000095B
    0x00000011 add s32 256, s32 64
    0x00000012 call ayB "bridge" (s32 >|0| 0x00000011<, s32 704, s32 192) __unk_type_kind
    0x00000013 call aFF "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000012<) void
    0x00000014 gvar *__unk_type_kind 0x0000095B
    0x00000015 add s32 256, s32 256
    0x00000016 add s32 >|0| 0x00000015<, s32 256
    0x00000017 add s32 >|0| 0x00000016<, s32 192
    0x00000018 add s32 320, s32 192
    0x00000019 call ayB "bridge" (s32 >|0| 0x00000017<, s32 >|0| 0x00000018<, s32 128) __unk_type_kind
    0x0000001A call aGF "add" (*__unk_type_kind >|0| 0x00000014<, __unk_type_kind >|0| 0x00000019<) void
    0x0000001B ret
fn gotoScene1 aUC -> void
    {1 BBs, 39 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 1
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 2560.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 512, s32 544, s32 256, s32 256, s32 1) void
    0x0000000B call ahC "createPlatform" (s32 1088, s32 320, s32 256, s32 256, s32 0) void
    0x0000000C call ahC "createPlatform" (s32 64, s32 704, s32 256, s32 128, s32 0) void
    0x0000000D call ahC "createPlatform" (s32 1920, s32 480, s32 256, s32 512, s32 0) void
    0x0000000E gvar *__unk_type_kind 0x0000095A
    0x0000000F call axB "lake" (s32 0, s32 768, s32 2560, s32 512) __unk_type_kind
    0x00000010 call aGG "add" (*__unk_type_kind >|0| 0x0000000E<, __unk_type_kind >|0| 0x0000000F<) void
    0x00000011 gvar *__unk_type_kind 0x0000095B
    0x00000012 add s32 256, s32 64
    0x00000013 call ayB "bridge" (s32 >|0| 0x00000012<, s32 704, s32 192) __unk_type_kind
    0x00000014 call aHG "add" (*__unk_type_kind >|0| 0x00000011<, __unk_type_kind >|0| 0x00000013<) void
    0x00000015 gvar *__unk_type_kind 0x0000095B
    0x00000016 add s32 256, s32 256
    0x00000017 add s32 >|0| 0x00000016<, s32 256
    0x00000018 add s32 >|0| 0x00000017<, s32 192
    0x00000019 add s32 320, s32 192
    0x0000001A call ayB "bridge" (s32 >|0| 0x00000018<, s32 >|0| 0x00000019<, s32 128) __unk_type_kind
    0x0000001B call aIG "add" (*__unk_type_kind >|0| 0x00000015<, __unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x0000095B
    0x0000001D add s32 1920, s32 256
    0x0000001E add s32 480, s32 32
    0x0000001F call ayB "bridge" (s32 >|0| 0x0000001D<, s32 >|0| 0x0000001E<, s32 256) __unk_type_kind
    0x00000020 call aJG "add" (*__unk_type_kind >|0| 0x0000001C<, __unk_type_kind >|0| 0x0000001F<) void
    0x00000021 gvar *__unk_type_kind 0x00000960
    0x00000022 add s32 1920, s32 64
    0x00000023 sub s32 480, s32 128
    0x00000024 call azB "portal" (s32 >|0| 0x00000022<, s32 >|0| 0x00000023<) __unk_type_kind
    0x00000025 call aDF "set" (*__unk_type_kind >|0| 0x00000021<, __unk_type_kind >|0| 0x00000024<) void
    0x00000026 ret
fn gotoScene2 aVC -> void
    {1 BBs, 73 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 2
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 5120.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 512, s32 544, s32 256, s32 640, s32 0) void
    0x0000000B call ahC "createPlatform" (s32 1298, s32 544, s32 256, s32 384, s32 2) void
    0x0000000C call ahC "createPlatform" (s32 1984, s32 384, s32 512, s32 192, s32 0) void
    0x0000000D call ahC "createPlatform" (s32 3072, s32 256, s32 256, s32 256, s32 2) void
    0x0000000E call ahC "createPlatform" (s32 4608, s32 512, s32 384, s32 512, s32 0) void
    0x0000000F call ahC "createPlatform" (s32 3712, s32 512, s32 512, s32 448, s32 1) void
    0x00000010 gvar *__unk_type_kind 0x0000095A
    0x00000011 call axB "lake" (s32 0, s32 768, s32 5120, s32 512) __unk_type_kind
    0x00000012 call a8G "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000011<) void
    0x00000013 gvar *__unk_type_kind 0x0000095B
    0x00000014 call ayB "bridge" (s32 384, s32 704, s32 128) __unk_type_kind
    0x00000015 call a9G "add" (*__unk_type_kind >|0| 0x00000013<, __unk_type_kind >|0| 0x00000014<) void
    0x00000016 gvar *__unk_type_kind 0x0000095B
    0x00000017 call ayB "bridge" (s32 3328, s32 384, s32 128) __unk_type_kind
    0x00000018 call aAG "add" (*__unk_type_kind >|0| 0x00000016<, __unk_type_kind >|0| 0x00000017<) void
    0x00000019 gvar *__unk_type_kind 0x0000095B
    0x0000001A call ayB "bridge" (s32 4544, s32 704, s32 64) __unk_type_kind
    0x0000001B call aBG "add" (*__unk_type_kind >|0| 0x00000019<, __unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x0000095C
    0x0000001D gvar *__unk_type_kind 0x00000937
    0x0000001E load *__unk_type_kind >|0| 0x0000001D<
    0x0000001F sub s32 544, s32 32
    0x00000020 call aBC "spider" (__unk_type_kind >|0| 0x0000001E<, s32 1298, s32 >|0| 0x0000001F<) __unk_type_kind
    0x00000021 call aCG "add" (*__unk_type_kind >|0| 0x0000001C<, __unk_type_kind >|0| 0x00000020<) void
    0x00000022 gvar *__unk_type_kind 0x0000095C
    0x00000023 gvar *__unk_type_kind 0x00000937
    0x00000024 load *__unk_type_kind >|0| 0x00000023<
    0x00000025 sub s32 512, s32 32
    0x00000026 call aBC "spider" (__unk_type_kind >|0| 0x00000024<, s32 4608, s32 >|0| 0x00000025<) __unk_type_kind
    0x00000027 call aDG "add" (*__unk_type_kind >|0| 0x00000022<, __unk_type_kind >|0| 0x00000026<) void
    0x00000028 gvar *__unk_type_kind 0x0000095C
    0x00000029 gvar *__unk_type_kind 0x00000937
    0x0000002A load *__unk_type_kind >|0| 0x00000029<
    0x0000002B sub s32 512, s32 32
    0x0000002C call aBC "spider" (__unk_type_kind >|0| 0x0000002A<, s32 3712, s32 >|0| 0x0000002B<) __unk_type_kind
    0x0000002D call adF "add" (*__unk_type_kind >|0| 0x00000028<, __unk_type_kind >|0| 0x0000002C<) void
    0x0000002E gvar *__unk_type_kind 0x0000095C
    0x0000002F gvar *__unk_type_kind 0x00000937
    0x00000030 load *__unk_type_kind >|0| 0x0000002F<
    0x00000031 add s32 3712, s32 256
    0x00000032 sub s32 512, s32 32
    0x00000033 call aBC "spider" (__unk_type_kind >|0| 0x00000030<, s32 >|0| 0x00000031<, s32 >|0| 0x00000032<) __unk_type_kind
    0x00000034 call adF "add" (*__unk_type_kind >|0| 0x0000002E<, __unk_type_kind >|0| 0x00000033<) void
    0x00000035 gvar *__unk_type_kind 0x0000095D
    0x00000036 gvar *__unk_type_kind 0x0000093A
    0x00000037 load *__unk_type_kind >|0| 0x00000036<
    0x00000038 call aHC "swordfish" (__unk_type_kind >|0| 0x00000037<, s32 2048, s32 1024, s32 4, s32 180) __unk_type_kind
    0x00000039 call aEG "add" (*__unk_type_kind >|0| 0x00000035<, __unk_type_kind >|0| 0x00000038<) void
    0x0000003A gvar *__unk_type_kind 0x0000095F
    0x0000003B gvar *__unk_type_kind 0x00000945
    0x0000003C memb *__unk_type_kind >|0| 0x0000003B<, 0
    0x0000003D load *s32 >|0| 0x0000003C<
    0x0000003E sub s32 >|0| 0x0000003D<, s32 32
    0x0000003F gvar *__unk_type_kind 0x00000945
    0x00000040 memb *__unk_type_kind >|0| 0x0000003F<, 1
    0x00000041 load *s32 >|0| 0x00000040<
    0x00000042 sub s32 >|0| 0x00000041<, s32 64
    0x00000043 call azB "portal" (s32 >|0| 0x0000003E<, s32 >|0| 0x00000042<) __unk_type_kind
    0x00000044 call aFG "set" (*__unk_type_kind >|0| 0x0000003A<, __unk_type_kind >|0| 0x00000043<) void
    0x00000045 gvar *__unk_type_kind 0x00000960
    0x00000046 call azB "portal" (s32 2048, s32 256) __unk_type_kind
    0x00000047 call aDF "set" (*__unk_type_kind >|0| 0x00000045<, __unk_type_kind >|0| 0x00000046<) void
    0x00000048 ret
fn gotoScene3 aWC -> void
    {1 BBs, 120 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 3
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 5120.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 320, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 128, s32 544, s32 640, s32 320, s32 12) void
    0x0000000B call ahC "createPlatform" (s32 1024, s32 480, s32 512, s32 192, s32 7) void
    0x0000000C call ahC "createPlatform" (s32 2048, s32 544, s32 256, s32 704, s32 6) void
    0x0000000D call ahC "createPlatform" (s32 3072, s32 544, s32 320, s32 192, s32 7) void
    0x0000000E call ahC "createPlatform" (s32 4160, s32 576, s32 640, s32 384, s32 1) void
    0x0000000F gvar *__unk_type_kind 0x0000095A
    0x00000010 call axB "lake" (s32 0, s32 768, s32 5120, s32 512) __unk_type_kind
    0x00000011 call axF "add" (*__unk_type_kind >|0| 0x0000000F<, __unk_type_kind >|0| 0x00000010<) void
    0x00000012 gvar *__unk_type_kind 0x0000095B
    0x00000013 add s32 128, s32 640
    0x00000014 add s32 544, s32 192
    0x00000015 call ayB "bridge" (s32 >|0| 0x00000013<, s32 >|0| 0x00000014<, s32 128) __unk_type_kind
    0x00000016 call ayF "add" (*__unk_type_kind >|0| 0x00000012<, __unk_type_kind >|0| 0x00000015<) void
    0x00000017 gvar *__unk_type_kind 0x0000095B
    0x00000018 add s32 2048, s32 256
    0x00000019 add s32 544, s32 192
    0x0000001A call ayB "bridge" (s32 >|0| 0x00000018<, s32 >|0| 0x00000019<, s32 128) __unk_type_kind
    0x0000001B call azF "add" (*__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x0000095C
    0x0000001D gvar *__unk_type_kind 0x00000938
    0x0000001E load *__unk_type_kind >|0| 0x0000001D<
    0x0000001F sub s32 480, s32 32
    0x00000020 call aCC "spider" (__unk_type_kind >|0| 0x0000001E<, s32 1024, s32 >|0| 0x0000001F<, s32 2) __unk_type_kind
    0x00000021 call aVF "add" (*__unk_type_kind >|0| 0x0000001C<, __unk_type_kind >|0| 0x00000020<) void
    0x00000022 gvar *__unk_type_kind 0x0000095C
    0x00000023 gvar *__unk_type_kind 0x00000938
    0x00000024 load *__unk_type_kind >|0| 0x00000023<
    0x00000025 sub s32 544, s32 32
    0x00000026 call aCC "spider" (__unk_type_kind >|0| 0x00000024<, s32 2048, s32 >|0| 0x00000025<, s32 2) __unk_type_kind
    0x00000027 call aVF "add" (*__unk_type_kind >|0| 0x00000022<, __unk_type_kind >|0| 0x00000026<) void
    0x00000028 gvar *__unk_type_kind 0x0000095C
    0x00000029 gvar *__unk_type_kind 0x00000938
    0x0000002A load *__unk_type_kind >|0| 0x00000029<
    0x0000002B sub s32 576, s32 32
    0x0000002C call aCC "spider" (__unk_type_kind >|0| 0x0000002A<, s32 4160, s32 >|0| 0x0000002B<, s32 2) __unk_type_kind
    0x0000002D call aVF "add" (*__unk_type_kind >|0| 0x00000028<, __unk_type_kind >|0| 0x0000002C<) void
    0x0000002E gvar *__unk_type_kind 0x0000095C
    0x0000002F gvar *__unk_type_kind 0x00000938
    0x00000030 load *__unk_type_kind >|0| 0x0000002F<
    0x00000031 add s32 4160, s32 128
    0x00000032 sub s32 576, s32 32
    0x00000033 call aCC "spider" (__unk_type_kind >|0| 0x00000030<, s32 >|0| 0x00000031<, s32 >|0| 0x00000032<, s32 2) __unk_type_kind
    0x00000034 call aVF "add" (*__unk_type_kind >|0| 0x0000002E<, __unk_type_kind >|0| 0x00000033<) void
    0x00000035 gvar *__unk_type_kind 0x0000095C
    0x00000036 gvar *__unk_type_kind 0x00000938
    0x00000037 load *__unk_type_kind >|0| 0x00000036<
    0x00000038 add s32 4160, s32 384
    0x00000039 sub s32 576, s32 32
    0x0000003A call aCC "spider" (__unk_type_kind >|0| 0x00000037<, s32 >|0| 0x00000038<, s32 >|0| 0x00000039<, s32 2) __unk_type_kind
    0x0000003B call aVF "add" (*__unk_type_kind >|0| 0x00000035<, __unk_type_kind >|0| 0x0000003A<) void
    0x0000003C gvar *__unk_type_kind 0x0000095D
    0x0000003D gvar *__unk_type_kind 0x0000093A
    0x0000003E load *__unk_type_kind >|0| 0x0000003D<
    0x0000003F mul s32 4, s32 240
    0x00000040 add s32 512, s32 >|0| 0x0000003F<
    0x00000041 call aIC "swordfish" (__unk_type_kind >|0| 0x0000003E<, s32 >|0| 0x00000040<, s32 1024, s32 4, s32 240, bool true) __unk_type_kind
    0x00000042 call a0G "add" (*__unk_type_kind >|0| 0x0000003C<, __unk_type_kind >|0| 0x00000041<) void
    0x00000043 gvar *__unk_type_kind 0x0000095D
    0x00000044 gvar *__unk_type_kind 0x0000093A
    0x00000045 load *__unk_type_kind >|0| 0x00000044<
    0x00000046 add s32 2048, s32 512
    0x00000047 call aIC "swordfish" (__unk_type_kind >|0| 0x00000045<, s32 >|0| 0x00000046<, s32 896, s32 4, s32 270, bool false) __unk_type_kind
    0x00000048 call a1G "add" (*__unk_type_kind >|0| 0x00000043<, __unk_type_kind >|0| 0x00000047<) void
    0x00000049 gvar *__unk_type_kind 0x0000095D
    0x0000004A gvar *__unk_type_kind 0x0000093A
    0x0000004B load *__unk_type_kind >|0| 0x0000004A<
    0x0000004C add s32 2048, s32 512
    0x0000004D add s32 >|0| 0x0000004C<, s32 1024
    0x0000004E call aIC "swordfish" (__unk_type_kind >|0| 0x0000004B<, s32 >|0| 0x0000004D<, s32 1024, s32 4, s32 240, bool true) __unk_type_kind
    0x0000004F call a2G "add" (*__unk_type_kind >|0| 0x00000049<, __unk_type_kind >|0| 0x0000004E<) void
    0x00000050 gvar *__unk_type_kind 0x0000095D
    0x00000051 gvar *__unk_type_kind 0x0000093A
    0x00000052 load *__unk_type_kind >|0| 0x00000051<
    0x00000053 call aIC "swordfish" (__unk_type_kind >|0| 0x00000052<, s32 4160, s32 1024, s32 4, s32 90, bool false) __unk_type_kind
    0x00000054 call a3G "add" (*__unk_type_kind >|0| 0x00000050<, __unk_type_kind >|0| 0x00000053<) void
    0x00000055 gvar *__unk_type_kind 0x0000095D
    0x00000056 gvar *__unk_type_kind 0x0000093A
    0x00000057 load *__unk_type_kind >|0| 0x00000056<
    0x00000058 sub s32 4160, s32 64
    0x00000059 mul s32 90, s32 4
    0x0000005A add s32 >|0| 0x00000058<, s32 >|0| 0x00000059<
    0x0000005B call aIC "swordfish" (__unk_type_kind >|0| 0x00000057<, s32 >|0| 0x0000005A<, s32 1088, s32 4, s32 90, bool true) __unk_type_kind
    0x0000005C call a4G "add" (*__unk_type_kind >|0| 0x00000055<, __unk_type_kind >|0| 0x0000005B<) void
    0x0000005D gvar *__unk_type_kind 0x0000095D
    0x0000005E gvar *__unk_type_kind 0x0000093A
    0x0000005F load *__unk_type_kind >|0| 0x0000005E<
    0x00000060 add s32 4160, s32 64
    0x00000061 call aIC "swordfish" (__unk_type_kind >|0| 0x0000005F<, s32 >|0| 0x00000060<, s32 1184, s32 4, s32 90, bool false) __unk_type_kind
    0x00000062 call a5G "add" (*__unk_type_kind >|0| 0x0000005D<, __unk_type_kind >|0| 0x00000061<) void
    0x00000063 gvar *__unk_type_kind 0x0000095E
    0x00000064 add s32 1024, s32 256
    0x00000065 sub s32 480, s32 64
    0x00000066 call a1C "itemSpawn" (u64 2, s32 >|0| 0x00000064<, s32 >|0| 0x00000065<, s32 64, s32 64) __unk_type_kind
    0x00000067 call a6G "add" (*__unk_type_kind >|0| 0x00000063<, __unk_type_kind >|0| 0x00000066<) void
    0x00000068 gvar *__unk_type_kind 0x0000095F
    0x00000069 gvar *__unk_type_kind 0x00000945
    0x0000006A memb *__unk_type_kind >|0| 0x00000069<, 0
    0x0000006B load *s32 >|0| 0x0000006A<
    0x0000006C sub s32 >|0| 0x0000006B<, s32 32
    0x0000006D gvar *__unk_type_kind 0x00000945
    0x0000006E memb *__unk_type_kind >|0| 0x0000006D<, 1
    0x0000006F load *s32 >|0| 0x0000006E<
    0x00000070 sub s32 >|0| 0x0000006F<, s32 64
    0x00000071 call azB "portal" (s32 >|0| 0x0000006C<, s32 >|0| 0x00000070<) __unk_type_kind
    0x00000072 call a7G "set" (*__unk_type_kind >|0| 0x00000068<, __unk_type_kind >|0| 0x00000071<) void
    0x00000073 gvar *__unk_type_kind 0x00000960
    0x00000074 sub s32 1280, s32 128
    0x00000075 call azB "portal" (s32 4864, s32 >|0| 0x00000074<) __unk_type_kind
    0x00000076 call aDF "set" (*__unk_type_kind >|0| 0x00000073<, __unk_type_kind >|0| 0x00000075<) void
    0x00000077 ret
fn gotoScene4 aXC -> void
    {1 BBs, 89 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 4
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 5120.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 512, s32 544, s32 256, s32 384, s32 0) void
    0x0000000B call ahC "createPlatform" (s32 1088, s32 480, s32 256, s32 256, s32 0) void
    0x0000000C call ahC "createPlatform" (s32 1856, s32 384, s32 256, s32 768, s32 2) void
    0x0000000D call ahC "createPlatform" (s32 2752, s32 320, s32 256, s32 832, s32 1) void
    0x0000000E call ahC "createPlatform" (s32 3584, s32 512, s32 256, s32 640, s32 8) void
    0x0000000F call ahC "createPlatform" (s32 4352, s32 384, s32 576, s32 704, s32 0) void
    0x00000010 gvar *__unk_type_kind 0x0000095A
    0x00000011 call axB "lake" (s32 0, s32 768, s32 5120, s32 512) __unk_type_kind
    0x00000012 call asF "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000011<) void
    0x00000013 gvar *__unk_type_kind 0x0000095B
    0x00000014 add s32 512, s32 256
    0x00000015 call ayB "bridge" (s32 >|0| 0x00000014<, s32 704, s32 128) __unk_type_kind
    0x00000016 call atF "add" (*__unk_type_kind >|0| 0x00000013<, __unk_type_kind >|0| 0x00000015<) void
    0x00000017 gvar *__unk_type_kind 0x0000095C
    0x00000018 gvar *__unk_type_kind 0x00000937
    0x00000019 load *__unk_type_kind >|0| 0x00000018<
    0x0000001A add s32 1856, s32 192
    0x0000001B sub s32 384, s32 32
    0x0000001C call aCC "spider" (__unk_type_kind >|0| 0x00000019<, s32 >|0| 0x0000001A<, s32 >|0| 0x0000001B<, s32 1) __unk_type_kind
    0x0000001D call aSF "add" (*__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x0000001C<) void
    0x0000001E gvar *__unk_type_kind 0x0000095C
    0x0000001F gvar *__unk_type_kind 0x00000937
    0x00000020 load *__unk_type_kind >|0| 0x0000001F<
    0x00000021 sub s32 320, s32 32
    0x00000022 call aCC "spider" (__unk_type_kind >|0| 0x00000020<, s32 2752, s32 >|0| 0x00000021<, s32 1) __unk_type_kind
    0x00000023 call aSF "add" (*__unk_type_kind >|0| 0x0000001E<, __unk_type_kind >|0| 0x00000022<) void
    0x00000024 gvar *__unk_type_kind 0x0000095C
    0x00000025 gvar *__unk_type_kind 0x00000937
    0x00000026 load *__unk_type_kind >|0| 0x00000025<
    0x00000027 add s32 2752, s32 128
    0x00000028 sub s32 320, s32 32
    0x00000029 call aCC "spider" (__unk_type_kind >|0| 0x00000026<, s32 >|0| 0x00000027<, s32 >|0| 0x00000028<, s32 1) __unk_type_kind
    0x0000002A call aSF "add" (*__unk_type_kind >|0| 0x00000024<, __unk_type_kind >|0| 0x00000029<) void
    0x0000002B gvar *__unk_type_kind 0x0000095C
    0x0000002C gvar *__unk_type_kind 0x00000937
    0x0000002D load *__unk_type_kind >|0| 0x0000002C<
    0x0000002E add s32 2752, s32 128
    0x0000002F sub s32 320, s32 32
    0x00000030 call aCC "spider" (__unk_type_kind >|0| 0x0000002D<, s32 >|0| 0x0000002E<, s32 >|0| 0x0000002F<, s32 1) __unk_type_kind
    0x00000031 call aSF "add" (*__unk_type_kind >|0| 0x0000002B<, __unk_type_kind >|0| 0x00000030<) void
    0x00000032 gvar *__unk_type_kind 0x0000095C
    0x00000033 gvar *__unk_type_kind 0x00000938
    0x00000034 load *__unk_type_kind >|0| 0x00000033<
    0x00000035 sub s32 512, s32 32
    0x00000036 call aCC "spider" (__unk_type_kind >|0| 0x00000034<, s32 3584, s32 >|0| 0x00000035<, s32 2) __unk_type_kind
    0x00000037 call aSF "add" (*__unk_type_kind >|0| 0x00000032<, __unk_type_kind >|0| 0x00000036<) void
    0x00000038 gvar *__unk_type_kind 0x0000095C
    0x00000039 gvar *__unk_type_kind 0x00000938
    0x0000003A load *__unk_type_kind >|0| 0x00000039<
    0x0000003B sub s32 384, s32 32
    0x0000003C call aCC "spider" (__unk_type_kind >|0| 0x0000003A<, s32 4352, s32 >|0| 0x0000003B<, s32 2) __unk_type_kind
    0x0000003D call aSF "add" (*__unk_type_kind >|0| 0x00000038<, __unk_type_kind >|0| 0x0000003C<) void
    0x0000003E gvar *__unk_type_kind 0x0000095C
    0x0000003F gvar *__unk_type_kind 0x00000938
    0x00000040 load *__unk_type_kind >|0| 0x0000003F<
    0x00000041 add s32 4352, s32 256
    0x00000042 sub s32 384, s32 32
    0x00000043 call aCC "spider" (__unk_type_kind >|0| 0x00000040<, s32 >|0| 0x00000041<, s32 >|0| 0x00000042<, s32 2) __unk_type_kind
    0x00000044 call aSF "add" (*__unk_type_kind >|0| 0x0000003E<, __unk_type_kind >|0| 0x00000043<) void
    0x00000045 gvar *__unk_type_kind 0x0000095E
    0x00000046 add s32 1088, s32 96
    0x00000047 sub s32 480, s32 64
    0x00000048 call a1C "itemSpawn" (u64 2, s32 >|0| 0x00000046<, s32 >|0| 0x00000047<, s32 64, s32 64) __unk_type_kind
    0x00000049 call auF "add" (*__unk_type_kind >|0| 0x00000045<, __unk_type_kind >|0| 0x00000048<) void
    0x0000004A gvar *__unk_type_kind 0x0000095F
    0x0000004B gvar *__unk_type_kind 0x00000945
    0x0000004C memb *__unk_type_kind >|0| 0x0000004B<, 0
    0x0000004D load *s32 >|0| 0x0000004C<
    0x0000004E sub s32 >|0| 0x0000004D<, s32 32
    0x0000004F gvar *__unk_type_kind 0x00000945
    0x00000050 memb *__unk_type_kind >|0| 0x0000004F<, 1
    0x00000051 load *s32 >|0| 0x00000050<
    0x00000052 sub s32 >|0| 0x00000051<, s32 64
    0x00000053 call azB "portal" (s32 >|0| 0x0000004E<, s32 >|0| 0x00000052<) __unk_type_kind
    0x00000054 call avF "set" (*__unk_type_kind >|0| 0x0000004A<, __unk_type_kind >|0| 0x00000053<) void
    0x00000055 gvar *__unk_type_kind 0x00000960
    0x00000056 call azB "portal" (s32 4736, s32 256) __unk_type_kind
    0x00000057 call awF "set" (*__unk_type_kind >|0| 0x00000055<, __unk_type_kind >|0| 0x00000056<) void
    0x00000058 ret
fn gotoScene5 aYC -> void
    {1 BBs, 58 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 5
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 2560.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A add s32 256, s32 256
    0x0000000B call ahC "createPlatform" (s32 >|0| 0x0000000A<, s32 544, s32 256, s32 256, s32 0) void
    0x0000000C call ahC "createPlatform" (s32 64, s32 704, s32 256, s32 128, s32 2) void
    0x0000000D add s32 384, s32 32
    0x0000000E call ahC "createPlatform" (s32 1024, s32 >|0| 0x0000000D<, s32 640, s32 832, s32 1) void
    0x0000000F call ahC "createPlatform" (s32 2112, s32 576, s32 256, s32 320, s32 0) void
    0x00000010 gvar *__unk_type_kind 0x0000095A
    0x00000011 call axB "lake" (s32 0, s32 768, s32 2560, s32 512) __unk_type_kind
    0x00000012 call anF "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000011<) void
    0x00000013 gvar *__unk_type_kind 0x0000095B
    0x00000014 add s32 256, s32 64
    0x00000015 call ayB "bridge" (s32 >|0| 0x00000014<, s32 704, s32 192) __unk_type_kind
    0x00000016 call aoF "add" (*__unk_type_kind >|0| 0x00000013<, __unk_type_kind >|0| 0x00000015<) void
    0x00000017 gvar *__unk_type_kind 0x0000095D
    0x00000018 gvar *__unk_type_kind 0x0000093A
    0x00000019 load *__unk_type_kind >|0| 0x00000018<
    0x0000001A call aIC "swordfish" (__unk_type_kind >|0| 0x00000019<, s32 1792, s32 1024, s32 4, s32 90, bool false) __unk_type_kind
    0x0000001B call apF "add" (*__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x0000095E
    0x0000001D add s32 192, s32 32
    0x0000001E sub s32 704, s32 64
    0x0000001F call a1C "itemSpawn" (u64 1, s32 >|0| 0x0000001D<, s32 >|0| 0x0000001E<, s32 64, s32 64) __unk_type_kind
    0x00000020 call aqF "add" (*__unk_type_kind >|0| 0x0000001C<, __unk_type_kind >|0| 0x0000001F<) void
    0x00000021 gvar *__unk_type_kind 0x0000095F
    0x00000022 gvar *__unk_type_kind 0x00000945
    0x00000023 memb *__unk_type_kind >|0| 0x00000022<, 0
    0x00000024 load *s32 >|0| 0x00000023<
    0x00000025 sub s32 >|0| 0x00000024<, s32 32
    0x00000026 gvar *__unk_type_kind 0x00000945
    0x00000027 memb *__unk_type_kind >|0| 0x00000026<, 1
    0x00000028 load *s32 >|0| 0x00000027<
    0x00000029 sub s32 >|0| 0x00000028<, s32 64
    0x0000002A call azB "portal" (s32 >|0| 0x00000025<, s32 >|0| 0x00000029<) __unk_type_kind
    0x0000002B call aDF "set" (*__unk_type_kind >|0| 0x00000021<, __unk_type_kind >|0| 0x0000002A<) void
    0x0000002C gvar *__unk_type_kind 0x00000960
    0x0000002D add s32 1024, s32 320
    0x0000002E add s32 384, s32 32
    0x0000002F sub s32 >|0| 0x0000002E<, s32 128
    0x00000030 call azB "portal" (s32 >|0| 0x0000002D<, s32 >|0| 0x0000002F<) __unk_type_kind
    0x00000031 call aDF "set" (*__unk_type_kind >|0| 0x0000002C<, __unk_type_kind >|0| 0x00000030<) void
    0x00000032 gvar *bool 0x00000961
    0x00000033 store *bool >|0| 0x00000032<, bool true
    0x00000034 gvar *__unk_type_kind 0x00000962
    0x00000035 add s32 2112, s32 128
    0x00000036 sub s32 576, s32 64
    0x00000037 call a2C "portalEnabler" (s32 >|0| 0x00000035<, s32 >|0| 0x00000036<, s32 64, s32 64) __unk_type_kind
    0x00000038 call arF "set" (*__unk_type_kind >|0| 0x00000034<, __unk_type_kind >|0| 0x00000037<) void
    0x00000039 ret
fn gotoScene6 aZC -> void
    {1 BBs, 131 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 6
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 5120.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 256, s32 544, s32 512, s32 384, s32 1) void
    0x0000000B call ahC "createPlatform" (s32 1088, s32 480, s32 256, s32 256, s32 0) void
    0x0000000C call ahC "createPlatform" (s32 1792, s32 480, s32 320, s32 256, s32 2) void
    0x0000000D call ahC "createPlatform" (s32 2496, s32 480, s32 320, s32 256, s32 1) void
    0x0000000E call ahC "createPlatform" (s32 2976, s32 352, s32 768, s32 256, s32 12) void
    0x0000000F call ahC "createPlatform" (s32 4224, s32 384, s32 704, s32 256, s32 2) void
    0x00000010 gvar *__unk_type_kind 0x0000095A
    0x00000011 call axB "lake" (s32 0, s32 768, s32 5120, s32 512) __unk_type_kind
    0x00000012 call akF "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000011<) void
    0x00000013 gvar *__unk_type_kind 0x0000095B
    0x00000014 add s32 512, s32 256
    0x00000015 call ayB "bridge" (s32 >|0| 0x00000014<, s32 704, s32 128) __unk_type_kind
    0x00000016 call alF "add" (*__unk_type_kind >|0| 0x00000013<, __unk_type_kind >|0| 0x00000015<) void
    0x00000017 gvar *__unk_type_kind 0x0000095C
    0x00000018 gvar *__unk_type_kind 0x00000937
    0x00000019 load *__unk_type_kind >|0| 0x00000018<
    0x0000001A sub s32 480, s32 32
    0x0000001B call aCC "spider" (__unk_type_kind >|0| 0x00000019<, s32 1792, s32 >|0| 0x0000001A<, s32 1) __unk_type_kind
    0x0000001C call aOF "add" (*__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x0000001B<) void
    0x0000001D gvar *__unk_type_kind 0x0000095C
    0x0000001E gvar *__unk_type_kind 0x00000937
    0x0000001F load *__unk_type_kind >|0| 0x0000001E<
    0x00000020 add s32 1792, s32 128
    0x00000021 sub s32 480, s32 32
    0x00000022 call aCC "spider" (__unk_type_kind >|0| 0x0000001F<, s32 >|0| 0x00000020<, s32 >|0| 0x00000021<, s32 1) __unk_type_kind
    0x00000023 call aOF "add" (*__unk_type_kind >|0| 0x0000001D<, __unk_type_kind >|0| 0x00000022<) void
    0x00000024 gvar *__unk_type_kind 0x0000095C
    0x00000025 gvar *__unk_type_kind 0x00000937
    0x00000026 load *__unk_type_kind >|0| 0x00000025<
    0x00000027 add s32 1792, s32 256
    0x00000028 sub s32 480, s32 32
    0x00000029 call aCC "spider" (__unk_type_kind >|0| 0x00000026<, s32 >|0| 0x00000027<, s32 >|0| 0x00000028<, s32 1) __unk_type_kind
    0x0000002A call aOF "add" (*__unk_type_kind >|0| 0x00000024<, __unk_type_kind >|0| 0x00000029<) void
    0x0000002B gvar *__unk_type_kind 0x0000095C
    0x0000002C gvar *__unk_type_kind 0x00000937
    0x0000002D load *__unk_type_kind >|0| 0x0000002C<
    0x0000002E sub s32 480, s32 32
    0x0000002F call aCC "spider" (__unk_type_kind >|0| 0x0000002D<, s32 2496, s32 >|0| 0x0000002E<, s32 1) __unk_type_kind
    0x00000030 call aOF "add" (*__unk_type_kind >|0| 0x0000002B<, __unk_type_kind >|0| 0x0000002F<) void
    0x00000031 gvar *__unk_type_kind 0x0000095C
    0x00000032 gvar *__unk_type_kind 0x00000937
    0x00000033 load *__unk_type_kind >|0| 0x00000032<
    0x00000034 add s32 2496, s32 128
    0x00000035 sub s32 480, s32 32
    0x00000036 call aCC "spider" (__unk_type_kind >|0| 0x00000033<, s32 >|0| 0x00000034<, s32 >|0| 0x00000035<, s32 1) __unk_type_kind
    0x00000037 call aOF "add" (*__unk_type_kind >|0| 0x00000031<, __unk_type_kind >|0| 0x00000036<) void
    0x00000038 gvar *__unk_type_kind 0x0000095C
    0x00000039 gvar *__unk_type_kind 0x00000937
    0x0000003A load *__unk_type_kind >|0| 0x00000039<
    0x0000003B add s32 2496, s32 256
    0x0000003C sub s32 480, s32 32
    0x0000003D call aCC "spider" (__unk_type_kind >|0| 0x0000003A<, s32 >|0| 0x0000003B<, s32 >|0| 0x0000003C<, s32 1) __unk_type_kind
    0x0000003E call aOF "add" (*__unk_type_kind >|0| 0x00000038<, __unk_type_kind >|0| 0x0000003D<) void
    0x0000003F gvar *__unk_type_kind 0x0000095C
    0x00000040 gvar *__unk_type_kind 0x00000937
    0x00000041 load *__unk_type_kind >|0| 0x00000040<
    0x00000042 sub s32 352, s32 32
    0x00000043 call aCC "spider" (__unk_type_kind >|0| 0x00000041<, s32 2976, s32 >|0| 0x00000042<, s32 1) __unk_type_kind
    0x00000044 call aOF "add" (*__unk_type_kind >|0| 0x0000003F<, __unk_type_kind >|0| 0x00000043<) void
    0x00000045 gvar *__unk_type_kind 0x0000095C
    0x00000046 gvar *__unk_type_kind 0x00000937
    0x00000047 load *__unk_type_kind >|0| 0x00000046<
    0x00000048 add s32 2976, s32 128
    0x00000049 sub s32 352, s32 32
    0x0000004A call aCC "spider" (__unk_type_kind >|0| 0x00000047<, s32 >|0| 0x00000048<, s32 >|0| 0x00000049<, s32 1) __unk_type_kind
    0x0000004B call aOF "add" (*__unk_type_kind >|0| 0x00000045<, __unk_type_kind >|0| 0x0000004A<) void
    0x0000004C gvar *__unk_type_kind 0x0000095C
    0x0000004D gvar *__unk_type_kind 0x00000937
    0x0000004E load *__unk_type_kind >|0| 0x0000004D<
    0x0000004F add s32 2976, s32 256
    0x00000050 sub s32 352, s32 32
    0x00000051 call aDC "spider" (__unk_type_kind >|0| 0x0000004E<, s32 >|0| 0x0000004F<, s32 >|0| 0x00000050<, s32 1, bool true) __unk_type_kind
    0x00000052 call aOF "add" (*__unk_type_kind >|0| 0x0000004C<, __unk_type_kind >|0| 0x00000051<) void
    0x00000053 gvar *__unk_type_kind 0x0000095C
    0x00000054 gvar *__unk_type_kind 0x00000937
    0x00000055 load *__unk_type_kind >|0| 0x00000054<
    0x00000056 add s32 2976, s32 384
    0x00000057 sub s32 352, s32 32
    0x00000058 call aCC "spider" (__unk_type_kind >|0| 0x00000055<, s32 >|0| 0x00000056<, s32 >|0| 0x00000057<, s32 1) __unk_type_kind
    0x00000059 call aOF "add" (*__unk_type_kind >|0| 0x00000053<, __unk_type_kind >|0| 0x00000058<) void
    0x0000005A gvar *__unk_type_kind 0x0000095C
    0x0000005B gvar *__unk_type_kind 0x00000937
    0x0000005C load *__unk_type_kind >|0| 0x0000005B<
    0x0000005D add s32 2976, s32 512
    0x0000005E sub s32 352, s32 32
    0x0000005F call aCC "spider" (__unk_type_kind >|0| 0x0000005C<, s32 >|0| 0x0000005D<, s32 >|0| 0x0000005E<, s32 1) __unk_type_kind
    0x00000060 call aOF "add" (*__unk_type_kind >|0| 0x0000005A<, __unk_type_kind >|0| 0x0000005F<) void
    0x00000061 gvar *__unk_type_kind 0x0000095C
    0x00000062 gvar *__unk_type_kind 0x00000937
    0x00000063 load *__unk_type_kind >|0| 0x00000062<
    0x00000064 add s32 2976, s32 640
    0x00000065 sub s32 352, s32 32
    0x00000066 call aDC "spider" (__unk_type_kind >|0| 0x00000063<, s32 >|0| 0x00000064<, s32 >|0| 0x00000065<, s32 1, bool true) __unk_type_kind
    0x00000067 call aOF "add" (*__unk_type_kind >|0| 0x00000061<, __unk_type_kind >|0| 0x00000066<) void
    0x00000068 gvar *__unk_type_kind 0x0000095C
    0x00000069 gvar *__unk_type_kind 0x00000937
    0x0000006A load *__unk_type_kind >|0| 0x00000069<
    0x0000006B add s32 2976, s32 768
    0x0000006C sub s32 352, s32 32
    0x0000006D call aCC "spider" (__unk_type_kind >|0| 0x0000006A<, s32 >|0| 0x0000006B<, s32 >|0| 0x0000006C<, s32 1) __unk_type_kind
    0x0000006E call aOF "add" (*__unk_type_kind >|0| 0x00000068<, __unk_type_kind >|0| 0x0000006D<) void
    0x0000006F gvar *__unk_type_kind 0x0000095E
    0x00000070 add s32 1088, s32 96
    0x00000071 sub s32 480, s32 64
    0x00000072 call a1C "itemSpawn" (u64 3, s32 >|0| 0x00000070<, s32 >|0| 0x00000071<, s32 64, s32 64) __unk_type_kind
    0x00000073 call amF "add" (*__unk_type_kind >|0| 0x0000006F<, __unk_type_kind >|0| 0x00000072<) void
    0x00000074 gvar *__unk_type_kind 0x0000095F
    0x00000075 gvar *__unk_type_kind 0x00000945
    0x00000076 memb *__unk_type_kind >|0| 0x00000075<, 0
    0x00000077 load *s32 >|0| 0x00000076<
    0x00000078 sub s32 >|0| 0x00000077<, s32 32
    0x00000079 gvar *__unk_type_kind 0x00000945
    0x0000007A memb *__unk_type_kind >|0| 0x00000079<, 1
    0x0000007B load *s32 >|0| 0x0000007A<
    0x0000007C sub s32 >|0| 0x0000007B<, s32 64
    0x0000007D call azB "portal" (s32 >|0| 0x00000078<, s32 >|0| 0x0000007C<) __unk_type_kind
    0x0000007E call aDF "set" (*__unk_type_kind >|0| 0x00000074<, __unk_type_kind >|0| 0x0000007D<) void
    0x0000007F gvar *__unk_type_kind 0x00000960
    0x00000080 call azB "portal" (s32 4736, s32 256) __unk_type_kind
    0x00000081 call aDF "set" (*__unk_type_kind >|0| 0x0000007F<, __unk_type_kind >|0| 0x00000080<) void
    0x00000082 ret
fn gotoScene7 aaC -> void
    {1 BBs, 146 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 7
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 5120.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 480, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 448, s32 480, s32 320, s32 384, s32 7) void
    0x0000000B call ahC "createPlatform" (s32 1088, s32 480, s32 256, s32 256, s32 0) void
    0x0000000C call ahC "createPlatform" (s32 1792, s32 480, s32 320, s32 512, s32 6) void
    0x0000000D call ahC "createPlatform" (s32 2496, s32 480, s32 320, s32 256, s32 1) void
    0x0000000E call ahC "createPlatform" (s32 2976, s32 352, s32 320, s32 512, s32 6) void
    0x0000000F call ahC "createPlatform" (s32 3456, s32 512, s32 640, s32 512, s32 12) void
    0x00000010 call ahC "createPlatform" (s32 4224, s32 384, s32 704, s32 256, s32 6) void
    0x00000011 gvar *__unk_type_kind 0x0000095A
    0x00000012 call axB "lake" (s32 0, s32 768, s32 5120, s32 512) __unk_type_kind
    0x00000013 call acF "add" (*__unk_type_kind >|0| 0x00000011<, __unk_type_kind >|0| 0x00000012<) void
    0x00000014 gvar *__unk_type_kind 0x0000095B
    0x00000015 add s32 512, s32 256
    0x00000016 call ayB "bridge" (s32 >|0| 0x00000015<, s32 640, s32 128) __unk_type_kind
    0x00000017 call aIF "add" (*__unk_type_kind >|0| 0x00000014<, __unk_type_kind >|0| 0x00000016<) void
    0x00000018 gvar *__unk_type_kind 0x0000095C
    0x00000019 gvar *__unk_type_kind 0x00000938
    0x0000001A load *__unk_type_kind >|0| 0x00000019<
    0x0000001B sub s32 480, s32 32
    0x0000001C call aCC "spider" (__unk_type_kind >|0| 0x0000001A<, s32 1792, s32 >|0| 0x0000001B<, s32 2) __unk_type_kind
    0x0000001D call adF "add" (*__unk_type_kind >|0| 0x00000018<, __unk_type_kind >|0| 0x0000001C<) void
    0x0000001E gvar *__unk_type_kind 0x0000095C
    0x0000001F gvar *__unk_type_kind 0x00000938
    0x00000020 load *__unk_type_kind >|0| 0x0000001F<
    0x00000021 add s32 1792, s32 128
    0x00000022 sub s32 480, s32 32
    0x00000023 call aDC "spider" (__unk_type_kind >|0| 0x00000020<, s32 >|0| 0x00000021<, s32 >|0| 0x00000022<, s32 2, bool true) __unk_type_kind
    0x00000024 call aeF "add" (*__unk_type_kind >|0| 0x0000001E<, __unk_type_kind >|0| 0x00000023<) void
    0x00000025 gvar *__unk_type_kind 0x0000095C
    0x00000026 gvar *__unk_type_kind 0x00000938
    0x00000027 load *__unk_type_kind >|0| 0x00000026<
    0x00000028 add s32 1792, s32 128
    0x00000029 sub s32 480, s32 32
    0x0000002A call aCC "spider" (__unk_type_kind >|0| 0x00000027<, s32 >|0| 0x00000028<, s32 >|0| 0x00000029<, s32 2) __unk_type_kind
    0x0000002B call afF "add" (*__unk_type_kind >|0| 0x00000025<, __unk_type_kind >|0| 0x0000002A<) void
    0x0000002C gvar *__unk_type_kind 0x0000095C
    0x0000002D gvar *__unk_type_kind 0x00000938
    0x0000002E load *__unk_type_kind >|0| 0x0000002D<
    0x0000002F add s32 1792, s32 256
    0x00000030 sub s32 480, s32 32
    0x00000031 call aDC "spider" (__unk_type_kind >|0| 0x0000002E<, s32 >|0| 0x0000002F<, s32 >|0| 0x00000030<, s32 2, bool true) __unk_type_kind
    0x00000032 call agF "add" (*__unk_type_kind >|0| 0x0000002C<, __unk_type_kind >|0| 0x00000031<) void
    0x00000033 gvar *__unk_type_kind 0x0000095C
    0x00000034 gvar *__unk_type_kind 0x00000937
    0x00000035 load *__unk_type_kind >|0| 0x00000034<
    0x00000036 sub s32 480, s32 32
    0x00000037 call aCC "spider" (__unk_type_kind >|0| 0x00000035<, s32 2496, s32 >|0| 0x00000036<, s32 1) __unk_type_kind
    0x00000038 call ahF "add" (*__unk_type_kind >|0| 0x00000033<, __unk_type_kind >|0| 0x00000037<) void
    0x00000039 gvar *__unk_type_kind 0x0000095C
    0x0000003A gvar *__unk_type_kind 0x00000937
    0x0000003B load *__unk_type_kind >|0| 0x0000003A<
    0x0000003C add s32 2496, s32 128
    0x0000003D sub s32 480, s32 32
    0x0000003E call aCC "spider" (__unk_type_kind >|0| 0x0000003B<, s32 >|0| 0x0000003C<, s32 >|0| 0x0000003D<, s32 1) __unk_type_kind
    0x0000003F call aMF "add" (*__unk_type_kind >|0| 0x00000039<, __unk_type_kind >|0| 0x0000003E<) void
    0x00000040 gvar *__unk_type_kind 0x0000095C
    0x00000041 gvar *__unk_type_kind 0x00000937
    0x00000042 load *__unk_type_kind >|0| 0x00000041<
    0x00000043 add s32 2496, s32 256
    0x00000044 sub s32 480, s32 32
    0x00000045 call aCC "spider" (__unk_type_kind >|0| 0x00000042<, s32 >|0| 0x00000043<, s32 >|0| 0x00000044<, s32 1) __unk_type_kind
    0x00000046 call aMF "add" (*__unk_type_kind >|0| 0x00000040<, __unk_type_kind >|0| 0x00000045<) void
    0x00000047 gvar *__unk_type_kind 0x0000095C
    0x00000048 gvar *__unk_type_kind 0x00000937
    0x00000049 load *__unk_type_kind >|0| 0x00000048<
    0x0000004A add s32 2496, s32 128
    0x0000004B sub s32 480, s32 32
    0x0000004C call aDC "spider" (__unk_type_kind >|0| 0x00000049<, s32 >|0| 0x0000004A<, s32 >|0| 0x0000004B<, s32 1, bool true) __unk_type_kind
    0x0000004D call aMF "add" (*__unk_type_kind >|0| 0x00000047<, __unk_type_kind >|0| 0x0000004C<) void
    0x0000004E gvar *__unk_type_kind 0x0000095C
    0x0000004F gvar *__unk_type_kind 0x00000937
    0x00000050 load *__unk_type_kind >|0| 0x0000004F<
    0x00000051 add s32 2496, s32 256
    0x00000052 sub s32 480, s32 32
    0x00000053 call aDC "spider" (__unk_type_kind >|0| 0x00000050<, s32 >|0| 0x00000051<, s32 >|0| 0x00000052<, s32 1, bool true) __unk_type_kind
    0x00000054 call aMF "add" (*__unk_type_kind >|0| 0x0000004E<, __unk_type_kind >|0| 0x00000053<) void
    0x00000055 gvar *__unk_type_kind 0x0000095C
    0x00000056 gvar *__unk_type_kind 0x00000938
    0x00000057 load *__unk_type_kind >|0| 0x00000056<
    0x00000058 sub s32 512, s32 32
    0x00000059 call aCC "spider" (__unk_type_kind >|0| 0x00000057<, s32 3456, s32 >|0| 0x00000058<, s32 2) __unk_type_kind
    0x0000005A call aMF "add" (*__unk_type_kind >|0| 0x00000055<, __unk_type_kind >|0| 0x00000059<) void
    0x0000005B gvar *__unk_type_kind 0x0000095C
    0x0000005C gvar *__unk_type_kind 0x00000937
    0x0000005D load *__unk_type_kind >|0| 0x0000005C<
    0x0000005E add s32 3456, s32 128
    0x0000005F sub s32 512, s32 32
    0x00000060 call aDC "spider" (__unk_type_kind >|0| 0x0000005D<, s32 >|0| 0x0000005E<, s32 >|0| 0x0000005F<, s32 1, bool true) __unk_type_kind
    0x00000061 call aMF "add" (*__unk_type_kind >|0| 0x0000005B<, __unk_type_kind >|0| 0x00000060<) void
    0x00000062 gvar *__unk_type_kind 0x0000095C
    0x00000063 gvar *__unk_type_kind 0x00000937
    0x00000064 load *__unk_type_kind >|0| 0x00000063<
    0x00000065 add s32 3456, s32 480
    0x00000066 sub s32 512, s32 32
    0x00000067 call aCC "spider" (__unk_type_kind >|0| 0x00000064<, s32 >|0| 0x00000065<, s32 >|0| 0x00000066<, s32 1) __unk_type_kind
    0x00000068 call aMF "add" (*__unk_type_kind >|0| 0x00000062<, __unk_type_kind >|0| 0x00000067<) void
    0x00000069 gvar *__unk_type_kind 0x0000095C
    0x0000006A gvar *__unk_type_kind 0x00000938
    0x0000006B load *__unk_type_kind >|0| 0x0000006A<
    0x0000006C add s32 3456, s32 512
    0x0000006D sub s32 512, s32 32
    0x0000006E call aDC "spider" (__unk_type_kind >|0| 0x0000006B<, s32 >|0| 0x0000006C<, s32 >|0| 0x0000006D<, s32 2, bool true) __unk_type_kind
    0x0000006F call aMF "add" (*__unk_type_kind >|0| 0x00000069<, __unk_type_kind >|0| 0x0000006E<) void
    0x00000070 gvar *__unk_type_kind 0x0000095C
    0x00000071 gvar *__unk_type_kind 0x00000937
    0x00000072 load *__unk_type_kind >|0| 0x00000071<
    0x00000073 add s32 3456, s32 128
    0x00000074 sub s32 512, s32 32
    0x00000075 call aCC "spider" (__unk_type_kind >|0| 0x00000072<, s32 >|0| 0x00000073<, s32 >|0| 0x00000074<, s32 1) __unk_type_kind
    0x00000076 call aMF "add" (*__unk_type_kind >|0| 0x00000070<, __unk_type_kind >|0| 0x00000075<) void
    0x00000077 gvar *__unk_type_kind 0x0000095C
    0x00000078 gvar *__unk_type_kind 0x00000938
    0x00000079 load *__unk_type_kind >|0| 0x00000078<
    0x0000007A add s32 3456, s32 384
    0x0000007B sub s32 512, s32 32
    0x0000007C call aDC "spider" (__unk_type_kind >|0| 0x00000079<, s32 >|0| 0x0000007A<, s32 >|0| 0x0000007B<, s32 2, bool true) __unk_type_kind
    0x0000007D call aMF "add" (*__unk_type_kind >|0| 0x00000077<, __unk_type_kind >|0| 0x0000007C<) void
    0x0000007E gvar *__unk_type_kind 0x0000095E
    0x0000007F add s32 1088, s32 96
    0x00000080 sub s32 480, s32 64
    0x00000081 call a1C "itemSpawn" (u64 4, s32 >|0| 0x0000007F<, s32 >|0| 0x00000080<, s32 64, s32 64) __unk_type_kind
    0x00000082 call aiF "add" (*__unk_type_kind >|0| 0x0000007E<, __unk_type_kind >|0| 0x00000081<) void
    0x00000083 gvar *__unk_type_kind 0x0000095F
    0x00000084 gvar *__unk_type_kind 0x00000945
    0x00000085 memb *__unk_type_kind >|0| 0x00000084<, 0
    0x00000086 load *s32 >|0| 0x00000085<
    0x00000087 sub s32 >|0| 0x00000086<, s32 32
    0x00000088 gvar *__unk_type_kind 0x00000945
    0x00000089 memb *__unk_type_kind >|0| 0x00000088<, 1
    0x0000008A load *s32 >|0| 0x00000089<
    0x0000008B sub s32 >|0| 0x0000008A<, s32 64
    0x0000008C call azB "portal" (s32 >|0| 0x00000087<, s32 >|0| 0x0000008B<) __unk_type_kind
    0x0000008D call ajF "set" (*__unk_type_kind >|0| 0x00000083<, __unk_type_kind >|0| 0x0000008C<) void
    0x0000008E gvar *__unk_type_kind 0x00000960
    0x0000008F call azB "portal" (s32 4736, s32 256) __unk_type_kind
    0x00000090 call aDF "set" (*__unk_type_kind >|0| 0x0000008E<, __unk_type_kind >|0| 0x0000008F<) void
    0x00000091 ret
fn gotoScene8 abC -> void
    {1 BBs, 139 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *__unk_type_kind 0x00000977
    0x00000002 gvar **__unk_type_kind 0x00000975
    0x00000003 store **__unk_type_kind >|0| 0x00000002<, *__unk_type_kind >|0| 0x00000001<
    0x00000004 gvar *s32 0x00000957
    0x00000005 store *s32 >|0| 0x00000004<, s32 8
    0x00000006 gvar *f 0x00000958
    0x00000007 store *f >|0| 0x00000006<, f 5120.000000
    0x00000008 gvar *__unk_type_kind 0x00000945
    0x00000009 add s32 4736, s32 32
    0x0000000A add s32 256, s32 64
    0x0000000B call acB "create" (*__unk_type_kind >|0| 0x00000008<, s32 >|0| 0x00000009<, s32 >|0| 0x0000000A<) void
    0x0000000C call aSC "sceneDefaultShadows" () void
    0x0000000D call ahC "createPlatform" (s32 448, s32 480, s32 320, s32 384, s32 0) void
    0x0000000E call ahC "createPlatform" (s32 1088, s32 480, s32 256, s32 256, s32 0) void
    0x0000000F call ahC "createPlatform" (s32 1792, s32 480, s32 320, s32 512, s32 0) void
    0x00000010 call ahC "createPlatform" (s32 2496, s32 480, s32 320, s32 256, s32 0) void
    0x00000011 call ahC "createPlatform" (s32 2976, s32 352, s32 320, s32 512, s32 0) void
    0x00000012 call ahC "createPlatform" (s32 3456, s32 512, s32 640, s32 512, s32 0) void
    0x00000013 call ahC "createPlatform" (s32 4224, s32 384, s32 704, s32 256, s32 0) void
    0x00000014 gvar *__unk_type_kind 0x0000095A
    0x00000015 call axB "lake" (s32 0, s32 768, s32 5120, s32 512) __unk_type_kind
    0x00000016 call aLF "add" (*__unk_type_kind >|0| 0x00000014<, __unk_type_kind >|0| 0x00000015<) void
    0x00000017 gvar *__unk_type_kind 0x0000095B
    0x00000018 add s32 512, s32 256
    0x00000019 call ayB "bridge" (s32 >|0| 0x00000018<, s32 640, s32 128) __unk_type_kind
    0x0000001A call a9F "add" (*__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x00000019<) void
    0x0000001B gvar *__unk_type_kind 0x0000095C
    0x0000001C gvar *__unk_type_kind 0x00000939
    0x0000001D load *__unk_type_kind >|0| 0x0000001C<
    0x0000001E sub s32 480, s32 32
    0x0000001F call aCC "spider" (__unk_type_kind >|0| 0x0000001D<, s32 1792, s32 >|0| 0x0000001E<, s32 2) __unk_type_kind
    0x00000020 call aMF "add" (*__unk_type_kind >|0| 0x0000001B<, __unk_type_kind >|0| 0x0000001F<) void
    0x00000021 gvar *__unk_type_kind 0x0000095C
    0x00000022 gvar *__unk_type_kind 0x00000939
    0x00000023 load *__unk_type_kind >|0| 0x00000022<
    0x00000024 add s32 1792, s32 128
    0x00000025 sub s32 480, s32 32
    0x00000026 call aDC "spider" (__unk_type_kind >|0| 0x00000023<, s32 >|0| 0x00000024<, s32 >|0| 0x00000025<, s32 2, bool true) __unk_type_kind
    0x00000027 call aNF "add" (*__unk_type_kind >|0| 0x00000021<, __unk_type_kind >|0| 0x00000026<) void
    0x00000028 gvar *__unk_type_kind 0x0000095C
    0x00000029 gvar *__unk_type_kind 0x00000939
    0x0000002A load *__unk_type_kind >|0| 0x00000029<
    0x0000002B add s32 1792, s32 128
    0x0000002C sub s32 480, s32 32
    0x0000002D call aCC "spider" (__unk_type_kind >|0| 0x0000002A<, s32 >|0| 0x0000002B<, s32 >|0| 0x0000002C<, s32 2) __unk_type_kind
    0x0000002E call aOF "add" (*__unk_type_kind >|0| 0x00000028<, __unk_type_kind >|0| 0x0000002D<) void
    0x0000002F gvar *__unk_type_kind 0x0000095C
    0x00000030 gvar *__unk_type_kind 0x00000939
    0x00000031 load *__unk_type_kind >|0| 0x00000030<
    0x00000032 add s32 1792, s32 256
    0x00000033 sub s32 480, s32 32
    0x00000034 call aDC "spider" (__unk_type_kind >|0| 0x00000031<, s32 >|0| 0x00000032<, s32 >|0| 0x00000033<, s32 2, bool true) __unk_type_kind
    0x00000035 call aPF "add" (*__unk_type_kind >|0| 0x0000002F<, __unk_type_kind >|0| 0x00000034<) void
    0x00000036 gvar *__unk_type_kind 0x0000095C
    0x00000037 gvar *__unk_type_kind 0x00000939
    0x00000038 load *__unk_type_kind >|0| 0x00000037<
    0x00000039 sub s32 480, s32 32
    0x0000003A call aCC "spider" (__unk_type_kind >|0| 0x00000038<, s32 2496, s32 >|0| 0x00000039<, s32 1) __unk_type_kind
    0x0000003B call aQF "add" (*__unk_type_kind >|0| 0x00000036<, __unk_type_kind >|0| 0x0000003A<) void
    0x0000003C gvar *__unk_type_kind 0x0000095C
    0x0000003D gvar *__unk_type_kind 0x00000939
    0x0000003E load *__unk_type_kind >|0| 0x0000003D<
    0x0000003F add s32 2496, s32 128
    0x00000040 sub s32 480, s32 32
    0x00000041 call aCC "spider" (__unk_type_kind >|0| 0x0000003E<, s32 >|0| 0x0000003F<, s32 >|0| 0x00000040<, s32 1) __unk_type_kind
    0x00000042 call aRF "add" (*__unk_type_kind >|0| 0x0000003C<, __unk_type_kind >|0| 0x00000041<) void
    0x00000043 gvar *__unk_type_kind 0x0000095C
    0x00000044 gvar *__unk_type_kind 0x00000939
    0x00000045 load *__unk_type_kind >|0| 0x00000044<
    0x00000046 add s32 2496, s32 256
    0x00000047 sub s32 480, s32 32
    0x00000048 call aCC "spider" (__unk_type_kind >|0| 0x00000045<, s32 >|0| 0x00000046<, s32 >|0| 0x00000047<, s32 1) __unk_type_kind
    0x00000049 call aSF "add" (*__unk_type_kind >|0| 0x00000043<, __unk_type_kind >|0| 0x00000048<) void
    0x0000004A gvar *__unk_type_kind 0x0000095C
    0x0000004B gvar *__unk_type_kind 0x00000939
    0x0000004C load *__unk_type_kind >|0| 0x0000004B<
    0x0000004D add s32 2496, s32 128
    0x0000004E sub s32 480, s32 32
    0x0000004F call aDC "spider" (__unk_type_kind >|0| 0x0000004C<, s32 >|0| 0x0000004D<, s32 >|0| 0x0000004E<, s32 1, bool true) __unk_type_kind
    0x00000050 call aTF "add" (*__unk_type_kind >|0| 0x0000004A<, __unk_type_kind >|0| 0x0000004F<) void
    0x00000051 gvar *__unk_type_kind 0x0000095C
    0x00000052 gvar *__unk_type_kind 0x00000939
    0x00000053 load *__unk_type_kind >|0| 0x00000052<
    0x00000054 add s32 2496, s32 256
    0x00000055 sub s32 480, s32 32
    0x00000056 call aDC "spider" (__unk_type_kind >|0| 0x00000053<, s32 >|0| 0x00000054<, s32 >|0| 0x00000055<, s32 1, bool true) __unk_type_kind
    0x00000057 call aUF "add" (*__unk_type_kind >|0| 0x00000051<, __unk_type_kind >|0| 0x00000056<) void
    0x00000058 gvar *__unk_type_kind 0x0000095C
    0x00000059 gvar *__unk_type_kind 0x00000939
    0x0000005A load *__unk_type_kind >|0| 0x00000059<
    0x0000005B sub s32 512, s32 32
    0x0000005C call aCC "spider" (__unk_type_kind >|0| 0x0000005A<, s32 3456, s32 >|0| 0x0000005B<, s32 2) __unk_type_kind
    0x0000005D call aVF "add" (*__unk_type_kind >|0| 0x00000058<, __unk_type_kind >|0| 0x0000005C<) void
    0x0000005E gvar *__unk_type_kind 0x0000095C
    0x0000005F gvar *__unk_type_kind 0x00000939
    0x00000060 load *__unk_type_kind >|0| 0x0000005F<
    0x00000061 add s32 3456, s32 128
    0x00000062 sub s32 512, s32 32
    0x00000063 call aDC "spider" (__unk_type_kind >|0| 0x00000060<, s32 >|0| 0x00000061<, s32 >|0| 0x00000062<, s32 1, bool true) __unk_type_kind
    0x00000064 call aWF "add" (*__unk_type_kind >|0| 0x0000005E<, __unk_type_kind >|0| 0x00000063<) void
    0x00000065 gvar *__unk_type_kind 0x0000095C
    0x00000066 gvar *__unk_type_kind 0x00000939
    0x00000067 load *__unk_type_kind >|0| 0x00000066<
    0x00000068 add s32 3456, s32 480
    0x00000069 sub s32 512, s32 32
    0x0000006A call aCC "spider" (__unk_type_kind >|0| 0x00000067<, s32 >|0| 0x00000068<, s32 >|0| 0x00000069<, s32 1) __unk_type_kind
    0x0000006B call aXF "add" (*__unk_type_kind >|0| 0x00000065<, __unk_type_kind >|0| 0x0000006A<) void
    0x0000006C gvar *__unk_type_kind 0x0000095C
    0x0000006D gvar *__unk_type_kind 0x00000939
    0x0000006E load *__unk_type_kind >|0| 0x0000006D<
    0x0000006F add s32 3456, s32 512
    0x00000070 sub s32 512, s32 32
    0x00000071 call aDC "spider" (__unk_type_kind >|0| 0x0000006E<, s32 >|0| 0x0000006F<, s32 >|0| 0x00000070<, s32 2, bool true) __unk_type_kind
    0x00000072 call aYF "add" (*__unk_type_kind >|0| 0x0000006C<, __unk_type_kind >|0| 0x00000071<) void
    0x00000073 gvar *__unk_type_kind 0x0000095C
    0x00000074 gvar *__unk_type_kind 0x00000939
    0x00000075 load *__unk_type_kind >|0| 0x00000074<
    0x00000076 add s32 3456, s32 128
    0x00000077 sub s32 512, s32 32
    0x00000078 call aCC "spider" (__unk_type_kind >|0| 0x00000075<, s32 >|0| 0x00000076<, s32 >|0| 0x00000077<, s32 1) __unk_type_kind
    0x00000079 call aZF "add" (*__unk_type_kind >|0| 0x00000073<, __unk_type_kind >|0| 0x00000078<) void
    0x0000007A gvar *__unk_type_kind 0x0000095C
    0x0000007B gvar *__unk_type_kind 0x00000939
    0x0000007C load *__unk_type_kind >|0| 0x0000007B<
    0x0000007D add s32 3456, s32 384
    0x0000007E sub s32 512, s32 32
    0x0000007F call aDC "spider" (__unk_type_kind >|0| 0x0000007C<, s32 >|0| 0x0000007D<, s32 >|0| 0x0000007E<, s32 2, bool true) __unk_type_kind
    0x00000080 call aaF "add" (*__unk_type_kind >|0| 0x0000007A<, __unk_type_kind >|0| 0x0000007F<) void
    0x00000081 gvar *__unk_type_kind 0x00000960
    0x00000082 sub s32 640, s32 96
    0x00000083 sub s32 480, s32 128
    0x00000084 call azB "portal" (s32 >|0| 0x00000082<, s32 >|0| 0x00000083<) __unk_type_kind
    0x00000085 call abF "set" (*__unk_type_kind >|0| 0x00000081<, __unk_type_kind >|0| 0x00000084<) void
    0x00000086 gvar *__unk_type_kind 0x0000095F
    0x00000087 call azB "portal" (s32 4736, s32 256) __unk_type_kind
    0x00000088 call aDF "set" (*__unk_type_kind >|0| 0x00000086<, __unk_type_kind >|0| 0x00000087<) void
    0x00000089 call a9D "updateCamera" () void
    0x0000008A ret
fn gotoThemeTestScreen acC -> void
    {1 BBs, 33 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 2004
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 2560.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 512, s32 544, s32 256, s32 256, s32 1) void
    0x0000000B call ahC "createPlatform" (s32 1088, s32 320, s32 256, s32 256, s32 7) void
    0x0000000C call ahC "createPlatform" (s32 64, s32 704, s32 256, s32 128, s32 2) void
    0x0000000D gvar *__unk_type_kind 0x0000095A
    0x0000000E call axB "lake" (s32 0, s32 768, s32 2560, s32 512) __unk_type_kind
    0x0000000F call aHF "add" (*__unk_type_kind >|0| 0x0000000D<, __unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x0000095B
    0x00000011 add s32 256, s32 64
    0x00000012 call ayB "bridge" (s32 >|0| 0x00000011<, s32 704, s32 192) __unk_type_kind
    0x00000013 call aIF "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000012<) void
    0x00000014 gvar *__unk_type_kind 0x0000095B
    0x00000015 add s32 256, s32 256
    0x00000016 add s32 >|0| 0x00000015<, s32 256
    0x00000017 add s32 >|0| 0x00000016<, s32 192
    0x00000018 add s32 320, s32 192
    0x00000019 call ayB "bridge" (s32 >|0| 0x00000017<, s32 >|0| 0x00000018<, s32 128) __unk_type_kind
    0x0000001A call aJF "add" (*__unk_type_kind >|0| 0x00000014<, __unk_type_kind >|0| 0x00000019<) void
    0x0000001B gvar *__unk_type_kind 0x00000960
    0x0000001C add s32 1920, s32 64
    0x0000001D sub s32 480, s32 128
    0x0000001E call azB "portal" (s32 >|0| 0x0000001C<, s32 >|0| 0x0000001D<) __unk_type_kind
    0x0000001F call aKF "set" (*__unk_type_kind >|0| 0x0000001B<, __unk_type_kind >|0| 0x0000001E<) void
    0x00000020 ret
fn gotoWinScreen adC -> void
    {1 BBs, 60 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aRC "scenePresets" () void
    0x00000001 gvar *s32 0x00000957
    0x00000002 store *s32 >|0| 0x00000001<, s32 2002
    0x00000003 gvar *f 0x00000958
    0x00000004 store *f >|0| 0x00000003<, f 2560.000000
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 sub s32 640, s32 64
    0x00000007 sub s32 544, s32 64
    0x00000008 call acB "create" (*__unk_type_kind >|0| 0x00000005<, s32 >|0| 0x00000006<, s32 >|0| 0x00000007<) void
    0x00000009 call aSC "sceneDefaultShadows" () void
    0x0000000A call ahC "createPlatform" (s32 128, s32 544, s32 896, s32 384, s32 1) void
    0x0000000B call ahC "createPlatform" (s32 1152, s32 256, s32 256, s32 384, s32 2) void
    0x0000000C call ahC "createPlatform" (s32 1920, s32 480, s32 256, s32 512, s32 7) void
    0x0000000D gvar *__unk_type_kind 0x0000095A
    0x0000000E call axB "lake" (s32 0, s32 768, s32 2560, s32 512) __unk_type_kind
    0x0000000F call a7F "add" (*__unk_type_kind >|0| 0x0000000D<, __unk_type_kind >|0| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x0000095B
    0x00000011 call ayB "bridge" (s32 1408, s32 448, s32 128) __unk_type_kind
    0x00000012 call a8F "add" (*__unk_type_kind >|0| 0x00000010<, __unk_type_kind >|0| 0x00000011<) void
    0x00000013 gvar *__unk_type_kind 0x0000095B
    0x00000014 add s32 1920, s32 256
    0x00000015 add s32 480, s32 32
    0x00000016 call ayB "bridge" (s32 >|0| 0x00000014<, s32 >|0| 0x00000015<, s32 256) __unk_type_kind
    0x00000017 call a9F "add" (*__unk_type_kind >|0| 0x00000013<, __unk_type_kind >|0| 0x00000016<) void
    0x00000018 gvar *__unk_type_kind 0x0000095B
    0x00000019 sub s32 1920, s32 128
    0x0000001A call ayB "bridge" (s32 >|0| 0x00000019<, s32 640, s32 128) __unk_type_kind
    0x0000001B call aAF "add" (*__unk_type_kind >|0| 0x00000018<, __unk_type_kind >|0| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x0000095E
    0x0000001D gvar *__unk_type_kind 0x00000945
    0x0000001E memb *__unk_type_kind >|0| 0x0000001D<, 0
    0x0000001F load *s32 >|0| 0x0000001E<
    0x00000020 gvar *__unk_type_kind 0x00000945
    0x00000021 memb *__unk_type_kind >|0| 0x00000020<, 1
    0x00000022 load *s32 >|0| 0x00000021<
    0x00000023 sub s32 >|0| 0x00000022<, s32 128
    0x00000024 call a1C "itemSpawn" (u64 2, s32 >|0| 0x0000001F<, s32 >|0| 0x00000023<, s32 64, s32 64) __unk_type_kind
    0x00000025 call aBF "add" (*__unk_type_kind >|0| 0x0000001C<, __unk_type_kind >|0| 0x00000024<) void
    0x00000026 gvar *__unk_type_kind 0x0000095E
    0x00000027 sub s32 544, s32 64
    0x00000028 call a1C "itemSpawn" (u64 3, s32 384, s32 >|0| 0x00000027<, s32 64, s32 64) __unk_type_kind
    0x00000029 call aCF "add" (*__unk_type_kind >|0| 0x00000026<, __unk_type_kind >|0| 0x00000028<) void
    0x0000002A gvar *__unk_type_kind 0x0000095E
    0x0000002B sub s32 544, s32 64
    0x0000002C call a1C "itemSpawn" (u64 4, s32 768, s32 >|0| 0x0000002B<, s32 64, s32 64) __unk_type_kind
    0x0000002D call aBF "add" (*__unk_type_kind >|0| 0x0000002A<, __unk_type_kind >|0| 0x0000002C<) void
    0x0000002E gvar *__unk_type_kind 0x0000095F
    0x0000002F gvar *__unk_type_kind 0x00000945
    0x00000030 memb *__unk_type_kind >|0| 0x0000002F<, 0
    0x00000031 load *s32 >|0| 0x00000030<
    0x00000032 sub s32 >|0| 0x00000031<, s32 32
    0x00000033 gvar *__unk_type_kind 0x00000945
    0x00000034 memb *__unk_type_kind >|0| 0x00000033<, 1
    0x00000035 load *s32 >|0| 0x00000034<
    0x00000036 sub s32 >|0| 0x00000035<, s32 64
    0x00000037 call azB "portal" (s32 >|0| 0x00000032<, s32 >|0| 0x00000036<) __unk_type_kind
    0x00000038 call aDF "set" (*__unk_type_kind >|0| 0x0000002E<, __unk_type_kind >|0| 0x00000037<) void
    0x00000039 gvar *__unk_type_kind 0x00000960
    0x0000003A call a7E "rid" (*__unk_type_kind >|0| 0x00000039<) void
    0x0000003B ret
fn pause aeC -> void
    {6 BBs, 32 INSTRs, 1 VARs}
    [0x00000000 bool]
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x0000094F
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 var *bool 0x00000000
    0x00000003 store *bool >|0| 0x00000002<, bool >|0| 0x00000001<
    0x00000004 gvar *bool 0x00000950
    0x00000005 load *bool >|0| 0x00000004<
    0x00000006 isz bool >|0| 0x00000005<
    0x00000007 cbr u64 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *bool 0x0000094F
    0x00000001 load *bool >|1| 0x00000000<
    0x00000002 isz bool >|1| 0x00000001<
    0x00000003 br |2|
  BASICBLOCK |2|
    0x00000000 phi2 |0| -> bool false, |1| -> u64 >|1| 0x00000002<
    0x00000001 gvar *bool 0x0000094F
    0x00000002 store *bool >|2| 0x00000001<, bool >|2| 0x00000000<
    0x00000003 var *bool 0x00000000
    0x00000004 load *bool >|2| 0x00000003<
    0x00000005 cbr bool >|2| 0x00000004<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 call a07 "glfwGetTime" () d
    0x00000001 gvar *d 0x0000094B
    0x00000002 load *d >|3| 0x00000001<
    0x00000003 fsub d >|3| 0x00000000<, d >|3| 0x00000002<
    0x00000004 gvar *d 0x0000094C
    0x00000005 load *d >|3| 0x00000004<
    0x00000006 fadd d >|3| 0x00000005<, d >|3| 0x00000003<
    0x00000007 store *d >|3| 0x00000004<, d >|3| 0x00000006<
    0x00000008 br |5|
  BASICBLOCK |4|
    0x00000000 call a07 "glfwGetTime" () d
    0x00000001 gvar *d 0x0000094B
    0x00000002 store *d >|4| 0x00000001<, d >|4| 0x00000000<
    0x00000003 br |5|
  BASICBLOCK |5|
    0x00000000 ret
fn teleport afC -> void
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x0000094D
    0x00000001 store *bool >|0| 0x00000000<, bool true
    0x00000002 gvar *f 0x0000094E
    0x00000003 store *f >|0| 0x00000002<, f 1.000000
    0x00000004 ret
fn killPlayer agC -> void
    {7 BBs, 48 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x00000950
    0x00000001 store *bool >|0| 0x00000000<, bool true
    0x00000002 gvar *s32 0x00000951
    0x00000003 store *s32 >|0| 0x00000002<, s32 135
    0x00000004 gvar *__unk_type_kind 0x00000945
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 0
    0x00000006 load *s32 >|0| 0x00000005<
    0x00000007 si2fp s32 >|0| 0x00000006< to f
    0x00000008 gvar *f 0x00000952
    0x00000009 store *f >|0| 0x00000008<, f >|0| 0x00000007<
    0x0000000A gvar *__unk_type_kind 0x00000945
    0x0000000B memb *__unk_type_kind >|0| 0x0000000A<, 1
    0x0000000C load *s32 >|0| 0x0000000B<
    0x0000000D si2fp s32 >|0| 0x0000000C< to f
    0x0000000E gvar *f 0x00000953
    0x0000000F store *f >|0| 0x0000000E<, f >|0| 0x0000000D<
    0x00000010 gvar *f 0x00000954
    0x00000011 store *f >|0| 0x00000010<, f 0.000000
    0x00000012 gvar *f 0x00000955
    0x00000013 store *f >|0| 0x00000012<, f -30.000000
    0x00000014 gvar *u64 0x00000963
    0x00000015 load *u64 >|0| 0x00000014<
    0x00000016 eq u64 >|0| 0x00000015<, u64 3
    0x00000017 cbr u64 >|0| 0x00000016<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x000008FE
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|1| 0x00000001<, s32 0, s32 -24, s32 64, s32 96) __unk_type_kind
    0x00000003 gvar *__unk_type_kind 0x00000956
    0x00000004 store *__unk_type_kind >|1| 0x00000003<, __unk_type_kind >|1| 0x00000002<
    0x00000005 br |3|
  BASICBLOCK |2|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 eq u64 >|2| 0x00000001<, u64 4
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 ret
  BASICBLOCK |4|
    0x00000000 gvar *__unk_type_kind 0x00000900
    0x00000001 load *__unk_type_kind >|4| 0x00000000<
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|4| 0x00000001<, s32 0, s32 -24, s32 64, s32 88) __unk_type_kind
    0x00000003 gvar *__unk_type_kind 0x00000956
    0x00000004 store *__unk_type_kind >|4| 0x00000003<, __unk_type_kind >|4| 0x00000002<
    0x00000005 br |6|
  BASICBLOCK |5|
    0x00000000 gvar *__unk_type_kind 0x000008FC
    0x00000001 load *__unk_type_kind >|5| 0x00000000<
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|5| 0x00000001<, s32 0, s32 0, s32 64, s32 64) __unk_type_kind
    0x00000003 gvar *__unk_type_kind 0x00000956
    0x00000004 store *__unk_type_kind >|5| 0x00000003<, __unk_type_kind >|5| 0x00000002<
    0x00000005 br |6|
  BASICBLOCK |6|
    0x00000000 br |3|
fn createPlatform ahC -> void
    {21 BBs, 248 INSTRs, 6 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 s32]
    [0x00000005 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|0| 0x00000004<
    0x00000006 var *s32 0x00000003
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 call awB "platform" (s32 >|0| 0x00000001<, s32 >|0| 0x00000003<, s32 >|0| 0x00000005<, s32 >|0| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A store *__unk_type_kind >|0| 0x00000009<, __unk_type_kind >|0| 0x00000008<
    0x0000000B var *s32 0x00000004
    0x0000000C load *s32 >|0| 0x0000000B<
    0x0000000D eq s32 >|0| 0x0000000C<, s32 0
    0x0000000E cbr s32 >|0| 0x0000000D<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 var *__unk_type_kind 0x00000005
    0x00000002 load *__unk_type_kind >|1| 0x00000001<
    0x00000003 call aVG "add" (*__unk_type_kind >|1| 0x00000000<, __unk_type_kind >|1| 0x00000002<) void
    0x00000004 ret
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 eq s32 >|2| 0x00000001<, s32 1
    0x00000003 cbr s32 >|2| 0x00000002<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|3| 0x00000000<, 2
    0x00000002 gvar **__unk_type_kind 0x00000975
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 12
    0x00000005 load *__unk_type_kind >|3| 0x00000004<
    0x00000006 var *s32 0x00000000
    0x00000007 load *s32 >|3| 0x00000006<
    0x00000008 add s32 >|3| 0x00000007<, s32 64
    0x00000009 var *s32 0x00000001
    0x0000000A load *s32 >|3| 0x00000009<
    0x0000000B sub s32 >|3| 0x0000000A<, s32 64
    0x0000000C call a0C "decoration" (__unk_type_kind >|3| 0x00000005<, s32 >|3| 0x00000008<, s32 >|3| 0x0000000B<, s32 64, s32 64) __unk_type_kind
    0x0000000D call aWG "add" (*__unk_type_kind >|3| 0x00000001<, __unk_type_kind >|3| 0x0000000C<) void
    0x0000000E var *__unk_type_kind 0x00000005
    0x0000000F memb *__unk_type_kind >|3| 0x0000000E<, 2
    0x00000010 gvar **__unk_type_kind 0x00000975
    0x00000011 load **__unk_type_kind >|3| 0x00000010<
    0x00000012 memb *__unk_type_kind >|3| 0x00000011<, 13
    0x00000013 load *__unk_type_kind >|3| 0x00000012<
    0x00000014 var *s32 0x00000000
    0x00000015 load *s32 >|3| 0x00000014<
    0x00000016 add s32 >|3| 0x00000015<, s32 128
    0x00000017 var *s32 0x00000001
    0x00000018 load *s32 >|3| 0x00000017<
    0x00000019 sub s32 >|3| 0x00000018<, s32 64
    0x0000001A call a0C "decoration" (__unk_type_kind >|3| 0x00000013<, s32 >|3| 0x00000016<, s32 >|3| 0x00000019<, s32 64, s32 64) __unk_type_kind
    0x0000001B call aXG "add" (*__unk_type_kind >|3| 0x0000000F<, __unk_type_kind >|3| 0x0000001A<) void
    0x0000001C gvar *__unk_type_kind 0x00000959
    0x0000001D var *__unk_type_kind 0x00000005
    0x0000001E load *__unk_type_kind >|3| 0x0000001D<
    0x0000001F call aYG "add" (*__unk_type_kind >|3| 0x0000001C<, __unk_type_kind >|3| 0x0000001E<) void
    0x00000020 ret
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 eq s32 >|4| 0x00000001<, s32 2
    0x00000003 cbr s32 >|4| 0x00000002<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|5| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x00000905
    0x00000003 load *__unk_type_kind >|5| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|5| 0x00000004<
    0x00000006 add s32 >|5| 0x00000005<, s32 64
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|5| 0x00000007<
    0x00000009 sub s32 >|5| 0x00000008<, s32 64
    0x0000000A call a0C "decoration" (__unk_type_kind >|5| 0x00000003<, s32 >|5| 0x00000006<, s32 >|5| 0x00000009<, s32 64, s32 64) __unk_type_kind
    0x0000000B call aZG "add" (*__unk_type_kind >|5| 0x00000001<, __unk_type_kind >|5| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000959
    0x0000000D var *__unk_type_kind 0x00000005
    0x0000000E load *__unk_type_kind >|5| 0x0000000D<
    0x0000000F call aaG "add" (*__unk_type_kind >|5| 0x0000000C<, __unk_type_kind >|5| 0x0000000E<) void
    0x00000010 ret
  BASICBLOCK |6|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 eq s32 >|6| 0x00000001<, s32 3
    0x00000003 cbr s32 >|6| 0x00000002<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|7| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x00000905
    0x00000003 load *__unk_type_kind >|7| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|7| 0x00000004<
    0x00000006 add s32 >|7| 0x00000005<, s32 64
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|7| 0x00000007<
    0x00000009 sub s32 >|7| 0x00000008<, s32 64
    0x0000000A call a0C "decoration" (__unk_type_kind >|7| 0x00000003<, s32 >|7| 0x00000006<, s32 >|7| 0x00000009<, s32 64, s32 64) __unk_type_kind
    0x0000000B call abG "add" (*__unk_type_kind >|7| 0x00000001<, __unk_type_kind >|7| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000959
    0x0000000D var *__unk_type_kind 0x00000005
    0x0000000E load *__unk_type_kind >|7| 0x0000000D<
    0x0000000F call acG "add" (*__unk_type_kind >|7| 0x0000000C<, __unk_type_kind >|7| 0x0000000E<) void
    0x00000010 ret
  BASICBLOCK |8|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|8| 0x00000000<
    0x00000002 eq s32 >|8| 0x00000001<, s32 4
    0x00000003 cbr s32 >|8| 0x00000002<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|9| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x00000907
    0x00000003 load *__unk_type_kind >|9| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|9| 0x00000004<
    0x00000006 add s32 >|9| 0x00000005<, s32 64
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|9| 0x00000007<
    0x00000009 sub s32 >|9| 0x00000008<, s32 64
    0x0000000A call a0C "decoration" (__unk_type_kind >|9| 0x00000003<, s32 >|9| 0x00000006<, s32 >|9| 0x00000009<, s32 64, s32 64) __unk_type_kind
    0x0000000B call adG "add" (*__unk_type_kind >|9| 0x00000001<, __unk_type_kind >|9| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000959
    0x0000000D var *__unk_type_kind 0x00000005
    0x0000000E load *__unk_type_kind >|9| 0x0000000D<
    0x0000000F call aeG "add" (*__unk_type_kind >|9| 0x0000000C<, __unk_type_kind >|9| 0x0000000E<) void
    0x00000010 ret
  BASICBLOCK |10|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|10| 0x00000000<
    0x00000002 eq s32 >|10| 0x00000001<, s32 5
    0x00000003 cbr s32 >|10| 0x00000002<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|11| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x00000908
    0x00000003 load *__unk_type_kind >|11| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|11| 0x00000004<
    0x00000006 add s32 >|11| 0x00000005<, s32 128
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|11| 0x00000007<
    0x00000009 sub s32 >|11| 0x00000008<, s32 64
    0x0000000A call a0C "decoration" (__unk_type_kind >|11| 0x00000003<, s32 >|11| 0x00000006<, s32 >|11| 0x00000009<, s32 64, s32 64) __unk_type_kind
    0x0000000B call afG "add" (*__unk_type_kind >|11| 0x00000001<, __unk_type_kind >|11| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000959
    0x0000000D var *__unk_type_kind 0x00000005
    0x0000000E load *__unk_type_kind >|11| 0x0000000D<
    0x0000000F call agG "add" (*__unk_type_kind >|11| 0x0000000C<, __unk_type_kind >|11| 0x0000000E<) void
    0x00000010 ret
  BASICBLOCK |12|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|12| 0x00000000<
    0x00000002 eq s32 >|12| 0x00000001<, s32 6
    0x00000003 cbr s32 >|12| 0x00000002<, |13|, |14|
  BASICBLOCK |13|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|13| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x00000909
    0x00000003 load *__unk_type_kind >|13| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|13| 0x00000004<
    0x00000006 add s32 >|13| 0x00000005<, s32 64
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|13| 0x00000007<
    0x00000009 sub s32 >|13| 0x00000008<, s32 64
    0x0000000A call a0C "decoration" (__unk_type_kind >|13| 0x00000003<, s32 >|13| 0x00000006<, s32 >|13| 0x00000009<, s32 64, s32 64) __unk_type_kind
    0x0000000B call ahG "add" (*__unk_type_kind >|13| 0x00000001<, __unk_type_kind >|13| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000959
    0x0000000D var *__unk_type_kind 0x00000005
    0x0000000E load *__unk_type_kind >|13| 0x0000000D<
    0x0000000F call aiG "add" (*__unk_type_kind >|13| 0x0000000C<, __unk_type_kind >|13| 0x0000000E<) void
    0x00000010 ret
  BASICBLOCK |14|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|14| 0x00000000<
    0x00000002 eq s32 >|14| 0x00000001<, s32 7
    0x00000003 cbr s32 >|14| 0x00000002<, |15|, |16|
  BASICBLOCK |15|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|15| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x0000090A
    0x00000003 load *__unk_type_kind >|15| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|15| 0x00000004<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|15| 0x00000006<
    0x00000008 add s32 >|15| 0x00000005<, s32 >|15| 0x00000007<
    0x00000009 sub s32 >|15| 0x00000008<, s32 128
    0x0000000A var *s32 0x00000001
    0x0000000B load *s32 >|15| 0x0000000A<
    0x0000000C sub s32 >|15| 0x0000000B<, s32 64
    0x0000000D call a0C "decoration" (__unk_type_kind >|15| 0x00000003<, s32 >|15| 0x00000009<, s32 >|15| 0x0000000C<, s32 64, s32 64) __unk_type_kind
    0x0000000E call ajG "add" (*__unk_type_kind >|15| 0x00000001<, __unk_type_kind >|15| 0x0000000D<) void
    0x0000000F gvar *__unk_type_kind 0x00000959
    0x00000010 var *__unk_type_kind 0x00000005
    0x00000011 load *__unk_type_kind >|15| 0x00000010<
    0x00000012 call akG "add" (*__unk_type_kind >|15| 0x0000000F<, __unk_type_kind >|15| 0x00000011<) void
    0x00000013 ret
  BASICBLOCK |16|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|16| 0x00000000<
    0x00000002 eq s32 >|16| 0x00000001<, s32 8
    0x00000003 cbr s32 >|16| 0x00000002<, |17|, |18|
  BASICBLOCK |17|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|17| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x0000090B
    0x00000003 load *__unk_type_kind >|17| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|17| 0x00000004<
    0x00000006 add s32 >|17| 0x00000005<, s32 64
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|17| 0x00000007<
    0x00000009 sub s32 >|17| 0x00000008<, s32 64
    0x0000000A call a0C "decoration" (__unk_type_kind >|17| 0x00000003<, s32 >|17| 0x00000006<, s32 >|17| 0x00000009<, s32 64, s32 64) __unk_type_kind
    0x0000000B call alG "add" (*__unk_type_kind >|17| 0x00000001<, __unk_type_kind >|17| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000959
    0x0000000D var *__unk_type_kind 0x00000005
    0x0000000E load *__unk_type_kind >|17| 0x0000000D<
    0x0000000F call amG "add" (*__unk_type_kind >|17| 0x0000000C<, __unk_type_kind >|17| 0x0000000E<) void
    0x00000010 ret
  BASICBLOCK |18|
    0x00000000 var *s32 0x00000004
    0x00000001 load *s32 >|18| 0x00000000<
    0x00000002 eq s32 >|18| 0x00000001<, s32 12
    0x00000003 cbr s32 >|18| 0x00000002<, |19|, |20|
  BASICBLOCK |19|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 memb *__unk_type_kind >|19| 0x00000000<, 2
    0x00000002 gvar *__unk_type_kind 0x0000090F
    0x00000003 load *__unk_type_kind >|19| 0x00000002<
    0x00000004 var *s32 0x00000000
    0x00000005 load *s32 >|19| 0x00000004<
    0x00000006 var *s32 0x00000002
    0x00000007 load *s32 >|19| 0x00000006<
    0x00000008 add s32 >|19| 0x00000005<, s32 >|19| 0x00000007<
    0x00000009 sub s32 >|19| 0x00000008<, s32 128
    0x0000000A var *s32 0x00000001
    0x0000000B load *s32 >|19| 0x0000000A<
    0x0000000C sub s32 >|19| 0x0000000B<, s32 64
    0x0000000D call a0C "decoration" (__unk_type_kind >|19| 0x00000003<, s32 >|19| 0x00000009<, s32 >|19| 0x0000000C<, s32 64, s32 64) __unk_type_kind
    0x0000000E call anG "add" (*__unk_type_kind >|19| 0x00000001<, __unk_type_kind >|19| 0x0000000D<) void
    0x0000000F var *__unk_type_kind 0x00000005
    0x00000010 memb *__unk_type_kind >|19| 0x0000000F<, 2
    0x00000011 gvar *__unk_type_kind 0x00000910
    0x00000012 load *__unk_type_kind >|19| 0x00000011<
    0x00000013 var *s32 0x00000000
    0x00000014 load *s32 >|19| 0x00000013<
    0x00000015 var *s32 0x00000002
    0x00000016 load *s32 >|19| 0x00000015<
    0x00000017 add s32 >|19| 0x00000014<, s32 >|19| 0x00000016<
    0x00000018 sub s32 >|19| 0x00000017<, s32 192
    0x00000019 var *s32 0x00000001
    0x0000001A load *s32 >|19| 0x00000019<
    0x0000001B sub s32 >|19| 0x0000001A<, s32 64
    0x0000001C call a0C "decoration" (__unk_type_kind >|19| 0x00000012<, s32 >|19| 0x00000018<, s32 >|19| 0x0000001B<, s32 64, s32 64) __unk_type_kind
    0x0000001D call aoG "add" (*__unk_type_kind >|19| 0x00000010<, __unk_type_kind >|19| 0x0000001C<) void
    0x0000001E gvar *__unk_type_kind 0x00000959
    0x0000001F var *__unk_type_kind 0x00000005
    0x00000020 load *__unk_type_kind >|19| 0x0000001F<
    0x00000021 call apG "add" (*__unk_type_kind >|19| 0x0000001E<, __unk_type_kind >|19| 0x00000020<) void
    0x00000022 ret
  BASICBLOCK |20|
    0x00000000 call aF8 "printf" (cstroflen 45 "ERROR: createPlatform() invalid decor type!
") s32
    0x00000001 ret
fn playerIsInWater aiC -> bool
    {1 BBs, 4 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 call agB "getAABB" (*__unk_type_kind >|0| 0x00000000<) __unk_type_kind
    0x00000002 call ajC "isInWater" (__unk_type_kind >|0| 0x00000001<) bool
    0x00000003 ret bool >|0| 0x00000002<
fn isInWater ajC -> bool
    {7 BBs, 32 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x0000095A
    0x00000001 call anE "__length__" (*__unk_type_kind >|1| 0x00000000<) u64
    0x00000002 load *u64 >|0| 0x00000000<
    0x00000003 ult u64 >|1| 0x00000002<, u64 >|1| 0x00000001<
    0x00000004 cbr u64 >|1| 0x00000003<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *__unk_type_kind 0x0000095A
    0x00000001 call a6F "__array__" (*__unk_type_kind >|2| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000002
    0x00000003 load *u64 >|0| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|2| 0x00000001<, u64 >|2| 0x00000003<
    0x00000005 store *__unk_type_kind >|2| 0x00000002<, *__unk_type_kind >|2| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 var **__unk_type_kind 0x00000002
    0x00000008 load **__unk_type_kind >|2| 0x00000007<
    0x00000009 memb *__unk_type_kind >|2| 0x00000008<, 0
    0x0000000A load *__unk_type_kind >|2| 0x00000009<
    0x0000000B call a0 "intersecting" (*__unk_type_kind >|2| 0x00000006<, __unk_type_kind >|2| 0x0000000A<) bool
    0x0000000C cbr bool >|2| 0x0000000B<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|4| 0x00000000<) void
    0x00000002 ret bool false
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|5| 0x00000000<) void
    0x00000002 ret bool true
  BASICBLOCK |6|
    0x00000000 br |3|
fn collidingGround akC -> *__unk_type_kind
    {13 BBs, 68 INSTRs, 5 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 call arG "__length__" (*__unk_type_kind >|1| 0x00000000<) u64
    0x00000002 load *u64 >|0| 0x00000000<
    0x00000003 ult u64 >|1| 0x00000002<, u64 >|1| 0x00000001<
    0x00000004 cbr u64 >|1| 0x00000003<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 call aqE "__array__" (*__unk_type_kind >|2| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000002
    0x00000003 load *u64 >|0| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|2| 0x00000001<, u64 >|2| 0x00000003<
    0x00000005 store *__unk_type_kind >|2| 0x00000002<, *__unk_type_kind >|2| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000002
    0x00000007 load **__unk_type_kind >|2| 0x00000006<
    0x00000008 memb *__unk_type_kind >|2| 0x00000007<, 0
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A load *__unk_type_kind >|2| 0x00000009<
    0x0000000B call a0 "intersecting" (*__unk_type_kind >|2| 0x00000008<, __unk_type_kind >|2| 0x0000000A<) bool
    0x0000000C cbr bool >|2| 0x0000000B<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *u64 0x00000003
    0x00000001 store *u64 >|4| 0x00000000<, u64 0
    0x00000002 br |7|
  BASICBLOCK |5|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|5| 0x00000000<) void
    0x00000002 var **__unk_type_kind 0x00000002
    0x00000003 load **__unk_type_kind >|5| 0x00000002<
    0x00000004 bc *__unk_type_kind >|5| 0x00000003< to *__unk_type_kind
    0x00000005 ret *__unk_type_kind >|5| 0x00000004<
  BASICBLOCK |6|
    0x00000000 br |3|
  BASICBLOCK |7|
    0x00000000 gvar *__unk_type_kind 0x0000095B
    0x00000001 call asG "__length__" (*__unk_type_kind >|7| 0x00000000<) u64
    0x00000002 load *u64 >|4| 0x00000000<
    0x00000003 ult u64 >|7| 0x00000002<, u64 >|7| 0x00000001<
    0x00000004 cbr u64 >|7| 0x00000003<, |8|, |10|
  BASICBLOCK |8|
    0x00000000 gvar *__unk_type_kind 0x0000095B
    0x00000001 call asE "__array__" (*__unk_type_kind >|8| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000004
    0x00000003 load *u64 >|4| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|8| 0x00000001<, u64 >|8| 0x00000003<
    0x00000005 store *__unk_type_kind >|8| 0x00000002<, *__unk_type_kind >|8| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000004
    0x00000007 load **__unk_type_kind >|8| 0x00000006<
    0x00000008 memb *__unk_type_kind >|8| 0x00000007<, 0
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A load *__unk_type_kind >|8| 0x00000009<
    0x0000000B call a0 "intersecting" (*__unk_type_kind >|8| 0x00000008<, __unk_type_kind >|8| 0x0000000A<) bool
    0x0000000C cbr bool >|8| 0x0000000B<, |11|, |12|
  BASICBLOCK |9|
    0x00000000 load *u64 >|4| 0x00000000<
    0x00000001 add u64 >|9| 0x00000000<, u64 1
    0x00000002 store *u64 >|4| 0x00000000<, u64 >|9| 0x00000001<
    0x00000003 br |7|
  BASICBLOCK |10|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|10| 0x00000000<) void
    0x00000002 bc null to *__unk_type_kind
    0x00000003 ret *__unk_type_kind >|10| 0x00000002<
  BASICBLOCK |11|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|11| 0x00000000<) void
    0x00000002 var **__unk_type_kind 0x00000004
    0x00000003 load **__unk_type_kind >|11| 0x00000002<
    0x00000004 bc *__unk_type_kind >|11| 0x00000003< to *__unk_type_kind
    0x00000005 ret *__unk_type_kind >|11| 0x00000004<
  BASICBLOCK |12|
    0x00000000 br |9|
fn playerCollidingPlatform alC -> *__unk_type_kind
    {1 BBs, 4 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 call agB "getAABB" (*__unk_type_kind >|0| 0x00000000<) __unk_type_kind
    0x00000002 call akC "collidingGround" (__unk_type_kind >|0| 0x00000001<) *__unk_type_kind
    0x00000003 ret *__unk_type_kind >|0| 0x00000002<
fn playerOnPlatform amC -> *__unk_type_kind
    {1 BBs, 4 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 call ahB "getAABB" (*__unk_type_kind >|0| 0x00000000<, s32 0, s32 1) __unk_type_kind
    0x00000002 call akC "collidingGround" (__unk_type_kind >|0| 0x00000001<) *__unk_type_kind
    0x00000003 ret *__unk_type_kind >|0| 0x00000002<
fn updateSpiders anC -> void
    {38 BBs, 280 INSTRs, 7 VARs}
    [0x00000000 bool]
    [0x00000001 __unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000002 *__unk_type_kind]
    [0x00000003 *__unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *bool 0x00000000
    0x00000001 store *bool >|0| 0x00000000<, bool false
    0x00000002 gvar *__unk_type_kind 0x00000945
    0x00000003 call agB "getAABB" (*__unk_type_kind >|0| 0x00000002<) __unk_type_kind
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000003<
    0x00000006 var *u64 0x00000002
    0x00000007 store *u64 >|0| 0x00000006<, u64 0
    0x00000008 br |1|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call arD "__length__" (*__unk_type_kind >|1| 0x00000000<) u64
    0x00000002 load *u64 >|0| 0x00000006<
    0x00000003 ult u64 >|1| 0x00000002<, u64 >|1| 0x00000001<
    0x00000004 cbr u64 >|1| 0x00000003<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call asD "__array__" (*__unk_type_kind >|2| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 load *u64 >|0| 0x00000006<
    0x00000004 arracc *__unk_type_kind >|2| 0x00000001<, u64 >|2| 0x00000003<
    0x00000005 store *__unk_type_kind >|2| 0x00000002<, *__unk_type_kind >|2| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000003
    0x00000007 load **__unk_type_kind >|2| 0x00000006<
    0x00000008 call a6C "update" (*__unk_type_kind >|2| 0x00000007<) void
    0x00000009 var **__unk_type_kind 0x00000003
    0x0000000A load **__unk_type_kind >|2| 0x00000009<
    0x0000000B call a9C "getAABB" (*__unk_type_kind >|2| 0x0000000A<, s32 0, s32 1) __unk_type_kind
    0x0000000C call akC "collidingGround" (__unk_type_kind >|2| 0x0000000B<) *__unk_type_kind
    0x0000000D var **__unk_type_kind 0x00000004
    0x0000000E store **__unk_type_kind >|2| 0x0000000D<, *__unk_type_kind >|2| 0x0000000C<
    0x0000000F var **__unk_type_kind 0x00000004
    0x00000010 load **__unk_type_kind >|2| 0x0000000F<
    0x00000011 bc null to *__unk_type_kind
    0x00000012 neq *__unk_type_kind >|2| 0x00000010<, *__unk_type_kind >|2| 0x00000011<
    0x00000013 cbr *__unk_type_kind >|2| 0x00000012<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000006<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000006<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *bool 0x00000000
    0x00000001 load *bool >|4| 0x00000000<
    0x00000002 cbr bool >|4| 0x00000001<, |36|, |37|
  BASICBLOCK |5|
    0x00000000 br |10|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *s32 >|6| 0x00000002<
    0x00000004 slt s32 >|6| 0x00000003<, s32 24
    0x00000005 cbr s32 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|7| 0x00000000<
    0x00000002 memb *__unk_type_kind >|7| 0x00000001<, 3
    0x00000003 load *s32 >|7| 0x00000002<
    0x00000004 add s32 >|7| 0x00000003<, s32 1
    0x00000005 br |9|
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 3
    0x00000003 load *s32 >|8| 0x00000002<
    0x00000004 br |9|
  BASICBLOCK |9|
    0x00000000 phi2 |7| -> s32 >|7| 0x00000004<, |8| -> s32 >|8| 0x00000003<
    0x00000001 br |10|
  BASICBLOCK |10|
    0x00000000 phi2 |5| -> s32 0, |9| -> s32 >|9| 0x00000000<
    0x00000001 var **__unk_type_kind 0x00000003
    0x00000002 load **__unk_type_kind >|10| 0x00000001<
    0x00000003 memb *__unk_type_kind >|10| 0x00000002<, 3
    0x00000004 store *s32 >|10| 0x00000003<, s32 >|10| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000003
    0x00000006 load **__unk_type_kind >|10| 0x00000005<
    0x00000007 memb *__unk_type_kind >|10| 0x00000006<, 4
    0x00000008 load *s32 >|10| 0x00000007<
    0x00000009 var **__unk_type_kind 0x00000003
    0x0000000A load **__unk_type_kind >|10| 0x00000009<
    0x0000000B memb *__unk_type_kind >|10| 0x0000000A<, 2
    0x0000000C load *s32 >|10| 0x0000000B<
    0x0000000D mul s32 >|10| 0x00000008<, s32 >|10| 0x0000000C<
    0x0000000E var **__unk_type_kind 0x00000003
    0x0000000F load **__unk_type_kind >|10| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|10| 0x0000000F<, 0
    0x00000011 load *s32 >|10| 0x00000010<
    0x00000012 add s32 >|10| 0x00000011<, s32 >|10| 0x0000000D<
    0x00000013 store *s32 >|10| 0x00000010<, s32 >|10| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000003
    0x00000015 load **__unk_type_kind >|10| 0x00000014<
    0x00000016 call a8C "getAABB" (*__unk_type_kind >|10| 0x00000015<) __unk_type_kind
    0x00000017 call akC "collidingGround" (__unk_type_kind >|10| 0x00000016<) *__unk_type_kind
    0x00000018 var **__unk_type_kind 0x00000005
    0x00000019 store **__unk_type_kind >|10| 0x00000018<, *__unk_type_kind >|10| 0x00000017<
    0x0000001A var **__unk_type_kind 0x00000005
    0x0000001B load **__unk_type_kind >|10| 0x0000001A<
    0x0000001C inz *__unk_type_kind >|10| 0x0000001B<
    0x0000001D cbr bool >|10| 0x0000001C<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|11| 0x00000000<
    0x00000002 memb *__unk_type_kind >|11| 0x00000001<, 2
    0x00000003 load *s32 >|11| 0x00000002<
    0x00000004 sgt s32 >|11| 0x00000003<, s32 0
    0x00000005 cbr s32 >|11| 0x00000004<, |13|, |14|
  BASICBLOCK |12|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|12| 0x00000000<
    0x00000002 memb *__unk_type_kind >|12| 0x00000001<, 3
    0x00000003 load *s32 >|12| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000003
    0x00000005 load **__unk_type_kind >|12| 0x00000004<
    0x00000006 memb *__unk_type_kind >|12| 0x00000005<, 1
    0x00000007 load *s32 >|12| 0x00000006<
    0x00000008 add s32 >|12| 0x00000007<, s32 >|12| 0x00000003<
    0x00000009 store *s32 >|12| 0x00000006<, s32 >|12| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000003
    0x0000000B load **__unk_type_kind >|12| 0x0000000A<
    0x0000000C call a8C "getAABB" (*__unk_type_kind >|12| 0x0000000B<) __unk_type_kind
    0x0000000D call akC "collidingGround" (__unk_type_kind >|12| 0x0000000C<) *__unk_type_kind
    0x0000000E var **__unk_type_kind 0x00000005
    0x0000000F store **__unk_type_kind >|12| 0x0000000E<, *__unk_type_kind >|12| 0x0000000D<
    0x00000010 var **__unk_type_kind 0x00000005
    0x00000011 load **__unk_type_kind >|12| 0x00000010<
    0x00000012 inz *__unk_type_kind >|12| 0x00000011<
    0x00000013 cbr bool >|12| 0x00000012<, |16|, |17|
  BASICBLOCK |13|
    0x00000000 var **__unk_type_kind 0x00000005
    0x00000001 load **__unk_type_kind >|13| 0x00000000<
    0x00000002 call aiB "getX" (*__unk_type_kind >|13| 0x00000001<) s32
    0x00000003 sub s32 >|13| 0x00000002<, s32 64
    0x00000004 br |15|
  BASICBLOCK |14|
    0x00000000 var **__unk_type_kind 0x00000005
    0x00000001 load **__unk_type_kind >|14| 0x00000000<
    0x00000002 call akB "getMaxX" (*__unk_type_kind >|14| 0x00000001<) s32
    0x00000003 br |15|
  BASICBLOCK |15|
    0x00000000 phi2 |13| -> s32 >|13| 0x00000003<, |14| -> s32 >|14| 0x00000002<
    0x00000001 var **__unk_type_kind 0x00000003
    0x00000002 load **__unk_type_kind >|15| 0x00000001<
    0x00000003 memb *__unk_type_kind >|15| 0x00000002<, 0
    0x00000004 store *s32 >|15| 0x00000003<, s32 >|15| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000003
    0x00000006 load **__unk_type_kind >|15| 0x00000005<
    0x00000007 memb *__unk_type_kind >|15| 0x00000006<, 2
    0x00000008 load *s32 >|15| 0x00000007<
    0x00000009 mul s32 >|15| 0x00000008<, s32 -1
    0x0000000A store *s32 >|15| 0x00000007<, s32 >|15| 0x00000009<
    0x0000000B br |12|
  BASICBLOCK |16|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|16| 0x00000000<
    0x00000002 memb *__unk_type_kind >|16| 0x00000001<, 3
    0x00000003 load *s32 >|16| 0x00000002<
    0x00000004 sgt s32 >|16| 0x00000003<, s32 0
    0x00000005 cbr s32 >|16| 0x00000004<, |18|, |19|
  BASICBLOCK |17|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|17| 0x00000000<
    0x00000002 call a8C "getAABB" (*__unk_type_kind >|17| 0x00000001<) __unk_type_kind
    0x00000003 call ajC "isInWater" (__unk_type_kind >|17| 0x00000002<) bool
    0x00000004 cbr bool >|17| 0x00000003<, |21|, |22|
  BASICBLOCK |18|
    0x00000000 var **__unk_type_kind 0x00000005
    0x00000001 load **__unk_type_kind >|18| 0x00000000<
    0x00000002 call ajB "getY" (*__unk_type_kind >|18| 0x00000001<) s32
    0x00000003 sub s32 >|18| 0x00000002<, s32 32
    0x00000004 br |20|
  BASICBLOCK |19|
    0x00000000 var **__unk_type_kind 0x00000005
    0x00000001 load **__unk_type_kind >|19| 0x00000000<
    0x00000002 call alB "getMaxY" (*__unk_type_kind >|19| 0x00000001<) s32
    0x00000003 br |20|
  BASICBLOCK |20|
    0x00000000 phi2 |18| -> s32 >|18| 0x00000003<, |19| -> s32 >|19| 0x00000002<
    0x00000001 var **__unk_type_kind 0x00000003
    0x00000002 load **__unk_type_kind >|20| 0x00000001<
    0x00000003 memb *__unk_type_kind >|20| 0x00000002<, 1
    0x00000004 store *s32 >|20| 0x00000003<, s32 >|20| 0x00000000<
    0x00000005 br |17|
  BASICBLOCK |21|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 var *u64 0x00000002
    0x00000002 load *u64 >|21| 0x00000001<
    0x00000003 sub u64 >|21| 0x00000002<, u64 1
    0x00000004 store *u64 >|21| 0x00000001<, *u64 >|21| 0x00000003<
    0x00000005 call atD "remove" (*__unk_type_kind >|21| 0x00000000<, u64 >|21| 0x00000002<) void
    0x00000006 br |3|
  BASICBLOCK |22|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 var **__unk_type_kind 0x00000003
    0x00000002 load **__unk_type_kind >|22| 0x00000001<
    0x00000003 call a8C "getAABB" (*__unk_type_kind >|22| 0x00000002<) __unk_type_kind
    0x00000004 call a0 "intersecting" (*__unk_type_kind >|22| 0x00000000<, __unk_type_kind >|22| 0x00000003<) bool
    0x00000005 cbr bool >|22| 0x00000004<, |23|, |24|
  BASICBLOCK |23|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|23| 0x00000000<, 3
    0x00000002 load *s32 >|23| 0x00000001<
    0x00000003 sgt s32 >|23| 0x00000002<, s32 0
    0x00000004 cbr s32 >|23| 0x00000003<, |25|, |26|
  BASICBLOCK |24|
    0x00000000 var **__unk_type_kind 0x00000004
    0x00000001 load **__unk_type_kind >|24| 0x00000000<
    0x00000002 inz *__unk_type_kind >|24| 0x00000001<
    0x00000003 cbr bool >|24| 0x00000002<, |32|, |33|
  BASICBLOCK |25|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|25| 0x00000000<, 1
    0x00000002 load *s32 >|25| 0x00000001<
    0x00000003 add s32 >|25| 0x00000002<, s32 32
    0x00000004 var **__unk_type_kind 0x00000003
    0x00000005 load **__unk_type_kind >|25| 0x00000004<
    0x00000006 memb *__unk_type_kind >|25| 0x00000005<, 1
    0x00000007 load *s32 >|25| 0x00000006<
    0x00000008 add s32 >|25| 0x00000007<, s32 16
    0x00000009 slt s32 >|25| 0x00000003<, s32 >|25| 0x00000008<
    0x0000000A br |26|
  BASICBLOCK |26|
    0x00000000 phi2 |23| -> bool false, |25| -> s32 >|25| 0x00000009<
    0x00000001 cbr bool >|26| 0x00000000<, |27|, |28|
  BASICBLOCK |27|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|27| 0x00000000<
    0x00000002 call aAC "getDroppedResource" (*__unk_type_kind >|27| 0x00000001<) u64
    0x00000003 var *u64 0x00000006
    0x00000004 store *u64 >|27| 0x00000003<, u64 >|27| 0x00000002<
    0x00000005 var *u64 0x00000006
    0x00000006 load *u64 >|27| 0x00000005<
    0x00000007 neq u64 >|27| 0x00000006<, u64 0
    0x00000008 cbr u64 >|27| 0x00000007<, |30|, |31|
  BASICBLOCK |28|
    0x00000000 call agC "killPlayer" () void
    0x00000001 br |29|
  BASICBLOCK |29|
    0x00000000 br |24|
  BASICBLOCK |30|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 var *u64 0x00000006
    0x00000002 load *u64 >|30| 0x00000001<
    0x00000003 zext s32 1 to u64
    0x00000004 sub u64 >|30| 0x00000002<, u64 >|30| 0x00000003<
    0x00000005 bc *[6] s32 >|30| 0x00000000< to *s32
    0x00000006 arracc *s32 >|30| 0x00000005<, u64 >|30| 0x00000004<
    0x00000007 load *s32 >|30| 0x00000006<
    0x00000008 add s32 >|30| 0x00000007<, s32 1
    0x00000009 store *s32 >|30| 0x00000006<, s32 >|30| 0x00000008<
    0x0000000A var *u64 0x00000006
    0x0000000B load *u64 >|30| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000003
    0x0000000D load **__unk_type_kind >|30| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|30| 0x0000000D<, 0
    0x0000000F load *s32 >|30| 0x0000000E<
    0x00000010 si2fp s32 >|30| 0x0000000F< to f
    0x00000011 gvar *f 0x00000948
    0x00000012 load *f >|30| 0x00000011<
    0x00000013 fsub f >|30| 0x00000010<, f >|30| 0x00000012<
    0x00000014 var **__unk_type_kind 0x00000003
    0x00000015 load **__unk_type_kind >|30| 0x00000014<
    0x00000016 memb *__unk_type_kind >|30| 0x00000015<, 1
    0x00000017 load *s32 >|30| 0x00000016<
    0x00000018 si2fp s32 >|30| 0x00000017< to f
    0x00000019 gvar *f 0x00000949
    0x0000001A load *f >|30| 0x00000019<
    0x0000001B fsub f >|30| 0x00000018<, f >|30| 0x0000001A<
    0x0000001C fsub f >|30| 0x0000001B<, f 32.000000
    0x0000001D call aaB "addCollectedResource" (u64 >|30| 0x0000000B<, f >|30| 0x00000013<, f >|30| 0x0000001C<) void
    0x0000001E br |31|
  BASICBLOCK |31|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 var *u64 0x00000002
    0x00000002 load *u64 >|31| 0x00000001<
    0x00000003 sub u64 >|31| 0x00000002<, u64 1
    0x00000004 store *u64 >|31| 0x00000001<, *u64 >|31| 0x00000003<
    0x00000005 call atD "remove" (*__unk_type_kind >|31| 0x00000000<, u64 >|31| 0x00000002<) void
    0x00000006 var *bool 0x00000000
    0x00000007 store *bool >|31| 0x00000006<, bool true
    0x00000008 br |3|
  BASICBLOCK |32|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|32| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000003
    0x00000003 load **__unk_type_kind >|32| 0x00000002<
    0x00000004 memb *__unk_type_kind >|32| 0x00000003<, 2
    0x00000005 load *s32 >|32| 0x00000004<
    0x00000006 mul s32 >|32| 0x00000005<, s32 64
    0x00000007 call a9C "getAABB" (*__unk_type_kind >|32| 0x00000001<, s32 >|32| 0x00000006<, s32 32) __unk_type_kind
    0x00000008 call akC "collidingGround" (__unk_type_kind >|32| 0x00000007<) *__unk_type_kind
    0x00000009 bc null to *__unk_type_kind
    0x0000000A eq *__unk_type_kind >|32| 0x00000008<, *__unk_type_kind >|32| 0x00000009<
    0x0000000B br |33|
  BASICBLOCK |33|
    0x00000000 phi2 |24| -> bool false, |32| -> *__unk_type_kind >|32| 0x0000000A<
    0x00000001 cbr bool >|33| 0x00000000<, |34|, |35|
  BASICBLOCK |34|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|34| 0x00000000<
    0x00000002 memb *__unk_type_kind >|34| 0x00000001<, 2
    0x00000003 load *s32 >|34| 0x00000002<
    0x00000004 mul s32 >|34| 0x00000003<, s32 -1
    0x00000005 store *s32 >|34| 0x00000002<, s32 >|34| 0x00000004<
    0x00000006 br |35|
  BASICBLOCK |35|
    0x00000000 br |3|
  BASICBLOCK |36|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|36| 0x00000000<, 3
    0x00000002 store *s32 >|36| 0x00000001<, s32 -10
    0x00000003 br |37|
  BASICBLOCK |37|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|37| 0x00000000<) void
    0x00000002 ret
fn updateSwordfish aoC -> void
    {12 BBs, 89 INSTRs, 4 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000002 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 call agB "getAABB" (*__unk_type_kind >|0| 0x00000000<) __unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 store *__unk_type_kind >|0| 0x00000002<, __unk_type_kind >|0| 0x00000001<
    0x00000004 var *u64 0x00000001
    0x00000005 store *u64 >|0| 0x00000004<, u64 0
    0x00000006 br |1|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call aoD "__length__" (*__unk_type_kind >|1| 0x00000000<) u64
    0x00000002 load *u64 >|0| 0x00000004<
    0x00000003 ult u64 >|1| 0x00000002<, u64 >|1| 0x00000001<
    0x00000004 cbr u64 >|1| 0x00000003<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call apD "__array__" (*__unk_type_kind >|2| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000002
    0x00000003 load *u64 >|0| 0x00000004<
    0x00000004 arracc *__unk_type_kind >|2| 0x00000001<, u64 >|2| 0x00000003<
    0x00000005 store *__unk_type_kind >|2| 0x00000002<, *__unk_type_kind >|2| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000002
    0x00000007 load **__unk_type_kind >|2| 0x00000006<
    0x00000008 call aEC "update" (*__unk_type_kind >|2| 0x00000007<) void
    0x00000009 var **__unk_type_kind 0x00000002
    0x0000000A load **__unk_type_kind >|2| 0x00000009<
    0x0000000B memb *__unk_type_kind >|2| 0x0000000A<, 3
    0x0000000C load *s32 >|2| 0x0000000B<
    0x0000000D var **__unk_type_kind 0x00000002
    0x0000000E load **__unk_type_kind >|2| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|2| 0x0000000E<, 2
    0x00000010 load *s32 >|2| 0x0000000F<
    0x00000011 mul s32 >|2| 0x0000000C<, s32 >|2| 0x00000010<
    0x00000012 var **__unk_type_kind 0x00000002
    0x00000013 load **__unk_type_kind >|2| 0x00000012<
    0x00000014 memb *__unk_type_kind >|2| 0x00000013<, 0
    0x00000015 load *s32 >|2| 0x00000014<
    0x00000016 add s32 >|2| 0x00000015<, s32 >|2| 0x00000011<
    0x00000017 store *s32 >|2| 0x00000014<, s32 >|2| 0x00000016<
    0x00000018 var **__unk_type_kind 0x00000002
    0x00000019 load **__unk_type_kind >|2| 0x00000018<
    0x0000001A call aGC "getAABB" (*__unk_type_kind >|2| 0x00000019<) __unk_type_kind
    0x0000001B call akC "collidingGround" (__unk_type_kind >|2| 0x0000001A<) *__unk_type_kind
    0x0000001C var **__unk_type_kind 0x00000003
    0x0000001D store **__unk_type_kind >|2| 0x0000001C<, *__unk_type_kind >|2| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000003
    0x0000001F load **__unk_type_kind >|2| 0x0000001E<
    0x00000020 inz *__unk_type_kind >|2| 0x0000001F<
    0x00000021 cbr bool >|2| 0x00000020<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000004<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000004<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|4| 0x00000000<) void
    0x00000002 ret
  BASICBLOCK |5|
    0x00000000 var **__unk_type_kind 0x00000002
    0x00000001 load **__unk_type_kind >|5| 0x00000000<
    0x00000002 memb *__unk_type_kind >|5| 0x00000001<, 2
    0x00000003 load *s32 >|5| 0x00000002<
    0x00000004 sgt s32 >|5| 0x00000003<, s32 0
    0x00000005 cbr s32 >|5| 0x00000004<, |7|, |8|
  BASICBLOCK |6|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 var **__unk_type_kind 0x00000002
    0x00000002 load **__unk_type_kind >|6| 0x00000001<
    0x00000003 call aGC "getAABB" (*__unk_type_kind >|6| 0x00000002<) __unk_type_kind
    0x00000004 call a0 "intersecting" (*__unk_type_kind >|6| 0x00000000<, __unk_type_kind >|6| 0x00000003<) bool
    0x00000005 cbr bool >|6| 0x00000004<, |10|, |11|
  BASICBLOCK |7|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|7| 0x00000000<
    0x00000002 call aiB "getX" (*__unk_type_kind >|7| 0x00000001<) s32
    0x00000003 sub s32 >|7| 0x00000002<, s32 64
    0x00000004 br |9|
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000003
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 call akB "getMaxX" (*__unk_type_kind >|8| 0x00000001<) s32
    0x00000003 br |9|
  BASICBLOCK |9|
    0x00000000 phi2 |7| -> s32 >|7| 0x00000003<, |8| -> s32 >|8| 0x00000002<
    0x00000001 var **__unk_type_kind 0x00000002
    0x00000002 load **__unk_type_kind >|9| 0x00000001<
    0x00000003 memb *__unk_type_kind >|9| 0x00000002<, 2
    0x00000004 store *s32 >|9| 0x00000003<, s32 >|9| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000002
    0x00000006 load **__unk_type_kind >|9| 0x00000005<
    0x00000007 memb *__unk_type_kind >|9| 0x00000006<, 2
    0x00000008 load *s32 >|9| 0x00000007<
    0x00000009 mul s32 >|9| 0x00000008<, s32 -1
    0x0000000A store *s32 >|9| 0x00000007<, s32 >|9| 0x00000009<
    0x0000000B br |6|
  BASICBLOCK |10|
    0x00000000 call agC "killPlayer" () void
    0x00000001 br |11|
  BASICBLOCK |11|
    0x00000000 br |3|
fn updateCannon apC -> void
    {16 BBs, 104 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *__unk_type_kind]
    [0x00000002 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000968
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 1
    0x00000002 load *bool >|0| 0x00000001<
    0x00000003 cbr bool >|0| 0x00000002<, |2|, |1|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 gvar *__unk_type_kind 0x00000968
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 0
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 store **__unk_type_kind >|2| 0x00000002<, *__unk_type_kind >|2| 0x00000001<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 call a5 "getAABB" (*__unk_type_kind >|2| 0x00000005<, s32 0, s32 1) __unk_type_kind
    0x00000007 call akC "collidingGround" (__unk_type_kind >|2| 0x00000006<) *__unk_type_kind
    0x00000008 var **__unk_type_kind 0x00000001
    0x00000009 store **__unk_type_kind >|2| 0x00000008<, *__unk_type_kind >|2| 0x00000007<
    0x0000000A var **__unk_type_kind 0x00000001
    0x0000000B load **__unk_type_kind >|2| 0x0000000A<
    0x0000000C bc null to *__unk_type_kind
    0x0000000D neq *__unk_type_kind >|2| 0x0000000B<, *__unk_type_kind >|2| 0x0000000C<
    0x0000000E cbr *__unk_type_kind >|2| 0x0000000D<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 br |8|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 load *s32 >|4| 0x00000002<
    0x00000004 slt s32 >|4| 0x00000003<, s32 32
    0x00000005 cbr s32 >|4| 0x00000004<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|5| 0x00000000<
    0x00000002 memb *__unk_type_kind >|5| 0x00000001<, 2
    0x00000003 load *s32 >|5| 0x00000002<
    0x00000004 add s32 >|5| 0x00000003<, s32 1
    0x00000005 br |7|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 2
    0x00000003 load *s32 >|6| 0x00000002<
    0x00000004 br |7|
  BASICBLOCK |7|
    0x00000000 phi2 |5| -> s32 >|5| 0x00000004<, |6| -> s32 >|6| 0x00000003<
    0x00000001 br |8|
  BASICBLOCK |8|
    0x00000000 phi2 |3| -> s32 0, |7| -> s32 >|7| 0x00000000<
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|8| 0x00000001<
    0x00000003 memb *__unk_type_kind >|8| 0x00000002<, 2
    0x00000004 store *s32 >|8| 0x00000003<, s32 >|8| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|8| 0x00000005<
    0x00000007 memb *__unk_type_kind >|8| 0x00000006<, 2
    0x00000008 load *s32 >|8| 0x00000007<
    0x00000009 var **__unk_type_kind 0x00000000
    0x0000000A load **__unk_type_kind >|8| 0x00000009<
    0x0000000B memb *__unk_type_kind >|8| 0x0000000A<, 1
    0x0000000C load *s32 >|8| 0x0000000B<
    0x0000000D add s32 >|8| 0x0000000C<, s32 >|8| 0x00000008<
    0x0000000E store *s32 >|8| 0x0000000B<, s32 >|8| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 call a4 "getAABB" (*__unk_type_kind >|8| 0x00000010<) __unk_type_kind
    0x00000012 call akC "collidingGround" (__unk_type_kind >|8| 0x00000011<) *__unk_type_kind
    0x00000013 var **__unk_type_kind 0x00000002
    0x00000014 store **__unk_type_kind >|8| 0x00000013<, *__unk_type_kind >|8| 0x00000012<
    0x00000015 var **__unk_type_kind 0x00000002
    0x00000016 load **__unk_type_kind >|8| 0x00000015<
    0x00000017 inz *__unk_type_kind >|8| 0x00000016<
    0x00000018 cbr bool >|8| 0x00000017<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|9| 0x00000000<
    0x00000002 memb *__unk_type_kind >|9| 0x00000001<, 2
    0x00000003 load *s32 >|9| 0x00000002<
    0x00000004 sgt s32 >|9| 0x00000003<, s32 0
    0x00000005 cbr s32 >|9| 0x00000004<, |11|, |12|
  BASICBLOCK |10|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|10| 0x00000000<
    0x00000002 memb *__unk_type_kind >|10| 0x00000001<, 1
    0x00000003 load *s32 >|10| 0x00000002<
    0x00000004 add s32 >|10| 0x00000003<, s32 72
    0x00000005 sgt s32 >|10| 0x00000004<, s32 1280
    0x00000006 cbr s32 >|10| 0x00000005<, |14|, |15|
  BASICBLOCK |11|
    0x00000000 var **__unk_type_kind 0x00000002
    0x00000001 load **__unk_type_kind >|11| 0x00000000<
    0x00000002 call ajB "getY" (*__unk_type_kind >|11| 0x00000001<) s32
    0x00000003 sub s32 >|11| 0x00000002<, s32 72
    0x00000004 br |13|
  BASICBLOCK |12|
    0x00000000 var **__unk_type_kind 0x00000002
    0x00000001 load **__unk_type_kind >|12| 0x00000000<
    0x00000002 call alB "getMaxY" (*__unk_type_kind >|12| 0x00000001<) s32
    0x00000003 br |13|
  BASICBLOCK |13|
    0x00000000 phi2 |11| -> s32 >|11| 0x00000003<, |12| -> s32 >|12| 0x00000002<
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|13| 0x00000001<
    0x00000003 memb *__unk_type_kind >|13| 0x00000002<, 1
    0x00000004 store *s32 >|13| 0x00000003<, s32 >|13| 0x00000000<
    0x00000005 br |10|
  BASICBLOCK |14|
    0x00000000 sub s32 1280, s32 72
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|14| 0x00000001<
    0x00000003 memb *__unk_type_kind >|14| 0x00000002<, 1
    0x00000004 store *s32 >|14| 0x00000003<, s32 >|14| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|14| 0x00000005<
    0x00000007 memb *__unk_type_kind >|14| 0x00000006<, 2
    0x00000008 store *s32 >|14| 0x00000007<, s32 0
    0x00000009 br |15|
  BASICBLOCK |15|
    0x00000000 ret
fn drawFromCamera aqC -> void
    {1 BBs, 20 INSTRs, 5 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var *f 0x00000001
    0x00000003 load *f >|0| 0x00000002<
    0x00000004 gvar *f 0x00000948
    0x00000005 load *f >|0| 0x00000004<
    0x00000006 fsub f >|0| 0x00000003<, f >|0| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|0| 0x00000007<
    0x00000009 gvar *f 0x00000949
    0x0000000A load *f >|0| 0x00000009<
    0x0000000B fsub f >|0| 0x00000008<, f >|0| 0x0000000A<
    0x0000000C var *f 0x00000003
    0x0000000D load *f >|0| 0x0000000C<
    0x0000000E var *f 0x00000004
    0x0000000F load *f >|0| 0x0000000E<
    0x00000010 call aDB "captDrawTexture" (__unk_type_kind >|0| 0x00000001<, f >|0| 0x00000006<, f >|0| 0x0000000B<, f >|0| 0x0000000D<, f >|0| 0x0000000F<) void
    0x00000011 var *__unk_type_kind 0x00000000
    0x00000012 call azD "__defer__" (*__unk_type_kind >|0| 0x00000011<) void
    0x00000013 ret
fn drawFromCameraEx arC -> void
    {5 BBs, 42 INSTRs, 5 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 f]
  BASICBLOCK |0|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|0| 0x00000000<
    0x00000002 flt f >|0| 0x00000001<, f 0.000000
    0x00000003 cbr f >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|1| 0x00000000<
    0x00000002 var *f 0x00000001
    0x00000003 load *f >|1| 0x00000002<
    0x00000004 fsub f >|1| 0x00000003<, f >|1| 0x00000001<
    0x00000005 store *f >|1| 0x00000002<, f >|1| 0x00000004<
    0x00000006 br |2|
  BASICBLOCK |2|
    0x00000000 var *f 0x00000004
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 flt f >|2| 0x00000001<, f 0.000000
    0x00000003 cbr f >|2| 0x00000002<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 var *f 0x00000004
    0x00000001 load *f >|3| 0x00000000<
    0x00000002 var *f 0x00000002
    0x00000003 load *f >|3| 0x00000002<
    0x00000004 fsub f >|3| 0x00000003<, f >|3| 0x00000001<
    0x00000005 store *f >|3| 0x00000002<, f >|3| 0x00000004<
    0x00000006 br |4|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|4| 0x00000000<
    0x00000002 var *f 0x00000001
    0x00000003 load *f >|4| 0x00000002<
    0x00000004 gvar *f 0x00000948
    0x00000005 load *f >|4| 0x00000004<
    0x00000006 fsub f >|4| 0x00000003<, f >|4| 0x00000005<
    0x00000007 var *f 0x00000002
    0x00000008 load *f >|4| 0x00000007<
    0x00000009 gvar *f 0x00000949
    0x0000000A load *f >|4| 0x00000009<
    0x0000000B fsub f >|4| 0x00000008<, f >|4| 0x0000000A<
    0x0000000C var *f 0x00000003
    0x0000000D load *f >|4| 0x0000000C<
    0x0000000E var *f 0x00000004
    0x0000000F load *f >|4| 0x0000000E<
    0x00000010 call aDB "captDrawTexture" (__unk_type_kind >|4| 0x00000001<, f >|4| 0x00000006<, f >|4| 0x0000000B<, f >|4| 0x0000000D<, f >|4| 0x0000000F<) void
    0x00000011 var *__unk_type_kind 0x00000000
    0x00000012 call azD "__defer__" (*__unk_type_kind >|4| 0x00000011<) void
    0x00000013 ret
fn drawLakeBehind asC -> void
    {10 BBs, 64 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|0| 0x00000000< to *__unk_type_kind
    0x00000002 call ajB "getY" (*__unk_type_kind >|0| 0x00000001<) s32
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000002<
    0x00000005 br |1|
  BASICBLOCK |1|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|1| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|1| 0x00000002< to *__unk_type_kind
    0x00000004 call alB "getMaxY" (*__unk_type_kind >|1| 0x00000003<) s32
    0x00000005 slt s32 >|1| 0x00000001<, s32 >|1| 0x00000004<
    0x00000006 cbr s32 >|1| 0x00000005<, |2|, |3|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|2| 0x00000000< to *__unk_type_kind
    0x00000002 call aiB "getX" (*__unk_type_kind >|2| 0x00000001<) s32
    0x00000003 var *s32 0x00000002
    0x00000004 store *s32 >|2| 0x00000003<, s32 >|2| 0x00000002<
    0x00000005 br |4|
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call aJE "__defer__" (*__unk_type_kind >|3| 0x00000000<) void
    0x00000002 ret
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|4| 0x00000002< to *__unk_type_kind
    0x00000004 call akB "getMaxX" (*__unk_type_kind >|4| 0x00000003<) s32
    0x00000005 slt s32 >|4| 0x00000001<, s32 >|4| 0x00000004<
    0x00000006 cbr s32 >|4| 0x00000005<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|5| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|5| 0x00000002< to *__unk_type_kind
    0x00000004 call ajB "getY" (*__unk_type_kind >|5| 0x00000003<) s32
    0x00000005 eq s32 >|5| 0x00000001<, s32 >|5| 0x00000004<
    0x00000006 cbr s32 >|5| 0x00000005<, |7|, |8|
  BASICBLOCK |6|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 add s32 >|6| 0x00000001<, s32 64
    0x00000003 store *s32 >|6| 0x00000000<, s32 >|6| 0x00000002<
    0x00000004 br |1|
  BASICBLOCK |7|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|7| 0x00000000<
    0x00000002 memb *__unk_type_kind >|7| 0x00000001<, 1
    0x00000003 call aQB "now" (*__unk_type_kind >|7| 0x00000002<) __unk_type_kind
    0x00000004 br |9|
  BASICBLOCK |8|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 2
    0x00000003 load *__unk_type_kind >|8| 0x00000002<
    0x00000004 br |9|
  BASICBLOCK |9|
    0x00000000 phi2 |7| -> __unk_type_kind >|7| 0x00000003<, |8| -> __unk_type_kind >|8| 0x00000003<
    0x00000001 var *s32 0x00000002
    0x00000002 load *s32 >|9| 0x00000001<
    0x00000003 si2fp s32 >|9| 0x00000002< to f
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|9| 0x00000004<
    0x00000006 si2fp s32 >|9| 0x00000005< to f
    0x00000007 call aqC "drawFromCamera" (__unk_type_kind >|9| 0x00000000<, f >|9| 0x00000003<, f >|9| 0x00000006<, f 64.000000, f 64.000000) void
    0x00000008 var *s32 0x00000002
    0x00000009 load *s32 >|9| 0x00000008<
    0x0000000A add s32 >|9| 0x00000009<, s32 64
    0x0000000B store *s32 >|9| 0x00000008<, s32 >|9| 0x0000000A<
    0x0000000C br |4|
fn drawLakeUpFront atC -> void
    {34 BBs, 184 INSTRs, 9 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000000 s32]
    [0x00000000 f]
    [0x00000001 __unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|0| 0x00000000< to *__unk_type_kind
    0x00000002 call ajB "getY" (*__unk_type_kind >|0| 0x00000001<) s32
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000002<
    0x00000005 br |1|
  BASICBLOCK |1|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|1| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|1| 0x00000002< to *__unk_type_kind
    0x00000004 call alB "getMaxY" (*__unk_type_kind >|1| 0x00000003<) s32
    0x00000005 slt s32 >|1| 0x00000001<, s32 >|1| 0x00000004<
    0x00000006 cbr s32 >|1| 0x00000005<, |2|, |3|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|2| 0x00000000< to *__unk_type_kind
    0x00000002 call aiB "getX" (*__unk_type_kind >|2| 0x00000001<) s32
    0x00000003 var *s32 0x00000002
    0x00000004 store *s32 >|2| 0x00000003<, s32 >|2| 0x00000002<
    0x00000005 br |4|
  BASICBLOCK |3|
    0x00000000 call aEB "captDrawOpacity" (f 1.000000) void
    0x00000001 var *__unk_type_kind 0x00000000
    0x00000002 call aJE "__defer__" (*__unk_type_kind >|3| 0x00000001<) void
    0x00000003 ret
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|4| 0x00000002< to *__unk_type_kind
    0x00000004 call akB "getMaxX" (*__unk_type_kind >|4| 0x00000003<) s32
    0x00000005 slt s32 >|4| 0x00000001<, s32 >|4| 0x00000004<
    0x00000006 cbr s32 >|4| 0x00000005<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var *f 0x00000003
    0x00000001 store *f >|5| 0x00000000<, f 0.000000
    0x00000002 var *s32 0x00000002
    0x00000003 load *s32 >|5| 0x00000002<
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|5| 0x00000004<
    0x00000006 call a1 "AABB" (s32 >|5| 0x00000003<, s32 >|5| 0x00000005<, s32 64, s32 64) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 store *__unk_type_kind >|5| 0x00000007<, __unk_type_kind >|5| 0x00000006<
    0x00000009 var *f 0x00000003
    0x0000000A load *f >|5| 0x00000009<
    0x0000000B feq f >|5| 0x0000000A<, f 0.000000
    0x0000000C cbr f >|5| 0x0000000B<, |7|, |8|
  BASICBLOCK |6|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 add s32 >|6| 0x00000001<, s32 64
    0x00000003 store *s32 >|6| 0x00000000<, s32 >|6| 0x00000002<
    0x00000004 br |1|
  BASICBLOCK |7|
    0x00000000 var *u64 0x00000005
    0x00000001 store *u64 >|7| 0x00000000<, u64 0
    0x00000002 br |9|
  BASICBLOCK |8|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|8| 0x00000000<
    0x00000002 feq f >|8| 0x00000001<, f 0.000000
    0x00000003 cbr f >|8| 0x00000002<, |15|, |16|
  BASICBLOCK |9|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 memb *__unk_type_kind >|9| 0x00000000<, 1
    0x00000002 load *u64 >|9| 0x00000001<
    0x00000003 load *u64 >|7| 0x00000000<
    0x00000004 ult u64 >|9| 0x00000003<, u64 >|9| 0x00000002<
    0x00000005 cbr u64 >|9| 0x00000004<, |10|, |12|
  BASICBLOCK |10|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 memb *__unk_type_kind >|10| 0x00000000<, 0
    0x00000002 load **__unk_type_kind >|10| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000006
    0x00000004 load *u64 >|7| 0x00000000<
    0x00000005 arracc *__unk_type_kind >|10| 0x00000002<, u64 >|10| 0x00000004<
    0x00000006 store *__unk_type_kind >|10| 0x00000003<, *__unk_type_kind >|10| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 var **__unk_type_kind 0x00000006
    0x00000009 load **__unk_type_kind >|10| 0x00000008<
    0x0000000A memb *__unk_type_kind >|10| 0x00000009<, 1
    0x0000000B load *__unk_type_kind >|10| 0x0000000A<
    0x0000000C call a0 "intersecting" (*__unk_type_kind >|10| 0x00000007<, __unk_type_kind >|10| 0x0000000B<) bool
    0x0000000D cbr bool >|10| 0x0000000C<, |13|, |14|
  BASICBLOCK |11|
    0x00000000 load *u64 >|7| 0x00000000<
    0x00000001 add u64 >|11| 0x00000000<, u64 1
    0x00000002 store *u64 >|7| 0x00000000<, u64 >|11| 0x00000001<
    0x00000003 br |9|
  BASICBLOCK |12|
    0x00000000 br |8|
  BASICBLOCK |13|
    0x00000000 var *f 0x00000003
    0x00000001 store *f >|13| 0x00000000<, f 0.900000
    0x00000002 br |12|
  BASICBLOCK |14|
    0x00000000 br |11|
  BASICBLOCK |15|
    0x00000000 var *u64 0x00000007
    0x00000001 store *u64 >|15| 0x00000000<, u64 0
    0x00000002 br |17|
  BASICBLOCK |16|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|16| 0x00000000<
    0x00000002 feq f >|16| 0x00000001<, f 0.000000
    0x00000003 cbr f >|16| 0x00000002<, |23|, |24|
  BASICBLOCK |17|
    0x00000000 gvar *__unk_type_kind 0x0000095B
    0x00000001 memb *__unk_type_kind >|17| 0x00000000<, 1
    0x00000002 load *u64 >|17| 0x00000001<
    0x00000003 load *u64 >|15| 0x00000000<
    0x00000004 ult u64 >|17| 0x00000003<, u64 >|17| 0x00000002<
    0x00000005 cbr u64 >|17| 0x00000004<, |18|, |20|
  BASICBLOCK |18|
    0x00000000 gvar *__unk_type_kind 0x0000095B
    0x00000001 memb *__unk_type_kind >|18| 0x00000000<, 0
    0x00000002 load **__unk_type_kind >|18| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000008
    0x00000004 load *u64 >|15| 0x00000000<
    0x00000005 arracc *__unk_type_kind >|18| 0x00000002<, u64 >|18| 0x00000004<
    0x00000006 store *__unk_type_kind >|18| 0x00000003<, *__unk_type_kind >|18| 0x00000005<
    0x00000007 var *__unk_type_kind 0x00000004
    0x00000008 var **__unk_type_kind 0x00000008
    0x00000009 load **__unk_type_kind >|18| 0x00000008<
    0x0000000A memb *__unk_type_kind >|18| 0x00000009<, 1
    0x0000000B load *__unk_type_kind >|18| 0x0000000A<
    0x0000000C call a0 "intersecting" (*__unk_type_kind >|18| 0x00000007<, __unk_type_kind >|18| 0x0000000B<) bool
    0x0000000D cbr bool >|18| 0x0000000C<, |21|, |22|
  BASICBLOCK |19|
    0x00000000 load *u64 >|15| 0x00000000<
    0x00000001 add u64 >|19| 0x00000000<, u64 1
    0x00000002 store *u64 >|15| 0x00000000<, u64 >|19| 0x00000001<
    0x00000003 br |17|
  BASICBLOCK |20|
    0x00000000 br |16|
  BASICBLOCK |21|
    0x00000000 var *f 0x00000003
    0x00000001 store *f >|21| 0x00000000<, f 0.900000
    0x00000002 br |20|
  BASICBLOCK |22|
    0x00000000 br |19|
  BASICBLOCK |23|
    0x00000000 gvar *__unk_type_kind 0x00000960
    0x00000001 memb *__unk_type_kind >|23| 0x00000000<, 1
    0x00000002 load *bool >|23| 0x00000001<
    0x00000003 br |24|
  BASICBLOCK |24|
    0x00000000 phi2 |16| -> bool false, |23| -> bool >|23| 0x00000002<
    0x00000001 cbr bool >|24| 0x00000000<, |25|, |26|
  BASICBLOCK |25|
    0x00000000 var *__unk_type_kind 0x00000004
    0x00000001 gvar *__unk_type_kind 0x00000960
    0x00000002 memb *__unk_type_kind >|25| 0x00000001<, 0
    0x00000003 memb *__unk_type_kind >|25| 0x00000002<, 1
    0x00000004 load *__unk_type_kind >|25| 0x00000003<
    0x00000005 call a0 "intersecting" (*__unk_type_kind >|25| 0x00000000<, __unk_type_kind >|25| 0x00000004<) bool
    0x00000006 br |26|
  BASICBLOCK |26|
    0x00000000 phi2 |24| -> bool false, |25| -> bool >|25| 0x00000005<
    0x00000001 cbr bool >|26| 0x00000000<, |27|, |28|
  BASICBLOCK |27|
    0x00000000 var *f 0x00000003
    0x00000001 store *f >|27| 0x00000000<, f 0.500000
    0x00000002 br |28|
  BASICBLOCK |28|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|28| 0x00000000<
    0x00000002 feq f >|28| 0x00000001<, f 0.000000
    0x00000003 cbr f >|28| 0x00000002<, |29|, |30|
  BASICBLOCK |29|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|29| 0x00000000<
    0x00000002 add s32 >|29| 0x00000001<, s32 64
    0x00000003 store *s32 >|29| 0x00000000<, s32 >|29| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000004
    0x00000005 call aqD "__defer__" (*__unk_type_kind >|29| 0x00000004<) void
    0x00000006 br |4|
  BASICBLOCK |30|
    0x00000000 var *f 0x00000003
    0x00000001 load *f >|30| 0x00000000<
    0x00000002 call aEB "captDrawOpacity" (f >|30| 0x00000001<) void
    0x00000003 var *s32 0x00000001
    0x00000004 load *s32 >|30| 0x00000003<
    0x00000005 var *__unk_type_kind 0x00000000
    0x00000006 bc *__unk_type_kind >|30| 0x00000005< to *__unk_type_kind
    0x00000007 call ajB "getY" (*__unk_type_kind >|30| 0x00000006<) s32
    0x00000008 eq s32 >|30| 0x00000004<, s32 >|30| 0x00000007<
    0x00000009 cbr s32 >|30| 0x00000008<, |31|, |32|
  BASICBLOCK |31|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|31| 0x00000000<
    0x00000002 memb *__unk_type_kind >|31| 0x00000001<, 1
    0x00000003 call aQB "now" (*__unk_type_kind >|31| 0x00000002<) __unk_type_kind
    0x00000004 br |33|
  BASICBLOCK |32|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|32| 0x00000000<
    0x00000002 memb *__unk_type_kind >|32| 0x00000001<, 2
    0x00000003 load *__unk_type_kind >|32| 0x00000002<
    0x00000004 br |33|
  BASICBLOCK |33|
    0x00000000 phi2 |31| -> __unk_type_kind >|31| 0x00000003<, |32| -> __unk_type_kind >|32| 0x00000003<
    0x00000001 var *s32 0x00000002
    0x00000002 load *s32 >|33| 0x00000001<
    0x00000003 si2fp s32 >|33| 0x00000002< to f
    0x00000004 var *s32 0x00000001
    0x00000005 load *s32 >|33| 0x00000004<
    0x00000006 si2fp s32 >|33| 0x00000005< to f
    0x00000007 call aqC "drawFromCamera" (__unk_type_kind >|33| 0x00000000<, f >|33| 0x00000003<, f >|33| 0x00000006<, f 64.000000, f 64.000000) void
    0x00000008 var *s32 0x00000002
    0x00000009 load *s32 >|33| 0x00000008<
    0x0000000A add s32 >|33| 0x00000009<, s32 64
    0x0000000B store *s32 >|33| 0x00000008<, s32 >|33| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000004
    0x0000000D call aqD "__defer__" (*__unk_type_kind >|33| 0x0000000C<) void
    0x0000000E br |4|
fn drawPlatform auC -> void
    {43 BBs, 296 INSTRs, 5 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
    [0x00000000 s32]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|0| 0x00000000< to *__unk_type_kind
    0x00000002 call ajB "getY" (*__unk_type_kind >|0| 0x00000001<) s32
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|0| 0x00000003<, s32 >|0| 0x00000002<
    0x00000005 br |1|
  BASICBLOCK |1|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|1| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|1| 0x00000002< to *__unk_type_kind
    0x00000004 call alB "getMaxY" (*__unk_type_kind >|1| 0x00000003<) s32
    0x00000005 slt s32 >|1| 0x00000001<, s32 >|1| 0x00000004<
    0x00000006 cbr s32 >|1| 0x00000005<, |2|, |3|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|2| 0x00000000< to *__unk_type_kind
    0x00000002 call aiB "getX" (*__unk_type_kind >|2| 0x00000001<) s32
    0x00000003 var *s32 0x00000002
    0x00000004 store *s32 >|2| 0x00000003<, s32 >|2| 0x00000002<
    0x00000005 br |4|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000003
    0x00000001 store *u64 >|3| 0x00000000<, u64 0
    0x00000002 br |39|
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|4| 0x00000002< to *__unk_type_kind
    0x00000004 call akB "getMaxX" (*__unk_type_kind >|4| 0x00000003<) s32
    0x00000005 slt s32 >|4| 0x00000001<, s32 >|4| 0x00000004<
    0x00000006 cbr s32 >|4| 0x00000005<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|5| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|5| 0x00000002< to *__unk_type_kind
    0x00000004 call aiB "getX" (*__unk_type_kind >|5| 0x00000003<) s32
    0x00000005 eq s32 >|5| 0x00000001<, s32 >|5| 0x00000004<
    0x00000006 cbr s32 >|5| 0x00000005<, |7|, |8|
  BASICBLOCK |6|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 add s32 >|6| 0x00000001<, s32 64
    0x00000003 store *s32 >|6| 0x00000000<, s32 >|6| 0x00000002<
    0x00000004 br |1|
  BASICBLOCK |7|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|7| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|7| 0x00000002< to *__unk_type_kind
    0x00000004 call ajB "getY" (*__unk_type_kind >|7| 0x00000003<) s32
    0x00000005 eq s32 >|7| 0x00000001<, s32 >|7| 0x00000004<
    0x00000006 br |8|
  BASICBLOCK |8|
    0x00000000 phi2 |5| -> bool false, |7| -> s32 >|7| 0x00000005<
    0x00000001 cbr bool >|8| 0x00000000<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|9| 0x00000000<
    0x00000002 memb *__unk_type_kind >|9| 0x00000001<, 5
    0x00000003 load *__unk_type_kind >|9| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|9| 0x00000004<
    0x00000006 si2fp s32 >|9| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|9| 0x00000007<
    0x00000009 si2fp s32 >|9| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|9| 0x00000003<, f >|9| 0x00000006<, f >|9| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |11|
  BASICBLOCK |10|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|10| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|10| 0x00000002< to *__unk_type_kind
    0x00000004 call aiB "getX" (*__unk_type_kind >|10| 0x00000003<) s32
    0x00000005 eq s32 >|10| 0x00000001<, s32 >|10| 0x00000004<
    0x00000006 cbr s32 >|10| 0x00000005<, |12|, |13|
  BASICBLOCK |11|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|11| 0x00000000<
    0x00000002 add s32 >|11| 0x00000001<, s32 64
    0x00000003 store *s32 >|11| 0x00000000<, s32 >|11| 0x00000002<
    0x00000004 br |4|
  BASICBLOCK |12|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|12| 0x00000000<
    0x00000002 add s32 >|12| 0x00000001<, s32 64
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|12| 0x00000003< to *__unk_type_kind
    0x00000005 call alB "getMaxY" (*__unk_type_kind >|12| 0x00000004<) s32
    0x00000006 sge s32 >|12| 0x00000002<, s32 >|12| 0x00000005<
    0x00000007 br |13|
  BASICBLOCK |13|
    0x00000000 phi2 |10| -> bool false, |12| -> s32 >|12| 0x00000006<
    0x00000001 cbr bool >|13| 0x00000000<, |14|, |15|
  BASICBLOCK |14|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|14| 0x00000000<
    0x00000002 memb *__unk_type_kind >|14| 0x00000001<, 8
    0x00000003 load *__unk_type_kind >|14| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|14| 0x00000004<
    0x00000006 si2fp s32 >|14| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|14| 0x00000007<
    0x00000009 si2fp s32 >|14| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|14| 0x00000003<, f >|14| 0x00000006<, f >|14| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |16|
  BASICBLOCK |15|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|15| 0x00000000<
    0x00000002 add s32 >|15| 0x00000001<, s32 64
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|15| 0x00000003< to *__unk_type_kind
    0x00000005 call akB "getMaxX" (*__unk_type_kind >|15| 0x00000004<) s32
    0x00000006 sge s32 >|15| 0x00000002<, s32 >|15| 0x00000005<
    0x00000007 cbr s32 >|15| 0x00000006<, |17|, |18|
  BASICBLOCK |16|
    0x00000000 br |11|
  BASICBLOCK |17|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|17| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|17| 0x00000002< to *__unk_type_kind
    0x00000004 call ajB "getY" (*__unk_type_kind >|17| 0x00000003<) s32
    0x00000005 eq s32 >|17| 0x00000001<, s32 >|17| 0x00000004<
    0x00000006 br |18|
  BASICBLOCK |18|
    0x00000000 phi2 |15| -> bool false, |17| -> s32 >|17| 0x00000005<
    0x00000001 cbr bool >|18| 0x00000000<, |19|, |20|
  BASICBLOCK |19|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|19| 0x00000000<
    0x00000002 memb *__unk_type_kind >|19| 0x00000001<, 4
    0x00000003 load *__unk_type_kind >|19| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|19| 0x00000004<
    0x00000006 si2fp s32 >|19| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|19| 0x00000007<
    0x00000009 si2fp s32 >|19| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|19| 0x00000003<, f >|19| 0x00000006<, f >|19| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |21|
  BASICBLOCK |20|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|20| 0x00000000<
    0x00000002 add s32 >|20| 0x00000001<, s32 64
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|20| 0x00000003< to *__unk_type_kind
    0x00000005 call akB "getMaxX" (*__unk_type_kind >|20| 0x00000004<) s32
    0x00000006 sge s32 >|20| 0x00000002<, s32 >|20| 0x00000005<
    0x00000007 cbr s32 >|20| 0x00000006<, |22|, |23|
  BASICBLOCK |21|
    0x00000000 br |16|
  BASICBLOCK |22|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|22| 0x00000000<
    0x00000002 add s32 >|22| 0x00000001<, s32 64
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|22| 0x00000003< to *__unk_type_kind
    0x00000005 call alB "getMaxY" (*__unk_type_kind >|22| 0x00000004<) s32
    0x00000006 sge s32 >|22| 0x00000002<, s32 >|22| 0x00000005<
    0x00000007 br |23|
  BASICBLOCK |23|
    0x00000000 phi2 |20| -> bool false, |22| -> s32 >|22| 0x00000006<
    0x00000001 cbr bool >|23| 0x00000000<, |24|, |25|
  BASICBLOCK |24|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|24| 0x00000000<
    0x00000002 memb *__unk_type_kind >|24| 0x00000001<, 7
    0x00000003 load *__unk_type_kind >|24| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|24| 0x00000004<
    0x00000006 si2fp s32 >|24| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|24| 0x00000007<
    0x00000009 si2fp s32 >|24| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|24| 0x00000003<, f >|24| 0x00000006<, f >|24| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |26|
  BASICBLOCK |25|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|25| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|25| 0x00000002< to *__unk_type_kind
    0x00000004 call aiB "getX" (*__unk_type_kind >|25| 0x00000003<) s32
    0x00000005 eq s32 >|25| 0x00000001<, s32 >|25| 0x00000004<
    0x00000006 cbr s32 >|25| 0x00000005<, |27|, |28|
  BASICBLOCK |26|
    0x00000000 br |21|
  BASICBLOCK |27|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|27| 0x00000000<
    0x00000002 memb *__unk_type_kind >|27| 0x00000001<, 10
    0x00000003 load *__unk_type_kind >|27| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|27| 0x00000004<
    0x00000006 si2fp s32 >|27| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|27| 0x00000007<
    0x00000009 si2fp s32 >|27| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|27| 0x00000003<, f >|27| 0x00000006<, f >|27| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |29|
  BASICBLOCK |28|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|28| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|28| 0x00000002< to *__unk_type_kind
    0x00000004 call ajB "getY" (*__unk_type_kind >|28| 0x00000003<) s32
    0x00000005 eq s32 >|28| 0x00000001<, s32 >|28| 0x00000004<
    0x00000006 cbr s32 >|28| 0x00000005<, |30|, |31|
  BASICBLOCK |29|
    0x00000000 br |26|
  BASICBLOCK |30|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|30| 0x00000000<
    0x00000002 memb *__unk_type_kind >|30| 0x00000001<, 3
    0x00000003 load *__unk_type_kind >|30| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|30| 0x00000004<
    0x00000006 si2fp s32 >|30| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|30| 0x00000007<
    0x00000009 si2fp s32 >|30| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|30| 0x00000003<, f >|30| 0x00000006<, f >|30| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |32|
  BASICBLOCK |31|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|31| 0x00000000<
    0x00000002 add s32 >|31| 0x00000001<, s32 64
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|31| 0x00000003< to *__unk_type_kind
    0x00000005 call akB "getMaxX" (*__unk_type_kind >|31| 0x00000004<) s32
    0x00000006 sge s32 >|31| 0x00000002<, s32 >|31| 0x00000005<
    0x00000007 cbr s32 >|31| 0x00000006<, |33|, |34|
  BASICBLOCK |32|
    0x00000000 br |29|
  BASICBLOCK |33|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|33| 0x00000000<
    0x00000002 memb *__unk_type_kind >|33| 0x00000001<, 9
    0x00000003 load *__unk_type_kind >|33| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|33| 0x00000004<
    0x00000006 si2fp s32 >|33| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|33| 0x00000007<
    0x00000009 si2fp s32 >|33| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|33| 0x00000003<, f >|33| 0x00000006<, f >|33| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |35|
  BASICBLOCK |34|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|34| 0x00000000<
    0x00000002 add s32 >|34| 0x00000001<, s32 64
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 bc *__unk_type_kind >|34| 0x00000003< to *__unk_type_kind
    0x00000005 call alB "getMaxY" (*__unk_type_kind >|34| 0x00000004<) s32
    0x00000006 sge s32 >|34| 0x00000002<, s32 >|34| 0x00000005<
    0x00000007 cbr s32 >|34| 0x00000006<, |36|, |37|
  BASICBLOCK |35|
    0x00000000 br |32|
  BASICBLOCK |36|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|36| 0x00000000<
    0x00000002 memb *__unk_type_kind >|36| 0x00000001<, 6
    0x00000003 load *__unk_type_kind >|36| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|36| 0x00000004<
    0x00000006 si2fp s32 >|36| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|36| 0x00000007<
    0x00000009 si2fp s32 >|36| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|36| 0x00000003<, f >|36| 0x00000006<, f >|36| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |38|
  BASICBLOCK |37|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|37| 0x00000000<
    0x00000002 memb *__unk_type_kind >|37| 0x00000001<, 11
    0x00000003 load *__unk_type_kind >|37| 0x00000002<
    0x00000004 var *s32 0x00000002
    0x00000005 load *s32 >|37| 0x00000004<
    0x00000006 si2fp s32 >|37| 0x00000005< to f
    0x00000007 var *s32 0x00000001
    0x00000008 load *s32 >|37| 0x00000007<
    0x00000009 si2fp s32 >|37| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|37| 0x00000003<, f >|37| 0x00000006<, f >|37| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |38|
  BASICBLOCK |38|
    0x00000000 br |35|
  BASICBLOCK |39|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|39| 0x00000000<, 2
    0x00000002 call aKG "__length__" (*__unk_type_kind >|39| 0x00000001<) u64
    0x00000003 load *u64 >|3| 0x00000000<
    0x00000004 ult u64 >|39| 0x00000003<, u64 >|39| 0x00000002<
    0x00000005 cbr u64 >|39| 0x00000004<, |40|, |42|
  BASICBLOCK |40|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|40| 0x00000000<, 2
    0x00000002 call aLG "__array__" (*__unk_type_kind >|40| 0x00000001<) *__unk_type_kind
    0x00000003 var *__unk_type_kind 0x00000004
    0x00000004 load *u64 >|3| 0x00000000<
    0x00000005 arracc *__unk_type_kind >|40| 0x00000002<, u64 >|40| 0x00000004<
    0x00000006 store *__unk_type_kind >|40| 0x00000003<, *__unk_type_kind >|40| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000004
    0x00000008 load **__unk_type_kind >|40| 0x00000007<
    0x00000009 memb *__unk_type_kind >|40| 0x00000008<, 2
    0x0000000A load *__unk_type_kind >|40| 0x00000009<
    0x0000000B var **__unk_type_kind 0x00000004
    0x0000000C load **__unk_type_kind >|40| 0x0000000B<
    0x0000000D bc *__unk_type_kind >|40| 0x0000000C< to *__unk_type_kind
    0x0000000E call aiB "getX" (*__unk_type_kind >|40| 0x0000000D<) s32
    0x0000000F si2fp s32 >|40| 0x0000000E< to f
    0x00000010 var **__unk_type_kind 0x00000004
    0x00000011 load **__unk_type_kind >|40| 0x00000010<
    0x00000012 bc *__unk_type_kind >|40| 0x00000011< to *__unk_type_kind
    0x00000013 call ajB "getY" (*__unk_type_kind >|40| 0x00000012<) s32
    0x00000014 si2fp s32 >|40| 0x00000013< to f
    0x00000015 var **__unk_type_kind 0x00000004
    0x00000016 load **__unk_type_kind >|40| 0x00000015<
    0x00000017 bc *__unk_type_kind >|40| 0x00000016< to *__unk_type_kind
    0x00000018 call aqB "getWidth" (*__unk_type_kind >|40| 0x00000017<) s32
    0x00000019 si2fp s32 >|40| 0x00000018< to f
    0x0000001A var **__unk_type_kind 0x00000004
    0x0000001B load **__unk_type_kind >|40| 0x0000001A<
    0x0000001C bc *__unk_type_kind >|40| 0x0000001B< to *__unk_type_kind
    0x0000001D call arB "getHeight" (*__unk_type_kind >|40| 0x0000001C<) s32
    0x0000001E si2fp s32 >|40| 0x0000001D< to f
    0x0000001F call aqC "drawFromCamera" (__unk_type_kind >|40| 0x0000000A<, f >|40| 0x0000000F<, f >|40| 0x00000014<, f >|40| 0x00000019<, f >|40| 0x0000001E<) void
    0x00000020 br |41|
  BASICBLOCK |41|
    0x00000000 load *u64 >|3| 0x00000000<
    0x00000001 add u64 >|41| 0x00000000<, u64 1
    0x00000002 store *u64 >|3| 0x00000000<, u64 >|41| 0x00000001<
    0x00000003 br |39|
  BASICBLOCK |42|
    0x00000000 ret
fn drawBridge avC -> void
    {6 BBs, 59 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|0| 0x00000000< to *__unk_type_kind
    0x00000002 call aqB "getWidth" (*__unk_type_kind >|0| 0x00000001<) s32
    0x00000003 sdiv s32 >|0| 0x00000002<, s32 64
    0x00000004 eq s32 >|0| 0x00000003<, s32 2
    0x00000005 cbr s32 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000901
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|1| 0x00000002< to *__unk_type_kind
    0x00000004 call aiB "getX" (*__unk_type_kind >|1| 0x00000003<) s32
    0x00000005 si2fp s32 >|1| 0x00000004< to f
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 bc *__unk_type_kind >|1| 0x00000006< to *__unk_type_kind
    0x00000008 call ajB "getY" (*__unk_type_kind >|1| 0x00000007<) s32
    0x00000009 si2fp s32 >|1| 0x00000008< to f
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|1| 0x00000001<, f >|1| 0x00000005<, f >|1| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B gvar *__unk_type_kind 0x00000902
    0x0000000C load *__unk_type_kind >|1| 0x0000000B<
    0x0000000D var *__unk_type_kind 0x00000000
    0x0000000E bc *__unk_type_kind >|1| 0x0000000D< to *__unk_type_kind
    0x0000000F call aiB "getX" (*__unk_type_kind >|1| 0x0000000E<) s32
    0x00000010 si2fp s32 >|1| 0x0000000F< to f
    0x00000011 fadd f >|1| 0x00000010<, f 64.000000
    0x00000012 var *__unk_type_kind 0x00000000
    0x00000013 bc *__unk_type_kind >|1| 0x00000012< to *__unk_type_kind
    0x00000014 call ajB "getY" (*__unk_type_kind >|1| 0x00000013<) s32
    0x00000015 si2fp s32 >|1| 0x00000014< to f
    0x00000016 call aqC "drawFromCamera" (__unk_type_kind >|1| 0x0000000C<, f >|1| 0x00000011<, f >|1| 0x00000015<, f 64.000000, f 64.000000) void
    0x00000017 ret
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 bc *__unk_type_kind >|2| 0x00000000< to *__unk_type_kind
    0x00000002 call aiB "getX" (*__unk_type_kind >|2| 0x00000001<) s32
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|2| 0x00000003<, s32 >|2| 0x00000002<
    0x00000005 br |3|
  BASICBLOCK |3|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|3| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 bc *__unk_type_kind >|3| 0x00000002< to *__unk_type_kind
    0x00000004 call akB "getMaxX" (*__unk_type_kind >|3| 0x00000003<) s32
    0x00000005 slt s32 >|3| 0x00000001<, s32 >|3| 0x00000004<
    0x00000006 cbr s32 >|3| 0x00000005<, |4|, |5|
  BASICBLOCK |4|
    0x00000000 gvar *__unk_type_kind 0x00000901
    0x00000001 load *__unk_type_kind >|4| 0x00000000<
    0x00000002 var *s32 0x00000001
    0x00000003 load *s32 >|4| 0x00000002<
    0x00000004 si2fp s32 >|4| 0x00000003< to f
    0x00000005 var *__unk_type_kind 0x00000000
    0x00000006 bc *__unk_type_kind >|4| 0x00000005< to *__unk_type_kind
    0x00000007 call ajB "getY" (*__unk_type_kind >|4| 0x00000006<) s32
    0x00000008 si2fp s32 >|4| 0x00000007< to f
    0x00000009 call aqC "drawFromCamera" (__unk_type_kind >|4| 0x00000001<, f >|4| 0x00000004<, f >|4| 0x00000008<, f 64.000000, f 64.000000) void
    0x0000000A var *s32 0x00000001
    0x0000000B load *s32 >|4| 0x0000000A<
    0x0000000C add s32 >|4| 0x0000000B<, s32 64
    0x0000000D store *s32 >|4| 0x0000000A<, s32 >|4| 0x0000000C<
    0x0000000E br |3|
  BASICBLOCK |5|
    0x00000000 ret
fn drawPlayer awC -> void
    {11 BBs, 90 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 f]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 10
    0x00000002 call aWB "isValid" (*__unk_type_kind >|0| 0x00000001<) bool
    0x00000003 cbr bool >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 10
    0x00000002 load *__unk_type_kind >|1| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|2| 0x00000000<
    0x00000002 call azC "getImageForPlayer" (__unk_type_kind >|2| 0x00000001<) __unk_type_kind
    0x00000003 br |3|
  BASICBLOCK |3|
    0x00000000 phi2 |1| -> __unk_type_kind >|1| 0x00000002<, |2| -> __unk_type_kind >|2| 0x00000002<
    0x00000001 var *__unk_type_kind 0x00000002
    0x00000002 store *__unk_type_kind >|3| 0x00000001<, __unk_type_kind >|3| 0x00000000<
    0x00000003 var *f 0x00000001
    0x00000004 load *f >|3| 0x00000003<
    0x00000005 call aEB "captDrawOpacity" (f >|3| 0x00000004<) void
    0x00000006 var *__unk_type_kind 0x00000002
    0x00000007 memb *__unk_type_kind >|3| 0x00000006<, 0
    0x00000008 load *__unk_type_kind >|3| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A memb *__unk_type_kind >|3| 0x00000009<, 0
    0x0000000B load *s32 >|3| 0x0000000A<
    0x0000000C si2fp s32 >|3| 0x0000000B< to f
    0x0000000D var *__unk_type_kind 0x00000002
    0x0000000E memb *__unk_type_kind >|3| 0x0000000D<, 1
    0x0000000F load *s32 >|3| 0x0000000E<
    0x00000010 si2fp s32 >|3| 0x0000000F< to f
    0x00000011 fadd f >|3| 0x0000000C<, f >|3| 0x00000010<
    0x00000012 var *__unk_type_kind 0x00000000
    0x00000013 memb *__unk_type_kind >|3| 0x00000012<, 1
    0x00000014 load *s32 >|3| 0x00000013<
    0x00000015 si2fp s32 >|3| 0x00000014< to f
    0x00000016 var *__unk_type_kind 0x00000002
    0x00000017 memb *__unk_type_kind >|3| 0x00000016<, 2
    0x00000018 load *s32 >|3| 0x00000017<
    0x00000019 si2fp s32 >|3| 0x00000018< to f
    0x0000001A fadd f >|3| 0x00000015<, f >|3| 0x00000019<
    0x0000001B var *__unk_type_kind 0x00000000
    0x0000001C memb *__unk_type_kind >|3| 0x0000001B<, 4
    0x0000001D load *s32 >|3| 0x0000001C<
    0x0000001E si2fp s32 >|3| 0x0000001D< to f
    0x0000001F var *__unk_type_kind 0x00000002
    0x00000020 memb *__unk_type_kind >|3| 0x0000001F<, 3
    0x00000021 load *s32 >|3| 0x00000020<
    0x00000022 si2fp s32 >|3| 0x00000021< to f
    0x00000023 fmul f >|3| 0x0000001E<, f >|3| 0x00000022<
    0x00000024 var *__unk_type_kind 0x00000002
    0x00000025 memb *__unk_type_kind >|3| 0x00000024<, 4
    0x00000026 load *s32 >|3| 0x00000025<
    0x00000027 si2fp s32 >|3| 0x00000026< to f
    0x00000028 call arC "drawFromCameraEx" (__unk_type_kind >|3| 0x00000008<, f >|3| 0x00000011<, f >|3| 0x0000001A<, f >|3| 0x00000023<, f >|3| 0x00000027<) void
    0x00000029 var *__unk_type_kind 0x00000000
    0x0000002A memb *__unk_type_kind >|3| 0x00000029<, 5
    0x0000002B load *bool >|3| 0x0000002A<
    0x0000002C isz bool >|3| 0x0000002B<
    0x0000002D cbr u64 >|3| 0x0000002C<, |4|, |5|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 8
    0x00000002 load *bool >|4| 0x00000001<
    0x00000003 br |5|
  BASICBLOCK |5|
    0x00000000 phi2 |3| -> bool false, |4| -> bool >|4| 0x00000002<
    0x00000001 cbr bool >|5| 0x00000000<, |6|, |7|
  BASICBLOCK |6|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|6| 0x00000000<
    0x00000002 eq u64 >|6| 0x00000001<, u64 4
    0x00000003 cbr u64 >|6| 0x00000002<, |8|, |9|
  BASICBLOCK |7|
    0x00000000 call aEB "captDrawOpacity" (f 1.000000) void
    0x00000001 var *__unk_type_kind 0x00000002
    0x00000002 call axD "__defer__" (*__unk_type_kind >|7| 0x00000001<) void
    0x00000003 ret
  BASICBLOCK |8|
    0x00000000 gvar *__unk_type_kind 0x00000904
    0x00000001 load *__unk_type_kind >|8| 0x00000000<
    0x00000002 br |10|
  BASICBLOCK |9|
    0x00000000 gvar *__unk_type_kind 0x00000903
    0x00000001 load *__unk_type_kind >|9| 0x00000000<
    0x00000002 br |10|
  BASICBLOCK |10|
    0x00000000 phi2 |8| -> __unk_type_kind >|8| 0x00000001<, |9| -> __unk_type_kind >|9| 0x00000001<
    0x00000001 var *__unk_type_kind 0x00000000
    0x00000002 memb *__unk_type_kind >|10| 0x00000001<, 0
    0x00000003 load *s32 >|10| 0x00000002<
    0x00000004 si2fp s32 >|10| 0x00000003< to f
    0x00000005 var *__unk_type_kind 0x00000000
    0x00000006 memb *__unk_type_kind >|10| 0x00000005<, 1
    0x00000007 load *s32 >|10| 0x00000006<
    0x00000008 si2fp s32 >|10| 0x00000007< to f
    0x00000009 fsub f >|10| 0x00000008<, f 64.000000
    0x0000000A call aqC "drawFromCamera" (__unk_type_kind >|10| 0x00000000<, f >|10| 0x00000004<, f >|10| 0x00000009<, f 64.000000, f 64.000000) void
    0x0000000B br |7|
fn drawDeath axC -> void
    {1 BBs, 27 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000956
    0x00000001 memb *__unk_type_kind >|0| 0x00000000<, 0
    0x00000002 load *__unk_type_kind >|0| 0x00000001<
    0x00000003 gvar *f 0x00000952
    0x00000004 load *f >|0| 0x00000003<
    0x00000005 gvar *__unk_type_kind 0x00000956
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 si2fp s32 >|0| 0x00000007< to f
    0x00000009 fadd f >|0| 0x00000004<, f >|0| 0x00000008<
    0x0000000A gvar *f 0x00000953
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C gvar *__unk_type_kind 0x00000956
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E load *s32 >|0| 0x0000000D<
    0x0000000F si2fp s32 >|0| 0x0000000E< to f
    0x00000010 fadd f >|0| 0x0000000B<, f >|0| 0x0000000F<
    0x00000011 gvar *__unk_type_kind 0x00000956
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 load *s32 >|0| 0x00000012<
    0x00000014 si2fp s32 >|0| 0x00000013< to f
    0x00000015 gvar *__unk_type_kind 0x00000956
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 4
    0x00000017 load *s32 >|0| 0x00000016<
    0x00000018 si2fp s32 >|0| 0x00000017< to f
    0x00000019 call arC "drawFromCameraEx" (__unk_type_kind >|0| 0x00000002<, f >|0| 0x00000009<, f >|0| 0x00000010<, f >|0| 0x00000014<, f >|0| 0x00000018<) void
    0x0000001A ret
fn drawInventory ayC -> void
    {30 BBs, 347 INSTRs, 14 VARs}
    [0x00000000 f]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000000 u64]
    [0x00000001 f]
    [0x00000002 f]
    [0x00000000 u64]
    [0x00000001 s32]
    [0x00000002 f]
    [0x00000003 f]
    [0x00000004 s32]
    [0x00000005 s32]
    [0x00000006 s32]
  BASICBLOCK |0|
    0x00000000 call aAD "getInventoryX" () f
    0x00000001 var *f 0x00000000
    0x00000002 store *f >|0| 0x00000001<, f >|0| 0x00000000<
    0x00000003 call aBD "getInventoryY" () f
    0x00000004 var *f 0x00000001
    0x00000005 store *f >|0| 0x00000004<, f >|0| 0x00000003<
    0x00000006 gvar *__unk_type_kind 0x0000091B
    0x00000007 load *__unk_type_kind >|0| 0x00000006<
    0x00000008 var *f 0x00000000
    0x00000009 load *f >|0| 0x00000008<
    0x0000000A var *f 0x00000001
    0x0000000B load *f >|0| 0x0000000A<
    0x0000000C fmul f 224.000000, f 4.000000
    0x0000000D fmul f 112.000000, f 4.000000
    0x0000000E call aDB "captDrawTexture" (__unk_type_kind >|0| 0x00000007<, f >|0| 0x00000009<, f >|0| 0x0000000B<, f >|0| 0x0000000C<, f >|0| 0x0000000D<) void
    0x0000000F gvar *s32 0x0000096C
    0x00000010 load *s32 >|0| 0x0000000F<
    0x00000011 si2fp s32 >|0| 0x00000010< to f
    0x00000012 fmul f 96.000000, f >|0| 0x00000011<
    0x00000013 fadd f 4.000000, f >|0| 0x00000012<
    0x00000014 var *f 0x00000002
    0x00000015 store *f >|0| 0x00000014<, f >|0| 0x00000013<
    0x00000016 fdiv f 112.000000, f 106.000000
    0x00000017 gvar *s32 0x0000096D
    0x00000018 load *s32 >|0| 0x00000017<
    0x00000019 si2fp s32 >|0| 0x00000018< to f
    0x0000001A fmul f 24.000000, f >|0| 0x00000019<
    0x0000001B fadd f 35.000000, f >|0| 0x0000001A<
    0x0000001C fmul f >|0| 0x00000016<, f >|0| 0x0000001B<
    0x0000001D fmul f >|0| 0x0000001C<, f 4.000000
    0x0000001E var *f 0x00000003
    0x0000001F store *f >|0| 0x0000001E<, f >|0| 0x0000001D<
    0x00000020 gvar *__unk_type_kind 0x0000091C
    0x00000021 load *__unk_type_kind >|0| 0x00000020<
    0x00000022 var *f 0x00000000
    0x00000023 load *f >|0| 0x00000022<
    0x00000024 var *f 0x00000002
    0x00000025 load *f >|0| 0x00000024<
    0x00000026 fadd f >|0| 0x00000023<, f >|0| 0x00000025<
    0x00000027 var *f 0x00000001
    0x00000028 load *f >|0| 0x00000027<
    0x00000029 var *f 0x00000003
    0x0000002A load *f >|0| 0x00000029<
    0x0000002B fadd f >|0| 0x00000028<, f >|0| 0x0000002A<
    0x0000002C fmul f 22.000000, f 4.000000
    0x0000002D fdiv f 112.000000, f 106.000000
    0x0000002E fmul f >|0| 0x0000002D<, f 22.000000
    0x0000002F fmul f >|0| 0x0000002E<, f 4.000000
    0x00000030 call aDB "captDrawTexture" (__unk_type_kind >|0| 0x00000021<, f >|0| 0x00000026<, f >|0| 0x0000002B<, f >|0| 0x0000002C<, f >|0| 0x0000002F<) void
    0x00000031 var *u64 0x00000004
    0x00000032 store *u64 >|0| 0x00000031<, u64 0
    0x00000033 br |1|
  BASICBLOCK |1|
    0x00000000 load *u64 >|0| 0x00000031<
    0x00000001 ult u64 >|1| 0x00000000<, u64 18
    0x00000002 cbr u64 >|1| 0x00000001<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *bool 0x00000972
    0x00000001 load *bool >|2| 0x00000000<
    0x00000002 cbr bool >|2| 0x00000001<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000031<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000031<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *u64 0x00000007
    0x00000001 store *u64 >|4| 0x00000000<, u64 0
    0x00000002 br |13|
  BASICBLOCK |5|
    0x00000000 gvar *[18] u64 0x00000973
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|5| 0x00000001<
    0x00000003 bc *[18] u64 >|5| 0x00000000< to *u64
    0x00000004 arracc *u64 >|5| 0x00000003<, u64 >|5| 0x00000002<
    0x00000005 load *u64 >|5| 0x00000004<
    0x00000006 br |7|
  BASICBLOCK |6|
    0x00000000 gvar *[18] u64 0x0000096E
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|6| 0x00000001<
    0x00000003 bc *[18] u64 >|6| 0x00000000< to *u64
    0x00000004 arracc *u64 >|6| 0x00000003<, u64 >|6| 0x00000002<
    0x00000005 load *u64 >|6| 0x00000004<
    0x00000006 br |7|
  BASICBLOCK |7|
    0x00000000 phi2 |5| -> u64 >|5| 0x00000005<, |6| -> u64 >|6| 0x00000005<
    0x00000001 eq u64 >|7| 0x00000000<, u64 0
    0x00000002 cbr u64 >|7| 0x00000001<, |8|, |9|
  BASICBLOCK |8|
    0x00000000 br |3|
  BASICBLOCK |9|
    0x00000000 var *u64 0x00000004
    0x00000001 load *u64 >|9| 0x00000000<
    0x00000002 trunc u64 >|9| 0x00000001< to s32
    0x00000003 call aGD "getInventoryItemRelX" (s32 >|9| 0x00000002<) f
    0x00000004 var *f 0x00000005
    0x00000005 store *f >|9| 0x00000004<, f >|9| 0x00000003<
    0x00000006 var *u64 0x00000004
    0x00000007 load *u64 >|9| 0x00000006<
    0x00000008 trunc u64 >|9| 0x00000007< to s32
    0x00000009 call aHD "getInventoryItemRelY" (s32 >|9| 0x00000008<) f
    0x0000000A var *f 0x00000006
    0x0000000B store *f >|9| 0x0000000A<, f >|9| 0x00000009<
    0x0000000C gvar *bool 0x00000972
    0x0000000D load *bool >|9| 0x0000000C<
    0x0000000E cbr bool >|9| 0x0000000D<, |10|, |11|
  BASICBLOCK |10|
    0x00000000 gvar *[18] u64 0x00000973
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|10| 0x00000001<
    0x00000003 bc *[18] u64 >|10| 0x00000000< to *u64
    0x00000004 arracc *u64 >|10| 0x00000003<, u64 >|10| 0x00000002<
    0x00000005 load *u64 >|10| 0x00000004<
    0x00000006 br |12|
  BASICBLOCK |11|
    0x00000000 gvar *[18] u64 0x0000096E
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|11| 0x00000001<
    0x00000003 bc *[18] u64 >|11| 0x00000000< to *u64
    0x00000004 arracc *u64 >|11| 0x00000003<, u64 >|11| 0x00000002<
    0x00000005 load *u64 >|11| 0x00000004<
    0x00000006 br |12|
  BASICBLOCK |12|
    0x00000000 phi2 |10| -> u64 >|10| 0x00000005<, |11| -> u64 >|11| 0x00000005<
    0x00000001 call a0D "getImageForItem" (u64 >|12| 0x00000000<) __unk_type_kind
    0x00000002 var *f 0x00000000
    0x00000003 load *f >|12| 0x00000002<
    0x00000004 var *f 0x00000005
    0x00000005 load *f >|12| 0x00000004<
    0x00000006 fadd f >|12| 0x00000003<, f >|12| 0x00000005<
    0x00000007 var *f 0x00000001
    0x00000008 load *f >|12| 0x00000007<
    0x00000009 var *f 0x00000006
    0x0000000A load *f >|12| 0x00000009<
    0x0000000B fadd f >|12| 0x00000008<, f >|12| 0x0000000A<
    0x0000000C call aDB "captDrawTexture" (__unk_type_kind >|12| 0x00000001<, f >|12| 0x00000006<, f >|12| 0x0000000B<, f 64.000000, f 64.000000) void
    0x0000000D br |3|
  BASICBLOCK |13|
    0x00000000 load *u64 >|4| 0x00000000<
    0x00000001 ult u64 >|13| 0x00000000<, u64 6
    0x00000002 cbr u64 >|13| 0x00000001<, |14|, |16|
  BASICBLOCK |14|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 var *u64 0x00000007
    0x00000002 load *u64 >|14| 0x00000001<
    0x00000003 bc *[6] s32 >|14| 0x00000000< to *s32
    0x00000004 arracc *s32 >|14| 0x00000003<, u64 >|14| 0x00000002<
    0x00000005 load *s32 >|14| 0x00000004<
    0x00000006 var *s32 0x00000008
    0x00000007 store *s32 >|14| 0x00000006<, s32 >|14| 0x00000005<
    0x00000008 var *s32 0x00000008
    0x00000009 load *s32 >|14| 0x00000008<
    0x0000000A sgt s32 >|14| 0x00000009<, s32 999
    0x0000000B cbr s32 >|14| 0x0000000A<, |17|, |18|
  BASICBLOCK |15|
    0x00000000 load *u64 >|4| 0x00000000<
    0x00000001 add u64 >|15| 0x00000000<, u64 1
    0x00000002 store *u64 >|4| 0x00000000<, u64 >|15| 0x00000001<
    0x00000003 br |13|
  BASICBLOCK |16|
    0x00000000 gvar *bool 0x00000972
    0x00000001 load *bool >|16| 0x00000000<
    0x00000002 cbr bool >|16| 0x00000001<, |27|, |28|
  BASICBLOCK |17|
    0x00000000 var *s32 0x00000008
    0x00000001 store *s32 >|17| 0x00000000<, s32 999
    0x00000002 br |18|
  BASICBLOCK |18|
    0x00000000 var *u64 0x00000007
    0x00000001 load *u64 >|18| 0x00000000<
    0x00000002 trunc u64 >|18| 0x00000001< to s32
    0x00000003 call aGD "getInventoryItemRelX" (s32 >|18| 0x00000002<) f
    0x00000004 var *f 0x00000009
    0x00000005 store *f >|18| 0x00000004<, f >|18| 0x00000003<
    0x00000006 fdiv f 112.000000, f 106.000000
    0x00000007 fmul f >|18| 0x00000006<, f 16.000000
    0x00000008 var *f 0x0000000A
    0x00000009 store *f >|18| 0x00000008<, f >|18| 0x00000007<
    0x0000000A var *u64 0x00000007
    0x0000000B load *u64 >|18| 0x0000000A<
    0x0000000C add u64 >|18| 0x0000000B<, u64 1
    0x0000000D trunc u64 >|18| 0x0000000C< to s32
    0x0000000E call a2D "getImageForResource" (s32 >|18| 0x0000000D<) __unk_type_kind
    0x0000000F var *f 0x00000000
    0x00000010 load *f >|18| 0x0000000F<
    0x00000011 var *f 0x00000009
    0x00000012 load *f >|18| 0x00000011<
    0x00000013 fadd f >|18| 0x00000010<, f >|18| 0x00000012<
    0x00000014 var *f 0x00000001
    0x00000015 load *f >|18| 0x00000014<
    0x00000016 var *f 0x0000000A
    0x00000017 load *f >|18| 0x00000016<
    0x00000018 fadd f >|18| 0x00000015<, f >|18| 0x00000017<
    0x00000019 call aDB "captDrawTexture" (__unk_type_kind >|18| 0x0000000E<, f >|18| 0x00000013<, f >|18| 0x00000018<, f 64.000000, f 64.000000) void
    0x0000001A var *s32 0x00000008
    0x0000001B load *s32 >|18| 0x0000001A<
    0x0000001C srem s32 >|18| 0x0000001B<, s32 10
    0x0000001D var *s32 0x0000000B
    0x0000001E store *s32 >|18| 0x0000001D<, s32 >|18| 0x0000001C<
    0x0000001F var *s32 0x00000008
    0x00000020 load *s32 >|18| 0x0000001F<
    0x00000021 sdiv s32 >|18| 0x00000020<, s32 10
    0x00000022 srem s32 >|18| 0x00000021<, s32 10
    0x00000023 var *s32 0x0000000C
    0x00000024 store *s32 >|18| 0x00000023<, s32 >|18| 0x00000022<
    0x00000025 var *s32 0x00000008
    0x00000026 load *s32 >|18| 0x00000025<
    0x00000027 sdiv s32 >|18| 0x00000026<, s32 100
    0x00000028 srem s32 >|18| 0x00000027<, s32 10
    0x00000029 var *s32 0x0000000D
    0x0000002A store *s32 >|18| 0x00000029<, s32 >|18| 0x00000028<
    0x0000002B var *s32 0x0000000C
    0x0000002C load *s32 >|18| 0x0000002B<
    0x0000002D eq s32 >|18| 0x0000002C<, s32 0
    0x0000002E cbr s32 >|18| 0x0000002D<, |19|, |20|
  BASICBLOCK |19|
    0x00000000 var *s32 0x0000000D
    0x00000001 load *s32 >|19| 0x00000000<
    0x00000002 eq s32 >|19| 0x00000001<, s32 0
    0x00000003 br |20|
  BASICBLOCK |20|
    0x00000000 phi2 |18| -> bool false, |19| -> s32 >|19| 0x00000002<
    0x00000001 cbr bool >|20| 0x00000000<, |21|, |22|
  BASICBLOCK |21|
    0x00000000 gvar *[10] __unk_type_kind 0x00000970
    0x00000001 var *s32 0x0000000B
    0x00000002 load *s32 >|21| 0x00000001<
    0x00000003 bc *[10] __unk_type_kind >|21| 0x00000000< to *__unk_type_kind
    0x00000004 arracc *__unk_type_kind >|21| 0x00000003<, s32 >|21| 0x00000002<
    0x00000005 load *__unk_type_kind >|21| 0x00000004<
    0x00000006 var *f 0x00000000
    0x00000007 load *f >|21| 0x00000006<
    0x00000008 fadd f >|21| 0x00000007<, f 36.000000
    0x00000009 var *u64 0x00000007
    0x0000000A load *u64 >|21| 0x00000009<
    0x0000000B ui2fp u64 >|21| 0x0000000A< to f
    0x0000000C fmul f >|21| 0x0000000B<, f 96.000000
    0x0000000D fadd f >|21| 0x00000008<, f >|21| 0x0000000C<
    0x0000000E fadd f >|21| 0x0000000D<, f 2.000000
    0x0000000F var *f 0x00000001
    0x00000010 load *f >|21| 0x0000000F<
    0x00000011 fadd f >|21| 0x00000010<, f 108.000000
    0x00000012 call aDB "captDrawTexture" (__unk_type_kind >|21| 0x00000005<, f >|21| 0x0000000E<, f >|21| 0x00000011<, f 16.000000, f 24.000000) void
    0x00000013 br |23|
  BASICBLOCK |22|
    0x00000000 var *s32 0x0000000D
    0x00000001 load *s32 >|22| 0x00000000<
    0x00000002 eq s32 >|22| 0x00000001<, s32 0
    0x00000003 cbr s32 >|22| 0x00000002<, |24|, |25|
  BASICBLOCK |23|
    0x00000000 br |15|
  BASICBLOCK |24|
    0x00000000 gvar *[10] __unk_type_kind 0x00000970
    0x00000001 var *s32 0x0000000C
    0x00000002 load *s32 >|24| 0x00000001<
    0x00000003 bc *[10] __unk_type_kind >|24| 0x00000000< to *__unk_type_kind
    0x00000004 arracc *__unk_type_kind >|24| 0x00000003<, s32 >|24| 0x00000002<
    0x00000005 load *__unk_type_kind >|24| 0x00000004<
    0x00000006 var *f 0x00000000
    0x00000007 load *f >|24| 0x00000006<
    0x00000008 fadd f >|24| 0x00000007<, f 36.000000
    0x00000009 var *u64 0x00000007
    0x0000000A load *u64 >|24| 0x00000009<
    0x0000000B ui2fp u64 >|24| 0x0000000A< to f
    0x0000000C fmul f >|24| 0x0000000B<, f 96.000000
    0x0000000D fadd f >|24| 0x00000008<, f >|24| 0x0000000C<
    0x0000000E fsub f >|24| 0x0000000D<, f 6.000000
    0x0000000F var *f 0x00000001
    0x00000010 load *f >|24| 0x0000000F<
    0x00000011 fadd f >|24| 0x00000010<, f 108.000000
    0x00000012 call aDB "captDrawTexture" (__unk_type_kind >|24| 0x00000005<, f >|24| 0x0000000E<, f >|24| 0x00000011<, f 16.000000, f 24.000000) void
    0x00000013 gvar *[10] __unk_type_kind 0x00000970
    0x00000014 var *s32 0x0000000B
    0x00000015 load *s32 >|24| 0x00000014<
    0x00000016 bc *[10] __unk_type_kind >|24| 0x00000013< to *__unk_type_kind
    0x00000017 arracc *__unk_type_kind >|24| 0x00000016<, s32 >|24| 0x00000015<
    0x00000018 load *__unk_type_kind >|24| 0x00000017<
    0x00000019 var *f 0x00000000
    0x0000001A load *f >|24| 0x00000019<
    0x0000001B fadd f >|24| 0x0000001A<, f 36.000000
    0x0000001C var *u64 0x00000007
    0x0000001D load *u64 >|24| 0x0000001C<
    0x0000001E ui2fp u64 >|24| 0x0000001D< to f
    0x0000001F fmul f >|24| 0x0000001E<, f 96.000000
    0x00000020 fadd f >|24| 0x0000001B<, f >|24| 0x0000001F<
    0x00000021 fadd f >|24| 0x00000020<, f 10.000000
    0x00000022 var *f 0x00000001
    0x00000023 load *f >|24| 0x00000022<
    0x00000024 fadd f >|24| 0x00000023<, f 108.000000
    0x00000025 call aDB "captDrawTexture" (__unk_type_kind >|24| 0x00000018<, f >|24| 0x00000021<, f >|24| 0x00000024<, f 16.000000, f 24.000000) void
    0x00000026 br |26|
  BASICBLOCK |25|
    0x00000000 gvar *[10] __unk_type_kind 0x00000970
    0x00000001 var *s32 0x0000000D
    0x00000002 load *s32 >|25| 0x00000001<
    0x00000003 bc *[10] __unk_type_kind >|25| 0x00000000< to *__unk_type_kind
    0x00000004 arracc *__unk_type_kind >|25| 0x00000003<, s32 >|25| 0x00000002<
    0x00000005 load *__unk_type_kind >|25| 0x00000004<
    0x00000006 var *f 0x00000000
    0x00000007 load *f >|25| 0x00000006<
    0x00000008 fadd f >|25| 0x00000007<, f 36.000000
    0x00000009 var *u64 0x00000007
    0x0000000A load *u64 >|25| 0x00000009<
    0x0000000B ui2fp u64 >|25| 0x0000000A< to f
    0x0000000C fmul f >|25| 0x0000000B<, f 96.000000
    0x0000000D fadd f >|25| 0x00000008<, f >|25| 0x0000000C<
    0x0000000E fsub f >|25| 0x0000000D<, f 14.000000
    0x0000000F var *f 0x00000001
    0x00000010 load *f >|25| 0x0000000F<
    0x00000011 fadd f >|25| 0x00000010<, f 108.000000
    0x00000012 call aDB "captDrawTexture" (__unk_type_kind >|25| 0x00000005<, f >|25| 0x0000000E<, f >|25| 0x00000011<, f 16.000000, f 24.000000) void
    0x00000013 gvar *[10] __unk_type_kind 0x00000970
    0x00000014 var *s32 0x0000000C
    0x00000015 load *s32 >|25| 0x00000014<
    0x00000016 bc *[10] __unk_type_kind >|25| 0x00000013< to *__unk_type_kind
    0x00000017 arracc *__unk_type_kind >|25| 0x00000016<, s32 >|25| 0x00000015<
    0x00000018 load *__unk_type_kind >|25| 0x00000017<
    0x00000019 var *f 0x00000000
    0x0000001A load *f >|25| 0x00000019<
    0x0000001B fadd f >|25| 0x0000001A<, f 36.000000
    0x0000001C var *u64 0x00000007
    0x0000001D load *u64 >|25| 0x0000001C<
    0x0000001E ui2fp u64 >|25| 0x0000001D< to f
    0x0000001F fmul f >|25| 0x0000001E<, f 96.000000
    0x00000020 fadd f >|25| 0x0000001B<, f >|25| 0x0000001F<
    0x00000021 fadd f >|25| 0x00000020<, f 2.000000
    0x00000022 var *f 0x00000001
    0x00000023 load *f >|25| 0x00000022<
    0x00000024 fadd f >|25| 0x00000023<, f 108.000000
    0x00000025 call aDB "captDrawTexture" (__unk_type_kind >|25| 0x00000018<, f >|25| 0x00000021<, f >|25| 0x00000024<, f 16.000000, f 24.000000) void
    0x00000026 gvar *[10] __unk_type_kind 0x00000970
    0x00000027 var *s32 0x0000000B
    0x00000028 load *s32 >|25| 0x00000027<
    0x00000029 bc *[10] __unk_type_kind >|25| 0x00000026< to *__unk_type_kind
    0x0000002A arracc *__unk_type_kind >|25| 0x00000029<, s32 >|25| 0x00000028<
    0x0000002B load *__unk_type_kind >|25| 0x0000002A<
    0x0000002C var *f 0x00000000
    0x0000002D load *f >|25| 0x0000002C<
    0x0000002E fadd f >|25| 0x0000002D<, f 36.000000
    0x0000002F var *u64 0x00000007
    0x00000030 load *u64 >|25| 0x0000002F<
    0x00000031 ui2fp u64 >|25| 0x00000030< to f
    0x00000032 fmul f >|25| 0x00000031<, f 96.000000
    0x00000033 fadd f >|25| 0x0000002E<, f >|25| 0x00000032<
    0x00000034 fadd f >|25| 0x00000033<, f 18.000000
    0x00000035 var *f 0x00000001
    0x00000036 load *f >|25| 0x00000035<
    0x00000037 fadd f >|25| 0x00000036<, f 108.000000
    0x00000038 call aDB "captDrawTexture" (__unk_type_kind >|25| 0x0000002B<, f >|25| 0x00000034<, f >|25| 0x00000037<, f 16.000000, f 24.000000) void
    0x00000039 br |26|
  BASICBLOCK |26|
    0x00000000 br |23|
  BASICBLOCK |27|
    0x00000000 gvar *__unk_type_kind 0x0000092D
    0x00000001 load *__unk_type_kind >|27| 0x00000000<
    0x00000002 br |29|
  BASICBLOCK |28|
    0x00000000 gvar *__unk_type_kind 0x0000092E
    0x00000001 load *__unk_type_kind >|28| 0x00000000<
    0x00000002 br |29|
  BASICBLOCK |29|
    0x00000000 phi2 |27| -> __unk_type_kind >|27| 0x00000001<, |28| -> __unk_type_kind >|28| 0x00000001<
    0x00000001 var *f 0x00000000
    0x00000002 load *f >|29| 0x00000001<
    0x00000003 fmul f 144.000000, f 2.000000
    0x00000004 fadd f >|29| 0x00000002<, f >|29| 0x00000003<
    0x00000005 fmul f 96.000000, f 2.000000
    0x00000006 fsub f >|29| 0x00000004<, f >|29| 0x00000005<
    0x00000007 var *f 0x00000001
    0x00000008 load *f >|29| 0x00000007<
    0x00000009 fsub f >|29| 0x00000008<, f 128.000000
    0x0000000A fmul f 96.000000, f 4.000000
    0x0000000B fmul f 32.000000, f 4.000000
    0x0000000C call aDB "captDrawTexture" (__unk_type_kind >|29| 0x00000000<, f >|29| 0x00000006<, f >|29| 0x00000009<, f >|29| 0x0000000A<, f >|29| 0x0000000B<) void
    0x0000000D ret
fn getImageForPlayer azC -> __unk_type_kind
    {29 BBs, 100 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 eq u64 >|0| 0x00000001<, u64 3
    0x00000003 cbr u64 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 5
    0x00000002 load *bool >|1| 0x00000001<
    0x00000003 cbr bool >|1| 0x00000002<, |3|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 eq u64 >|2| 0x00000001<, u64 4
    0x00000003 cbr u64 >|2| 0x00000002<, |16|, |17|
  BASICBLOCK |3|
    0x00000000 gvar *__unk_type_kind 0x00000934
    0x00000001 call aQB "now" (*__unk_type_kind >|3| 0x00000000<) __unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|3| 0x00000002<, 4
    0x00000004 load *s32 >|3| 0x00000003<
    0x00000005 eq s32 >|3| 0x00000004<, s32 1
    0x00000006 cbr s32 >|3| 0x00000005<, |5|, |6|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|4| 0x00000000<, 6
    0x00000002 load *bool >|4| 0x00000001<
    0x00000003 cbr bool >|4| 0x00000002<, |9|, |8|
  BASICBLOCK |5|
    0x00000000 br |7|
  BASICBLOCK |6|
    0x00000000 br |7|
  BASICBLOCK |7|
    0x00000000 phi2 |5| -> s32 0, |6| -> s32 -8
    0x00000001 call aXB "gameImageEx" (__unk_type_kind >|3| 0x00000001<, s32 >|7| 0x00000000<, s32 -8, s32 72, s32 72) __unk_type_kind
    0x00000002 ret __unk_type_kind >|7| 0x00000001<
  BASICBLOCK |8|
    0x00000000 gvar *__unk_type_kind 0x000008FD
    0x00000001 load *__unk_type_kind >|8| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|8| 0x00000002<, 4
    0x00000004 load *s32 >|8| 0x00000003<
    0x00000005 eq s32 >|8| 0x00000004<, s32 1
    0x00000006 cbr s32 >|8| 0x00000005<, |10|, |11|
  BASICBLOCK |9|
    0x00000000 gvar *__unk_type_kind 0x00000933
    0x00000001 call aQB "now" (*__unk_type_kind >|9| 0x00000000<) __unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|9| 0x00000002<, 4
    0x00000004 load *s32 >|9| 0x00000003<
    0x00000005 eq s32 >|9| 0x00000004<, s32 1
    0x00000006 cbr s32 >|9| 0x00000005<, |13|, |14|
  BASICBLOCK |10|
    0x00000000 br |12|
  BASICBLOCK |11|
    0x00000000 br |12|
  BASICBLOCK |12|
    0x00000000 phi2 |10| -> s32 0, |11| -> s32 -48
    0x00000001 call aXB "gameImageEx" (__unk_type_kind >|8| 0x00000001<, s32 >|12| 0x00000000<, s32 -8, s32 112, s32 72) __unk_type_kind
    0x00000002 ret __unk_type_kind >|12| 0x00000001<
  BASICBLOCK |13|
    0x00000000 br |15|
  BASICBLOCK |14|
    0x00000000 br |15|
  BASICBLOCK |15|
    0x00000000 phi2 |13| -> s32 0, |14| -> s32 -48
    0x00000001 call aXB "gameImageEx" (__unk_type_kind >|9| 0x00000001<, s32 >|15| 0x00000000<, s32 -8, s32 112, s32 72) __unk_type_kind
    0x00000002 ret __unk_type_kind >|15| 0x00000001<
  BASICBLOCK |16|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|16| 0x00000000<, 5
    0x00000002 load *bool >|16| 0x00000001<
    0x00000003 cbr bool >|16| 0x00000002<, |18|, |19|
  BASICBLOCK |17|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|17| 0x00000000<, 6
    0x00000002 load *bool >|17| 0x00000001<
    0x00000003 cbr bool >|17| 0x00000002<, |26|, |25|
  BASICBLOCK |18|
    0x00000000 gvar *__unk_type_kind 0x00000936
    0x00000001 call aQB "now" (*__unk_type_kind >|18| 0x00000000<) __unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|18| 0x00000002<, 4
    0x00000004 load *s32 >|18| 0x00000003<
    0x00000005 eq s32 >|18| 0x00000004<, s32 1
    0x00000006 cbr s32 >|18| 0x00000005<, |20|, |21|
  BASICBLOCK |19|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|19| 0x00000000<, 6
    0x00000002 load *bool >|19| 0x00000001<
    0x00000003 cbr bool >|19| 0x00000002<, |24|, |23|
  BASICBLOCK |20|
    0x00000000 br |22|
  BASICBLOCK |21|
    0x00000000 br |22|
  BASICBLOCK |22|
    0x00000000 phi2 |20| -> s32 0, |21| -> s32 -8
    0x00000001 call aXB "gameImageEx" (__unk_type_kind >|18| 0x00000001<, s32 >|22| 0x00000000<, s32 -8, s32 72, s32 72) __unk_type_kind
    0x00000002 ret __unk_type_kind >|22| 0x00000001<
  BASICBLOCK |23|
    0x00000000 gvar *__unk_type_kind 0x000008FF
    0x00000001 load *__unk_type_kind >|23| 0x00000000<
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|23| 0x00000001<, s32 0, s32 -24, s32 64, s32 88) __unk_type_kind
    0x00000003 ret __unk_type_kind >|23| 0x00000002<
  BASICBLOCK |24|
    0x00000000 gvar *__unk_type_kind 0x00000935
    0x00000001 call aQB "now" (*__unk_type_kind >|24| 0x00000000<) __unk_type_kind
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|24| 0x00000001<, s32 0, s32 -24, s32 64, s32 88) __unk_type_kind
    0x00000003 ret __unk_type_kind >|24| 0x00000002<
  BASICBLOCK |25|
    0x00000000 gvar *__unk_type_kind 0x000008FB
    0x00000001 load *__unk_type_kind >|25| 0x00000000<
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|25| 0x00000001<, s32 0, s32 0, s32 64, s32 64) __unk_type_kind
    0x00000003 ret __unk_type_kind >|25| 0x00000002<
  BASICBLOCK |26|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|26| 0x00000000<, 5
    0x00000002 load *bool >|26| 0x00000001<
    0x00000003 cbr bool >|26| 0x00000002<, |27|, |28|
  BASICBLOCK |27|
    0x00000000 gvar *__unk_type_kind 0x00000932
    0x00000001 call aQB "now" (*__unk_type_kind >|27| 0x00000000<) __unk_type_kind
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|27| 0x00000001<, s32 0, s32 0, s32 64, s32 64) __unk_type_kind
    0x00000003 ret __unk_type_kind >|27| 0x00000002<
  BASICBLOCK |28|
    0x00000000 gvar *__unk_type_kind 0x00000931
    0x00000001 call aQB "now" (*__unk_type_kind >|28| 0x00000000<) __unk_type_kind
    0x00000002 call aXB "gameImageEx" (__unk_type_kind >|28| 0x00000001<, s32 0, s32 0, s32 64, s32 64) __unk_type_kind
    0x00000003 ret __unk_type_kind >|28| 0x00000002<
fn getImageForItem a0D -> __unk_type_kind
    {9 BBs, 31 INSTRs, 1 VARs}
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 eq u64 >|0| 0x00000001<, u64 1
    0x00000003 cbr u64 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000912
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 ret __unk_type_kind >|1| 0x00000001<
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 eq u64 >|2| 0x00000001<, u64 2
    0x00000003 cbr u64 >|2| 0x00000002<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 gvar *__unk_type_kind 0x00000913
    0x00000001 load *__unk_type_kind >|3| 0x00000000<
    0x00000002 ret __unk_type_kind >|3| 0x00000001<
  BASICBLOCK |4|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|4| 0x00000000<
    0x00000002 eq u64 >|4| 0x00000001<, u64 3
    0x00000003 cbr u64 >|4| 0x00000002<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 gvar *__unk_type_kind 0x00000914
    0x00000001 load *__unk_type_kind >|5| 0x00000000<
    0x00000002 ret __unk_type_kind >|5| 0x00000001<
  BASICBLOCK |6|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|6| 0x00000000<
    0x00000002 eq u64 >|6| 0x00000001<, u64 4
    0x00000003 cbr u64 >|6| 0x00000002<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 gvar *__unk_type_kind 0x00000916
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 ret __unk_type_kind >|7| 0x00000001<
  BASICBLOCK |8|
    0x00000000 gvar *__unk_type_kind 0x0000090B
    0x00000001 load *__unk_type_kind >|8| 0x00000000<
    0x00000002 ret __unk_type_kind >|8| 0x00000001<
fn getImageForResource a1D -> __unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|0| 0x00000000<
    0x00000002 trunc u64 >|0| 0x00000001< to s32
    0x00000003 call a2D "getImageForResource" (s32 >|0| 0x00000002<) __unk_type_kind
    0x00000004 ret __unk_type_kind >|0| 0x00000003<
fn getImageForResource a2D -> __unk_type_kind
    {13 BBs, 51 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 trunc u64 1 to s32
    0x00000003 eq s32 >|0| 0x00000001<, s32 >|0| 0x00000002<
    0x00000004 cbr s32 >|0| 0x00000003<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000927
    0x00000001 load *__unk_type_kind >|1| 0x00000000<
    0x00000002 ret __unk_type_kind >|1| 0x00000001<
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 trunc u64 2 to s32
    0x00000003 eq s32 >|2| 0x00000001<, s32 >|2| 0x00000002<
    0x00000004 cbr s32 >|2| 0x00000003<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 gvar *__unk_type_kind 0x00000928
    0x00000001 load *__unk_type_kind >|3| 0x00000000<
    0x00000002 ret __unk_type_kind >|3| 0x00000001<
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 trunc u64 3 to s32
    0x00000003 eq s32 >|4| 0x00000001<, s32 >|4| 0x00000002<
    0x00000004 cbr s32 >|4| 0x00000003<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 gvar *__unk_type_kind 0x00000929
    0x00000001 load *__unk_type_kind >|5| 0x00000000<
    0x00000002 ret __unk_type_kind >|5| 0x00000001<
  BASICBLOCK |6|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 trunc u64 4 to s32
    0x00000003 eq s32 >|6| 0x00000001<, s32 >|6| 0x00000002<
    0x00000004 cbr s32 >|6| 0x00000003<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 gvar *__unk_type_kind 0x0000092A
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 ret __unk_type_kind >|7| 0x00000001<
  BASICBLOCK |8|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|8| 0x00000000<
    0x00000002 trunc u64 5 to s32
    0x00000003 eq s32 >|8| 0x00000001<, s32 >|8| 0x00000002<
    0x00000004 cbr s32 >|8| 0x00000003<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 gvar *__unk_type_kind 0x0000092B
    0x00000001 load *__unk_type_kind >|9| 0x00000000<
    0x00000002 ret __unk_type_kind >|9| 0x00000001<
  BASICBLOCK |10|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|10| 0x00000000<
    0x00000002 trunc u64 6 to s32
    0x00000003 eq s32 >|10| 0x00000001<, s32 >|10| 0x00000002<
    0x00000004 cbr s32 >|10| 0x00000003<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 gvar *__unk_type_kind 0x0000092C
    0x00000001 load *__unk_type_kind >|11| 0x00000000<
    0x00000002 ret __unk_type_kind >|11| 0x00000001<
  BASICBLOCK |12|
    0x00000000 gvar *__unk_type_kind 0x0000090B
    0x00000001 load *__unk_type_kind >|12| 0x00000000<
    0x00000002 ret __unk_type_kind >|12| 0x00000001<
fn _NSGetExecutablePath a3D -> s32
fn realpath a4D -> *u8
fn getExecutableLocation a5D -> __unk_type_kind
    {3 BBs, 18 INSTRs, 3 VARs}
    [0x00000000 [1024] u8]
    [0x00000001 u32]
    [0x00000002 [4096] u8]
  BASICBLOCK |0|
    0x00000000 var *u32 0x00000001
    0x00000001 store *u32 >|0| 0x00000000<, u32 1024
    0x00000002 var *[1024] u8 0x00000000
    0x00000003 bc *[1024] u8 >|0| 0x00000002< to *u8
    0x00000004 var *u32 0x00000001
    0x00000005 call a3D "_NSGetExecutablePath" (*u8 >|0| 0x00000003<, *u32 >|0| 0x00000004<) s32
    0x00000006 neq s32 >|0| 0x00000005<, s32 0
    0x00000007 cbr s32 >|0| 0x00000006<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret stru
  BASICBLOCK |2|
    0x00000000 var *[1024] u8 0x00000000
    0x00000001 bc *[1024] u8 >|2| 0x00000000< to *u8
    0x00000002 var *[4096] u8 0x00000002
    0x00000003 bc *[4096] u8 >|2| 0x00000002< to *u8
    0x00000004 call a4D "realpath" (*u8 >|2| 0x00000001<, *u8 >|2| 0x00000003<) *u8
    0x00000005 var *[4096] u8 0x00000002
    0x00000006 bc *[4096] u8 >|2| 0x00000005< to *u8
    0x00000007 call aQA "string" (*u8 >|2| 0x00000006<) __unk_type_kind
    0x00000008 ret __unk_type_kind >|2| 0x00000007<
fn where a6D -> __unk_type_kind
    {3 BBs, 35 INSTRs, 3 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s64]
    [0x00000002 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 call a5D "getExecutableLocation" () __unk_type_kind
    0x00000001 var *__unk_type_kind 0x00000000
    0x00000002 varzi 0x00000000
    0x00000003 call a8A "__assign__" (*__unk_type_kind >|0| 0x00000001<, __unk_type_kind >|0| 0x00000000<) void
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 call aIA "last" (*__unk_type_kind >|0| 0x00000004<, u8 47) s64
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 call aIA "last" (*__unk_type_kind >|0| 0x00000006<, u8 92) s64
    0x00000008 call amD "max" (s64 >|0| 0x00000005<, s64 >|0| 0x00000007<) s64
    0x00000009 var *s64 0x00000001
    0x0000000A store *s64 >|0| 0x00000009<, s64 >|0| 0x00000008<
    0x0000000B var *s64 0x00000001
    0x0000000C load *s64 >|0| 0x0000000B<
    0x0000000D eq s64 >|0| 0x0000000C<, s64 -1
    0x0000000E cbr s64 >|0| 0x0000000D<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call a7A "__pass__" (stru) __unk_type_kind
    0x00000001 call aKD "print" (__unk_type_kind >|1| 0x00000000<) void
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 call a6A "__defer__" (*__unk_type_kind >|1| 0x00000002<) void
    0x00000004 ret stru
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 var *s64 0x00000001
    0x00000002 load *s64 >|2| 0x00000001<
    0x00000003 add s64 >|2| 0x00000002<, s64 1
    0x00000004 reinterp s64 >|2| 0x00000003< to u64
    0x00000005 zext s32 0 to u64
    0x00000006 call aLA "sub" (*__unk_type_kind >|2| 0x00000000<, u64 >|2| 0x00000005<, u64 >|2| 0x00000004<) __unk_type_kind
    0x00000007 var *__unk_type_kind 0x00000002
    0x00000008 varzi 0x00000002
    0x00000009 call a8A "__assign__" (*__unk_type_kind >|2| 0x00000007<, __unk_type_kind >|2| 0x00000006<) void
    0x0000000A var *__unk_type_kind 0x00000000
    0x0000000B call a6A "__defer__" (*__unk_type_kind >|2| 0x0000000A<) void
    0x0000000C var *__unk_type_kind 0x00000002
    0x0000000D load *__unk_type_kind >|2| 0x0000000C<
    0x0000000E ret __unk_type_kind >|2| 0x0000000D<
fn loadThemes a7D -> void
    {1 BBs, 144 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x000008E1
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000976
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 0
    0x00000004 store *__unk_type_kind >|0| 0x00000003<, __unk_type_kind >|0| 0x00000001<
    0x00000005 gvar *__unk_type_kind 0x0000092F
    0x00000006 load *__unk_type_kind >|0| 0x00000005<
    0x00000007 gvar *__unk_type_kind 0x00000976
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *__unk_type_kind >|0| 0x00000008<, __unk_type_kind >|0| 0x00000006<
    0x0000000A gvar *__unk_type_kind 0x000008EB
    0x0000000B load *__unk_type_kind >|0| 0x0000000A<
    0x0000000C gvar *__unk_type_kind 0x00000976
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 2
    0x0000000E store *__unk_type_kind >|0| 0x0000000D<, __unk_type_kind >|0| 0x0000000B<
    0x0000000F gvar *__unk_type_kind 0x000008E2
    0x00000010 load *__unk_type_kind >|0| 0x0000000F<
    0x00000011 gvar *__unk_type_kind 0x00000976
    0x00000012 memb *__unk_type_kind >|0| 0x00000011<, 3
    0x00000013 store *__unk_type_kind >|0| 0x00000012<, __unk_type_kind >|0| 0x00000010<
    0x00000014 gvar *__unk_type_kind 0x000008E3
    0x00000015 load *__unk_type_kind >|0| 0x00000014<
    0x00000016 gvar *__unk_type_kind 0x00000976
    0x00000017 memb *__unk_type_kind >|0| 0x00000016<, 4
    0x00000018 store *__unk_type_kind >|0| 0x00000017<, __unk_type_kind >|0| 0x00000015<
    0x00000019 gvar *__unk_type_kind 0x000008E4
    0x0000001A load *__unk_type_kind >|0| 0x00000019<
    0x0000001B gvar *__unk_type_kind 0x00000976
    0x0000001C memb *__unk_type_kind >|0| 0x0000001B<, 5
    0x0000001D store *__unk_type_kind >|0| 0x0000001C<, __unk_type_kind >|0| 0x0000001A<
    0x0000001E gvar *__unk_type_kind 0x000008E5
    0x0000001F load *__unk_type_kind >|0| 0x0000001E<
    0x00000020 gvar *__unk_type_kind 0x00000976
    0x00000021 memb *__unk_type_kind >|0| 0x00000020<, 6
    0x00000022 store *__unk_type_kind >|0| 0x00000021<, __unk_type_kind >|0| 0x0000001F<
    0x00000023 gvar *__unk_type_kind 0x000008E6
    0x00000024 load *__unk_type_kind >|0| 0x00000023<
    0x00000025 gvar *__unk_type_kind 0x00000976
    0x00000026 memb *__unk_type_kind >|0| 0x00000025<, 7
    0x00000027 store *__unk_type_kind >|0| 0x00000026<, __unk_type_kind >|0| 0x00000024<
    0x00000028 gvar *__unk_type_kind 0x000008E7
    0x00000029 load *__unk_type_kind >|0| 0x00000028<
    0x0000002A gvar *__unk_type_kind 0x00000976
    0x0000002B memb *__unk_type_kind >|0| 0x0000002A<, 8
    0x0000002C store *__unk_type_kind >|0| 0x0000002B<, __unk_type_kind >|0| 0x00000029<
    0x0000002D gvar *__unk_type_kind 0x000008E8
    0x0000002E load *__unk_type_kind >|0| 0x0000002D<
    0x0000002F gvar *__unk_type_kind 0x00000976
    0x00000030 memb *__unk_type_kind >|0| 0x0000002F<, 9
    0x00000031 store *__unk_type_kind >|0| 0x00000030<, __unk_type_kind >|0| 0x0000002E<
    0x00000032 gvar *__unk_type_kind 0x000008E9
    0x00000033 load *__unk_type_kind >|0| 0x00000032<
    0x00000034 gvar *__unk_type_kind 0x00000976
    0x00000035 memb *__unk_type_kind >|0| 0x00000034<, 10
    0x00000036 store *__unk_type_kind >|0| 0x00000035<, __unk_type_kind >|0| 0x00000033<
    0x00000037 gvar *__unk_type_kind 0x000008EA
    0x00000038 load *__unk_type_kind >|0| 0x00000037<
    0x00000039 gvar *__unk_type_kind 0x00000976
    0x0000003A memb *__unk_type_kind >|0| 0x00000039<, 11
    0x0000003B store *__unk_type_kind >|0| 0x0000003A<, __unk_type_kind >|0| 0x00000038<
    0x0000003C gvar *__unk_type_kind 0x000008ED
    0x0000003D load *__unk_type_kind >|0| 0x0000003C<
    0x0000003E gvar *__unk_type_kind 0x00000976
    0x0000003F memb *__unk_type_kind >|0| 0x0000003E<, 13
    0x00000040 store *__unk_type_kind >|0| 0x0000003F<, __unk_type_kind >|0| 0x0000003D<
    0x00000041 gvar *__unk_type_kind 0x000008EC
    0x00000042 load *__unk_type_kind >|0| 0x00000041<
    0x00000043 gvar *__unk_type_kind 0x00000976
    0x00000044 memb *__unk_type_kind >|0| 0x00000043<, 12
    0x00000045 store *__unk_type_kind >|0| 0x00000044<, __unk_type_kind >|0| 0x00000042<
    0x00000046 gvar *__unk_type_kind 0x000008EE
    0x00000047 load *__unk_type_kind >|0| 0x00000046<
    0x00000048 gvar *__unk_type_kind 0x00000977
    0x00000049 memb *__unk_type_kind >|0| 0x00000048<, 0
    0x0000004A store *__unk_type_kind >|0| 0x00000049<, __unk_type_kind >|0| 0x00000047<
    0x0000004B gvar *__unk_type_kind 0x00000930
    0x0000004C load *__unk_type_kind >|0| 0x0000004B<
    0x0000004D gvar *__unk_type_kind 0x00000977
    0x0000004E memb *__unk_type_kind >|0| 0x0000004D<, 1
    0x0000004F store *__unk_type_kind >|0| 0x0000004E<, __unk_type_kind >|0| 0x0000004C<
    0x00000050 gvar *__unk_type_kind 0x000008F8
    0x00000051 load *__unk_type_kind >|0| 0x00000050<
    0x00000052 gvar *__unk_type_kind 0x00000977
    0x00000053 memb *__unk_type_kind >|0| 0x00000052<, 2
    0x00000054 store *__unk_type_kind >|0| 0x00000053<, __unk_type_kind >|0| 0x00000051<
    0x00000055 gvar *__unk_type_kind 0x000008EF
    0x00000056 load *__unk_type_kind >|0| 0x00000055<
    0x00000057 gvar *__unk_type_kind 0x00000977
    0x00000058 memb *__unk_type_kind >|0| 0x00000057<, 3
    0x00000059 store *__unk_type_kind >|0| 0x00000058<, __unk_type_kind >|0| 0x00000056<
    0x0000005A gvar *__unk_type_kind 0x000008F0
    0x0000005B load *__unk_type_kind >|0| 0x0000005A<
    0x0000005C gvar *__unk_type_kind 0x00000977
    0x0000005D memb *__unk_type_kind >|0| 0x0000005C<, 4
    0x0000005E store *__unk_type_kind >|0| 0x0000005D<, __unk_type_kind >|0| 0x0000005B<
    0x0000005F gvar *__unk_type_kind 0x000008F1
    0x00000060 load *__unk_type_kind >|0| 0x0000005F<
    0x00000061 gvar *__unk_type_kind 0x00000977
    0x00000062 memb *__unk_type_kind >|0| 0x00000061<, 5
    0x00000063 store *__unk_type_kind >|0| 0x00000062<, __unk_type_kind >|0| 0x00000060<
    0x00000064 gvar *__unk_type_kind 0x000008F2
    0x00000065 load *__unk_type_kind >|0| 0x00000064<
    0x00000066 gvar *__unk_type_kind 0x00000977
    0x00000067 memb *__unk_type_kind >|0| 0x00000066<, 6
    0x00000068 store *__unk_type_kind >|0| 0x00000067<, __unk_type_kind >|0| 0x00000065<
    0x00000069 gvar *__unk_type_kind 0x000008F3
    0x0000006A load *__unk_type_kind >|0| 0x00000069<
    0x0000006B gvar *__unk_type_kind 0x00000977
    0x0000006C memb *__unk_type_kind >|0| 0x0000006B<, 7
    0x0000006D store *__unk_type_kind >|0| 0x0000006C<, __unk_type_kind >|0| 0x0000006A<
    0x0000006E gvar *__unk_type_kind 0x000008F4
    0x0000006F load *__unk_type_kind >|0| 0x0000006E<
    0x00000070 gvar *__unk_type_kind 0x00000977
    0x00000071 memb *__unk_type_kind >|0| 0x00000070<, 8
    0x00000072 store *__unk_type_kind >|0| 0x00000071<, __unk_type_kind >|0| 0x0000006F<
    0x00000073 gvar *__unk_type_kind 0x000008F5
    0x00000074 load *__unk_type_kind >|0| 0x00000073<
    0x00000075 gvar *__unk_type_kind 0x00000977
    0x00000076 memb *__unk_type_kind >|0| 0x00000075<, 9
    0x00000077 store *__unk_type_kind >|0| 0x00000076<, __unk_type_kind >|0| 0x00000074<
    0x00000078 gvar *__unk_type_kind 0x000008F6
    0x00000079 load *__unk_type_kind >|0| 0x00000078<
    0x0000007A gvar *__unk_type_kind 0x00000977
    0x0000007B memb *__unk_type_kind >|0| 0x0000007A<, 10
    0x0000007C store *__unk_type_kind >|0| 0x0000007B<, __unk_type_kind >|0| 0x00000079<
    0x0000007D gvar *__unk_type_kind 0x000008F7
    0x0000007E load *__unk_type_kind >|0| 0x0000007D<
    0x0000007F gvar *__unk_type_kind 0x00000977
    0x00000080 memb *__unk_type_kind >|0| 0x0000007F<, 11
    0x00000081 store *__unk_type_kind >|0| 0x00000080<, __unk_type_kind >|0| 0x0000007E<
    0x00000082 gvar *__unk_type_kind 0x000008FA
    0x00000083 load *__unk_type_kind >|0| 0x00000082<
    0x00000084 gvar *__unk_type_kind 0x00000977
    0x00000085 memb *__unk_type_kind >|0| 0x00000084<, 13
    0x00000086 store *__unk_type_kind >|0| 0x00000085<, __unk_type_kind >|0| 0x00000083<
    0x00000087 gvar *__unk_type_kind 0x000008F9
    0x00000088 load *__unk_type_kind >|0| 0x00000087<
    0x00000089 gvar *__unk_type_kind 0x00000977
    0x0000008A memb *__unk_type_kind >|0| 0x00000089<, 12
    0x0000008B store *__unk_type_kind >|0| 0x0000008A<, __unk_type_kind >|0| 0x00000088<
    0x0000008C gvar *__unk_type_kind 0x00000976
    0x0000008D gvar **__unk_type_kind 0x00000975
    0x0000008E store **__unk_type_kind >|0| 0x0000008D<, *__unk_type_kind >|0| 0x0000008C<
    0x0000008F ret
fn cycleThemes a8D -> void
    {4 BBs, 14 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000976
    0x00000003 eq *__unk_type_kind >|0| 0x00000001<, *__unk_type_kind >|0| 0x00000002<
    0x00000004 cbr *__unk_type_kind >|0| 0x00000003<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000977
    0x00000001 gvar **__unk_type_kind 0x00000975
    0x00000002 store **__unk_type_kind >|1| 0x00000001<, *__unk_type_kind >|1| 0x00000000<
    0x00000003 br |3|
  BASICBLOCK |2|
    0x00000000 gvar *__unk_type_kind 0x00000976
    0x00000001 gvar **__unk_type_kind 0x00000975
    0x00000002 store **__unk_type_kind >|2| 0x00000001<, *__unk_type_kind >|2| 0x00000000<
    0x00000003 br |3|
  BASICBLOCK |3|
    0x00000000 ret
fn updateCamera a9D -> void
    {10 BBs, 46 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x0000094D
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 isz bool >|0| 0x00000001<
    0x00000003 cbr u64 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 0
    0x00000002 load *s32 >|1| 0x00000001<
    0x00000003 si2fp s32 >|1| 0x00000002< to f
    0x00000004 fadd f >|1| 0x00000003<, f 32.000000
    0x00000005 call aaA "captViewWidth" () f
    0x00000006 fdiv f >|1| 0x00000005<, f 2.000000
    0x00000007 fsub f >|1| 0x00000004<, f >|1| 0x00000006<
    0x00000008 br |3|
  BASICBLOCK |2|
    0x00000000 gvar *f 0x00000948
    0x00000001 load *f >|2| 0x00000000<
    0x00000002 br |3|
  BASICBLOCK |3|
    0x00000000 phi2 |1| -> f >|1| 0x00000007<, |2| -> f >|2| 0x00000001<
    0x00000001 gvar *f 0x00000948
    0x00000002 store *f >|3| 0x00000001<, f >|3| 0x00000000<
    0x00000003 gvar *f 0x00000948
    0x00000004 load *f >|3| 0x00000003<
    0x00000005 flt f >|3| 0x00000004<, f 0.000000
    0x00000006 cbr f >|3| 0x00000005<, |4|, |5|
  BASICBLOCK |4|
    0x00000000 br |9|
  BASICBLOCK |5|
    0x00000000 gvar *f 0x00000948
    0x00000001 load *f >|5| 0x00000000<
    0x00000002 call aaA "captViewWidth" () f
    0x00000003 fadd f >|5| 0x00000001<, f >|5| 0x00000002<
    0x00000004 gvar *f 0x00000958
    0x00000005 load *f >|5| 0x00000004<
    0x00000006 fgt f >|5| 0x00000003<, f >|5| 0x00000005<
    0x00000007 cbr f >|5| 0x00000006<, |6|, |7|
  BASICBLOCK |6|
    0x00000000 gvar *f 0x00000958
    0x00000001 load *f >|6| 0x00000000<
    0x00000002 call aaA "captViewWidth" () f
    0x00000003 fsub f >|6| 0x00000001<, f >|6| 0x00000002<
    0x00000004 br |8|
  BASICBLOCK |7|
    0x00000000 gvar *f 0x00000948
    0x00000001 load *f >|7| 0x00000000<
    0x00000002 br |8|
  BASICBLOCK |8|
    0x00000000 phi2 |6| -> f >|6| 0x00000003<, |7| -> f >|7| 0x00000001<
    0x00000001 br |9|
  BASICBLOCK |9|
    0x00000000 phi2 |4| -> f 0.000000, |8| -> f >|8| 0x00000000<
    0x00000001 gvar *f 0x00000948
    0x00000002 store *f >|9| 0x00000001<, f >|9| 0x00000000<
    0x00000003 ret
fn getInventoryX aAD -> f
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aaA "captViewWidth" () f
    0x00000001 fdiv f >|0| 0x00000000<, f 2.000000
    0x00000002 fmul f 224.000000, f 2.000000
    0x00000003 fsub f >|0| 0x00000001<, f >|0| 0x00000002<
    0x00000004 ret f >|0| 0x00000003<
fn getInventoryY aBD -> f
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call abA "captViewHeight" () f
    0x00000001 fdiv f >|0| 0x00000000<, f 2.000000
    0x00000002 fmul f 112.000000, f 3.000000
    0x00000003 fsub f >|0| 0x00000001<, f >|0| 0x00000002<
    0x00000004 ret f >|0| 0x00000003<
fn toggleInventory aCD -> void
    {3 BBs, 16 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x0000096A
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 isz bool >|0| 0x00000001<
    0x00000003 gvar *bool 0x0000096A
    0x00000004 store *bool >|0| 0x00000003<, u64 >|0| 0x00000002<
    0x00000005 gvar *bool 0x0000096A
    0x00000006 load *bool >|0| 0x00000005<
    0x00000007 cbr bool >|0| 0x00000006<, |2|, |1|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 gvar *s32 0x0000096C
    0x00000001 store *s32 >|2| 0x00000000<, s32 0
    0x00000002 gvar *s32 0x0000096D
    0x00000003 store *s32 >|2| 0x00000002<, s32 0
    0x00000004 gvar *bool 0x00000972
    0x00000005 store *bool >|2| 0x00000004<, bool false
    0x00000006 ret
fn controlInventory aDD -> void
    {44 BBs, 327 INSTRs, 2 VARs}
    [0x00000000 s32]
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|0| 0x00000002<, 7
    0x00000004 load *s32 >|0| 0x00000003<
    0x00000005 eq s32 >|0| 0x00000001<, s32 >|0| 0x00000004<
    0x00000006 cbr s32 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *s32 0x0000096D
    0x00000001 load *s32 >|1| 0x00000000<
    0x00000002 eq s32 >|1| 0x00000001<, s32 0
    0x00000003 cbr s32 >|1| 0x00000002<, |3|, |4|
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|2| 0x00000002<, 2
    0x00000004 load *s32 >|2| 0x00000003<
    0x00000005 eq s32 >|2| 0x00000001<, s32 >|2| 0x00000004<
    0x00000006 cbr s32 >|2| 0x00000005<, |6|, |7|
  BASICBLOCK |3|
    0x00000000 br |5|
  BASICBLOCK |4|
    0x00000000 gvar *s32 0x0000096D
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 sub s32 >|4| 0x00000001<, s32 1
    0x00000003 br |5|
  BASICBLOCK |5|
    0x00000000 phi2 |3| -> s32 0, |4| -> s32 >|4| 0x00000002<
    0x00000001 gvar *s32 0x0000096D
    0x00000002 store *s32 >|5| 0x00000001<, s32 >|5| 0x00000000<
    0x00000003 br |2|
  BASICBLOCK |6|
    0x00000000 gvar *s32 0x0000096C
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 eq s32 >|6| 0x00000001<, s32 0
    0x00000003 cbr s32 >|6| 0x00000002<, |8|, |9|
  BASICBLOCK |7|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|7| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|7| 0x00000002<, 1
    0x00000004 load *s32 >|7| 0x00000003<
    0x00000005 eq s32 >|7| 0x00000001<, s32 >|7| 0x00000004<
    0x00000006 cbr s32 >|7| 0x00000005<, |11|, |12|
  BASICBLOCK |8|
    0x00000000 br |10|
  BASICBLOCK |9|
    0x00000000 gvar *s32 0x0000096C
    0x00000001 load *s32 >|9| 0x00000000<
    0x00000002 sub s32 >|9| 0x00000001<, s32 1
    0x00000003 br |10|
  BASICBLOCK |10|
    0x00000000 phi2 |8| -> s32 0, |9| -> s32 >|9| 0x00000002<
    0x00000001 gvar *s32 0x0000096C
    0x00000002 store *s32 >|10| 0x00000001<, s32 >|10| 0x00000000<
    0x00000003 br |7|
  BASICBLOCK |11|
    0x00000000 gvar *s32 0x0000096D
    0x00000001 load *s32 >|11| 0x00000000<
    0x00000002 eq s32 >|11| 0x00000001<, s32 2
    0x00000003 cbr s32 >|11| 0x00000002<, |13|, |14|
  BASICBLOCK |12|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|12| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|12| 0x00000002<, 3
    0x00000004 load *s32 >|12| 0x00000003<
    0x00000005 eq s32 >|12| 0x00000001<, s32 >|12| 0x00000004<
    0x00000006 cbr s32 >|12| 0x00000005<, |16|, |17|
  BASICBLOCK |13|
    0x00000000 br |15|
  BASICBLOCK |14|
    0x00000000 gvar *s32 0x0000096D
    0x00000001 load *s32 >|14| 0x00000000<
    0x00000002 add s32 >|14| 0x00000001<, s32 1
    0x00000003 br |15|
  BASICBLOCK |15|
    0x00000000 phi2 |13| -> s32 2, |14| -> s32 >|14| 0x00000002<
    0x00000001 gvar *s32 0x0000096D
    0x00000002 store *s32 >|15| 0x00000001<, s32 >|15| 0x00000000<
    0x00000003 br |12|
  BASICBLOCK |16|
    0x00000000 gvar *s32 0x0000096C
    0x00000001 load *s32 >|16| 0x00000000<
    0x00000002 eq s32 >|16| 0x00000001<, s32 5
    0x00000003 cbr s32 >|16| 0x00000002<, |18|, |19|
  BASICBLOCK |17|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|17| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|17| 0x00000002<, 4
    0x00000004 load *s32 >|17| 0x00000003<
    0x00000005 eq s32 >|17| 0x00000001<, s32 >|17| 0x00000004<
    0x00000006 cbr s32 >|17| 0x00000005<, |21|, |22|
  BASICBLOCK |18|
    0x00000000 br |20|
  BASICBLOCK |19|
    0x00000000 gvar *s32 0x0000096C
    0x00000001 load *s32 >|19| 0x00000000<
    0x00000002 add s32 >|19| 0x00000001<, s32 1
    0x00000003 br |20|
  BASICBLOCK |20|
    0x00000000 phi2 |18| -> s32 5, |19| -> s32 >|19| 0x00000002<
    0x00000001 gvar *s32 0x0000096C
    0x00000002 store *s32 >|20| 0x00000001<, s32 >|20| 0x00000000<
    0x00000003 br |17|
  BASICBLOCK |21|
    0x00000000 gvar *s32 0x0000096C
    0x00000001 load *s32 >|21| 0x00000000<
    0x00000002 gvar *s32 0x0000096D
    0x00000003 load *s32 >|21| 0x00000002<
    0x00000004 mul s32 >|21| 0x00000003<, s32 6
    0x00000005 add s32 >|21| 0x00000001<, s32 >|21| 0x00000004<
    0x00000006 var *s32 0x00000001
    0x00000007 store *s32 >|21| 0x00000006<, s32 >|21| 0x00000005<
    0x00000008 gvar *bool 0x00000972
    0x00000009 load *bool >|21| 0x00000008<
    0x0000000A cbr bool >|21| 0x00000009<, |23|, |24|
  BASICBLOCK |22|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|22| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|22| 0x00000002<, 5
    0x00000004 load *s32 >|22| 0x00000003<
    0x00000005 eq s32 >|22| 0x00000001<, s32 >|22| 0x00000004<
    0x00000006 cbr s32 >|22| 0x00000005<, |42|, |43|
  BASICBLOCK |23|
    0x00000000 gvar *[18] u64 0x00000973
    0x00000001 var *s32 0x00000001
    0x00000002 load *s32 >|23| 0x00000001<
    0x00000003 bc *[18] u64 >|23| 0x00000000< to *u64
    0x00000004 arracc *u64 >|23| 0x00000003<, s32 >|23| 0x00000002<
    0x00000005 load *u64 >|23| 0x00000004<
    0x00000006 neq u64 >|23| 0x00000005<, u64 0
    0x00000007 cbr u64 >|23| 0x00000006<, |26|, |27|
  BASICBLOCK |24|
    0x00000000 gvar *[18] u64 0x0000096E
    0x00000001 var *s32 0x00000001
    0x00000002 load *s32 >|24| 0x00000001<
    0x00000003 bc *[18] u64 >|24| 0x00000000< to *u64
    0x00000004 arracc *u64 >|24| 0x00000003<, s32 >|24| 0x00000002<
    0x00000005 load *u64 >|24| 0x00000004<
    0x00000006 eq u64 >|24| 0x00000005<, u64 0
    0x00000007 cbr u64 >|24| 0x00000006<, |41|, |40|
  BASICBLOCK |25|
    0x00000000 br |22|
  BASICBLOCK |26|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 bc *[6] s32 >|26| 0x00000000< to *s32
    0x00000002 arracc *s32 >|26| 0x00000001<, s32 0
    0x00000003 load *s32 >|26| 0x00000002<
    0x00000004 gvar *[18] __unk_type_kind 0x00000974
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|26| 0x00000005<
    0x00000007 bc *[18] __unk_type_kind >|26| 0x00000004< to *__unk_type_kind
    0x00000008 arracc *__unk_type_kind >|26| 0x00000007<, s32 >|26| 0x00000006<
    0x00000009 memb *__unk_type_kind >|26| 0x00000008<, 0
    0x0000000A load *s32 >|26| 0x00000009<
    0x0000000B sge s32 >|26| 0x00000003<, s32 >|26| 0x0000000A<
    0x0000000C br |27|
  BASICBLOCK |27|
    0x00000000 phi2 |23| -> bool false, |26| -> s32 >|26| 0x0000000B<
    0x00000001 cbr bool >|27| 0x00000000<, |28|, |29|
  BASICBLOCK |28|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 bc *[6] s32 >|28| 0x00000000< to *s32
    0x00000002 arracc *s32 >|28| 0x00000001<, s32 1
    0x00000003 load *s32 >|28| 0x00000002<
    0x00000004 gvar *[18] __unk_type_kind 0x00000974
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|28| 0x00000005<
    0x00000007 bc *[18] __unk_type_kind >|28| 0x00000004< to *__unk_type_kind
    0x00000008 arracc *__unk_type_kind >|28| 0x00000007<, s32 >|28| 0x00000006<
    0x00000009 memb *__unk_type_kind >|28| 0x00000008<, 1
    0x0000000A load *s32 >|28| 0x00000009<
    0x0000000B sge s32 >|28| 0x00000003<, s32 >|28| 0x0000000A<
    0x0000000C br |29|
  BASICBLOCK |29|
    0x00000000 phi2 |27| -> bool false, |28| -> s32 >|28| 0x0000000B<
    0x00000001 cbr bool >|29| 0x00000000<, |30|, |31|
  BASICBLOCK |30|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 bc *[6] s32 >|30| 0x00000000< to *s32
    0x00000002 arracc *s32 >|30| 0x00000001<, s32 2
    0x00000003 load *s32 >|30| 0x00000002<
    0x00000004 gvar *[18] __unk_type_kind 0x00000974
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|30| 0x00000005<
    0x00000007 bc *[18] __unk_type_kind >|30| 0x00000004< to *__unk_type_kind
    0x00000008 arracc *__unk_type_kind >|30| 0x00000007<, s32 >|30| 0x00000006<
    0x00000009 memb *__unk_type_kind >|30| 0x00000008<, 2
    0x0000000A load *s32 >|30| 0x00000009<
    0x0000000B sge s32 >|30| 0x00000003<, s32 >|30| 0x0000000A<
    0x0000000C br |31|
  BASICBLOCK |31|
    0x00000000 phi2 |29| -> bool false, |30| -> s32 >|30| 0x0000000B<
    0x00000001 cbr bool >|31| 0x00000000<, |32|, |33|
  BASICBLOCK |32|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 bc *[6] s32 >|32| 0x00000000< to *s32
    0x00000002 arracc *s32 >|32| 0x00000001<, s32 3
    0x00000003 load *s32 >|32| 0x00000002<
    0x00000004 gvar *[18] __unk_type_kind 0x00000974
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|32| 0x00000005<
    0x00000007 bc *[18] __unk_type_kind >|32| 0x00000004< to *__unk_type_kind
    0x00000008 arracc *__unk_type_kind >|32| 0x00000007<, s32 >|32| 0x00000006<
    0x00000009 memb *__unk_type_kind >|32| 0x00000008<, 3
    0x0000000A load *s32 >|32| 0x00000009<
    0x0000000B sge s32 >|32| 0x00000003<, s32 >|32| 0x0000000A<
    0x0000000C br |33|
  BASICBLOCK |33|
    0x00000000 phi2 |31| -> bool false, |32| -> s32 >|32| 0x0000000B<
    0x00000001 cbr bool >|33| 0x00000000<, |34|, |35|
  BASICBLOCK |34|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 bc *[6] s32 >|34| 0x00000000< to *s32
    0x00000002 arracc *s32 >|34| 0x00000001<, s32 4
    0x00000003 load *s32 >|34| 0x00000002<
    0x00000004 gvar *[18] __unk_type_kind 0x00000974
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|34| 0x00000005<
    0x00000007 bc *[18] __unk_type_kind >|34| 0x00000004< to *__unk_type_kind
    0x00000008 arracc *__unk_type_kind >|34| 0x00000007<, s32 >|34| 0x00000006<
    0x00000009 memb *__unk_type_kind >|34| 0x00000008<, 4
    0x0000000A load *s32 >|34| 0x00000009<
    0x0000000B sge s32 >|34| 0x00000003<, s32 >|34| 0x0000000A<
    0x0000000C br |35|
  BASICBLOCK |35|
    0x00000000 phi2 |33| -> bool false, |34| -> s32 >|34| 0x0000000B<
    0x00000001 cbr bool >|35| 0x00000000<, |36|, |37|
  BASICBLOCK |36|
    0x00000000 gvar *[6] s32 0x0000096F
    0x00000001 bc *[6] s32 >|36| 0x00000000< to *s32
    0x00000002 arracc *s32 >|36| 0x00000001<, s32 5
    0x00000003 load *s32 >|36| 0x00000002<
    0x00000004 gvar *[18] __unk_type_kind 0x00000974
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|36| 0x00000005<
    0x00000007 bc *[18] __unk_type_kind >|36| 0x00000004< to *__unk_type_kind
    0x00000008 arracc *__unk_type_kind >|36| 0x00000007<, s32 >|36| 0x00000006<
    0x00000009 memb *__unk_type_kind >|36| 0x00000008<, 5
    0x0000000A load *s32 >|36| 0x00000009<
    0x0000000B sge s32 >|36| 0x00000003<, s32 >|36| 0x0000000A<
    0x0000000C br |37|
  BASICBLOCK |37|
    0x00000000 phi2 |35| -> bool false, |36| -> s32 >|36| 0x0000000B<
    0x00000001 cbr bool >|37| 0x00000000<, |38|, |39|
  BASICBLOCK |38|
    0x00000000 gvar *[18] u64 0x00000973
    0x00000001 var *s32 0x00000001
    0x00000002 load *s32 >|38| 0x00000001<
    0x00000003 bc *[18] u64 >|38| 0x00000000< to *u64
    0x00000004 arracc *u64 >|38| 0x00000003<, s32 >|38| 0x00000002<
    0x00000005 load *u64 >|38| 0x00000004<
    0x00000006 call aFD "addToInventory" (u64 >|38| 0x00000005<) void
    0x00000007 gvar *[18] __unk_type_kind 0x00000974
    0x00000008 var *s32 0x00000001
    0x00000009 load *s32 >|38| 0x00000008<
    0x0000000A bc *[18] __unk_type_kind >|38| 0x00000007< to *__unk_type_kind
    0x0000000B arracc *__unk_type_kind >|38| 0x0000000A<, s32 >|38| 0x00000009<
    0x0000000C memb *__unk_type_kind >|38| 0x0000000B<, 0
    0x0000000D load *s32 >|38| 0x0000000C<
    0x0000000E gvar *[6] s32 0x0000096F
    0x0000000F bc *[6] s32 >|38| 0x0000000E< to *s32
    0x00000010 arracc *s32 >|38| 0x0000000F<, s32 0
    0x00000011 load *s32 >|38| 0x00000010<
    0x00000012 sub s32 >|38| 0x00000011<, s32 >|38| 0x0000000D<
    0x00000013 store *s32 >|38| 0x00000010<, s32 >|38| 0x00000012<
    0x00000014 gvar *[18] __unk_type_kind 0x00000974
    0x00000015 var *s32 0x00000001
    0x00000016 load *s32 >|38| 0x00000015<
    0x00000017 bc *[18] __unk_type_kind >|38| 0x00000014< to *__unk_type_kind
    0x00000018 arracc *__unk_type_kind >|38| 0x00000017<, s32 >|38| 0x00000016<
    0x00000019 memb *__unk_type_kind >|38| 0x00000018<, 1
    0x0000001A load *s32 >|38| 0x00000019<
    0x0000001B gvar *[6] s32 0x0000096F
    0x0000001C bc *[6] s32 >|38| 0x0000001B< to *s32
    0x0000001D arracc *s32 >|38| 0x0000001C<, s32 1
    0x0000001E load *s32 >|38| 0x0000001D<
    0x0000001F sub s32 >|38| 0x0000001E<, s32 >|38| 0x0000001A<
    0x00000020 store *s32 >|38| 0x0000001D<, s32 >|38| 0x0000001F<
    0x00000021 gvar *[18] __unk_type_kind 0x00000974
    0x00000022 var *s32 0x00000001
    0x00000023 load *s32 >|38| 0x00000022<
    0x00000024 bc *[18] __unk_type_kind >|38| 0x00000021< to *__unk_type_kind
    0x00000025 arracc *__unk_type_kind >|38| 0x00000024<, s32 >|38| 0x00000023<
    0x00000026 memb *__unk_type_kind >|38| 0x00000025<, 2
    0x00000027 load *s32 >|38| 0x00000026<
    0x00000028 gvar *[6] s32 0x0000096F
    0x00000029 bc *[6] s32 >|38| 0x00000028< to *s32
    0x0000002A arracc *s32 >|38| 0x00000029<, s32 2
    0x0000002B load *s32 >|38| 0x0000002A<
    0x0000002C sub s32 >|38| 0x0000002B<, s32 >|38| 0x00000027<
    0x0000002D store *s32 >|38| 0x0000002A<, s32 >|38| 0x0000002C<
    0x0000002E gvar *[18] __unk_type_kind 0x00000974
    0x0000002F var *s32 0x00000001
    0x00000030 load *s32 >|38| 0x0000002F<
    0x00000031 bc *[18] __unk_type_kind >|38| 0x0000002E< to *__unk_type_kind
    0x00000032 arracc *__unk_type_kind >|38| 0x00000031<, s32 >|38| 0x00000030<
    0x00000033 memb *__unk_type_kind >|38| 0x00000032<, 3
    0x00000034 load *s32 >|38| 0x00000033<
    0x00000035 gvar *[6] s32 0x0000096F
    0x00000036 bc *[6] s32 >|38| 0x00000035< to *s32
    0x00000037 arracc *s32 >|38| 0x00000036<, s32 3
    0x00000038 load *s32 >|38| 0x00000037<
    0x00000039 sub s32 >|38| 0x00000038<, s32 >|38| 0x00000034<
    0x0000003A store *s32 >|38| 0x00000037<, s32 >|38| 0x00000039<
    0x0000003B gvar *[18] __unk_type_kind 0x00000974
    0x0000003C var *s32 0x00000001
    0x0000003D load *s32 >|38| 0x0000003C<
    0x0000003E bc *[18] __unk_type_kind >|38| 0x0000003B< to *__unk_type_kind
    0x0000003F arracc *__unk_type_kind >|38| 0x0000003E<, s32 >|38| 0x0000003D<
    0x00000040 memb *__unk_type_kind >|38| 0x0000003F<, 4
    0x00000041 load *s32 >|38| 0x00000040<
    0x00000042 gvar *[6] s32 0x0000096F
    0x00000043 bc *[6] s32 >|38| 0x00000042< to *s32
    0x00000044 arracc *s32 >|38| 0x00000043<, s32 4
    0x00000045 load *s32 >|38| 0x00000044<
    0x00000046 sub s32 >|38| 0x00000045<, s32 >|38| 0x00000041<
    0x00000047 store *s32 >|38| 0x00000044<, s32 >|38| 0x00000046<
    0x00000048 gvar *[18] __unk_type_kind 0x00000974
    0x00000049 var *s32 0x00000001
    0x0000004A load *s32 >|38| 0x00000049<
    0x0000004B bc *[18] __unk_type_kind >|38| 0x00000048< to *__unk_type_kind
    0x0000004C arracc *__unk_type_kind >|38| 0x0000004B<, s32 >|38| 0x0000004A<
    0x0000004D memb *__unk_type_kind >|38| 0x0000004C<, 5
    0x0000004E load *s32 >|38| 0x0000004D<
    0x0000004F gvar *[6] s32 0x0000096F
    0x00000050 bc *[6] s32 >|38| 0x0000004F< to *s32
    0x00000051 arracc *s32 >|38| 0x00000050<, s32 5
    0x00000052 load *s32 >|38| 0x00000051<
    0x00000053 sub s32 >|38| 0x00000052<, s32 >|38| 0x0000004E<
    0x00000054 store *s32 >|38| 0x00000051<, s32 >|38| 0x00000053<
    0x00000055 br |39|
  BASICBLOCK |39|
    0x00000000 br |25|
  BASICBLOCK |40|
    0x00000000 gvar *[18] u64 0x0000096E
    0x00000001 var *s32 0x00000001
    0x00000002 load *s32 >|40| 0x00000001<
    0x00000003 bc *[18] u64 >|40| 0x00000000< to *u64
    0x00000004 arracc *u64 >|40| 0x00000003<, s32 >|40| 0x00000002<
    0x00000005 load *u64 >|40| 0x00000004<
    0x00000006 var *s32 0x00000001
    0x00000007 load *s32 >|40| 0x00000006<
    0x00000008 call aID "getInventoryItemX" (s32 >|40| 0x00000007<) f
    0x00000009 var *s32 0x00000001
    0x0000000A load *s32 >|40| 0x00000009<
    0x0000000B call aJD "getInventoryItemY" (s32 >|40| 0x0000000A<) f
    0x0000000C call aZB "pickupItem" (u64 >|40| 0x00000005<, f >|40| 0x00000008<, f >|40| 0x0000000B<) void
    0x0000000D gvar *[18] u64 0x0000096E
    0x0000000E var *s32 0x00000001
    0x0000000F load *s32 >|40| 0x0000000E<
    0x00000010 bc *[18] u64 >|40| 0x0000000D< to *u64
    0x00000011 arracc *u64 >|40| 0x00000010<, s32 >|40| 0x0000000F<
    0x00000012 store *u64 >|40| 0x00000011<, u64 0
    0x00000013 br |41|
  BASICBLOCK |41|
    0x00000000 br |25|
  BASICBLOCK |42|
    0x00000000 gvar *bool 0x00000972
    0x00000001 load *bool >|42| 0x00000000<
    0x00000002 isz bool >|42| 0x00000001<
    0x00000003 gvar *bool 0x00000972
    0x00000004 store *bool >|42| 0x00000003<, u64 >|42| 0x00000002<
    0x00000005 br |43|
  BASICBLOCK |43|
    0x00000000 ret
fn clearInventory aED -> void
    {1 BBs, 9 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *[18] u64 0x0000096E
    0x00000001 sizeof u64
    0x00000002 trunc u64 >|0| 0x00000001< to s32
    0x00000003 mul s32 18, s32 >|0| 0x00000002<
    0x00000004 bc *[18] u64 >|0| 0x00000000< to *s8
    0x00000005 trunc s32 0 to u8
    0x00000006 zext s32 >|0| 0x00000003< to u64
    0x00000007 call ad8 "memset" (*s8 >|0| 0x00000004<, u8 >|0| 0x00000005<, u64 >|0| 0x00000006<) *s8
    0x00000008 ret
fn addToInventory aFD -> void
    {7 BBs, 29 INSTRs, 2 VARs}
    [0x00000000 u64]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 ult u64 >|1| 0x00000000<, u64 18
    0x00000002 cbr u64 >|1| 0x00000001<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 gvar *[18] u64 0x0000096E
    0x00000001 var *u64 0x00000001
    0x00000002 load *u64 >|2| 0x00000001<
    0x00000003 bc *[18] u64 >|2| 0x00000000< to *u64
    0x00000004 arracc *u64 >|2| 0x00000003<, u64 >|2| 0x00000002<
    0x00000005 load *u64 >|2| 0x00000004<
    0x00000006 eq u64 >|2| 0x00000005<, u64 0
    0x00000007 cbr u64 >|2| 0x00000006<, |5|, |6|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 ret
  BASICBLOCK |5|
    0x00000000 var *u64 0x00000000
    0x00000001 load *u64 >|5| 0x00000000<
    0x00000002 gvar *[18] u64 0x0000096E
    0x00000003 var *u64 0x00000001
    0x00000004 load *u64 >|5| 0x00000003<
    0x00000005 bc *[18] u64 >|5| 0x00000002< to *u64
    0x00000006 arracc *u64 >|5| 0x00000005<, u64 >|5| 0x00000004<
    0x00000007 store *u64 >|5| 0x00000006<, u64 >|5| 0x00000001<
    0x00000008 ret
  BASICBLOCK |6|
    0x00000000 br |3|
fn getInventoryItemRelX aGD -> f
    {1 BBs, 7 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 srem s32 >|0| 0x00000001<, s32 6
    0x00000003 si2fp s32 >|0| 0x00000002< to f
    0x00000004 fmul f 96.000000, f >|0| 0x00000003<
    0x00000005 fadd f 16.000000, f >|0| 0x00000004<
    0x00000006 ret f >|0| 0x00000005<
fn getInventoryItemRelY aHD -> f
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 sdiv s32 >|0| 0x00000001<, s32 6
    0x00000003 si2fp s32 >|0| 0x00000002< to f
    0x00000004 fmul f 96.000000, f >|0| 0x00000003<
    0x00000005 fadd f 152.000000, f >|0| 0x00000004<
    0x00000006 fdiv f 112.000000, f 106.000000
    0x00000007 fmul f >|0| 0x00000005<, f >|0| 0x00000006<
    0x00000008 ret f >|0| 0x00000007<
fn getInventoryItemX aID -> f
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 call aAD "getInventoryX" () f
    0x00000001 var *s32 0x00000000
    0x00000002 load *s32 >|0| 0x00000001<
    0x00000003 call aGD "getInventoryItemRelX" (s32 >|0| 0x00000002<) f
    0x00000004 fadd f >|0| 0x00000000<, f >|0| 0x00000003<
    0x00000005 ret f >|0| 0x00000004<
fn getInventoryItemY aJD -> f
    {1 BBs, 6 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 call aBD "getInventoryY" () f
    0x00000001 var *s32 0x00000000
    0x00000002 load *s32 >|0| 0x00000001<
    0x00000003 call aHD "getInventoryItemRelY" (s32 >|0| 0x00000002<) f
    0x00000004 fadd f >|0| 0x00000000<, f >|0| 0x00000003<
    0x00000005 ret f >|0| 0x00000004<
fn print aKD -> void
    {5 BBs, 27 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 1
    0x00000002 load *u64 >|1| 0x00000001<
    0x00000003 load *u64 >|0| 0x00000000<
    0x00000004 ult u64 >|1| 0x00000003<, u64 >|1| 0x00000002<
    0x00000005 cbr u64 >|1| 0x00000004<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 0
    0x00000002 var *u64 0x00000001
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 load **u8 >|2| 0x00000001<
    0x00000005 arracc *u8 >|2| 0x00000004<, u64 >|2| 0x00000003<
    0x00000006 load *u8 >|2| 0x00000005<
    0x00000007 zext u8 >|2| 0x00000006< to s32
    0x00000008 call az7 "putchar" (s32 >|2| 0x00000007<) s32
    0x00000009 br |3|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 call az7 "putchar" (s32 10) s32
    0x00000001 var *__unk_type_kind 0x00000000
    0x00000002 call a6A "__defer__" (*__unk_type_kind >|4| 0x00000001<) void
    0x00000003 ret
fn place aLD -> void
    {5 BBs, 26 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|0| 0x00000000<, u64 0
    0x00000002 br |1|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 1
    0x00000002 load *u64 >|1| 0x00000001<
    0x00000003 load *u64 >|0| 0x00000000<
    0x00000004 ult u64 >|1| 0x00000003<, u64 >|1| 0x00000002<
    0x00000005 cbr u64 >|1| 0x00000004<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 0
    0x00000002 var *u64 0x00000001
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 load **u8 >|2| 0x00000001<
    0x00000005 arracc *u8 >|2| 0x00000004<, u64 >|2| 0x00000003<
    0x00000006 load *u8 >|2| 0x00000005<
    0x00000007 zext u8 >|2| 0x00000006< to s32
    0x00000008 call az7 "putchar" (s32 >|2| 0x00000007<) s32
    0x00000009 br |3|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000000<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000000<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|4| 0x00000000<) void
    0x00000002 ret
fn newline aMD -> void
    {1 BBs, 2 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call az7 "putchar" (s32 10) s32
    0x00000001 ret
fn scan aND -> __unk_type_kind
    {9 BBs, 80 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 malloc u8 * s32 32
    0x00000001 var *__unk_type_kind 0x00000000
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 store **u8 >|0| 0x00000002<, *u8 >|0| 0x00000000<
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 1
    0x00000006 zext s32 0 to u64
    0x00000007 store *u64 >|0| 0x00000005<, u64 >|0| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000000
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 2
    0x0000000A zext s32 32 to u64
    0x0000000B store *u64 >|0| 0x00000009<, u64 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000000
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 3
    0x0000000E store *u64 >|0| 0x0000000D<, u64 2
    0x0000000F br |1|
  BASICBLOCK |1|
    0x00000000 gvar **__unk_type_kind 0x000008C2
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call at7 "fgetc" (*__unk_type_kind >|1| 0x00000001<) s32
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|1| 0x00000003<, s32 >|1| 0x00000002<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|1| 0x00000005<
    0x00000007 eq s32 >|1| 0x00000006<, s32 10
    0x00000008 cbr s32 >|1| 0x00000007<, |4|, |3|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|2| 0x00000000<
    0x00000002 ret __unk_type_kind >|2| 0x00000001<
  BASICBLOCK |3|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|3| 0x00000000<
    0x00000002 eq s32 >|3| 0x00000001<, s32 -1
    0x00000003 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |1| -> bool true, |3| -> s32 >|3| 0x00000002<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 br |2|
  BASICBLOCK |6|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|6| 0x00000000<, 1
    0x00000002 load *u64 >|6| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 memb *__unk_type_kind >|6| 0x00000003<, 2
    0x00000005 load *u64 >|6| 0x00000004<
    0x00000006 eq u64 >|6| 0x00000002<, u64 >|6| 0x00000005<
    0x00000007 cbr u64 >|6| 0x00000006<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|7| 0x00000000<, 2
    0x00000002 zext s32 2 to u64
    0x00000003 load *u64 >|7| 0x00000001<
    0x00000004 mul u64 >|7| 0x00000003<, u64 >|7| 0x00000002<
    0x00000005 store *u64 >|7| 0x00000001<, u64 >|7| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 0
    0x00000008 load **u8 >|7| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A memb *__unk_type_kind >|7| 0x00000009<, 2
    0x0000000B load *u64 >|7| 0x0000000A<
    0x0000000C bc *u8 >|7| 0x00000008< to *s8
    0x0000000D call aV7 "realloc" (*s8 >|7| 0x0000000C<, u64 >|7| 0x0000000B<) *s8
    0x0000000E var *__unk_type_kind 0x00000000
    0x0000000F memb *__unk_type_kind >|7| 0x0000000E<, 0
    0x00000010 bc *s8 >|7| 0x0000000D< to *u8
    0x00000011 store **u8 >|7| 0x0000000F<, *u8 >|7| 0x00000010<
    0x00000012 br |8|
  BASICBLOCK |8|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|8| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|8| 0x00000002<, 0
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 memb *__unk_type_kind >|8| 0x00000004<, 1
    0x00000006 load *u64 >|8| 0x00000005<
    0x00000007 load **u8 >|8| 0x00000003<
    0x00000008 arracc *u8 >|8| 0x00000007<, u64 >|8| 0x00000006<
    0x00000009 trunc s32 >|8| 0x00000001< to u8
    0x0000000A store *u8 >|8| 0x00000008<, u8 >|8| 0x00000009<
    0x0000000B var *__unk_type_kind 0x00000000
    0x0000000C memb *__unk_type_kind >|8| 0x0000000B<, 1
    0x0000000D zext s32 1 to u64
    0x0000000E load *u64 >|8| 0x0000000C<
    0x0000000F add u64 >|8| 0x0000000E<, u64 >|8| 0x0000000D<
    0x00000010 store *u64 >|8| 0x0000000C<, u64 >|8| 0x0000000F<
    0x00000011 br |1|
fn scan aOD -> __unk_type_kind
    {1 BBs, 8 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call aLD "place" (__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 call aND "scan" () __unk_type_kind
    0x00000007 ret __unk_type_kind >|0| 0x00000006<
fn skim aPD -> __unk_type_kind
    {13 BBs, 92 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 malloc u8 * s32 16
    0x00000001 var *__unk_type_kind 0x00000000
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 store **u8 >|0| 0x00000002<, *u8 >|0| 0x00000000<
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 memb *__unk_type_kind >|0| 0x00000004<, 1
    0x00000006 zext s32 0 to u64
    0x00000007 store *u64 >|0| 0x00000005<, u64 >|0| 0x00000006<
    0x00000008 var *__unk_type_kind 0x00000000
    0x00000009 memb *__unk_type_kind >|0| 0x00000008<, 2
    0x0000000A zext s32 16 to u64
    0x0000000B store *u64 >|0| 0x00000009<, u64 >|0| 0x0000000A<
    0x0000000C var *__unk_type_kind 0x00000000
    0x0000000D memb *__unk_type_kind >|0| 0x0000000C<, 3
    0x0000000E store *u64 >|0| 0x0000000D<, u64 2
    0x0000000F br |1|
  BASICBLOCK |1|
    0x00000000 gvar **__unk_type_kind 0x000008C2
    0x00000001 load **__unk_type_kind >|1| 0x00000000<
    0x00000002 call at7 "fgetc" (*__unk_type_kind >|1| 0x00000001<) s32
    0x00000003 var *s32 0x00000001
    0x00000004 store *s32 >|1| 0x00000003<, s32 >|1| 0x00000002<
    0x00000005 var *s32 0x00000001
    0x00000006 load *s32 >|1| 0x00000005<
    0x00000007 eq s32 >|1| 0x00000006<, s32 32
    0x00000008 cbr s32 >|1| 0x00000007<, |3|, |4|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|2| 0x00000000<
    0x00000002 ret __unk_type_kind >|2| 0x00000001<
  BASICBLOCK |3|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|3| 0x00000000<, 1
    0x00000002 load *u64 >|3| 0x00000001<
    0x00000003 zext s32 0 to u64
    0x00000004 eq u64 >|3| 0x00000002<, u64 >|3| 0x00000003<
    0x00000005 cbr u64 >|3| 0x00000004<, |5|, |6|
  BASICBLOCK |4|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|4| 0x00000000<
    0x00000002 eq s32 >|4| 0x00000001<, s32 10
    0x00000003 cbr s32 >|4| 0x00000002<, |8|, |7|
  BASICBLOCK |5|
    0x00000000 br |1|
  BASICBLOCK |6|
    0x00000000 br |2|
  BASICBLOCK |7|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|7| 0x00000000<
    0x00000002 eq s32 >|7| 0x00000001<, s32 -1
    0x00000003 br |8|
  BASICBLOCK |8|
    0x00000000 phi2 |4| -> bool true, |7| -> s32 >|7| 0x00000002<
    0x00000001 cbr bool >|8| 0x00000000<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 br |2|
  BASICBLOCK |10|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|10| 0x00000000<, 1
    0x00000002 load *u64 >|10| 0x00000001<
    0x00000003 var *__unk_type_kind 0x00000000
    0x00000004 memb *__unk_type_kind >|10| 0x00000003<, 2
    0x00000005 load *u64 >|10| 0x00000004<
    0x00000006 eq u64 >|10| 0x00000002<, u64 >|10| 0x00000005<
    0x00000007 cbr u64 >|10| 0x00000006<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 memb *__unk_type_kind >|11| 0x00000000<, 2
    0x00000002 zext s32 2 to u64
    0x00000003 load *u64 >|11| 0x00000001<
    0x00000004 mul u64 >|11| 0x00000003<, u64 >|11| 0x00000002<
    0x00000005 store *u64 >|11| 0x00000001<, u64 >|11| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 memb *__unk_type_kind >|11| 0x00000006<, 0
    0x00000008 load **u8 >|11| 0x00000007<
    0x00000009 var *__unk_type_kind 0x00000000
    0x0000000A memb *__unk_type_kind >|11| 0x00000009<, 2
    0x0000000B load *u64 >|11| 0x0000000A<
    0x0000000C bc *u8 >|11| 0x00000008< to *s8
    0x0000000D call aV7 "realloc" (*s8 >|11| 0x0000000C<, u64 >|11| 0x0000000B<) *s8
    0x0000000E var *__unk_type_kind 0x00000000
    0x0000000F memb *__unk_type_kind >|11| 0x0000000E<, 0
    0x00000010 bc *s8 >|11| 0x0000000D< to *u8
    0x00000011 store **u8 >|11| 0x0000000F<, *u8 >|11| 0x00000010<
    0x00000012 br |12|
  BASICBLOCK |12|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|12| 0x00000000<
    0x00000002 var *__unk_type_kind 0x00000000
    0x00000003 memb *__unk_type_kind >|12| 0x00000002<, 0
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 memb *__unk_type_kind >|12| 0x00000004<, 1
    0x00000006 load *u64 >|12| 0x00000005<
    0x00000007 load **u8 >|12| 0x00000003<
    0x00000008 arracc *u8 >|12| 0x00000007<, u64 >|12| 0x00000006<
    0x00000009 trunc s32 >|12| 0x00000001< to u8
    0x0000000A store *u8 >|12| 0x00000008<, u8 >|12| 0x00000009<
    0x0000000B var *__unk_type_kind 0x00000000
    0x0000000C memb *__unk_type_kind >|12| 0x0000000B<, 1
    0x0000000D zext s32 1 to u64
    0x0000000E load *u64 >|12| 0x0000000C<
    0x0000000F add u64 >|12| 0x0000000E<, u64 >|12| 0x0000000D<
    0x00000010 store *u64 >|12| 0x0000000C<, u64 >|12| 0x0000000F<
    0x00000011 br |1|
fn skim aQD -> __unk_type_kind
    {1 BBs, 8 INSTRs, 1 VARs}
    [0x00000000 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call aLD "place" (__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 call aPD "skim" () __unk_type_kind
    0x00000007 ret __unk_type_kind >|0| 0x00000006<
fn skimInt aRD -> s32
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000000
    0x00000001 call aTD "skimIntInto" (*s32 >|0| 0x00000000<) bool
    0x00000002 var *s32 0x00000000
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 ret s32 >|0| 0x00000003<
fn skimInt aSD -> s32
    {1 BBs, 11 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call aLD "place" (__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var *s32 0x00000001
    0x00000005 call aTD "skimIntInto" (*s32 >|0| 0x00000004<) bool
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 var *s32 0x00000001
    0x00000009 load *s32 >|0| 0x00000008<
    0x0000000A ret s32 >|0| 0x00000009<
fn skimIntInto aTD -> bool
    {15 BBs, 85 INSTRs, 5 VARs}
    [0x00000000 *s32]
    [0x00000001 __unk_type_kind]
    [0x00000002 bool]
    [0x00000000 u64]
    [0x00000001 u8]
  BASICBLOCK |0|
    0x00000000 var **s32 0x00000000
    0x00000001 load **s32 >|0| 0x00000000<
    0x00000002 store *s32 >|0| 0x00000001<, s32 0
    0x00000003 call aPD "skim" () __unk_type_kind
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 varzi 0x00000001
    0x00000006 call a8A "__assign__" (*__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000003<) void
    0x00000007 var *bool 0x00000002
    0x00000008 store *bool >|0| 0x00000007<, bool false
    0x00000009 var *u64 0x00000003
    0x0000000A store *u64 >|0| 0x00000009<, u64 0
    0x0000000B br |1|
  BASICBLOCK |1|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|1| 0x00000000<, 1
    0x00000002 load *u64 >|1| 0x00000001<
    0x00000003 load *u64 >|0| 0x00000009<
    0x00000004 ult u64 >|1| 0x00000003<, u64 >|1| 0x00000002<
    0x00000005 cbr u64 >|1| 0x00000004<, |2|, |4|
  BASICBLOCK |2|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 memb *__unk_type_kind >|2| 0x00000000<, 0
    0x00000002 var *u64 0x00000003
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 load **u8 >|2| 0x00000001<
    0x00000005 arracc *u8 >|2| 0x00000004<, u64 >|2| 0x00000003<
    0x00000006 load *u8 >|2| 0x00000005<
    0x00000007 var *u8 0x00000004
    0x00000008 store *u8 >|2| 0x00000007<, u8 >|2| 0x00000006<
    0x00000009 var *u8 0x00000004
    0x0000000A load *u8 >|2| 0x00000009<
    0x0000000B ult u8 >|2| 0x0000000A<, u8 48
    0x0000000C cbr u8 >|2| 0x0000000B<, |6|, |5|
  BASICBLOCK |3|
    0x00000000 load *u64 >|0| 0x00000009<
    0x00000001 add u64 >|3| 0x00000000<, u64 1
    0x00000002 store *u64 >|0| 0x00000009<, u64 >|3| 0x00000001<
    0x00000003 br |1|
  BASICBLOCK |4|
    0x00000000 var *bool 0x00000002
    0x00000001 load *bool >|4| 0x00000000<
    0x00000002 cbr bool >|4| 0x00000001<, |13|, |14|
  BASICBLOCK |5|
    0x00000000 var *u8 0x00000004
    0x00000001 load *u8 >|5| 0x00000000<
    0x00000002 ugt u8 >|5| 0x00000001<, u8 57
    0x00000003 br |6|
  BASICBLOCK |6|
    0x00000000 phi2 |2| -> bool true, |5| -> u8 >|5| 0x00000002<
    0x00000001 cbr bool >|6| 0x00000000<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 var *u64 0x00000003
    0x00000001 load *u64 >|7| 0x00000000<
    0x00000002 eq u64 >|7| 0x00000001<, u64 0
    0x00000003 cbr u64 >|7| 0x00000002<, |9|, |10|
  BASICBLOCK |8|
    0x00000000 var **s32 0x00000000
    0x00000001 load **s32 >|8| 0x00000000<
    0x00000002 load *s32 >|8| 0x00000001<
    0x00000003 zext u8 10 to s32
    0x00000004 mul s32 >|8| 0x00000002<, s32 >|8| 0x00000003<
    0x00000005 var *u8 0x00000004
    0x00000006 load *u8 >|8| 0x00000005<
    0x00000007 sub u8 >|8| 0x00000006<, u8 48
    0x00000008 zext u8 >|8| 0x00000007< to s32
    0x00000009 add s32 >|8| 0x00000004<, s32 >|8| 0x00000008<
    0x0000000A var **s32 0x00000000
    0x0000000B load **s32 >|8| 0x0000000A<
    0x0000000C store *s32 >|8| 0x0000000B<, s32 >|8| 0x00000009<
    0x0000000D br |3|
  BASICBLOCK |9|
    0x00000000 var *u8 0x00000004
    0x00000001 load *u8 >|9| 0x00000000<
    0x00000002 eq u8 >|9| 0x00000001<, u8 45
    0x00000003 br |10|
  BASICBLOCK |10|
    0x00000000 phi2 |7| -> bool false, |9| -> u8 >|9| 0x00000002<
    0x00000001 cbr bool >|10| 0x00000000<, |12|, |11|
  BASICBLOCK |11|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|11| 0x00000000<) void
    0x00000002 ret bool false
  BASICBLOCK |12|
    0x00000000 var *bool 0x00000002
    0x00000001 store *bool >|12| 0x00000000<, bool true
    0x00000002 br |3|
  BASICBLOCK |13|
    0x00000000 var **s32 0x00000000
    0x00000001 load **s32 >|13| 0x00000000<
    0x00000002 load *s32 >|13| 0x00000001<
    0x00000003 sub s32 0, s32 >|13| 0x00000002<
    0x00000004 var **s32 0x00000000
    0x00000005 load **s32 >|13| 0x00000004<
    0x00000006 store *s32 >|13| 0x00000005<, s32 >|13| 0x00000003<
    0x00000007 br |14|
  BASICBLOCK |14|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 call a6A "__defer__" (*__unk_type_kind >|14| 0x00000000<) void
    0x00000002 ret bool true
fn skimIntInto aUD -> bool
    {1 BBs, 10 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 *s32]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call aLD "place" (__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 var **s32 0x00000001
    0x00000007 load **s32 >|0| 0x00000006<
    0x00000008 call aTD "skimIntInto" (*s32 >|0| 0x00000007<) bool
    0x00000009 ret bool >|0| 0x00000008<
fn skimDouble aVD -> d
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 d]
  BASICBLOCK |0|
    0x00000000 var *d 0x00000000
    0x00000001 call aXD "skimDoubleInto" (*d >|0| 0x00000000<) bool
    0x00000002 var *d 0x00000000
    0x00000003 load *d >|0| 0x00000002<
    0x00000004 ret d >|0| 0x00000003<
fn skimDouble aWD -> d
    {1 BBs, 11 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 d]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call aLD "place" (__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var *d 0x00000001
    0x00000005 call aXD "skimDoubleInto" (*d >|0| 0x00000004<) bool
    0x00000006 var *__unk_type_kind 0x00000000
    0x00000007 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 var *d 0x00000001
    0x00000009 load *d >|0| 0x00000008<
    0x0000000A ret d >|0| 0x00000009<
fn skimDoubleInto aXD -> bool
    {1 BBs, 30 INSTRs, 3 VARs}
    [0x00000000 *d]
    [0x00000001 __unk_type_kind]
    [0x00000002 *u8]
  BASICBLOCK |0|
    0x00000000 call aPD "skim" () __unk_type_kind
    0x00000001 call a7A "__pass__" (__unk_type_kind >|0| 0x00000000<) __unk_type_kind
    0x00000002 call a7A "__pass__" (stru) __unk_type_kind
    0x00000003 call aAA "__add__" (__unk_type_kind >|0| 0x00000001<, __unk_type_kind >|0| 0x00000002<) __unk_type_kind
    0x00000004 var *__unk_type_kind 0x00000001
    0x00000005 varzi 0x00000001
    0x00000006 call a8A "__assign__" (*__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000003<) void
    0x00000007 var *__unk_type_kind 0x00000001
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 0
    0x00000009 load **u8 >|0| 0x00000008<
    0x0000000A var **u8 0x00000002
    0x0000000B call aZ7 "strtod" (*u8 >|0| 0x00000009<, **u8 >|0| 0x0000000A<) d
    0x0000000C var **d 0x00000000
    0x0000000D load **d >|0| 0x0000000C<
    0x0000000E store *d >|0| 0x0000000D<, d >|0| 0x0000000B<
    0x0000000F var *__unk_type_kind 0x00000001
    0x00000010 call a6A "__defer__" (*__unk_type_kind >|0| 0x0000000F<) void
    0x00000011 var **u8 0x00000002
    0x00000012 load **u8 >|0| 0x00000011<
    0x00000013 var *__unk_type_kind 0x00000001
    0x00000014 memb *__unk_type_kind >|0| 0x00000013<, 0
    0x00000015 var *__unk_type_kind 0x00000001
    0x00000016 memb *__unk_type_kind >|0| 0x00000015<, 1
    0x00000017 load *u64 >|0| 0x00000016<
    0x00000018 zext s32 1 to u64
    0x00000019 sub u64 >|0| 0x00000017<, u64 >|0| 0x00000018<
    0x0000001A load **u8 >|0| 0x00000014<
    0x0000001B arracc *u8 >|0| 0x0000001A<, u64 >|0| 0x00000019<
    0x0000001C eq *u8 >|0| 0x00000012<, *u8 >|0| 0x0000001B<
    0x0000001D ret *u8 >|0| 0x0000001C<
fn skimDoubleInto aYD -> bool
    {1 BBs, 10 INSTRs, 2 VARs}
    [0x00000000 __unk_type_kind]
    [0x00000001 *d]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000000
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 call a7A "__pass__" (__unk_type_kind >|0| 0x00000001<) __unk_type_kind
    0x00000003 call aLD "place" (__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var *__unk_type_kind 0x00000000
    0x00000005 call a6A "__defer__" (*__unk_type_kind >|0| 0x00000004<) void
    0x00000006 var **d 0x00000001
    0x00000007 load **d >|0| 0x00000006<
    0x00000008 call aXD "skimDoubleInto" (*d >|0| 0x00000007<) bool
    0x00000009 ret bool >|0| 0x00000008<
fn randomize aZD -> void
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 bc null to *s64
    0x00000001 call aI7 "time" (*s64 >|0| 0x00000000<) s64
    0x00000002 trunc s64 >|0| 0x00000001< to u32
    0x00000003 call ai7 "srand" (u32 >|0| 0x00000002<) void
    0x00000004 ret
fn random aaD -> d
    {1 BBs, 5 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call afD "randReduced" () s32
    0x00000001 si2fp s32 >|0| 0x00000000< to d
    0x00000002 si2fp s32 32768 to d
    0x00000003 fdiv d >|0| 0x00000001<, d >|0| 0x00000002<
    0x00000004 ret d >|0| 0x00000003<
fn randomInt abD -> s32
    {1 BBs, 7 INSTRs, 1 VARs}
    [0x00000000 s32]
  BASICBLOCK |0|
    0x00000000 call aaD "random" () d
    0x00000001 var *s32 0x00000000
    0x00000002 load *s32 >|0| 0x00000001<
    0x00000003 si2fp s32 >|0| 0x00000002< to d
    0x00000004 fmul d >|0| 0x00000000<, d >|0| 0x00000003<
    0x00000005 fp2si d >|0| 0x00000004< to s32
    0x00000006 ret s32 >|0| 0x00000005<
fn randomInt acD -> s32
    {1 BBs, 10 INSTRs, 2 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000001
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 var *s32 0x00000000
    0x00000003 load *s32 >|0| 0x00000002<
    0x00000004 sub s32 >|0| 0x00000001<, s32 >|0| 0x00000003<
    0x00000005 call abD "randomInt" (s32 >|0| 0x00000004<) s32
    0x00000006 var *s32 0x00000000
    0x00000007 load *s32 >|0| 0x00000006<
    0x00000008 add s32 >|0| 0x00000005<, s32 >|0| 0x00000007<
    0x00000009 ret s32 >|0| 0x00000008<
fn randomDouble adD -> d
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 d]
  BASICBLOCK |0|
    0x00000000 call aaD "random" () d
    0x00000001 var *d 0x00000000
    0x00000002 load *d >|0| 0x00000001<
    0x00000003 fmul d >|0| 0x00000000<, d >|0| 0x00000002<
    0x00000004 ret d >|0| 0x00000003<
fn randomDouble aeD -> d
    {1 BBs, 10 INSTRs, 2 VARs}
    [0x00000000 d]
    [0x00000001 d]
  BASICBLOCK |0|
    0x00000000 var *d 0x00000001
    0x00000001 load *d >|0| 0x00000000<
    0x00000002 var *d 0x00000000
    0x00000003 load *d >|0| 0x00000002<
    0x00000004 fsub d >|0| 0x00000001<, d >|0| 0x00000003<
    0x00000005 call adD "randomDouble" (d >|0| 0x00000004<) d
    0x00000006 var *d 0x00000000
    0x00000007 load *d >|0| 0x00000006<
    0x00000008 fadd d >|0| 0x00000005<, d >|0| 0x00000007<
    0x00000009 ret d >|0| 0x00000008<
fn randReduced afD -> s32
    {1 BBs, 3 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call ah7 "rand" () s32
    0x00000001 srem s32 >|0| 0x00000000<, s32 32768
    0x00000002 ret s32 >|0| 0x00000001<
fn main agD -> s32
    {3 BBs, 31 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 gvar *__unk_type_kind 0x00000000
    0x00000001 store *__unk_type_kind >|0| 0x00000000<, null
    0x00000002 gvar *__unk_type_kind 0x00000001
    0x00000003 store *__unk_type_kind >|0| 0x00000002<, u64 0
    0x00000004 gvar *__unk_type_kind 0x00000002
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, null
    0x00000006 gvar *__unk_type_kind 0x00000003
    0x00000007 store *__unk_type_kind >|0| 0x00000006<, u64 0
    0x00000008 gvar **s8 0x000008C1
    0x00000009 store **s8 >|0| 0x00000008<, null
    0x0000000A call aRA "captPrepare" () bool
    0x0000000B cbr bool >|0| 0x0000000A<, |2|, |1|
  BASICBLOCK |1|
    0x00000000 ret s32 0
  BASICBLOCK |2|
    0x00000000 funcaddr 0xhD
    0x00000001 call akA "captOnSetup" (__funcptr_type_kind >|2| 0x00000000<) void
    0x00000002 funcaddr 0xjD
    0x00000003 reinterp s32 60 to u32
    0x00000004 call aoA "captOnStep" (__funcptr_type_kind >|2| 0x00000002<, u32 >|2| 0x00000003<) void
    0x00000005 funcaddr 0xkD
    0x00000006 call arA "captOnKey" (__funcptr_type_kind >|2| 0x00000005<) void
    0x00000007 funcaddr 0xlD
    0x00000008 call amA "captOnDraw" (__funcptr_type_kind >|2| 0x00000007<) void
    0x00000009 funcaddr 0xiD
    0x0000000A call alA "captOnExit" (__funcptr_type_kind >|2| 0x00000009<) void
    0x0000000B call aSA "captAddTypical" (f 64.000000, f 64.000000) void
    0x0000000C call aSA "captAddTypical" (f 64.000000, f 32.000000) void
    0x0000000D call aSA "captAddTypical" (f 128.000000, f 128.000000) void
    0x0000000E call aKB "captHideMouse" () void
    0x0000000F call aeA "captCustomView" (f 1920.000000, f 1280.000000) void
    0x00000010 call aWA "captStart" (cstroflen 8 "Tangent", bool true) void
    0x00000011 ret s32 0
fn on_setup ahD -> void
    {1 BBs, 6 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aHB "captRandomize" () void
    0x00000001 call aNC "loadAssets" () void
    0x00000002 call a7D "loadThemes" () void
    0x00000003 call aPC "setupState" () void
    0x00000004 call aTC "gotoTitleScreen" () void
    0x00000005 ret
fn on_exit aiD -> void
    {1 BBs, 2 INSTRs, 0 VARs}
  BASICBLOCK |0|
    0x00000000 call aOC "destroyAssets" () void
    0x00000001 ret
fn on_step ajD -> void
    {253 BBs, 1401 INSTRs, 36 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 *__unk_type_kind]
    [0x00000000 f]
    [0x00000001 f]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000002 __unk_type_kind]
    [0x00000003 bool]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 __unk_type_kind]
    [0x00000000 bool]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 *__unk_type_kind]
    [0x00000000 *__unk_type_kind]
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000004 d]
    [0x00000005 d]
    [0x00000006 d]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000002 f]
    [0x00000003 f]
  BASICBLOCK |0|
    0x00000000 gvar *bool 0x00000950
    0x00000001 load *bool >|0| 0x00000000<
    0x00000002 cbr bool >|0| 0x00000001<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 gvar *f 0x00000953
    0x00000001 load *f >|1| 0x00000000<
    0x00000002 fgt f >|1| 0x00000001<, f 1280.000000
    0x00000003 cbr f >|1| 0x00000002<, |4|, |3|
  BASICBLOCK |2|
    0x00000000 gvar *bool 0x0000094F
    0x00000001 load *bool >|2| 0x00000000<
    0x00000002 cbr bool >|2| 0x00000001<, |9|, |10|
  BASICBLOCK |3|
    0x00000000 gvar *s32 0x00000951
    0x00000001 load *s32 >|3| 0x00000000<
    0x00000002 sub s32 >|3| 0x00000001<, s32 1
    0x00000003 store *s32 >|3| 0x00000000<, *s32 >|3| 0x00000002<
    0x00000004 load *s32 >|3| 0x00000000<
    0x00000005 eq s32 >|3| 0x00000004<, s32 0
    0x00000006 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |1| -> bool true, |3| -> s32 >|3| 0x00000005<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 gvar *bool 0x00000950
    0x00000001 store *bool >|5| 0x00000000<, bool false
    0x00000002 gvar *s32 0x00000951
    0x00000003 store *s32 >|5| 0x00000002<, s32 0
    0x00000004 gvar *u64 0x00000963
    0x00000005 store *u64 >|5| 0x00000004<, u64 0
    0x00000006 gvar *__unk_type_kind 0x00000968
    0x00000007 call aCE "rid" (*__unk_type_kind >|5| 0x00000006<) void
    0x00000008 gvar *s32 0x00000957
    0x00000009 load *s32 >|5| 0x00000008<
    0x0000000A call aQC "gotoScene" (s32 >|5| 0x00000009<) void
    0x0000000B br |6|
  BASICBLOCK |6|
    0x00000000 gvar *s32 0x00000951
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 slt s32 >|6| 0x00000001<, s32 120
    0x00000003 cbr s32 >|6| 0x00000002<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 gvar *f 0x00000954
    0x00000001 load *f >|7| 0x00000000<
    0x00000002 gvar *f 0x00000952
    0x00000003 load *f >|7| 0x00000002<
    0x00000004 fadd f >|7| 0x00000003<, f >|7| 0x00000001<
    0x00000005 store *f >|7| 0x00000002<, f >|7| 0x00000004<
    0x00000006 gvar *f 0x00000955
    0x00000007 load *f >|7| 0x00000006<
    0x00000008 gvar *f 0x00000953
    0x00000009 load *f >|7| 0x00000008<
    0x0000000A fadd f >|7| 0x00000009<, f >|7| 0x00000007<
    0x0000000B store *f >|7| 0x00000008<, f >|7| 0x0000000A<
    0x0000000C gvar *f 0x00000955
    0x0000000D load *f >|7| 0x0000000C<
    0x0000000E fadd f >|7| 0x0000000D<, f 1.000000
    0x0000000F store *f >|7| 0x0000000C<, f >|7| 0x0000000E<
    0x00000010 br |8|
  BASICBLOCK |8|
    0x00000000 ret
  BASICBLOCK |9|
    0x00000000 ret
  BASICBLOCK |10|
    0x00000000 gvar *bool 0x0000096A
    0x00000001 load *bool >|10| 0x00000000<
    0x00000002 cbr bool >|10| 0x00000001<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 gvar *f 0x0000096B
    0x00000001 load *f >|11| 0x00000000<
    0x00000002 fsub f >|11| 0x00000001<, f 0.500000
    0x00000003 fext f >|11| 0x00000002< to d
    0x00000004 call aI9 "fabs" (d >|11| 0x00000003<) d
    0x00000005 fext f 0.010000 to d
    0x00000006 flt d >|11| 0x00000004<, d >|11| 0x00000005<
    0x00000007 cbr d >|11| 0x00000006<, |14|, |15|
  BASICBLOCK |12|
    0x00000000 gvar *f 0x0000096B
    0x00000001 load *f >|12| 0x00000000<
    0x00000002 fext f >|12| 0x00000001< to d
    0x00000003 call aI9 "fabs" (d >|12| 0x00000002<) d
    0x00000004 fext f 0.010000 to d
    0x00000005 flt d >|12| 0x00000003<, d >|12| 0x00000004<
    0x00000006 cbr d >|12| 0x00000005<, |17|, |18|
  BASICBLOCK |13|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|13| 0x00000000<
    0x00000002 neq u64 >|13| 0x00000001<, u64 0
    0x00000003 cbr u64 >|13| 0x00000002<, |20|, |21|
  BASICBLOCK |14|
    0x00000000 br |16|
  BASICBLOCK |15|
    0x00000000 gvar *f 0x0000096B
    0x00000001 load *f >|15| 0x00000000<
    0x00000002 fmul f >|15| 0x00000001<, f 4.000000
    0x00000003 fadd f >|15| 0x00000002<, f 0.500000
    0x00000004 fdiv f >|15| 0x00000003<, f 5.000000
    0x00000005 br |16|
  BASICBLOCK |16|
    0x00000000 phi2 |14| -> f 0.500000, |15| -> f >|15| 0x00000004<
    0x00000001 gvar *f 0x0000096B
    0x00000002 store *f >|16| 0x00000001<, f >|16| 0x00000000<
    0x00000003 br |13|
  BASICBLOCK |17|
    0x00000000 br |19|
  BASICBLOCK |18|
    0x00000000 gvar *f 0x0000096B
    0x00000001 load *f >|18| 0x00000000<
    0x00000002 fmul f >|18| 0x00000001<, f 4.000000
    0x00000003 fdiv f >|18| 0x00000002<, f 5.000000
    0x00000004 br |19|
  BASICBLOCK |19|
    0x00000000 phi2 |17| -> f 0.000000, |18| -> f >|18| 0x00000003<
    0x00000001 gvar *f 0x0000096B
    0x00000002 store *f >|19| 0x00000001<, f >|19| 0x00000000<
    0x00000003 br |13|
  BASICBLOCK |20|
    0x00000000 fadd f 1792.000000, f 14.000000
    0x00000001 var *f 0x00000000
    0x00000002 store *f >|20| 0x00000001<, f >|20| 0x00000000<
    0x00000003 fadd f 32.000000, f 14.000000
    0x00000004 var *f 0x00000001
    0x00000005 store *f >|20| 0x00000004<, f >|20| 0x00000003<
    0x00000006 gvar *f 0x00000964
    0x00000007 load *f >|20| 0x00000006<
    0x00000008 var *f 0x00000000
    0x00000009 load *f >|20| 0x00000008<
    0x0000000A fsub f >|20| 0x00000009<, f 4.000000
    0x0000000B flt f >|20| 0x00000007<, f >|20| 0x0000000A<
    0x0000000C cbr f >|20| 0x0000000B<, |22|, |23|
  BASICBLOCK |21|
    0x00000000 gvar *bool 0x0000096A
    0x00000001 load *bool >|21| 0x00000000<
    0x00000002 cbr bool >|21| 0x00000001<, |28|, |29|
  BASICBLOCK |22|
    0x00000000 gvar *f 0x00000964
    0x00000001 load *f >|22| 0x00000000<
    0x00000002 var *f 0x00000000
    0x00000003 load *f >|22| 0x00000002<
    0x00000004 gvar *f 0x00000964
    0x00000005 load *f >|22| 0x00000004<
    0x00000006 fsub f >|22| 0x00000003<, f >|22| 0x00000005<
    0x00000007 fdiv f >|22| 0x00000006<, f 4.000000
    0x00000008 fadd f >|22| 0x00000001<, f >|22| 0x00000007<
    0x00000009 br |24|
  BASICBLOCK |23|
    0x00000000 var *f 0x00000000
    0x00000001 load *f >|23| 0x00000000<
    0x00000002 br |24|
  BASICBLOCK |24|
    0x00000000 phi2 |22| -> f >|22| 0x00000008<, |23| -> f >|23| 0x00000001<
    0x00000001 gvar *f 0x00000964
    0x00000002 store *f >|24| 0x00000001<, f >|24| 0x00000000<
    0x00000003 gvar *f 0x00000965
    0x00000004 load *f >|24| 0x00000003<
    0x00000005 var *f 0x00000001
    0x00000006 load *f >|24| 0x00000005<
    0x00000007 fadd f >|24| 0x00000006<, f 4.000000
    0x00000008 fgt f >|24| 0x00000004<, f >|24| 0x00000007<
    0x00000009 cbr f >|24| 0x00000008<, |25|, |26|
  BASICBLOCK |25|
    0x00000000 gvar *f 0x00000965
    0x00000001 load *f >|25| 0x00000000<
    0x00000002 var *f 0x00000001
    0x00000003 load *f >|25| 0x00000002<
    0x00000004 gvar *f 0x00000965
    0x00000005 load *f >|25| 0x00000004<
    0x00000006 fsub f >|25| 0x00000003<, f >|25| 0x00000005<
    0x00000007 fdiv f >|25| 0x00000006<, f 4.000000
    0x00000008 fadd f >|25| 0x00000001<, f >|25| 0x00000007<
    0x00000009 br |27|
  BASICBLOCK |26|
    0x00000000 var *f 0x00000001
    0x00000001 load *f >|26| 0x00000000<
    0x00000002 br |27|
  BASICBLOCK |27|
    0x00000000 phi2 |25| -> f >|25| 0x00000008<, |26| -> f >|26| 0x00000001<
    0x00000001 gvar *f 0x00000965
    0x00000002 store *f >|27| 0x00000001<, f >|27| 0x00000000<
    0x00000003 br |21|
  BASICBLOCK |28|
    0x00000000 ret
  BASICBLOCK |29|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|29| 0x00000000<, 5
    0x00000002 load *bool >|29| 0x00000001<
    0x00000003 cbr bool >|29| 0x00000002<, |30|, |31|
  BASICBLOCK |30|
    0x00000000 gvar *__unk_type_kind 0x00000934
    0x00000001 call aRB "update" (*__unk_type_kind >|30| 0x00000000<) void
    0x00000002 gvar *__unk_type_kind 0x00000936
    0x00000003 call aRB "update" (*__unk_type_kind >|30| 0x00000002<) void
    0x00000004 call aiC "playerIsInWater" () bool
    0x00000005 cbr bool >|30| 0x00000004<, |34|, |33|
  BASICBLOCK |31|
    0x00000000 call aiC "playerIsInWater" () bool
    0x00000001 cbr bool >|31| 0x00000000<, |37|, |38|
  BASICBLOCK |32|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|32| 0x00000000<, 6
    0x00000002 load *bool >|32| 0x00000001<
    0x00000003 cbr bool >|32| 0x00000002<, |39|, |40|
  BASICBLOCK |33|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|33| 0x00000000<, 5
    0x00000002 store *bool >|33| 0x00000001<, bool false
    0x00000003 gvar *__unk_type_kind 0x00000932
    0x00000004 call aPB "reset" (*__unk_type_kind >|33| 0x00000003<) void
    0x00000005 gvar *__unk_type_kind 0x00000931
    0x00000006 call aPB "reset" (*__unk_type_kind >|33| 0x00000005<) void
    0x00000007 gvar *__unk_type_kind 0x00000933
    0x00000008 call aPB "reset" (*__unk_type_kind >|33| 0x00000007<) void
    0x00000009 gvar *__unk_type_kind 0x00000934
    0x0000000A call aPB "reset" (*__unk_type_kind >|33| 0x00000009<) void
    0x0000000B gvar *__unk_type_kind 0x00000935
    0x0000000C call aPB "reset" (*__unk_type_kind >|33| 0x0000000B<) void
    0x0000000D gvar *__unk_type_kind 0x00000936
    0x0000000E call aPB "reset" (*__unk_type_kind >|33| 0x0000000D<) void
    0x0000000F gvar *__unk_type_kind 0x00000945
    0x00000010 memb *__unk_type_kind >|33| 0x0000000F<, 3
    0x00000011 load *s32 >|33| 0x00000010<
    0x00000012 sub s32 >|33| 0x00000011<, s32 20
    0x00000013 store *s32 >|33| 0x00000010<, s32 >|33| 0x00000012<
    0x00000014 gvar *__unk_type_kind 0x00000945
    0x00000015 memb *__unk_type_kind >|33| 0x00000014<, 7
    0x00000016 load *bool >|33| 0x00000015<
    0x00000017 cbr bool >|33| 0x00000016<, |35|, |36|
  BASICBLOCK |34|
    0x00000000 br |32|
  BASICBLOCK |35|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|35| 0x00000000<, 4
    0x00000002 load *s32 >|35| 0x00000001<
    0x00000003 mul s32 >|35| 0x00000002<, s32 10
    0x00000004 gvar *__unk_type_kind 0x00000945
    0x00000005 memb *__unk_type_kind >|35| 0x00000004<, 2
    0x00000006 load *s32 >|35| 0x00000005<
    0x00000007 add s32 >|35| 0x00000006<, s32 >|35| 0x00000003<
    0x00000008 store *s32 >|35| 0x00000005<, s32 >|35| 0x00000007<
    0x00000009 br |36|
  BASICBLOCK |36|
    0x00000000 br |34|
  BASICBLOCK |37|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|37| 0x00000000<, 5
    0x00000002 store *bool >|37| 0x00000001<, bool true
    0x00000003 gvar *__unk_type_kind 0x00000932
    0x00000004 call aPB "reset" (*__unk_type_kind >|37| 0x00000003<) void
    0x00000005 gvar *__unk_type_kind 0x00000931
    0x00000006 call aPB "reset" (*__unk_type_kind >|37| 0x00000005<) void
    0x00000007 gvar *__unk_type_kind 0x00000933
    0x00000008 call aPB "reset" (*__unk_type_kind >|37| 0x00000007<) void
    0x00000009 gvar *__unk_type_kind 0x00000934
    0x0000000A call aPB "reset" (*__unk_type_kind >|37| 0x00000009<) void
    0x0000000B gvar *__unk_type_kind 0x00000935
    0x0000000C call aPB "reset" (*__unk_type_kind >|37| 0x0000000B<) void
    0x0000000D gvar *__unk_type_kind 0x00000936
    0x0000000E call aPB "reset" (*__unk_type_kind >|37| 0x0000000D<) void
    0x0000000F br |38|
  BASICBLOCK |38|
    0x00000000 br |32|
  BASICBLOCK |39|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|39| 0x00000000<, 5
    0x00000002 load *bool >|39| 0x00000001<
    0x00000003 cbr bool >|39| 0x00000002<, |41|, |42|
  BASICBLOCK |40|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|40| 0x00000000<
    0x00000002 memb *__unk_type_kind >|40| 0x00000001<, 1
    0x00000003 call aRB "update" (*__unk_type_kind >|40| 0x00000002<) void
    0x00000004 gvar *__unk_type_kind 0x0000093B
    0x00000005 call aRB "update" (*__unk_type_kind >|40| 0x00000004<) void
    0x00000006 gvar *__unk_type_kind 0x0000093D
    0x00000007 call aRB "update" (*__unk_type_kind >|40| 0x00000006<) void
    0x00000008 gvar *__unk_type_kind 0x0000093C
    0x00000009 call aRB "update" (*__unk_type_kind >|40| 0x00000008<) void
    0x0000000A gvar *__unk_type_kind 0x00000940
    0x0000000B call aRB "update" (*__unk_type_kind >|40| 0x0000000A<) void
    0x0000000C gvar *__unk_type_kind 0x00000945
    0x0000000D memb *__unk_type_kind >|40| 0x0000000C<, 6
    0x0000000E store *bool >|40| 0x0000000D<, bool false
    0x0000000F gvar *__unk_type_kind 0x00000945
    0x00000010 memb *__unk_type_kind >|40| 0x0000000F<, 7
    0x00000011 store *bool >|40| 0x00000010<, bool false
    0x00000012 var *u64 0x00000002
    0x00000013 store *u64 >|40| 0x00000012<, u64 0
    0x00000014 br |54|
  BASICBLOCK |41|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|41| 0x00000000<
    0x00000002 neq u64 >|41| 0x00000001<, u64 3
    0x00000003 br |42|
  BASICBLOCK |42|
    0x00000000 phi2 |39| -> bool false, |41| -> u64 >|41| 0x00000002<
    0x00000001 cbr bool >|42| 0x00000000<, |43|, |44|
  BASICBLOCK |43|
    0x00000000 gvar *__unk_type_kind 0x00000932
    0x00000001 call aRB "update" (*__unk_type_kind >|43| 0x00000000<) void
    0x00000002 br |45|
  BASICBLOCK |44|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|44| 0x00000000<, 8
    0x00000002 load *bool >|44| 0x00000001<
    0x00000003 cbr bool >|44| 0x00000002<, |47|, |46|
  BASICBLOCK |45|
    0x00000000 br |40|
  BASICBLOCK |46|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|46| 0x00000000<
    0x00000002 eq u64 >|46| 0x00000001<, u64 3
    0x00000003 cbr u64 >|46| 0x00000002<, |48|, |49|
  BASICBLOCK |47|
    0x00000000 br |45|
  BASICBLOCK |48|
    0x00000000 gvar *__unk_type_kind 0x00000933
    0x00000001 call aRB "update" (*__unk_type_kind >|48| 0x00000000<) void
    0x00000002 br |50|
  BASICBLOCK |49|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|49| 0x00000000<
    0x00000002 eq u64 >|49| 0x00000001<, u64 4
    0x00000003 cbr u64 >|49| 0x00000002<, |51|, |52|
  BASICBLOCK |50|
    0x00000000 br |47|
  BASICBLOCK |51|
    0x00000000 gvar *__unk_type_kind 0x00000935
    0x00000001 call aRB "update" (*__unk_type_kind >|51| 0x00000000<) void
    0x00000002 br |53|
  BASICBLOCK |52|
    0x00000000 gvar *__unk_type_kind 0x00000931
    0x00000001 call aRB "update" (*__unk_type_kind >|52| 0x00000000<) void
    0x00000002 br |53|
  BASICBLOCK |53|
    0x00000000 br |50|
  BASICBLOCK |54|
    0x00000000 gvar *__unk_type_kind 0x00000966
    0x00000001 call aRE "__length__" (*__unk_type_kind >|54| 0x00000000<) u64
    0x00000002 load *u64 >|40| 0x00000012<
    0x00000003 ult u64 >|54| 0x00000002<, u64 >|54| 0x00000001<
    0x00000004 cbr u64 >|54| 0x00000003<, |55|, |57|
  BASICBLOCK |55|
    0x00000000 gvar *__unk_type_kind 0x00000966
    0x00000001 call aSE "__array__" (*__unk_type_kind >|55| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 load *u64 >|40| 0x00000012<
    0x00000004 arracc *__unk_type_kind >|55| 0x00000001<, u64 >|55| 0x00000003<
    0x00000005 store *__unk_type_kind >|55| 0x00000002<, *__unk_type_kind >|55| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000003
    0x00000007 load **__unk_type_kind >|55| 0x00000006<
    0x00000008 call a3C "update" (*__unk_type_kind >|55| 0x00000007<) bool
    0x00000009 cbr bool >|55| 0x00000008<, |58|, |59|
  BASICBLOCK |56|
    0x00000000 load *u64 >|40| 0x00000012<
    0x00000001 add u64 >|56| 0x00000000<, u64 1
    0x00000002 store *u64 >|40| 0x00000012<, u64 >|56| 0x00000001<
    0x00000003 br |54|
  BASICBLOCK |57|
    0x00000000 var *u64 0x00000004
    0x00000001 store *u64 >|57| 0x00000000<, u64 0
    0x00000002 br |60|
  BASICBLOCK |58|
    0x00000000 gvar *__unk_type_kind 0x00000966
    0x00000001 var *u64 0x00000002
    0x00000002 load *u64 >|58| 0x00000001<
    0x00000003 sub u64 >|58| 0x00000002<, u64 1
    0x00000004 store *u64 >|58| 0x00000001<, *u64 >|58| 0x00000003<
    0x00000005 call aTE "remove" (*__unk_type_kind >|58| 0x00000000<, u64 >|58| 0x00000002<) void
    0x00000006 br |59|
  BASICBLOCK |59|
    0x00000000 br |56|
  BASICBLOCK |60|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 call aUE "__length__" (*__unk_type_kind >|60| 0x00000000<) u64
    0x00000002 load *u64 >|57| 0x00000000<
    0x00000003 ult u64 >|60| 0x00000002<, u64 >|60| 0x00000001<
    0x00000004 cbr u64 >|60| 0x00000003<, |61|, |63|
  BASICBLOCK |61|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 call aVE "__array__" (*__unk_type_kind >|61| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000005
    0x00000003 load *u64 >|57| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|61| 0x00000001<, u64 >|61| 0x00000003<
    0x00000005 store *__unk_type_kind >|61| 0x00000002<, *__unk_type_kind >|61| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000005
    0x00000007 load **__unk_type_kind >|61| 0x00000006<
    0x00000008 memb *__unk_type_kind >|61| 0x00000007<, 2
    0x00000009 load *s32 >|61| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000005
    0x0000000B load **__unk_type_kind >|61| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|61| 0x0000000B<, 0
    0x0000000D load *s32 >|61| 0x0000000C<
    0x0000000E add s32 >|61| 0x0000000D<, s32 >|61| 0x00000009<
    0x0000000F store *s32 >|61| 0x0000000C<, s32 >|61| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000005
    0x00000011 load **__unk_type_kind >|61| 0x00000010<
    0x00000012 memb *__unk_type_kind >|61| 0x00000011<, 0
    0x00000013 load *s32 >|61| 0x00000012<
    0x00000014 slt s32 >|61| 0x00000013<, s32 0
    0x00000015 cbr s32 >|61| 0x00000014<, |65|, |64|
  BASICBLOCK |62|
    0x00000000 load *u64 >|57| 0x00000000<
    0x00000001 add u64 >|62| 0x00000000<, u64 1
    0x00000002 store *u64 >|57| 0x00000000<, u64 >|62| 0x00000001<
    0x00000003 br |60|
  BASICBLOCK |63|
    0x00000000 gvar *__unk_type_kind 0x00000969
    0x00000001 memb *__unk_type_kind >|63| 0x00000000<, 1
    0x00000002 load *bool >|63| 0x00000001<
    0x00000003 cbr bool >|63| 0x00000002<, |86|, |87|
  BASICBLOCK |64|
    0x00000000 var **__unk_type_kind 0x00000005
    0x00000001 load **__unk_type_kind >|64| 0x00000000<
    0x00000002 memb *__unk_type_kind >|64| 0x00000001<, 0
    0x00000003 load *s32 >|64| 0x00000002<
    0x00000004 gvar *f 0x00000958
    0x00000005 load *f >|64| 0x00000004<
    0x00000006 fp2si f >|64| 0x00000005< to s32
    0x00000007 sgt s32 >|64| 0x00000003<, s32 >|64| 0x00000006<
    0x00000008 br |65|
  BASICBLOCK |65|
    0x00000000 phi2 |61| -> bool true, |64| -> s32 >|64| 0x00000007<
    0x00000001 cbr bool >|65| 0x00000000<, |66|, |67|
  BASICBLOCK |66|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|66| 0x00000001<
    0x00000003 sub u64 >|66| 0x00000002<, u64 1
    0x00000004 store *u64 >|66| 0x00000001<, *u64 >|66| 0x00000003<
    0x00000005 call aWE "remove" (*__unk_type_kind >|66| 0x00000000<, u64 >|66| 0x00000002<) void
    0x00000006 br |62|
  BASICBLOCK |67|
    0x00000000 var **__unk_type_kind 0x00000005
    0x00000001 load **__unk_type_kind >|67| 0x00000000<
    0x00000002 call a2 "getAABB" (*__unk_type_kind >|67| 0x00000001<) __unk_type_kind
    0x00000003 var *__unk_type_kind 0x00000006
    0x00000004 store *__unk_type_kind >|67| 0x00000003<, __unk_type_kind >|67| 0x00000002<
    0x00000005 var *__unk_type_kind 0x00000006
    0x00000006 load *__unk_type_kind >|67| 0x00000005<
    0x00000007 call akC "collidingGround" (__unk_type_kind >|67| 0x00000006<) *__unk_type_kind
    0x00000008 bc null to *__unk_type_kind
    0x00000009 neq *__unk_type_kind >|67| 0x00000007<, *__unk_type_kind >|67| 0x00000008<
    0x0000000A cbr *__unk_type_kind >|67| 0x00000009<, |68|, |69|
  BASICBLOCK |68|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|68| 0x00000001<
    0x00000003 sub u64 >|68| 0x00000002<, u64 1
    0x00000004 store *u64 >|68| 0x00000001<, *u64 >|68| 0x00000003<
    0x00000005 call aXE "remove" (*__unk_type_kind >|68| 0x00000000<, u64 >|68| 0x00000002<) void
    0x00000006 var *__unk_type_kind 0x00000006
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|68| 0x00000006<) void
    0x00000008 br |62|
  BASICBLOCK |69|
    0x00000000 var *bool 0x00000007
    0x00000001 store *bool >|69| 0x00000000<, bool false
    0x00000002 var *u64 0x00000008
    0x00000003 store *u64 >|69| 0x00000002<, u64 0
    0x00000004 br |70|
  BASICBLOCK |70|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call arD "__length__" (*__unk_type_kind >|70| 0x00000000<) u64
    0x00000002 load *u64 >|69| 0x00000002<
    0x00000003 ult u64 >|70| 0x00000002<, u64 >|70| 0x00000001<
    0x00000004 cbr u64 >|70| 0x00000003<, |71|, |73|
  BASICBLOCK |71|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call asD "__array__" (*__unk_type_kind >|71| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000009
    0x00000003 load *u64 >|69| 0x00000002<
    0x00000004 arracc *__unk_type_kind >|71| 0x00000001<, u64 >|71| 0x00000003<
    0x00000005 store *__unk_type_kind >|71| 0x00000002<, *__unk_type_kind >|71| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000006
    0x00000007 var **__unk_type_kind 0x00000009
    0x00000008 load **__unk_type_kind >|71| 0x00000007<
    0x00000009 call a8C "getAABB" (*__unk_type_kind >|71| 0x00000008<) __unk_type_kind
    0x0000000A call a0 "intersecting" (*__unk_type_kind >|71| 0x00000006<, __unk_type_kind >|71| 0x00000009<) bool
    0x0000000B cbr bool >|71| 0x0000000A<, |74|, |75|
  BASICBLOCK |72|
    0x00000000 load *u64 >|69| 0x00000002<
    0x00000001 add u64 >|72| 0x00000000<, u64 1
    0x00000002 store *u64 >|69| 0x00000002<, u64 >|72| 0x00000001<
    0x00000003 br |70|
  BASICBLOCK |73|
    0x00000000 var *bool 0x00000007
    0x00000001 load *bool >|73| 0x00000000<
    0x00000002 cbr bool >|73| 0x00000001<, |77|, |76|
  BASICBLOCK |74|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 var *u64 0x00000008
    0x00000002 load *u64 >|74| 0x00000001<
    0x00000003 sub u64 >|74| 0x00000002<, u64 1
    0x00000004 store *u64 >|74| 0x00000001<, *u64 >|74| 0x00000003<
    0x00000005 call aYE "remove" (*__unk_type_kind >|74| 0x00000000<, u64 >|74| 0x00000002<) void
    0x00000006 var *bool 0x00000007
    0x00000007 store *bool >|74| 0x00000006<, bool true
    0x00000008 br |73|
  BASICBLOCK |75|
    0x00000000 br |72|
  BASICBLOCK |76|
    0x00000000 var *u64 0x0000000A
    0x00000001 store *u64 >|76| 0x00000000<, u64 0
    0x00000002 br |78|
  BASICBLOCK |77|
    0x00000000 var *bool 0x00000007
    0x00000001 load *bool >|77| 0x00000000<
    0x00000002 cbr bool >|77| 0x00000001<, |84|, |85|
  BASICBLOCK |78|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call aoD "__length__" (*__unk_type_kind >|78| 0x00000000<) u64
    0x00000002 load *u64 >|76| 0x00000000<
    0x00000003 ult u64 >|78| 0x00000002<, u64 >|78| 0x00000001<
    0x00000004 cbr u64 >|78| 0x00000003<, |79|, |81|
  BASICBLOCK |79|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call apD "__array__" (*__unk_type_kind >|79| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x0000000B
    0x00000003 load *u64 >|76| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|79| 0x00000001<, u64 >|79| 0x00000003<
    0x00000005 store *__unk_type_kind >|79| 0x00000002<, *__unk_type_kind >|79| 0x00000004<
    0x00000006 var *__unk_type_kind 0x00000006
    0x00000007 var **__unk_type_kind 0x0000000B
    0x00000008 load **__unk_type_kind >|79| 0x00000007<
    0x00000009 call aGC "getAABB" (*__unk_type_kind >|79| 0x00000008<) __unk_type_kind
    0x0000000A call a0 "intersecting" (*__unk_type_kind >|79| 0x00000006<, __unk_type_kind >|79| 0x00000009<) bool
    0x0000000B cbr bool >|79| 0x0000000A<, |82|, |83|
  BASICBLOCK |80|
    0x00000000 load *u64 >|76| 0x00000000<
    0x00000001 add u64 >|80| 0x00000000<, u64 1
    0x00000002 store *u64 >|76| 0x00000000<, u64 >|80| 0x00000001<
    0x00000003 br |78|
  BASICBLOCK |81|
    0x00000000 br |77|
  BASICBLOCK |82|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 var *u64 0x0000000A
    0x00000002 load *u64 >|82| 0x00000001<
    0x00000003 sub u64 >|82| 0x00000002<, u64 1
    0x00000004 store *u64 >|82| 0x00000001<, *u64 >|82| 0x00000003<
    0x00000005 call aZE "remove" (*__unk_type_kind >|82| 0x00000000<, u64 >|82| 0x00000002<) void
    0x00000006 var *bool 0x00000007
    0x00000007 store *bool >|82| 0x00000006<, bool true
    0x00000008 br |81|
  BASICBLOCK |83|
    0x00000000 br |80|
  BASICBLOCK |84|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 var *u64 0x00000004
    0x00000002 load *u64 >|84| 0x00000001<
    0x00000003 sub u64 >|84| 0x00000002<, u64 1
    0x00000004 store *u64 >|84| 0x00000001<, *u64 >|84| 0x00000003<
    0x00000005 call aXE "remove" (*__unk_type_kind >|84| 0x00000000<, u64 >|84| 0x00000002<) void
    0x00000006 br |85|
  BASICBLOCK |85|
    0x00000000 var *__unk_type_kind 0x00000006
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|85| 0x00000000<) void
    0x00000002 br |62|
  BASICBLOCK |86|
    0x00000000 gvar *__unk_type_kind 0x00000969
    0x00000001 memb *__unk_type_kind >|86| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|86| 0x00000001<, 2
    0x00000003 load *s32 >|86| 0x00000002<
    0x00000004 gvar *__unk_type_kind 0x00000969
    0x00000005 memb *__unk_type_kind >|86| 0x00000004<, 0
    0x00000006 memb *__unk_type_kind >|86| 0x00000005<, 0
    0x00000007 load *s32 >|86| 0x00000006<
    0x00000008 add s32 >|86| 0x00000007<, s32 >|86| 0x00000003<
    0x00000009 store *s32 >|86| 0x00000006<, s32 >|86| 0x00000008<
    0x0000000A gvar *__unk_type_kind 0x00000969
    0x0000000B memb *__unk_type_kind >|86| 0x0000000A<, 0
    0x0000000C call a7 "getAABB" (*__unk_type_kind >|86| 0x0000000B<) __unk_type_kind
    0x0000000D var *__unk_type_kind 0x0000000C
    0x0000000E store *__unk_type_kind >|86| 0x0000000D<, __unk_type_kind >|86| 0x0000000C<
    0x0000000F gvar *__unk_type_kind 0x00000969
    0x00000010 memb *__unk_type_kind >|86| 0x0000000F<, 0
    0x00000011 memb *__unk_type_kind >|86| 0x00000010<, 0
    0x00000012 load *s32 >|86| 0x00000011<
    0x00000013 slt s32 >|86| 0x00000012<, s32 0
    0x00000014 cbr s32 >|86| 0x00000013<, |89|, |88|
  BASICBLOCK |87|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|87| 0x00000000<, 3
    0x00000002 load *s32 >|87| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|87| 0x00000002<) bool
    0x00000004 cbr bool >|87| 0x00000003<, |113|, |114|
  BASICBLOCK |88|
    0x00000000 gvar *__unk_type_kind 0x00000969
    0x00000001 memb *__unk_type_kind >|88| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|88| 0x00000001<, 0
    0x00000003 load *s32 >|88| 0x00000002<
    0x00000004 si2fp s32 >|88| 0x00000003< to f
    0x00000005 gvar *f 0x00000958
    0x00000006 load *f >|88| 0x00000005<
    0x00000007 fgt f >|88| 0x00000004<, f >|88| 0x00000006<
    0x00000008 br |89|
  BASICBLOCK |89|
    0x00000000 phi2 |86| -> bool true, |88| -> f >|88| 0x00000007<
    0x00000001 cbr bool >|89| 0x00000000<, |91|, |90|
  BASICBLOCK |90|
    0x00000000 var *__unk_type_kind 0x0000000C
    0x00000001 load *__unk_type_kind >|90| 0x00000000<
    0x00000002 call akC "collidingGround" (__unk_type_kind >|90| 0x00000001<) *__unk_type_kind
    0x00000003 bc null to *__unk_type_kind
    0x00000004 neq *__unk_type_kind >|90| 0x00000002<, *__unk_type_kind >|90| 0x00000003<
    0x00000005 br |91|
  BASICBLOCK |91|
    0x00000000 phi2 |89| -> bool true, |90| -> *__unk_type_kind >|90| 0x00000004<
    0x00000001 cbr bool >|91| 0x00000000<, |92|, |93|
  BASICBLOCK |92|
    0x00000000 gvar *__unk_type_kind 0x00000969
    0x00000001 call aaE "rid" (*__unk_type_kind >|92| 0x00000000<) void
    0x00000002 br |94|
  BASICBLOCK |93|
    0x00000000 var *bool 0x0000000D
    0x00000001 store *bool >|93| 0x00000000<, bool false
    0x00000002 var *u64 0x0000000E
    0x00000003 store *u64 >|93| 0x00000002<, u64 0
    0x00000004 br |95|
  BASICBLOCK |94|
    0x00000000 var *__unk_type_kind 0x0000000C
    0x00000001 call aqD "__defer__" (*__unk_type_kind >|94| 0x00000000<) void
    0x00000002 br |87|
  BASICBLOCK |95|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call arD "__length__" (*__unk_type_kind >|95| 0x00000000<) u64
    0x00000002 load *u64 >|93| 0x00000002<
    0x00000003 ult u64 >|95| 0x00000002<, u64 >|95| 0x00000001<
    0x00000004 cbr u64 >|95| 0x00000003<, |96|, |98|
  BASICBLOCK |96|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call asD "__array__" (*__unk_type_kind >|96| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x0000000F
    0x00000003 load *u64 >|93| 0x00000002<
    0x00000004 arracc *__unk_type_kind >|96| 0x00000001<, u64 >|96| 0x00000003<
    0x00000005 store *__unk_type_kind >|96| 0x00000002<, *__unk_type_kind >|96| 0x00000004<
    0x00000006 var *__unk_type_kind 0x0000000C
    0x00000007 var **__unk_type_kind 0x0000000F
    0x00000008 load **__unk_type_kind >|96| 0x00000007<
    0x00000009 call a8C "getAABB" (*__unk_type_kind >|96| 0x00000008<) __unk_type_kind
    0x0000000A call a0 "intersecting" (*__unk_type_kind >|96| 0x00000006<, __unk_type_kind >|96| 0x00000009<) bool
    0x0000000B cbr bool >|96| 0x0000000A<, |99|, |100|
  BASICBLOCK |97|
    0x00000000 load *u64 >|93| 0x00000002<
    0x00000001 add u64 >|97| 0x00000000<, u64 1
    0x00000002 store *u64 >|93| 0x00000002<, u64 >|97| 0x00000001<
    0x00000003 br |95|
  BASICBLOCK |98|
    0x00000000 var *bool 0x0000000D
    0x00000001 load *bool >|98| 0x00000000<
    0x00000002 cbr bool >|98| 0x00000001<, |102|, |101|
  BASICBLOCK |99|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 var *u64 0x0000000E
    0x00000002 load *u64 >|99| 0x00000001<
    0x00000003 sub u64 >|99| 0x00000002<, u64 1
    0x00000004 store *u64 >|99| 0x00000001<, *u64 >|99| 0x00000003<
    0x00000005 call aYE "remove" (*__unk_type_kind >|99| 0x00000000<, u64 >|99| 0x00000002<) void
    0x00000006 var *bool 0x0000000D
    0x00000007 store *bool >|99| 0x00000006<, bool true
    0x00000008 br |98|
  BASICBLOCK |100|
    0x00000000 br |97|
  BASICBLOCK |101|
    0x00000000 var *u64 0x00000010
    0x00000001 store *u64 >|101| 0x00000000<, u64 0
    0x00000002 br |103|
  BASICBLOCK |102|
    0x00000000 var *bool 0x0000000D
    0x00000001 load *bool >|102| 0x00000000<
    0x00000002 isz bool >|102| 0x00000001<
    0x00000003 cbr u64 >|102| 0x00000002<, |109|, |110|
  BASICBLOCK |103|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call aoD "__length__" (*__unk_type_kind >|103| 0x00000000<) u64
    0x00000002 load *u64 >|101| 0x00000000<
    0x00000003 ult u64 >|103| 0x00000002<, u64 >|103| 0x00000001<
    0x00000004 cbr u64 >|103| 0x00000003<, |104|, |106|
  BASICBLOCK |104|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call apD "__array__" (*__unk_type_kind >|104| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000011
    0x00000003 load *u64 >|101| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|104| 0x00000001<, u64 >|104| 0x00000003<
    0x00000005 store *__unk_type_kind >|104| 0x00000002<, *__unk_type_kind >|104| 0x00000004<
    0x00000006 var *__unk_type_kind 0x0000000C
    0x00000007 var **__unk_type_kind 0x00000011
    0x00000008 load **__unk_type_kind >|104| 0x00000007<
    0x00000009 call aGC "getAABB" (*__unk_type_kind >|104| 0x00000008<) __unk_type_kind
    0x0000000A call a0 "intersecting" (*__unk_type_kind >|104| 0x00000006<, __unk_type_kind >|104| 0x00000009<) bool
    0x0000000B cbr bool >|104| 0x0000000A<, |107|, |108|
  BASICBLOCK |105|
    0x00000000 load *u64 >|101| 0x00000000<
    0x00000001 add u64 >|105| 0x00000000<, u64 1
    0x00000002 store *u64 >|101| 0x00000000<, u64 >|105| 0x00000001<
    0x00000003 br |103|
  BASICBLOCK |106|
    0x00000000 br |102|
  BASICBLOCK |107|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 var *u64 0x00000010
    0x00000002 load *u64 >|107| 0x00000001<
    0x00000003 sub u64 >|107| 0x00000002<, u64 1
    0x00000004 store *u64 >|107| 0x00000001<, *u64 >|107| 0x00000003<
    0x00000005 call abE "remove" (*__unk_type_kind >|107| 0x00000000<, u64 >|107| 0x00000002<) void
    0x00000006 var *bool 0x0000000D
    0x00000007 store *bool >|107| 0x00000006<, bool true
    0x00000008 br |106|
  BASICBLOCK |108|
    0x00000000 br |105|
  BASICBLOCK |109|
    0x00000000 var *__unk_type_kind 0x0000000C
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 call agB "getAABB" (*__unk_type_kind >|109| 0x00000001<) __unk_type_kind
    0x00000003 call a0 "intersecting" (*__unk_type_kind >|109| 0x00000000<, __unk_type_kind >|109| 0x00000002<) bool
    0x00000004 br |110|
  BASICBLOCK |110|
    0x00000000 phi2 |102| -> bool false, |109| -> bool >|109| 0x00000003<
    0x00000001 cbr bool >|110| 0x00000000<, |111|, |112|
  BASICBLOCK |111|
    0x00000000 call agC "killPlayer" () void
    0x00000001 var *__unk_type_kind 0x0000000C
    0x00000002 call aqD "__defer__" (*__unk_type_kind >|111| 0x00000001<) void
    0x00000003 ret
  BASICBLOCK |112|
    0x00000000 br |94|
  BASICBLOCK |113|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|113| 0x00000000<
    0x00000002 eq u64 >|113| 0x00000001<, u64 2
    0x00000003 cbr u64 >|113| 0x00000002<, |115|, |116|
  BASICBLOCK |114|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|114| 0x00000000<, 2
    0x00000002 load *s32 >|114| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|114| 0x00000002<) bool
    0x00000004 cbr bool >|114| 0x00000003<, |122|, |123|
  BASICBLOCK |115|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|115| 0x00000000<, 4
    0x00000002 load *s32 >|115| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|115| 0x00000002<) bool
    0x00000004 br |116|
  BASICBLOCK |116|
    0x00000000 phi2 |113| -> bool false, |115| -> bool >|115| 0x00000003<
    0x00000001 cbr bool >|116| 0x00000000<, |117|, |118|
  BASICBLOCK |117|
    0x00000000 br |119|
  BASICBLOCK |118|
    0x00000000 br |119|
  BASICBLOCK |119|
    0x00000000 phi2 |117| -> s32 8, |118| -> s32 6
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|119| 0x00000001<, 0
    0x00000003 load *s32 >|119| 0x00000002<
    0x00000004 add s32 >|119| 0x00000003<, s32 >|119| 0x00000000<
    0x00000005 store *s32 >|119| 0x00000002<, s32 >|119| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|119| 0x00000006<, 4
    0x00000008 store *s32 >|119| 0x00000007<, s32 1
    0x00000009 gvar *__unk_type_kind 0x00000945
    0x0000000A memb *__unk_type_kind >|119| 0x00000009<, 6
    0x0000000B store *bool >|119| 0x0000000A<, bool true
    0x0000000C gvar *__unk_type_kind 0x00000945
    0x0000000D memb *__unk_type_kind >|119| 0x0000000C<, 7
    0x0000000E store *bool >|119| 0x0000000D<, bool true
    0x0000000F call alC "playerCollidingPlatform" () *__unk_type_kind
    0x00000010 var **__unk_type_kind 0x00000012
    0x00000011 store **__unk_type_kind >|119| 0x00000010<, *__unk_type_kind >|119| 0x0000000F<
    0x00000012 var **__unk_type_kind 0x00000012
    0x00000013 load **__unk_type_kind >|119| 0x00000012<
    0x00000014 inz *__unk_type_kind >|119| 0x00000013<
    0x00000015 cbr bool >|119| 0x00000014<, |120|, |121|
  BASICBLOCK |120|
    0x00000000 var **__unk_type_kind 0x00000012
    0x00000001 load **__unk_type_kind >|120| 0x00000000<
    0x00000002 call aiB "getX" (*__unk_type_kind >|120| 0x00000001<) s32
    0x00000003 sub s32 >|120| 0x00000002<, s32 64
    0x00000004 gvar *__unk_type_kind 0x00000945
    0x00000005 memb *__unk_type_kind >|120| 0x00000004<, 0
    0x00000006 store *s32 >|120| 0x00000005<, s32 >|120| 0x00000003<
    0x00000007 br |121|
  BASICBLOCK |121|
    0x00000000 br |114|
  BASICBLOCK |122|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|122| 0x00000000<
    0x00000002 eq u64 >|122| 0x00000001<, u64 2
    0x00000003 cbr u64 >|122| 0x00000002<, |124|, |125|
  BASICBLOCK |123|
    0x00000000 call amC "playerOnPlatform" () *__unk_type_kind
    0x00000001 var **__unk_type_kind 0x00000014
    0x00000002 store **__unk_type_kind >|123| 0x00000001<, *__unk_type_kind >|123| 0x00000000<
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|123| 0x00000003<, 5
    0x00000005 load *bool >|123| 0x00000004<
    0x00000006 cbr bool >|123| 0x00000005<, |131|, |132|
  BASICBLOCK |124|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|124| 0x00000000<, 4
    0x00000002 load *s32 >|124| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|124| 0x00000002<) bool
    0x00000004 br |125|
  BASICBLOCK |125|
    0x00000000 phi2 |122| -> bool false, |124| -> bool >|124| 0x00000003<
    0x00000001 cbr bool >|125| 0x00000000<, |126|, |127|
  BASICBLOCK |126|
    0x00000000 br |128|
  BASICBLOCK |127|
    0x00000000 br |128|
  BASICBLOCK |128|
    0x00000000 phi2 |126| -> s32 -8, |127| -> s32 -6
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|128| 0x00000001<, 0
    0x00000003 load *s32 >|128| 0x00000002<
    0x00000004 add s32 >|128| 0x00000003<, s32 >|128| 0x00000000<
    0x00000005 store *s32 >|128| 0x00000002<, s32 >|128| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|128| 0x00000006<, 4
    0x00000008 store *s32 >|128| 0x00000007<, s32 -1
    0x00000009 gvar *__unk_type_kind 0x00000945
    0x0000000A memb *__unk_type_kind >|128| 0x00000009<, 6
    0x0000000B store *bool >|128| 0x0000000A<, bool true
    0x0000000C gvar *__unk_type_kind 0x00000945
    0x0000000D memb *__unk_type_kind >|128| 0x0000000C<, 7
    0x0000000E store *bool >|128| 0x0000000D<, bool true
    0x0000000F call alC "playerCollidingPlatform" () *__unk_type_kind
    0x00000010 var **__unk_type_kind 0x00000013
    0x00000011 store **__unk_type_kind >|128| 0x00000010<, *__unk_type_kind >|128| 0x0000000F<
    0x00000012 var **__unk_type_kind 0x00000013
    0x00000013 load **__unk_type_kind >|128| 0x00000012<
    0x00000014 inz *__unk_type_kind >|128| 0x00000013<
    0x00000015 cbr bool >|128| 0x00000014<, |129|, |130|
  BASICBLOCK |129|
    0x00000000 var **__unk_type_kind 0x00000013
    0x00000001 load **__unk_type_kind >|129| 0x00000000<
    0x00000002 call akB "getMaxX" (*__unk_type_kind >|129| 0x00000001<) s32
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|129| 0x00000003<, 0
    0x00000005 store *s32 >|129| 0x00000004<, s32 >|129| 0x00000002<
    0x00000006 br |130|
  BASICBLOCK |130|
    0x00000000 br |123|
  BASICBLOCK |131|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|131| 0x00000000<, 0
    0x00000002 load *s32 >|131| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|131| 0x00000002<) bool
    0x00000004 cbr bool >|131| 0x00000003<, |134|, |135|
  BASICBLOCK |132|
    0x00000000 var **__unk_type_kind 0x00000014
    0x00000001 load **__unk_type_kind >|132| 0x00000000<
    0x00000002 bc null to *__unk_type_kind
    0x00000003 eq *__unk_type_kind >|132| 0x00000001<, *__unk_type_kind >|132| 0x00000002<
    0x00000004 cbr *__unk_type_kind >|132| 0x00000003<, |156|, |157|
  BASICBLOCK |133|
    0x00000000 var **__unk_type_kind 0x00000014
    0x00000001 load **__unk_type_kind >|133| 0x00000000<
    0x00000002 bc null to *__unk_type_kind
    0x00000003 eq *__unk_type_kind >|133| 0x00000001<, *__unk_type_kind >|133| 0x00000002<
    0x00000004 cbr *__unk_type_kind >|133| 0x00000003<, |173|, |174|
  BASICBLOCK |134|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|134| 0x00000000<
    0x00000002 eq u64 >|134| 0x00000001<, u64 2
    0x00000003 cbr u64 >|134| 0x00000002<, |136|, |137|
  BASICBLOCK |135|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|135| 0x00000000<, 1
    0x00000002 load *s32 >|135| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|135| 0x00000002<) bool
    0x00000004 cbr bool >|135| 0x00000003<, |143|, |144|
  BASICBLOCK |136|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|136| 0x00000000<, 4
    0x00000002 load *s32 >|136| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|136| 0x00000002<) bool
    0x00000004 br |137|
  BASICBLOCK |137|
    0x00000000 phi2 |134| -> bool false, |136| -> bool >|136| 0x00000003<
    0x00000001 cbr bool >|137| 0x00000000<, |138|, |139|
  BASICBLOCK |138|
    0x00000000 br |140|
  BASICBLOCK |139|
    0x00000000 br |140|
  BASICBLOCK |140|
    0x00000000 phi2 |138| -> s32 6, |139| -> s32 4
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|140| 0x00000001<, 1
    0x00000003 load *s32 >|140| 0x00000002<
    0x00000004 sub s32 >|140| 0x00000003<, s32 >|140| 0x00000000<
    0x00000005 store *s32 >|140| 0x00000002<, s32 >|140| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|140| 0x00000006<, 6
    0x00000008 store *bool >|140| 0x00000007<, bool true
    0x00000009 call alC "playerCollidingPlatform" () *__unk_type_kind
    0x0000000A var **__unk_type_kind 0x00000015
    0x0000000B store **__unk_type_kind >|140| 0x0000000A<, *__unk_type_kind >|140| 0x00000009<
    0x0000000C var **__unk_type_kind 0x00000015
    0x0000000D load **__unk_type_kind >|140| 0x0000000C<
    0x0000000E inz *__unk_type_kind >|140| 0x0000000D<
    0x0000000F cbr bool >|140| 0x0000000E<, |141|, |142|
  BASICBLOCK |141|
    0x00000000 var **__unk_type_kind 0x00000015
    0x00000001 load **__unk_type_kind >|141| 0x00000000<
    0x00000002 call alB "getMaxY" (*__unk_type_kind >|141| 0x00000001<) s32
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|141| 0x00000003<, 1
    0x00000005 store *s32 >|141| 0x00000004<, s32 >|141| 0x00000002<
    0x00000006 br |142|
  BASICBLOCK |142|
    0x00000000 br |135|
  BASICBLOCK |143|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|143| 0x00000000<
    0x00000002 eq u64 >|143| 0x00000001<, u64 2
    0x00000003 cbr u64 >|143| 0x00000002<, |145|, |146|
  BASICBLOCK |144|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|144| 0x00000000<, 3
    0x00000002 load *s32 >|144| 0x00000001<
    0x00000003 slt s32 >|144| 0x00000002<, s32 1
    0x00000004 cbr s32 >|144| 0x00000003<, |150|, |151|
  BASICBLOCK |145|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|145| 0x00000000<, 4
    0x00000002 load *s32 >|145| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|145| 0x00000002<) bool
    0x00000004 br |146|
  BASICBLOCK |146|
    0x00000000 phi2 |143| -> bool false, |145| -> bool >|145| 0x00000003<
    0x00000001 cbr bool >|146| 0x00000000<, |147|, |148|
  BASICBLOCK |147|
    0x00000000 br |149|
  BASICBLOCK |148|
    0x00000000 br |149|
  BASICBLOCK |149|
    0x00000000 phi2 |147| -> s32 6, |148| -> s32 4
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|149| 0x00000001<, 1
    0x00000003 load *s32 >|149| 0x00000002<
    0x00000004 add s32 >|149| 0x00000003<, s32 >|149| 0x00000000<
    0x00000005 store *s32 >|149| 0x00000002<, s32 >|149| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|149| 0x00000006<, 6
    0x00000008 store *bool >|149| 0x00000007<, bool true
    0x00000009 br |144|
  BASICBLOCK |150|
    0x00000000 br |155|
  BASICBLOCK |151|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|151| 0x00000000<, 3
    0x00000002 load *s32 >|151| 0x00000001<
    0x00000003 sgt s32 >|151| 0x00000002<, s32 1
    0x00000004 cbr s32 >|151| 0x00000003<, |152|, |153|
  BASICBLOCK |152|
    0x00000000 br |154|
  BASICBLOCK |153|
    0x00000000 br |154|
  BASICBLOCK |154|
    0x00000000 phi2 |152| -> s32 -1, |153| -> s32 0
    0x00000001 br |155|
  BASICBLOCK |155|
    0x00000000 phi2 |150| -> s32 1, |154| -> s32 >|154| 0x00000000<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|155| 0x00000001<, 3
    0x00000003 load *s32 >|155| 0x00000002<
    0x00000004 add s32 >|155| 0x00000003<, s32 >|155| 0x00000000<
    0x00000005 store *s32 >|155| 0x00000002<, s32 >|155| 0x00000004<
    0x00000006 br |133|
  BASICBLOCK |156|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|156| 0x00000000<, 3
    0x00000002 load *s32 >|156| 0x00000001<
    0x00000003 slt s32 >|156| 0x00000002<, s32 24
    0x00000004 cbr s32 >|156| 0x00000003<, |159|, |160|
  BASICBLOCK |157|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|157| 0x00000000<
    0x00000002 eq u64 >|157| 0x00000001<, u64 2
    0x00000003 cbr u64 >|157| 0x00000002<, |162|, |163|
  BASICBLOCK |158|
    0x00000000 br |133|
  BASICBLOCK |159|
    0x00000000 br |161|
  BASICBLOCK |160|
    0x00000000 br |161|
  BASICBLOCK |161|
    0x00000000 phi2 |159| -> s32 1, |160| -> s32 0
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|161| 0x00000001<, 3
    0x00000003 load *s32 >|161| 0x00000002<
    0x00000004 add s32 >|161| 0x00000003<, s32 >|161| 0x00000000<
    0x00000005 store *s32 >|161| 0x00000002<, s32 >|161| 0x00000004<
    0x00000006 br |158|
  BASICBLOCK |162|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|162| 0x00000000<, 5
    0x00000002 load *s32 >|162| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|162| 0x00000002<) bool
    0x00000004 br |163|
  BASICBLOCK |163|
    0x00000000 phi2 |157| -> bool false, |162| -> bool >|162| 0x00000003<
    0x00000001 cbr bool >|163| 0x00000000<, |164|, |165|
  BASICBLOCK |164|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|164| 0x00000000<, 3
    0x00000002 store *s32 >|164| 0x00000001<, s32 -24
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|164| 0x00000003<, 7
    0x00000005 load *bool >|164| 0x00000004<
    0x00000006 cbr bool >|164| 0x00000005<, |167|, |168|
  BASICBLOCK |165|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|165| 0x00000000<, 0
    0x00000002 load *s32 >|165| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|165| 0x00000002<) bool
    0x00000004 cbr bool >|165| 0x00000003<, |170|, |171|
  BASICBLOCK |166|
    0x00000000 br |158|
  BASICBLOCK |167|
    0x00000000 br |169|
  BASICBLOCK |168|
    0x00000000 br |169|
  BASICBLOCK |169|
    0x00000000 phi2 |167| -> s32 1, |168| -> s32 0
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|169| 0x00000001<, 2
    0x00000003 load *s32 >|169| 0x00000002<
    0x00000004 add s32 >|169| 0x00000003<, s32 >|169| 0x00000000<
    0x00000005 store *s32 >|169| 0x00000002<, s32 >|169| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000966
    0x00000007 gvar *__unk_type_kind 0x0000093E
    0x00000008 load *__unk_type_kind >|169| 0x00000007<
    0x00000009 gvar *__unk_type_kind 0x00000945
    0x0000000A memb *__unk_type_kind >|169| 0x00000009<, 0
    0x0000000B load *s32 >|169| 0x0000000A<
    0x0000000C gvar *__unk_type_kind 0x00000945
    0x0000000D memb *__unk_type_kind >|169| 0x0000000C<, 1
    0x0000000E load *s32 >|169| 0x0000000D<
    0x0000000F call a5C "particle" (__unk_type_kind >|169| 0x00000008<, s32 >|169| 0x0000000B<, s32 >|169| 0x0000000E<, s32 64, s32 64) __unk_type_kind
    0x00000010 call acE "add" (*__unk_type_kind >|169| 0x00000006<, __unk_type_kind >|169| 0x0000000F<) void
    0x00000011 br |166|
  BASICBLOCK |170|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|170| 0x00000000<, 3
    0x00000002 store *s32 >|170| 0x00000001<, s32 -20
    0x00000003 br |172|
  BASICBLOCK |171|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|171| 0x00000000<, 3
    0x00000002 store *s32 >|171| 0x00000001<, s32 0
    0x00000003 br |172|
  BASICBLOCK |172|
    0x00000000 br |166|
  BASICBLOCK |173|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|173| 0x00000000<, 3
    0x00000002 load *s32 >|173| 0x00000001<
    0x00000003 sgt s32 >|173| 0x00000002<, s32 0
    0x00000004 br |174|
  BASICBLOCK |174|
    0x00000000 phi2 |133| -> bool false, |173| -> s32 >|173| 0x00000003<
    0x00000001 cbr bool >|174| 0x00000000<, |175|, |176|
  BASICBLOCK |175|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 memb *__unk_type_kind >|175| 0x00000000<, 0
    0x00000002 load *s32 >|175| 0x00000001<
    0x00000003 call aJB "captKeyHeld" (s32 >|175| 0x00000002<) bool
    0x00000004 br |176|
  BASICBLOCK |176|
    0x00000000 phi2 |174| -> bool false, |175| -> bool >|175| 0x00000003<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|176| 0x00000001<, 8
    0x00000003 store *bool >|176| 0x00000002<, bool >|176| 0x00000000<
    0x00000004 gvar *__unk_type_kind 0x00000945
    0x00000005 memb *__unk_type_kind >|176| 0x00000004<, 8
    0x00000006 load *bool >|176| 0x00000005<
    0x00000007 cbr bool >|176| 0x00000006<, |177|, |178|
  BASICBLOCK |177|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|177| 0x00000000<, 3
    0x00000002 load *s32 >|177| 0x00000001<
    0x00000003 sgt s32 >|177| 0x00000002<, s32 4
    0x00000004 br |178|
  BASICBLOCK |178|
    0x00000000 phi2 |176| -> bool false, |177| -> s32 >|177| 0x00000003<
    0x00000001 cbr bool >|178| 0x00000000<, |179|, |180|
  BASICBLOCK |179|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|179| 0x00000000<, 3
    0x00000002 store *s32 >|179| 0x00000001<, s32 4
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|179| 0x00000003<, 2
    0x00000005 load *s32 >|179| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|179| 0x00000006<, 0
    0x00000008 load *s32 >|179| 0x00000007<
    0x00000009 add s32 >|179| 0x00000008<, s32 >|179| 0x00000005<
    0x0000000A store *s32 >|179| 0x00000007<, s32 >|179| 0x00000009<
    0x0000000B br |180|
  BASICBLOCK |180|
    0x00000000 call alC "playerCollidingPlatform" () *__unk_type_kind
    0x00000001 var **__unk_type_kind 0x00000016
    0x00000002 store **__unk_type_kind >|180| 0x00000001<, *__unk_type_kind >|180| 0x00000000<
    0x00000003 var **__unk_type_kind 0x00000016
    0x00000004 load **__unk_type_kind >|180| 0x00000003<
    0x00000005 inz *__unk_type_kind >|180| 0x00000004<
    0x00000006 cbr bool >|180| 0x00000005<, |181|, |182|
  BASICBLOCK |181|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|181| 0x00000000<, 2
    0x00000002 load *s32 >|181| 0x00000001<
    0x00000003 sgt s32 >|181| 0x00000002<, s32 0
    0x00000004 cbr s32 >|181| 0x00000003<, |183|, |184|
  BASICBLOCK |182|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|182| 0x00000000<, 3
    0x00000002 load *s32 >|182| 0x00000001<
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|182| 0x00000003<, 1
    0x00000005 load *s32 >|182| 0x00000004<
    0x00000006 add s32 >|182| 0x00000005<, s32 >|182| 0x00000002<
    0x00000007 store *s32 >|182| 0x00000004<, s32 >|182| 0x00000006<
    0x00000008 call alC "playerCollidingPlatform" () *__unk_type_kind
    0x00000009 var **__unk_type_kind 0x00000016
    0x0000000A store **__unk_type_kind >|182| 0x00000009<, *__unk_type_kind >|182| 0x00000008<
    0x0000000B var **__unk_type_kind 0x00000016
    0x0000000C load **__unk_type_kind >|182| 0x0000000B<
    0x0000000D inz *__unk_type_kind >|182| 0x0000000C<
    0x0000000E cbr bool >|182| 0x0000000D<, |186|, |187|
  BASICBLOCK |183|
    0x00000000 var **__unk_type_kind 0x00000016
    0x00000001 load **__unk_type_kind >|183| 0x00000000<
    0x00000002 call aiB "getX" (*__unk_type_kind >|183| 0x00000001<) s32
    0x00000003 sub s32 >|183| 0x00000002<, s32 64
    0x00000004 br |185|
  BASICBLOCK |184|
    0x00000000 var **__unk_type_kind 0x00000016
    0x00000001 load **__unk_type_kind >|184| 0x00000000<
    0x00000002 call akB "getMaxX" (*__unk_type_kind >|184| 0x00000001<) s32
    0x00000003 br |185|
  BASICBLOCK |185|
    0x00000000 phi2 |183| -> s32 >|183| 0x00000003<, |184| -> s32 >|184| 0x00000002<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|185| 0x00000001<, 0
    0x00000003 store *s32 >|185| 0x00000002<, s32 >|185| 0x00000000<
    0x00000004 br |182|
  BASICBLOCK |186|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|186| 0x00000000<, 3
    0x00000002 load *s32 >|186| 0x00000001<
    0x00000003 sgt s32 >|186| 0x00000002<, s32 0
    0x00000004 cbr s32 >|186| 0x00000003<, |188|, |189|
  BASICBLOCK |187|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|187| 0x00000000<, 2
    0x00000002 load *s32 >|187| 0x00000001<
    0x00000003 slt s32 >|187| 0x00000002<, s32 0
    0x00000004 cbr s32 >|187| 0x00000003<, |191|, |192|
  BASICBLOCK |188|
    0x00000000 var **__unk_type_kind 0x00000016
    0x00000001 load **__unk_type_kind >|188| 0x00000000<
    0x00000002 call ajB "getY" (*__unk_type_kind >|188| 0x00000001<) s32
    0x00000003 sub s32 >|188| 0x00000002<, s32 64
    0x00000004 br |190|
  BASICBLOCK |189|
    0x00000000 var **__unk_type_kind 0x00000016
    0x00000001 load **__unk_type_kind >|189| 0x00000000<
    0x00000002 call alB "getMaxY" (*__unk_type_kind >|189| 0x00000001<) s32
    0x00000003 br |190|
  BASICBLOCK |190|
    0x00000000 phi2 |188| -> s32 >|188| 0x00000003<, |189| -> s32 >|189| 0x00000002<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|190| 0x00000001<, 1
    0x00000003 store *s32 >|190| 0x00000002<, s32 >|190| 0x00000000<
    0x00000004 br |187|
  BASICBLOCK |191|
    0x00000000 br |196|
  BASICBLOCK |192|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|192| 0x00000000<, 2
    0x00000002 load *s32 >|192| 0x00000001<
    0x00000003 sgt s32 >|192| 0x00000002<, s32 0
    0x00000004 cbr s32 >|192| 0x00000003<, |193|, |194|
  BASICBLOCK |193|
    0x00000000 br |195|
  BASICBLOCK |194|
    0x00000000 br |195|
  BASICBLOCK |195|
    0x00000000 phi2 |193| -> s32 -1, |194| -> s32 0
    0x00000001 br |196|
  BASICBLOCK |196|
    0x00000000 phi2 |191| -> s32 1, |195| -> s32 >|195| 0x00000000<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|196| 0x00000001<, 2
    0x00000003 load *s32 >|196| 0x00000002<
    0x00000004 add s32 >|196| 0x00000003<, s32 >|196| 0x00000000<
    0x00000005 store *s32 >|196| 0x00000002<, s32 >|196| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|196| 0x00000006<, 0
    0x00000008 load *s32 >|196| 0x00000007<
    0x00000009 slt s32 >|196| 0x00000008<, s32 0
    0x0000000A cbr s32 >|196| 0x00000009<, |197|, |198|
  BASICBLOCK |197|
    0x00000000 br |202|
  BASICBLOCK |198|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|198| 0x00000000<, 0
    0x00000002 load *s32 >|198| 0x00000001<
    0x00000003 si2fp s32 >|198| 0x00000002< to f
    0x00000004 fadd f >|198| 0x00000003<, f 64.000000
    0x00000005 gvar *f 0x00000958
    0x00000006 load *f >|198| 0x00000005<
    0x00000007 fgt f >|198| 0x00000004<, f >|198| 0x00000006<
    0x00000008 cbr f >|198| 0x00000007<, |199|, |200|
  BASICBLOCK |199|
    0x00000000 gvar *f 0x00000958
    0x00000001 load *f >|199| 0x00000000<
    0x00000002 fp2si f >|199| 0x00000001< to s32
    0x00000003 sub s32 >|199| 0x00000002<, s32 64
    0x00000004 br |201|
  BASICBLOCK |200|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|200| 0x00000000<, 0
    0x00000002 load *s32 >|200| 0x00000001<
    0x00000003 br |201|
  BASICBLOCK |201|
    0x00000000 phi2 |199| -> s32 >|199| 0x00000003<, |200| -> s32 >|200| 0x00000002<
    0x00000001 br |202|
  BASICBLOCK |202|
    0x00000000 phi2 |197| -> s32 0, |201| -> s32 >|201| 0x00000000<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|202| 0x00000001<, 0
    0x00000003 store *s32 >|202| 0x00000002<, s32 >|202| 0x00000000<
    0x00000004 gvar *__unk_type_kind 0x00000945
    0x00000005 memb *__unk_type_kind >|202| 0x00000004<, 1
    0x00000006 load *s32 >|202| 0x00000005<
    0x00000007 slt s32 >|202| 0x00000006<, s32 0
    0x00000008 cbr s32 >|202| 0x00000007<, |203|, |204|
  BASICBLOCK |203|
    0x00000000 br |208|
  BASICBLOCK |204|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|204| 0x00000000<, 1
    0x00000002 load *s32 >|204| 0x00000001<
    0x00000003 si2fp s32 >|204| 0x00000002< to f
    0x00000004 fadd f >|204| 0x00000003<, f 64.000000
    0x00000005 fgt f >|204| 0x00000004<, f 1280.000000
    0x00000006 cbr f >|204| 0x00000005<, |205|, |206|
  BASICBLOCK |205|
    0x00000000 br |207|
  BASICBLOCK |206|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|206| 0x00000000<, 1
    0x00000002 load *s32 >|206| 0x00000001<
    0x00000003 br |207|
  BASICBLOCK |207|
    0x00000000 phi2 |205| -> s32 1216, |206| -> s32 >|206| 0x00000002<
    0x00000001 br |208|
  BASICBLOCK |208|
    0x00000000 phi2 |203| -> s32 0, |207| -> s32 >|207| 0x00000000<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|208| 0x00000001<, 1
    0x00000003 store *s32 >|208| 0x00000002<, s32 >|208| 0x00000000<
    0x00000004 gvar *bool 0x0000094D
    0x00000005 load *bool >|208| 0x00000004<
    0x00000006 cbr bool >|208| 0x00000005<, |209|, |210|
  BASICBLOCK |209|
    0x00000000 gvar *f 0x0000094E
    0x00000001 load *f >|209| 0x00000000<
    0x00000002 fsub f >|209| 0x00000001<, f 0.100000
    0x00000003 store *f >|209| 0x00000000<, f >|209| 0x00000002<
    0x00000004 gvar *f 0x0000094E
    0x00000005 load *f >|209| 0x00000004<
    0x00000006 flt f >|209| 0x00000005<, f 0.000000
    0x00000007 cbr f >|209| 0x00000006<, |211|, |212|
  BASICBLOCK |210|
    0x00000000 var *u64 0x00000017
    0x00000001 store *u64 >|210| 0x00000000<, u64 0
    0x00000002 br |213|
  BASICBLOCK |211|
    0x00000000 gvar *__unk_type_kind 0x00000946
    0x00000001 call afB "thaw" (*__unk_type_kind >|211| 0x00000000<) __unk_type_kind
    0x00000002 gvar *__unk_type_kind 0x00000945
    0x00000003 store *__unk_type_kind >|211| 0x00000002<, __unk_type_kind >|211| 0x00000001<
    0x00000004 gvar *bool 0x0000094D
    0x00000005 store *bool >|211| 0x00000004<, bool false
    0x00000006 br |212|
  BASICBLOCK |212|
    0x00000000 br |210|
  BASICBLOCK |213|
    0x00000000 gvar *__unk_type_kind 0x0000095E
    0x00000001 call adE "__length__" (*__unk_type_kind >|213| 0x00000000<) u64
    0x00000002 load *u64 >|210| 0x00000000<
    0x00000003 ult u64 >|213| 0x00000002<, u64 >|213| 0x00000001<
    0x00000004 cbr u64 >|213| 0x00000003<, |214|, |216|
  BASICBLOCK |214|
    0x00000000 gvar *__unk_type_kind 0x0000095E
    0x00000001 call aeE "__array__" (*__unk_type_kind >|214| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000018
    0x00000003 load *u64 >|210| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|214| 0x00000001<, u64 >|214| 0x00000003<
    0x00000005 store *__unk_type_kind >|214| 0x00000002<, *__unk_type_kind >|214| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000018
    0x00000007 load **__unk_type_kind >|214| 0x00000006<
    0x00000008 memb *__unk_type_kind >|214| 0x00000007<, 0
    0x00000009 gvar *__unk_type_kind 0x00000945
    0x0000000A call agB "getAABB" (*__unk_type_kind >|214| 0x00000009<) __unk_type_kind
    0x0000000B call a0 "intersecting" (*__unk_type_kind >|214| 0x00000008<, __unk_type_kind >|214| 0x0000000A<) bool
    0x0000000C cbr bool >|214| 0x0000000B<, |217|, |218|
  BASICBLOCK |215|
    0x00000000 load *u64 >|210| 0x00000000<
    0x00000001 add u64 >|215| 0x00000000<, u64 1
    0x00000002 store *u64 >|210| 0x00000000<, u64 >|215| 0x00000001<
    0x00000003 br |213|
  BASICBLOCK |216|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|216| 0x00000000<, 1
    0x00000002 load *bool >|216| 0x00000001<
    0x00000003 cbr bool >|216| 0x00000002<, |221|, |222|
  BASICBLOCK |217|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|217| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000018
    0x00000003 load **__unk_type_kind >|217| 0x00000002<
    0x00000004 memb *__unk_type_kind >|217| 0x00000003<, 2
    0x00000005 load *u64 >|217| 0x00000004<
    0x00000006 eq u64 >|217| 0x00000001<, u64 >|217| 0x00000005<
    0x00000007 cbr u64 >|217| 0x00000006<, |219|, |220|
  BASICBLOCK |218|
    0x00000000 br |215|
  BASICBLOCK |219|
    0x00000000 br |216|
  BASICBLOCK |220|
    0x00000000 var **__unk_type_kind 0x00000018
    0x00000001 load **__unk_type_kind >|220| 0x00000000<
    0x00000002 load *__unk_type_kind >|220| 0x00000001<
    0x00000003 call aYB "pickupItem" (__unk_type_kind >|220| 0x00000002<) void
    0x00000004 br |216|
  BASICBLOCK |221|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|221| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|221| 0x00000001<, 0
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 call agB "getAABB" (*__unk_type_kind >|221| 0x00000003<) __unk_type_kind
    0x00000005 call a0 "intersecting" (*__unk_type_kind >|221| 0x00000002<, __unk_type_kind >|221| 0x00000004<) bool
    0x00000006 br |222|
  BASICBLOCK |222|
    0x00000000 phi2 |216| -> bool false, |221| -> bool >|221| 0x00000005<
    0x00000001 cbr bool >|222| 0x00000000<, |223|, |224|
  BASICBLOCK |223|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|223| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|223| 0x00000001<, 2
    0x00000003 store *bool >|223| 0x00000002<, bool true
    0x00000004 br |224|
  BASICBLOCK |224|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|224| 0x00000000<, 1
    0x00000002 load *bool >|224| 0x00000001<
    0x00000003 cbr bool >|224| 0x00000002<, |225|, |226|
  BASICBLOCK |225|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|225| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|225| 0x00000001<, 2
    0x00000003 load *bool >|225| 0x00000002<
    0x00000004 br |226|
  BASICBLOCK |226|
    0x00000000 phi2 |224| -> bool false, |225| -> bool >|225| 0x00000003<
    0x00000001 cbr bool >|226| 0x00000000<, |227|, |228|
  BASICBLOCK |227|
    0x00000000 gvar *__unk_type_kind 0x00000960
    0x00000001 memb *__unk_type_kind >|227| 0x00000000<, 1
    0x00000002 load *bool >|227| 0x00000001<
    0x00000003 br |228|
  BASICBLOCK |228|
    0x00000000 phi2 |226| -> bool false, |227| -> bool >|227| 0x00000002<
    0x00000001 cbr bool >|228| 0x00000000<, |229|, |230|
  BASICBLOCK |229|
    0x00000000 gvar *__unk_type_kind 0x00000960
    0x00000001 memb *__unk_type_kind >|229| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|229| 0x00000001<, 1
    0x00000003 memb *__unk_type_kind >|229| 0x00000002<, 0
    0x00000004 load *s32 >|229| 0x00000003<
    0x00000005 add s32 >|229| 0x00000004<, s32 32
    0x00000006 var *s32 0x00000019
    0x00000007 store *s32 >|229| 0x00000006<, s32 >|229| 0x00000005<
    0x00000008 gvar *__unk_type_kind 0x00000960
    0x00000009 memb *__unk_type_kind >|229| 0x00000008<, 0
    0x0000000A memb *__unk_type_kind >|229| 0x00000009<, 1
    0x0000000B memb *__unk_type_kind >|229| 0x0000000A<, 1
    0x0000000C load *s32 >|229| 0x0000000B<
    0x0000000D add s32 >|229| 0x0000000C<, s32 48
    0x0000000E var *s32 0x0000001A
    0x0000000F store *s32 >|229| 0x0000000E<, s32 >|229| 0x0000000D<
    0x00000010 gvar *__unk_type_kind 0x00000962
    0x00000011 memb *__unk_type_kind >|229| 0x00000010<, 0
    0x00000012 memb *__unk_type_kind >|229| 0x00000011<, 0
    0x00000013 memb *__unk_type_kind >|229| 0x00000012<, 0
    0x00000014 load *s32 >|229| 0x00000013<
    0x00000015 var *s32 0x00000019
    0x00000016 load *s32 >|229| 0x00000015<
    0x00000017 add s32 >|229| 0x00000014<, s32 >|229| 0x00000016<
    0x00000018 sdiv s32 >|229| 0x00000017<, s32 2
    0x00000019 var *s32 0x0000001B
    0x0000001A store *s32 >|229| 0x00000019<, s32 >|229| 0x00000018<
    0x0000001B gvar *__unk_type_kind 0x00000962
    0x0000001C memb *__unk_type_kind >|229| 0x0000001B<, 0
    0x0000001D memb *__unk_type_kind >|229| 0x0000001C<, 0
    0x0000001E memb *__unk_type_kind >|229| 0x0000001D<, 1
    0x0000001F load *s32 >|229| 0x0000001E<
    0x00000020 var *s32 0x0000001A
    0x00000021 load *s32 >|229| 0x00000020<
    0x00000022 add s32 >|229| 0x0000001F<, s32 >|229| 0x00000021<
    0x00000023 sdiv s32 >|229| 0x00000022<, s32 2
    0x00000024 var *s32 0x0000001C
    0x00000025 store *s32 >|229| 0x00000024<, s32 >|229| 0x00000023<
    0x00000026 var *s32 0x0000001B
    0x00000027 load *s32 >|229| 0x00000026<
    0x00000028 gvar *__unk_type_kind 0x00000962
    0x00000029 memb *__unk_type_kind >|229| 0x00000028<, 0
    0x0000002A memb *__unk_type_kind >|229| 0x00000029<, 0
    0x0000002B memb *__unk_type_kind >|229| 0x0000002A<, 0
    0x0000002C store *s32 >|229| 0x0000002B<, s32 >|229| 0x00000027<
    0x0000002D var *s32 0x0000001C
    0x0000002E load *s32 >|229| 0x0000002D<
    0x0000002F gvar *__unk_type_kind 0x00000962
    0x00000030 memb *__unk_type_kind >|229| 0x0000002F<, 0
    0x00000031 memb *__unk_type_kind >|229| 0x00000030<, 0
    0x00000032 memb *__unk_type_kind >|229| 0x00000031<, 1
    0x00000033 store *s32 >|229| 0x00000032<, s32 >|229| 0x0000002E<
    0x00000034 var *s32 0x0000001B
    0x00000035 load *s32 >|229| 0x00000034<
    0x00000036 gvar *__unk_type_kind 0x00000962
    0x00000037 memb *__unk_type_kind >|229| 0x00000036<, 0
    0x00000038 memb *__unk_type_kind >|229| 0x00000037<, 1
    0x00000039 memb *__unk_type_kind >|229| 0x00000038<, 0
    0x0000003A store *s32 >|229| 0x00000039<, s32 >|229| 0x00000035<
    0x0000003B var *s32 0x0000001C
    0x0000003C load *s32 >|229| 0x0000003B<
    0x0000003D gvar *__unk_type_kind 0x00000962
    0x0000003E memb *__unk_type_kind >|229| 0x0000003D<, 0
    0x0000003F memb *__unk_type_kind >|229| 0x0000003E<, 1
    0x00000040 memb *__unk_type_kind >|229| 0x0000003F<, 1
    0x00000041 store *s32 >|229| 0x00000040<, s32 >|229| 0x0000003C<
    0x00000042 var *s32 0x0000001B
    0x00000043 load *s32 >|229| 0x00000042<
    0x00000044 var *s32 0x00000019
    0x00000045 load *s32 >|229| 0x00000044<
    0x00000046 sub s32 >|229| 0x00000043<, s32 >|229| 0x00000045<
    0x00000047 call ac7 "abs" (s32 >|229| 0x00000046<) s32
    0x00000048 si2fp s32 >|229| 0x00000047< to d
    0x00000049 var *d 0x0000001D
    0x0000004A store *d >|229| 0x00000049<, d >|229| 0x00000048<
    0x0000004B var *s32 0x0000001C
    0x0000004C load *s32 >|229| 0x0000004B<
    0x0000004D var *s32 0x0000001A
    0x0000004E load *s32 >|229| 0x0000004D<
    0x0000004F sub s32 >|229| 0x0000004C<, s32 >|229| 0x0000004E<
    0x00000050 call ac7 "abs" (s32 >|229| 0x0000004F<) s32
    0x00000051 si2fp s32 >|229| 0x00000050< to d
    0x00000052 var *d 0x0000001E
    0x00000053 store *d >|229| 0x00000052<, d >|229| 0x00000051<
    0x00000054 var *d 0x0000001D
    0x00000055 load *d >|229| 0x00000054<
    0x00000056 var *d 0x0000001D
    0x00000057 load *d >|229| 0x00000056<
    0x00000058 fmul d >|229| 0x00000055<, d >|229| 0x00000057<
    0x00000059 var *d 0x0000001E
    0x0000005A load *d >|229| 0x00000059<
    0x0000005B var *d 0x0000001E
    0x0000005C load *d >|229| 0x0000005B<
    0x0000005D fmul d >|229| 0x0000005A<, d >|229| 0x0000005C<
    0x0000005E fadd d >|229| 0x00000058<, d >|229| 0x0000005D<
    0x0000005F call aE9 "sqrt" (d >|229| 0x0000005E<) d
    0x00000060 var *d 0x0000001F
    0x00000061 store *d >|229| 0x00000060<, d >|229| 0x0000005F<
    0x00000062 var *d 0x0000001F
    0x00000063 load *d >|229| 0x00000062<
    0x00000064 flt d >|229| 0x00000063<, d 2.000000
    0x00000065 cbr d >|229| 0x00000064<, |231|, |232|
  BASICBLOCK |230|
    0x00000000 call a9D "updateCamera" () void
    0x00000001 call anC "updateSpiders" () void
    0x00000002 call aoC "updateSwordfish" () void
    0x00000003 call apC "updateCannon" () void
    0x00000004 var *u64 0x00000020
    0x00000005 store *u64 >|230| 0x00000004<, u64 0
    0x00000006 br |233|
  BASICBLOCK |231|
    0x00000000 gvar *bool 0x00000961
    0x00000001 store *bool >|231| 0x00000000<, bool false
    0x00000002 gvar *__unk_type_kind 0x00000962
    0x00000003 call a8E "rid" (*__unk_type_kind >|231| 0x00000002<) void
    0x00000004 br |232|
  BASICBLOCK |232|
    0x00000000 br |230|
  BASICBLOCK |233|
    0x00000000 gvar *__unk_type_kind 0x00000971
    0x00000001 call afE "__length__" (*__unk_type_kind >|233| 0x00000000<) u64
    0x00000002 load *u64 >|230| 0x00000004<
    0x00000003 ult u64 >|233| 0x00000002<, u64 >|233| 0x00000001<
    0x00000004 cbr u64 >|233| 0x00000003<, |234|, |236|
  BASICBLOCK |234|
    0x00000000 gvar *__unk_type_kind 0x00000971
    0x00000001 call agE "__array__" (*__unk_type_kind >|234| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000021
    0x00000003 load *u64 >|230| 0x00000004<
    0x00000004 arracc *__unk_type_kind >|234| 0x00000001<, u64 >|234| 0x00000003<
    0x00000005 store *__unk_type_kind >|234| 0x00000002<, *__unk_type_kind >|234| 0x00000004<
    0x00000006 fadd f 1792.000000, f 14.000000
    0x00000007 var *f 0x00000022
    0x00000008 store *f >|234| 0x00000007<, f >|234| 0x00000006<
    0x00000009 fadd f 32.000000, f 14.000000
    0x0000000A var *f 0x00000023
    0x0000000B store *f >|234| 0x0000000A<, f >|234| 0x00000009<
    0x0000000C var **__unk_type_kind 0x00000021
    0x0000000D load **__unk_type_kind >|234| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|234| 0x0000000D<, 1
    0x0000000F load *f >|234| 0x0000000E<
    0x00000010 var *f 0x00000022
    0x00000011 load *f >|234| 0x00000010<
    0x00000012 fsub f >|234| 0x00000011<, f 4.000000
    0x00000013 flt f >|234| 0x0000000F<, f >|234| 0x00000012<
    0x00000014 cbr f >|234| 0x00000013<, |237|, |238|
  BASICBLOCK |235|
    0x00000000 load *u64 >|230| 0x00000004<
    0x00000001 add u64 >|235| 0x00000000<, u64 1
    0x00000002 store *u64 >|230| 0x00000004<, u64 >|235| 0x00000001<
    0x00000003 br |233|
  BASICBLOCK |236|
    0x00000000 gvar *__unk_type_kind 0x00000960
    0x00000001 memb *__unk_type_kind >|236| 0x00000000<, 1
    0x00000002 load *bool >|236| 0x00000001<
    0x00000003 cbr bool >|236| 0x00000002<, |247|, |248|
  BASICBLOCK |237|
    0x00000000 var **__unk_type_kind 0x00000021
    0x00000001 load **__unk_type_kind >|237| 0x00000000<
    0x00000002 memb *__unk_type_kind >|237| 0x00000001<, 1
    0x00000003 load *f >|237| 0x00000002<
    0x00000004 var *f 0x00000022
    0x00000005 load *f >|237| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000021
    0x00000007 load **__unk_type_kind >|237| 0x00000006<
    0x00000008 memb *__unk_type_kind >|237| 0x00000007<, 1
    0x00000009 load *f >|237| 0x00000008<
    0x0000000A fsub f >|237| 0x00000005<, f >|237| 0x00000009<
    0x0000000B fdiv f >|237| 0x0000000A<, f 4.000000
    0x0000000C fadd f >|237| 0x00000003<, f >|237| 0x0000000B<
    0x0000000D br |239|
  BASICBLOCK |238|
    0x00000000 var *f 0x00000022
    0x00000001 load *f >|238| 0x00000000<
    0x00000002 br |239|
  BASICBLOCK |239|
    0x00000000 phi2 |237| -> f >|237| 0x0000000C<, |238| -> f >|238| 0x00000001<
    0x00000001 var **__unk_type_kind 0x00000021
    0x00000002 load **__unk_type_kind >|239| 0x00000001<
    0x00000003 memb *__unk_type_kind >|239| 0x00000002<, 1
    0x00000004 store *f >|239| 0x00000003<, f >|239| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000021
    0x00000006 load **__unk_type_kind >|239| 0x00000005<
    0x00000007 memb *__unk_type_kind >|239| 0x00000006<, 2
    0x00000008 load *f >|239| 0x00000007<
    0x00000009 var *f 0x00000023
    0x0000000A load *f >|239| 0x00000009<
    0x0000000B fadd f >|239| 0x0000000A<, f 4.000000
    0x0000000C fgt f >|239| 0x00000008<, f >|239| 0x0000000B<
    0x0000000D cbr f >|239| 0x0000000C<, |240|, |241|
  BASICBLOCK |240|
    0x00000000 var **__unk_type_kind 0x00000021
    0x00000001 load **__unk_type_kind >|240| 0x00000000<
    0x00000002 memb *__unk_type_kind >|240| 0x00000001<, 2
    0x00000003 load *f >|240| 0x00000002<
    0x00000004 var *f 0x00000023
    0x00000005 load *f >|240| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000021
    0x00000007 load **__unk_type_kind >|240| 0x00000006<
    0x00000008 memb *__unk_type_kind >|240| 0x00000007<, 2
    0x00000009 load *f >|240| 0x00000008<
    0x0000000A fsub f >|240| 0x00000005<, f >|240| 0x00000009<
    0x0000000B fdiv f >|240| 0x0000000A<, f 4.000000
    0x0000000C fadd f >|240| 0x00000003<, f >|240| 0x0000000B<
    0x0000000D br |242|
  BASICBLOCK |241|
    0x00000000 var *f 0x00000023
    0x00000001 load *f >|241| 0x00000000<
    0x00000002 br |242|
  BASICBLOCK |242|
    0x00000000 phi2 |240| -> f >|240| 0x0000000C<, |241| -> f >|241| 0x00000001<
    0x00000001 var **__unk_type_kind 0x00000021
    0x00000002 load **__unk_type_kind >|242| 0x00000001<
    0x00000003 memb *__unk_type_kind >|242| 0x00000002<, 2
    0x00000004 store *f >|242| 0x00000003<, f >|242| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000021
    0x00000006 load **__unk_type_kind >|242| 0x00000005<
    0x00000007 memb *__unk_type_kind >|242| 0x00000006<, 1
    0x00000008 load *f >|242| 0x00000007<
    0x00000009 var *f 0x00000022
    0x0000000A load *f >|242| 0x00000009<
    0x0000000B feq f >|242| 0x00000008<, f >|242| 0x0000000A<
    0x0000000C cbr f >|242| 0x0000000B<, |243|, |244|
  BASICBLOCK |243|
    0x00000000 var **__unk_type_kind 0x00000021
    0x00000001 load **__unk_type_kind >|243| 0x00000000<
    0x00000002 memb *__unk_type_kind >|243| 0x00000001<, 2
    0x00000003 load *f >|243| 0x00000002<
    0x00000004 var *f 0x00000023
    0x00000005 load *f >|243| 0x00000004<
    0x00000006 feq f >|243| 0x00000003<, f >|243| 0x00000005<
    0x00000007 br |244|
  BASICBLOCK |244|
    0x00000000 phi2 |242| -> bool false, |243| -> f >|243| 0x00000006<
    0x00000001 cbr bool >|244| 0x00000000<, |245|, |246|
  BASICBLOCK |245|
    0x00000000 gvar *__unk_type_kind 0x00000971
    0x00000001 var *u64 0x00000020
    0x00000002 load *u64 >|245| 0x00000001<
    0x00000003 sub u64 >|245| 0x00000002<, u64 1
    0x00000004 store *u64 >|245| 0x00000001<, *u64 >|245| 0x00000003<
    0x00000005 call ahE "remove" (*__unk_type_kind >|245| 0x00000000<, u64 >|245| 0x00000002<) void
    0x00000006 br |235|
  BASICBLOCK |246|
    0x00000000 br |235|
  BASICBLOCK |247|
    0x00000000 gvar *bool 0x00000961
    0x00000001 load *bool >|247| 0x00000000<
    0x00000002 isz bool >|247| 0x00000001<
    0x00000003 br |248|
  BASICBLOCK |248|
    0x00000000 phi2 |236| -> bool false, |247| -> u64 >|247| 0x00000002<
    0x00000001 cbr bool >|248| 0x00000000<, |249|, |250|
  BASICBLOCK |249|
    0x00000000 gvar *__unk_type_kind 0x00000960
    0x00000001 memb *__unk_type_kind >|249| 0x00000000<, 0
    0x00000002 memb *__unk_type_kind >|249| 0x00000001<, 0
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 call agB "getAABB" (*__unk_type_kind >|249| 0x00000003<) __unk_type_kind
    0x00000005 call a0 "intersecting" (*__unk_type_kind >|249| 0x00000002<, __unk_type_kind >|249| 0x00000004<) bool
    0x00000006 br |250|
  BASICBLOCK |250|
    0x00000000 phi2 |248| -> bool false, |249| -> bool >|249| 0x00000005<
    0x00000001 cbr bool >|250| 0x00000000<, |251|, |252|
  BASICBLOCK |251|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|251| 0x00000000<
    0x00000002 add s32 >|251| 0x00000001<, s32 1
    0x00000003 store *s32 >|251| 0x00000000<, *s32 >|251| 0x00000002<
    0x00000004 load *s32 >|251| 0x00000000<
    0x00000005 call aQC "gotoScene" (s32 >|251| 0x00000004<) void
    0x00000006 br |252|
  BASICBLOCK |252|
    0x00000000 ret
fn on_key akD -> void
    {82 BBs, 381 INSTRs, 7 VARs}
    [0x00000000 s32]
    [0x00000001 s32]
    [0x00000002 s32]
    [0x00000003 s32]
    [0x00000000 *__unk_type_kind]
    [0x00000000 __unk_type_kind]
    [0x00000000 u64]
  BASICBLOCK |0|
    0x00000000 var *s32 0x00000002
    0x00000001 load *s32 >|0| 0x00000000<
    0x00000002 neq s32 >|0| 0x00000001<, s32 1
    0x00000003 cbr s32 >|0| 0x00000002<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 ret
  BASICBLOCK |2|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|2| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|2| 0x00000002<, 6
    0x00000004 load *s32 >|2| 0x00000003<
    0x00000005 eq s32 >|2| 0x00000001<, s32 >|2| 0x00000004<
    0x00000006 cbr s32 >|2| 0x00000005<, |3|, |4|
  BASICBLOCK |3|
    0x00000000 call aeC "pause" () void
    0x00000001 ret
  BASICBLOCK |4|
    0x00000000 gvar *bool 0x0000094F
    0x00000001 load *bool >|4| 0x00000000<
    0x00000002 cbr bool >|4| 0x00000001<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 ret
  BASICBLOCK |6|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|6| 0x00000000<
    0x00000002 eq s32 >|6| 0x00000001<, s32 0
    0x00000003 cbr s32 >|6| 0x00000002<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aUC "gotoScene1" () void
    0x00000001 br |8|
  BASICBLOCK |8|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|8| 0x00000000<
    0x00000002 eq s32 >|8| 0x00000001<, s32 84
    0x00000003 cbr s32 >|8| 0x00000002<, |9|, |10|
  BASICBLOCK |9|
    0x00000000 call acC "gotoThemeTestScreen" () void
    0x00000001 ret
  BASICBLOCK |10|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|10| 0x00000000<
    0x00000002 eq s32 >|10| 0x00000001<, s32 89
    0x00000003 cbr s32 >|10| 0x00000002<, |11|, |12|
  BASICBLOCK |11|
    0x00000000 call a8D "cycleThemes" () void
    0x00000001 ret
  BASICBLOCK |12|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|12| 0x00000000<
    0x00000002 eq s32 >|12| 0x00000001<, s32 69
    0x00000003 cbr s32 >|12| 0x00000002<, |13|, |14|
  BASICBLOCK |13|
    0x00000000 call aCD "toggleInventory" () void
    0x00000001 br |14|
  BASICBLOCK |14|
    0x00000000 gvar *bool 0x0000096A
    0x00000001 load *bool >|14| 0x00000000<
    0x00000002 cbr bool >|14| 0x00000001<, |15|, |16|
  BASICBLOCK |15|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|15| 0x00000000<
    0x00000002 call aDD "controlInventory" (s32 >|15| 0x00000001<) void
    0x00000003 ret
  BASICBLOCK |16|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 load *__unk_type_kind >|16| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000943
    0x00000003 load *__unk_type_kind >|16| 0x00000002<
    0x00000004 call aA "__equals__" (__unk_type_kind >|16| 0x00000001<, __unk_type_kind >|16| 0x00000003<) bool
    0x00000005 cbr bool >|16| 0x00000004<, |17|, |18|
  BASICBLOCK |17|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|17| 0x00000000<
    0x00000002 eq s32 >|17| 0x00000001<, s32 265
    0x00000003 cbr s32 >|17| 0x00000002<, |21|, |20|
  BASICBLOCK |18|
    0x00000000 gvar *__unk_type_kind 0x00000942
    0x00000001 load *__unk_type_kind >|18| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000944
    0x00000003 load *__unk_type_kind >|18| 0x00000002<
    0x00000004 call aA "__equals__" (__unk_type_kind >|18| 0x00000001<, __unk_type_kind >|18| 0x00000003<) bool
    0x00000005 cbr bool >|18| 0x00000004<, |28|, |29|
  BASICBLOCK |19|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|19| 0x00000000<
    0x00000002 eq u64 >|19| 0x00000001<, u64 1
    0x00000003 cbr u64 >|19| 0x00000002<, |38|, |39|
  BASICBLOCK |20|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|20| 0x00000000<
    0x00000002 eq s32 >|20| 0x00000001<, s32 264
    0x00000003 br |21|
  BASICBLOCK |21|
    0x00000000 phi2 |17| -> bool true, |20| -> s32 >|20| 0x00000002<
    0x00000001 cbr bool >|21| 0x00000000<, |23|, |22|
  BASICBLOCK |22|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|22| 0x00000000<
    0x00000002 eq s32 >|22| 0x00000001<, s32 263
    0x00000003 br |23|
  BASICBLOCK |23|
    0x00000000 phi2 |21| -> bool true, |22| -> s32 >|22| 0x00000002<
    0x00000001 cbr bool >|23| 0x00000000<, |25|, |24|
  BASICBLOCK |24|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|24| 0x00000000<
    0x00000002 eq s32 >|24| 0x00000001<, s32 262
    0x00000003 br |25|
  BASICBLOCK |25|
    0x00000000 phi2 |23| -> bool true, |24| -> s32 >|24| 0x00000002<
    0x00000001 cbr bool >|25| 0x00000000<, |26|, |27|
  BASICBLOCK |26|
    0x00000000 gvar *__unk_type_kind 0x00000944
    0x00000001 load *__unk_type_kind >|26| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 store *__unk_type_kind >|26| 0x00000002<, __unk_type_kind >|26| 0x00000001<
    0x00000004 br |27|
  BASICBLOCK |27|
    0x00000000 br |19|
  BASICBLOCK |28|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|28| 0x00000000<
    0x00000002 eq s32 >|28| 0x00000001<, s32 87
    0x00000003 cbr s32 >|28| 0x00000002<, |31|, |30|
  BASICBLOCK |29|
    0x00000000 br |19|
  BASICBLOCK |30|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|30| 0x00000000<
    0x00000002 eq s32 >|30| 0x00000001<, s32 83
    0x00000003 br |31|
  BASICBLOCK |31|
    0x00000000 phi2 |28| -> bool true, |30| -> s32 >|30| 0x00000002<
    0x00000001 cbr bool >|31| 0x00000000<, |33|, |32|
  BASICBLOCK |32|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|32| 0x00000000<
    0x00000002 eq s32 >|32| 0x00000001<, s32 65
    0x00000003 br |33|
  BASICBLOCK |33|
    0x00000000 phi2 |31| -> bool true, |32| -> s32 >|32| 0x00000002<
    0x00000001 cbr bool >|33| 0x00000000<, |35|, |34|
  BASICBLOCK |34|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|34| 0x00000000<
    0x00000002 eq s32 >|34| 0x00000001<, s32 68
    0x00000003 br |35|
  BASICBLOCK |35|
    0x00000000 phi2 |33| -> bool true, |34| -> s32 >|34| 0x00000002<
    0x00000001 cbr bool >|35| 0x00000000<, |36|, |37|
  BASICBLOCK |36|
    0x00000000 gvar *__unk_type_kind 0x00000943
    0x00000001 load *__unk_type_kind >|36| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 store *__unk_type_kind >|36| 0x00000002<, __unk_type_kind >|36| 0x00000001<
    0x00000004 br |37|
  BASICBLOCK |37|
    0x00000000 br |29|
  BASICBLOCK |38|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|38| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|38| 0x00000002<, 4
    0x00000004 load *s32 >|38| 0x00000003<
    0x00000005 eq s32 >|38| 0x00000001<, s32 >|38| 0x00000004<
    0x00000006 cbr s32 >|38| 0x00000005<, |41|, |42|
  BASICBLOCK |39|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|39| 0x00000000<
    0x00000002 eq u64 >|39| 0x00000001<, u64 3
    0x00000003 cbr u64 >|39| 0x00000002<, |45|, |46|
  BASICBLOCK |40|
    0x00000000 var *u64 0x00000006
    0x00000001 store *u64 >|40| 0x00000000<, u64 0
    0x00000002 br |76|
  BASICBLOCK |41|
    0x00000000 call afC "teleport" () void
    0x00000001 br |42|
  BASICBLOCK |42|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|42| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|42| 0x00000002<, 5
    0x00000004 load *s32 >|42| 0x00000003<
    0x00000005 eq s32 >|42| 0x00000001<, s32 >|42| 0x00000004<
    0x00000006 cbr s32 >|42| 0x00000005<, |43|, |44|
  BASICBLOCK |43|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 load *__unk_type_kind >|43| 0x00000001<
    0x00000003 call azC "getImageForPlayer" (__unk_type_kind >|43| 0x00000002<) __unk_type_kind
    0x00000004 call aeB "freeze" (*__unk_type_kind >|43| 0x00000000<, __unk_type_kind >|43| 0x00000003<) __unk_type_kind
    0x00000005 gvar *__unk_type_kind 0x00000946
    0x00000006 store *__unk_type_kind >|43| 0x00000005<, __unk_type_kind >|43| 0x00000004<
    0x00000007 br |44|
  BASICBLOCK |44|
    0x00000000 br |40|
  BASICBLOCK |45|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|45| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|45| 0x00000002<, 4
    0x00000004 load *s32 >|45| 0x00000003<
    0x00000005 eq s32 >|45| 0x00000001<, s32 >|45| 0x00000004<
    0x00000006 cbr s32 >|45| 0x00000005<, |48|, |49|
  BASICBLOCK |46|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|46| 0x00000000<
    0x00000002 eq u64 >|46| 0x00000001<, u64 4
    0x00000003 cbr u64 >|46| 0x00000002<, |52|, |53|
  BASICBLOCK |47|
    0x00000000 br |40|
  BASICBLOCK |48|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|48| 0x00000000<, 5
    0x00000002 load *bool >|48| 0x00000001<
    0x00000003 isz bool >|48| 0x00000002<
    0x00000004 br |49|
  BASICBLOCK |49|
    0x00000000 phi2 |45| -> bool false, |48| -> u64 >|48| 0x00000003<
    0x00000001 cbr bool >|49| 0x00000000<, |50|, |51|
  BASICBLOCK |50|
    0x00000000 gvar *__unk_type_kind 0x00000966
    0x00000001 gvar *__unk_type_kind 0x0000093E
    0x00000002 load *__unk_type_kind >|50| 0x00000001<
    0x00000003 gvar *__unk_type_kind 0x00000945
    0x00000004 memb *__unk_type_kind >|50| 0x00000003<, 0
    0x00000005 load *s32 >|50| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000945
    0x00000007 memb *__unk_type_kind >|50| 0x00000006<, 4
    0x00000008 load *s32 >|50| 0x00000007<
    0x00000009 mul s32 >|50| 0x00000008<, s32 128
    0x0000000A add s32 >|50| 0x00000005<, s32 >|50| 0x00000009<
    0x0000000B gvar *__unk_type_kind 0x00000945
    0x0000000C memb *__unk_type_kind >|50| 0x0000000B<, 1
    0x0000000D load *s32 >|50| 0x0000000C<
    0x0000000E call a5C "particle" (__unk_type_kind >|50| 0x00000002<, s32 >|50| 0x0000000A<, s32 >|50| 0x0000000D<, s32 64, s32 64) __unk_type_kind
    0x0000000F call acE "add" (*__unk_type_kind >|50| 0x00000000<, __unk_type_kind >|50| 0x0000000E<) void
    0x00000010 gvar *__unk_type_kind 0x00000967
    0x00000011 gvar *__unk_type_kind 0x00000945
    0x00000012 memb *__unk_type_kind >|50| 0x00000011<, 0
    0x00000013 load *s32 >|50| 0x00000012<
    0x00000014 gvar *__unk_type_kind 0x00000945
    0x00000015 memb *__unk_type_kind >|50| 0x00000014<, 4
    0x00000016 load *s32 >|50| 0x00000015<
    0x00000017 mul s32 >|50| 0x00000016<, s32 96
    0x00000018 add s32 >|50| 0x00000013<, s32 >|50| 0x00000017<
    0x00000019 add s32 >|50| 0x00000018<, s32 16
    0x0000001A gvar *__unk_type_kind 0x00000945
    0x0000001B memb *__unk_type_kind >|50| 0x0000001A<, 1
    0x0000001C load *s32 >|50| 0x0000001B<
    0x0000001D add s32 >|50| 0x0000001C<, s32 28
    0x0000001E gvar *__unk_type_kind 0x00000945
    0x0000001F memb *__unk_type_kind >|50| 0x0000001E<, 4
    0x00000020 load *s32 >|50| 0x0000001F<
    0x00000021 mul s32 >|50| 0x00000020<, s32 20
    0x00000022 call a3 "bullet" (s32 >|50| 0x00000019<, s32 >|50| 0x0000001D<, s32 >|50| 0x00000021<) __unk_type_kind
    0x00000023 call aiE "add" (*__unk_type_kind >|50| 0x00000010<, __unk_type_kind >|50| 0x00000022<) void
    0x00000024 br |51|
  BASICBLOCK |51|
    0x00000000 br |47|
  BASICBLOCK |52|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|52| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|52| 0x00000002<, 4
    0x00000004 load *s32 >|52| 0x00000003<
    0x00000005 eq s32 >|52| 0x00000001<, s32 >|52| 0x00000004<
    0x00000006 cbr s32 >|52| 0x00000005<, |54|, |55|
  BASICBLOCK |53|
    0x00000000 br |47|
  BASICBLOCK |54|
    0x00000000 gvar *__unk_type_kind 0x00000968
    0x00000001 memb *__unk_type_kind >|54| 0x00000000<, 1
    0x00000002 load *bool >|54| 0x00000001<
    0x00000003 br |55|
  BASICBLOCK |55|
    0x00000000 phi2 |52| -> bool false, |54| -> bool >|54| 0x00000002<
    0x00000001 cbr bool >|55| 0x00000000<, |56|, |57|
  BASICBLOCK |56|
    0x00000000 gvar *__unk_type_kind 0x00000968
    0x00000001 memb *__unk_type_kind >|56| 0x00000000<, 0
    0x00000002 var **__unk_type_kind 0x00000004
    0x00000003 store **__unk_type_kind >|56| 0x00000002<, *__unk_type_kind >|56| 0x00000001<
    0x00000004 gvar *__unk_type_kind 0x00000966
    0x00000005 gvar *__unk_type_kind 0x0000093F
    0x00000006 load *__unk_type_kind >|56| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000004
    0x00000008 load **__unk_type_kind >|56| 0x00000007<
    0x00000009 memb *__unk_type_kind >|56| 0x00000008<, 0
    0x0000000A load *s32 >|56| 0x00000009<
    0x0000000B var **__unk_type_kind 0x00000004
    0x0000000C load **__unk_type_kind >|56| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|56| 0x0000000C<, 3
    0x0000000E load *s32 >|56| 0x0000000D<
    0x0000000F eq s32 >|56| 0x0000000E<, s32 1
    0x00000010 cbr s32 >|56| 0x0000000F<, |58|, |59|
  BASICBLOCK |57|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|57| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000942
    0x00000003 memb *__unk_type_kind >|57| 0x00000002<, 5
    0x00000004 load *s32 >|57| 0x00000003<
    0x00000005 eq s32 >|57| 0x00000001<, s32 >|57| 0x00000004<
    0x00000006 cbr s32 >|57| 0x00000005<, |69|, |70|
  BASICBLOCK |58|
    0x00000000 br |60|
  BASICBLOCK |59|
    0x00000000 br |60|
  BASICBLOCK |60|
    0x00000000 phi2 |58| -> s32 -4, |59| -> s32 120
    0x00000001 add s32 >|56| 0x0000000A<, s32 >|60| 0x00000000<
    0x00000002 sub s32 >|60| 0x00000001<, s32 16
    0x00000003 var **__unk_type_kind 0x00000004
    0x00000004 load **__unk_type_kind >|60| 0x00000003<
    0x00000005 memb *__unk_type_kind >|60| 0x00000004<, 1
    0x00000006 load *s32 >|60| 0x00000005<
    0x00000007 sub s32 >|60| 0x00000006<, s32 16
    0x00000008 call a5C "particle" (__unk_type_kind >|56| 0x00000006<, s32 >|60| 0x00000002<, s32 >|60| 0x00000007<, s32 64, s32 64) __unk_type_kind
    0x00000009 call acE "add" (*__unk_type_kind >|56| 0x00000004<, __unk_type_kind >|60| 0x00000008<) void
    0x0000000A gvar *__unk_type_kind 0x00000969
    0x0000000B memb *__unk_type_kind >|60| 0x0000000A<, 1
    0x0000000C load *bool >|60| 0x0000000B<
    0x0000000D isz bool >|60| 0x0000000C<
    0x0000000E cbr u64 >|60| 0x0000000D<, |61|, |62|
  BASICBLOCK |61|
    0x00000000 gvar *__unk_type_kind 0x00000969
    0x00000001 var **__unk_type_kind 0x00000004
    0x00000002 load **__unk_type_kind >|61| 0x00000001<
    0x00000003 memb *__unk_type_kind >|61| 0x00000002<, 0
    0x00000004 load *s32 >|61| 0x00000003<
    0x00000005 var **__unk_type_kind 0x00000004
    0x00000006 load **__unk_type_kind >|61| 0x00000005<
    0x00000007 memb *__unk_type_kind >|61| 0x00000006<, 3
    0x00000008 load *s32 >|61| 0x00000007<
    0x00000009 eq s32 >|61| 0x00000008<, s32 1
    0x0000000A cbr s32 >|61| 0x00000009<, |63|, |64|
  BASICBLOCK |62|
    0x00000000 br |57|
  BASICBLOCK |63|
    0x00000000 br |65|
  BASICBLOCK |64|
    0x00000000 br |65|
  BASICBLOCK |65|
    0x00000000 phi2 |63| -> s32 128, |64| -> s32 -40
    0x00000001 add s32 >|61| 0x00000004<, s32 >|65| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000004
    0x00000003 load **__unk_type_kind >|65| 0x00000002<
    0x00000004 memb *__unk_type_kind >|65| 0x00000003<, 1
    0x00000005 load *s32 >|65| 0x00000004<
    0x00000006 add s32 >|65| 0x00000005<, s32 16
    0x00000007 var **__unk_type_kind 0x00000004
    0x00000008 load **__unk_type_kind >|65| 0x00000007<
    0x00000009 memb *__unk_type_kind >|65| 0x00000008<, 3
    0x0000000A load *s32 >|65| 0x00000009<
    0x0000000B mul s32 >|65| 0x0000000A<, s32 20
    0x0000000C call a8 "cannonBall" (s32 >|65| 0x00000001<, s32 >|65| 0x00000006<, s32 >|65| 0x0000000B<) __unk_type_kind
    0x0000000D call ajE "set" (*__unk_type_kind >|61| 0x00000000<, __unk_type_kind >|65| 0x0000000C<) void
    0x0000000E gvar *__unk_type_kind 0x00000966
    0x0000000F gvar *__unk_type_kind 0x0000093E
    0x00000010 load *__unk_type_kind >|65| 0x0000000F<
    0x00000011 var **__unk_type_kind 0x00000004
    0x00000012 load **__unk_type_kind >|65| 0x00000011<
    0x00000013 memb *__unk_type_kind >|65| 0x00000012<, 0
    0x00000014 load *s32 >|65| 0x00000013<
    0x00000015 var **__unk_type_kind 0x00000004
    0x00000016 load **__unk_type_kind >|65| 0x00000015<
    0x00000017 memb *__unk_type_kind >|65| 0x00000016<, 3
    0x00000018 load *s32 >|65| 0x00000017<
    0x00000019 eq s32 >|65| 0x00000018<, s32 1
    0x0000001A cbr s32 >|65| 0x00000019<, |66|, |67|
  BASICBLOCK |66|
    0x00000000 br |68|
  BASICBLOCK |67|
    0x00000000 br |68|
  BASICBLOCK |68|
    0x00000000 phi2 |66| -> s32 128, |67| -> s32 -40
    0x00000001 add s32 >|65| 0x00000014<, s32 >|68| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000004
    0x00000003 load **__unk_type_kind >|68| 0x00000002<
    0x00000004 memb *__unk_type_kind >|68| 0x00000003<, 1
    0x00000005 load *s32 >|68| 0x00000004<
    0x00000006 call a5C "particle" (__unk_type_kind >|65| 0x00000010<, s32 >|68| 0x00000001<, s32 >|68| 0x00000005<, s32 64, s32 64) __unk_type_kind
    0x00000007 call acE "add" (*__unk_type_kind >|65| 0x0000000E<, __unk_type_kind >|68| 0x00000006<) void
    0x00000008 br |62|
  BASICBLOCK |69|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|69| 0x00000000<, 4
    0x00000002 load *s32 >|69| 0x00000001<
    0x00000003 eq s32 >|69| 0x00000002<, s32 1
    0x00000004 cbr s32 >|69| 0x00000003<, |71|, |72|
  BASICBLOCK |70|
    0x00000000 br |53|
  BASICBLOCK |71|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|71| 0x00000000<, 0
    0x00000002 load *s32 >|71| 0x00000001<
    0x00000003 br |73|
  BASICBLOCK |72|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 memb *__unk_type_kind >|72| 0x00000000<, 0
    0x00000002 load *s32 >|72| 0x00000001<
    0x00000003 sub s32 >|72| 0x00000002<, s32 88
    0x00000004 br |73|
  BASICBLOCK |73|
    0x00000000 phi2 |71| -> s32 >|71| 0x00000002<, |72| -> s32 >|72| 0x00000003<
    0x00000001 gvar *__unk_type_kind 0x00000945
    0x00000002 memb *__unk_type_kind >|73| 0x00000001<, 1
    0x00000003 load *s32 >|73| 0x00000002<
    0x00000004 sub s32 >|73| 0x00000003<, s32 128
    0x00000005 gvar *__unk_type_kind 0x00000945
    0x00000006 memb *__unk_type_kind >|73| 0x00000005<, 4
    0x00000007 load *s32 >|73| 0x00000006<
    0x00000008 call a6 "cannon" (s32 >|73| 0x00000000<, s32 >|73| 0x00000004<, s32 >|73| 0x00000007<) __unk_type_kind
    0x00000009 var *__unk_type_kind 0x00000005
    0x0000000A store *__unk_type_kind >|73| 0x00000009<, __unk_type_kind >|73| 0x00000008<
    0x0000000B var *__unk_type_kind 0x00000005
    0x0000000C call a4 "getAABB" (*__unk_type_kind >|73| 0x0000000B<) __unk_type_kind
    0x0000000D call akC "collidingGround" (__unk_type_kind >|73| 0x0000000C<) *__unk_type_kind
    0x0000000E bc null to *__unk_type_kind
    0x0000000F eq *__unk_type_kind >|73| 0x0000000D<, *__unk_type_kind >|73| 0x0000000E<
    0x00000010 cbr *__unk_type_kind >|73| 0x0000000F<, |74|, |75|
  BASICBLOCK |74|
    0x00000000 gvar *__unk_type_kind 0x00000968
    0x00000001 var *__unk_type_kind 0x00000005
    0x00000002 load *__unk_type_kind >|74| 0x00000001<
    0x00000003 call akE "set" (*__unk_type_kind >|74| 0x00000000<, __unk_type_kind >|74| 0x00000002<) void
    0x00000004 br |75|
  BASICBLOCK |75|
    0x00000000 var *__unk_type_kind 0x00000005
    0x00000001 call alE "__defer__" (*__unk_type_kind >|75| 0x00000000<) void
    0x00000002 br |70|
  BASICBLOCK |76|
    0x00000000 load *u64 >|40| 0x00000000<
    0x00000001 ult u64 >|76| 0x00000000<, u64 9
    0x00000002 cbr u64 >|76| 0x00000001<, |77|, |79|
  BASICBLOCK |77|
    0x00000000 var *s32 0x00000000
    0x00000001 load *s32 >|77| 0x00000000<
    0x00000002 var *u64 0x00000006
    0x00000003 load *u64 >|77| 0x00000002<
    0x00000004 trunc u64 >|77| 0x00000003< to s32
    0x00000005 add s32 49, s32 >|77| 0x00000004<
    0x00000006 eq s32 >|77| 0x00000001<, s32 >|77| 0x00000005<
    0x00000007 cbr s32 >|77| 0x00000006<, |80|, |81|
  BASICBLOCK |78|
    0x00000000 load *u64 >|40| 0x00000000<
    0x00000001 add u64 >|78| 0x00000000<, u64 1
    0x00000002 store *u64 >|40| 0x00000000<, u64 >|78| 0x00000001<
    0x00000003 br |76|
  BASICBLOCK |79|
    0x00000000 ret
  BASICBLOCK |80|
    0x00000000 var *u64 0x00000006
    0x00000001 load *u64 >|80| 0x00000000<
    0x00000002 add u64 1, u64 >|80| 0x00000001<
    0x00000003 trunc u64 >|80| 0x00000002< to s32
    0x00000004 call aQC "gotoScene" (s32 >|80| 0x00000003<) void
    0x00000005 br |81|
  BASICBLOCK |81|
    0x00000000 br |78|
fn on_draw alD -> void
    {84 BBs, 605 INSTRs, 22 VARs}
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000002 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 call asA "captColor" (f 1.000000, f 1.000000, f 1.000000) __unk_type_kind
    0x00000001 call awA "captClearColor" (__unk_type_kind >|0| 0x00000000<) void
    0x00000002 gvar *bool 0x0000094F
    0x00000003 load *bool >|0| 0x00000002<
    0x00000004 cbr bool >|0| 0x00000003<, |2|, |1|
  BASICBLOCK |1|
    0x00000000 call a07 "glfwGetTime" () d
    0x00000001 fext f 1000.000000 to d
    0x00000002 fmul d >|1| 0x00000000<, d >|1| 0x00000001<
    0x00000003 gvar *d 0x0000094C
    0x00000004 load *d >|1| 0x00000003<
    0x00000005 fext f 1000.000000 to d
    0x00000006 fmul d >|1| 0x00000004<, d >|1| 0x00000005<
    0x00000007 fsub d >|1| 0x00000002<, d >|1| 0x00000006<
    0x00000008 ftrunc d >|1| 0x00000007< to f
    0x00000009 fdiv f >|1| 0x00000008<, f 100.000000
    0x0000000A call aaA "captViewWidth" () f
    0x0000000B frem f >|1| 0x00000009<, f >|1| 0x0000000A<
    0x0000000C gvar *f 0x0000094A
    0x0000000D store *f >|1| 0x0000000C<, f >|1| 0x0000000B<
    0x0000000E br |2|
  BASICBLOCK |2|
    0x00000000 gvar **__unk_type_kind 0x00000975
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 0
    0x00000003 load *__unk_type_kind >|2| 0x00000002<
    0x00000004 gvar *f 0x0000094A
    0x00000005 load *f >|2| 0x00000004<
    0x00000006 fsub f 0.000000, f >|2| 0x00000005<
    0x00000007 call aH9 "ceilf" (f >|2| 0x00000006<) f
    0x00000008 call aaA "captViewWidth" () f
    0x00000009 call abA "captViewHeight" () f
    0x0000000A call aDB "captDrawTexture" (__unk_type_kind >|2| 0x00000003<, f >|2| 0x00000007<, f 0.000000, f >|2| 0x00000008<, f >|2| 0x00000009<) void
    0x0000000B gvar **__unk_type_kind 0x00000975
    0x0000000C load **__unk_type_kind >|2| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|2| 0x0000000C<, 0
    0x0000000E load *__unk_type_kind >|2| 0x0000000D<
    0x0000000F gvar *f 0x0000094A
    0x00000010 load *f >|2| 0x0000000F<
    0x00000011 fsub f 0.000000, f >|2| 0x00000010<
    0x00000012 call aaA "captViewWidth" () f
    0x00000013 fadd f >|2| 0x00000011<, f >|2| 0x00000012<
    0x00000014 call aaA "captViewWidth" () f
    0x00000015 call abA "captViewHeight" () f
    0x00000016 call aDB "captDrawTexture" (__unk_type_kind >|2| 0x0000000E<, f >|2| 0x00000013<, f 0.000000, f >|2| 0x00000014<, f >|2| 0x00000015<) void
    0x00000017 var *u64 0x00000000
    0x00000018 store *u64 >|2| 0x00000017<, u64 0
    0x00000019 br |3|
  BASICBLOCK |3|
    0x00000000 gvar *__unk_type_kind 0x0000095A
    0x00000001 call anE "__length__" (*__unk_type_kind >|3| 0x00000000<) u64
    0x00000002 load *u64 >|2| 0x00000017<
    0x00000003 ult u64 >|3| 0x00000002<, u64 >|3| 0x00000001<
    0x00000004 cbr u64 >|3| 0x00000003<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 gvar *__unk_type_kind 0x0000095A
    0x00000001 call aoE "__array__" (*__unk_type_kind >|4| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000001
    0x00000003 load *u64 >|2| 0x00000017<
    0x00000004 arracc *__unk_type_kind >|4| 0x00000001<, u64 >|4| 0x00000003<
    0x00000005 store *__unk_type_kind >|4| 0x00000002<, *__unk_type_kind >|4| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000001
    0x00000007 load **__unk_type_kind >|4| 0x00000006<
    0x00000008 load *__unk_type_kind >|4| 0x00000007<
    0x00000009 call asC "drawLakeBehind" (__unk_type_kind >|4| 0x00000008<) void
    0x0000000A br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|2| 0x00000017<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|2| 0x00000017<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 gvar *__unk_type_kind 0x00000960
    0x00000001 memb *__unk_type_kind >|6| 0x00000000<, 1
    0x00000002 load *bool >|6| 0x00000001<
    0x00000003 cbr bool >|6| 0x00000002<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 gvar *bool 0x00000961
    0x00000001 load *bool >|7| 0x00000000<
    0x00000002 cbr bool >|7| 0x00000001<, |9|, |10|
  BASICBLOCK |8|
    0x00000000 gvar *__unk_type_kind 0x0000095F
    0x00000001 memb *__unk_type_kind >|8| 0x00000000<, 1
    0x00000002 load *bool >|8| 0x00000001<
    0x00000003 cbr bool >|8| 0x00000002<, |12|, |13|
  BASICBLOCK |9|
    0x00000000 gvar *__unk_type_kind 0x0000093D
    0x00000001 call aQB "now" (*__unk_type_kind >|9| 0x00000000<) __unk_type_kind
    0x00000002 br |11|
  BASICBLOCK |10|
    0x00000000 gvar *__unk_type_kind 0x0000093B
    0x00000001 call aQB "now" (*__unk_type_kind >|10| 0x00000000<) __unk_type_kind
    0x00000002 br |11|
  BASICBLOCK |11|
    0x00000000 phi2 |9| -> __unk_type_kind >|9| 0x00000001<, |10| -> __unk_type_kind >|10| 0x00000001<
    0x00000001 gvar *__unk_type_kind 0x00000960
    0x00000002 bc *__unk_type_kind >|11| 0x00000001< to *__unk_type_kind
    0x00000003 call amB "getVisualX" (*__unk_type_kind >|11| 0x00000002<) s32
    0x00000004 si2fp s32 >|11| 0x00000003< to f
    0x00000005 gvar *__unk_type_kind 0x00000960
    0x00000006 bc *__unk_type_kind >|11| 0x00000005< to *__unk_type_kind
    0x00000007 call anB "getVisualY" (*__unk_type_kind >|11| 0x00000006<) s32
    0x00000008 si2fp s32 >|11| 0x00000007< to f
    0x00000009 gvar *__unk_type_kind 0x00000960
    0x0000000A bc *__unk_type_kind >|11| 0x00000009< to *__unk_type_kind
    0x0000000B call asB "getVisualWidth" (*__unk_type_kind >|11| 0x0000000A<) s32
    0x0000000C si2fp s32 >|11| 0x0000000B< to f
    0x0000000D gvar *__unk_type_kind 0x00000960
    0x0000000E bc *__unk_type_kind >|11| 0x0000000D< to *__unk_type_kind
    0x0000000F call atB "getVisualHeight" (*__unk_type_kind >|11| 0x0000000E<) s32
    0x00000010 si2fp s32 >|11| 0x0000000F< to f
    0x00000011 call aqC "drawFromCamera" (__unk_type_kind >|11| 0x00000000<, f >|11| 0x00000004<, f >|11| 0x00000008<, f >|11| 0x0000000C<, f >|11| 0x00000010<) void
    0x00000012 br |8|
  BASICBLOCK |12|
    0x00000000 gvar *__unk_type_kind 0x0000093C
    0x00000001 call aQB "now" (*__unk_type_kind >|12| 0x00000000<) __unk_type_kind
    0x00000002 gvar *__unk_type_kind 0x0000095F
    0x00000003 bc *__unk_type_kind >|12| 0x00000002< to *__unk_type_kind
    0x00000004 call amB "getVisualX" (*__unk_type_kind >|12| 0x00000003<) s32
    0x00000005 si2fp s32 >|12| 0x00000004< to f
    0x00000006 gvar *__unk_type_kind 0x0000095F
    0x00000007 bc *__unk_type_kind >|12| 0x00000006< to *__unk_type_kind
    0x00000008 call anB "getVisualY" (*__unk_type_kind >|12| 0x00000007<) s32
    0x00000009 si2fp s32 >|12| 0x00000008< to f
    0x0000000A gvar *__unk_type_kind 0x0000095F
    0x0000000B bc *__unk_type_kind >|12| 0x0000000A< to *__unk_type_kind
    0x0000000C call asB "getVisualWidth" (*__unk_type_kind >|12| 0x0000000B<) s32
    0x0000000D si2fp s32 >|12| 0x0000000C< to f
    0x0000000E gvar *__unk_type_kind 0x0000095F
    0x0000000F bc *__unk_type_kind >|12| 0x0000000E< to *__unk_type_kind
    0x00000010 call atB "getVisualHeight" (*__unk_type_kind >|12| 0x0000000F<) s32
    0x00000011 si2fp s32 >|12| 0x00000010< to f
    0x00000012 call aqC "drawFromCamera" (__unk_type_kind >|12| 0x00000001<, f >|12| 0x00000005<, f >|12| 0x00000009<, f >|12| 0x0000000D<, f >|12| 0x00000011<) void
    0x00000013 br |13|
  BASICBLOCK |13|
    0x00000000 var *u64 0x00000002
    0x00000001 store *u64 >|13| 0x00000000<, u64 0
    0x00000002 br |14|
  BASICBLOCK |14|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 call apE "__length__" (*__unk_type_kind >|14| 0x00000000<) u64
    0x00000002 load *u64 >|13| 0x00000000<
    0x00000003 ult u64 >|14| 0x00000002<, u64 >|14| 0x00000001<
    0x00000004 cbr u64 >|14| 0x00000003<, |15|, |17|
  BASICBLOCK |15|
    0x00000000 gvar *__unk_type_kind 0x00000959
    0x00000001 call aqE "__array__" (*__unk_type_kind >|15| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000003
    0x00000003 load *u64 >|13| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|15| 0x00000001<, u64 >|15| 0x00000003<
    0x00000005 store *__unk_type_kind >|15| 0x00000002<, *__unk_type_kind >|15| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000003
    0x00000007 load **__unk_type_kind >|15| 0x00000006<
    0x00000008 load *__unk_type_kind >|15| 0x00000007<
    0x00000009 call auC "drawPlatform" (__unk_type_kind >|15| 0x00000008<) void
    0x0000000A br |16|
  BASICBLOCK |16|
    0x00000000 load *u64 >|13| 0x00000000<
    0x00000001 add u64 >|16| 0x00000000<, u64 1
    0x00000002 store *u64 >|13| 0x00000000<, u64 >|16| 0x00000001<
    0x00000003 br |14|
  BASICBLOCK |17|
    0x00000000 var *u64 0x00000004
    0x00000001 store *u64 >|17| 0x00000000<, u64 0
    0x00000002 br |18|
  BASICBLOCK |18|
    0x00000000 gvar *__unk_type_kind 0x0000095B
    0x00000001 call arE "__length__" (*__unk_type_kind >|18| 0x00000000<) u64
    0x00000002 load *u64 >|17| 0x00000000<
    0x00000003 ult u64 >|18| 0x00000002<, u64 >|18| 0x00000001<
    0x00000004 cbr u64 >|18| 0x00000003<, |19|, |21|
  BASICBLOCK |19|
    0x00000000 gvar *__unk_type_kind 0x0000095B
    0x00000001 call asE "__array__" (*__unk_type_kind >|19| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000005
    0x00000003 load *u64 >|17| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|19| 0x00000001<, u64 >|19| 0x00000003<
    0x00000005 store *__unk_type_kind >|19| 0x00000002<, *__unk_type_kind >|19| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000005
    0x00000007 load **__unk_type_kind >|19| 0x00000006<
    0x00000008 load *__unk_type_kind >|19| 0x00000007<
    0x00000009 call avC "drawBridge" (__unk_type_kind >|19| 0x00000008<) void
    0x0000000A br |20|
  BASICBLOCK |20|
    0x00000000 load *u64 >|17| 0x00000000<
    0x00000001 add u64 >|20| 0x00000000<, u64 1
    0x00000002 store *u64 >|17| 0x00000000<, u64 >|20| 0x00000001<
    0x00000003 br |18|
  BASICBLOCK |21|
    0x00000000 var *u64 0x00000006
    0x00000001 store *u64 >|21| 0x00000000<, u64 0
    0x00000002 br |22|
  BASICBLOCK |22|
    0x00000000 gvar *__unk_type_kind 0x0000095A
    0x00000001 call atE "__length__" (*__unk_type_kind >|22| 0x00000000<) u64
    0x00000002 load *u64 >|21| 0x00000000<
    0x00000003 ult u64 >|22| 0x00000002<, u64 >|22| 0x00000001<
    0x00000004 cbr u64 >|22| 0x00000003<, |23|, |25|
  BASICBLOCK |23|
    0x00000000 gvar *__unk_type_kind 0x0000095A
    0x00000001 call auE "__array__" (*__unk_type_kind >|23| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000007
    0x00000003 load *u64 >|21| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|23| 0x00000001<, u64 >|23| 0x00000003<
    0x00000005 store *__unk_type_kind >|23| 0x00000002<, *__unk_type_kind >|23| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000007
    0x00000007 load **__unk_type_kind >|23| 0x00000006<
    0x00000008 load *__unk_type_kind >|23| 0x00000007<
    0x00000009 call atC "drawLakeUpFront" (__unk_type_kind >|23| 0x00000008<) void
    0x0000000A br |24|
  BASICBLOCK |24|
    0x00000000 load *u64 >|21| 0x00000000<
    0x00000001 add u64 >|24| 0x00000000<, u64 1
    0x00000002 store *u64 >|21| 0x00000000<, u64 >|24| 0x00000001<
    0x00000003 br |22|
  BASICBLOCK |25|
    0x00000000 var *u64 0x00000008
    0x00000001 store *u64 >|25| 0x00000000<, u64 0
    0x00000002 br |26|
  BASICBLOCK |26|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 call avE "__length__" (*__unk_type_kind >|26| 0x00000000<) u64
    0x00000002 load *u64 >|25| 0x00000000<
    0x00000003 ult u64 >|26| 0x00000002<, u64 >|26| 0x00000001<
    0x00000004 cbr u64 >|26| 0x00000003<, |27|, |29|
  BASICBLOCK |27|
    0x00000000 gvar *__unk_type_kind 0x00000967
    0x00000001 call awE "__array__" (*__unk_type_kind >|27| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000009
    0x00000003 load *u64 >|25| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|27| 0x00000001<, u64 >|27| 0x00000003<
    0x00000005 store *__unk_type_kind >|27| 0x00000002<, *__unk_type_kind >|27| 0x00000004<
    0x00000006 gvar *__unk_type_kind 0x00000915
    0x00000007 load *__unk_type_kind >|27| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000009
    0x00000009 load **__unk_type_kind >|27| 0x00000008<
    0x0000000A memb *__unk_type_kind >|27| 0x00000009<, 0
    0x0000000B load *s32 >|27| 0x0000000A<
    0x0000000C si2fp s32 >|27| 0x0000000B< to f
    0x0000000D var **__unk_type_kind 0x00000009
    0x0000000E load **__unk_type_kind >|27| 0x0000000D<
    0x0000000F memb *__unk_type_kind >|27| 0x0000000E<, 1
    0x00000010 load *s32 >|27| 0x0000000F<
    0x00000011 si2fp s32 >|27| 0x00000010< to f
    0x00000012 call aqC "drawFromCamera" (__unk_type_kind >|27| 0x00000007<, f >|27| 0x0000000C<, f >|27| 0x00000011<, f 8.000000, f 8.000000) void
    0x00000013 br |28|
  BASICBLOCK |28|
    0x00000000 load *u64 >|25| 0x00000000<
    0x00000001 add u64 >|28| 0x00000000<, u64 1
    0x00000002 store *u64 >|25| 0x00000000<, u64 >|28| 0x00000001<
    0x00000003 br |26|
  BASICBLOCK |29|
    0x00000000 gvar *__unk_type_kind 0x00000968
    0x00000001 memb *__unk_type_kind >|29| 0x00000000<, 1
    0x00000002 load *bool >|29| 0x00000001<
    0x00000003 cbr bool >|29| 0x00000002<, |30|, |31|
  BASICBLOCK |30|
    0x00000000 gvar *__unk_type_kind 0x00000917
    0x00000001 load *__unk_type_kind >|30| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000968
    0x00000003 memb *__unk_type_kind >|30| 0x00000002<, 0
    0x00000004 memb *__unk_type_kind >|30| 0x00000003<, 0
    0x00000005 load *s32 >|30| 0x00000004<
    0x00000006 si2fp s32 >|30| 0x00000005< to f
    0x00000007 gvar *__unk_type_kind 0x00000968
    0x00000008 memb *__unk_type_kind >|30| 0x00000007<, 0
    0x00000009 memb *__unk_type_kind >|30| 0x00000008<, 1
    0x0000000A load *s32 >|30| 0x00000009<
    0x0000000B si2fp s32 >|30| 0x0000000A< to f
    0x0000000C gvar *__unk_type_kind 0x00000968
    0x0000000D memb *__unk_type_kind >|30| 0x0000000C<, 0
    0x0000000E memb *__unk_type_kind >|30| 0x0000000D<, 3
    0x0000000F load *s32 >|30| 0x0000000E<
    0x00000010 si2fp s32 >|30| 0x0000000F< to f
    0x00000011 fmul f 152.000000, f >|30| 0x00000010<
    0x00000012 call arC "drawFromCameraEx" (__unk_type_kind >|30| 0x00000001<, f >|30| 0x00000006<, f >|30| 0x0000000B<, f >|30| 0x00000011<, f 72.000000) void
    0x00000013 br |31|
  BASICBLOCK |31|
    0x00000000 gvar *__unk_type_kind 0x00000969
    0x00000001 memb *__unk_type_kind >|31| 0x00000000<, 1
    0x00000002 load *bool >|31| 0x00000001<
    0x00000003 cbr bool >|31| 0x00000002<, |32|, |33|
  BASICBLOCK |32|
    0x00000000 gvar *__unk_type_kind 0x00000918
    0x00000001 load *__unk_type_kind >|32| 0x00000000<
    0x00000002 gvar *__unk_type_kind 0x00000969
    0x00000003 memb *__unk_type_kind >|32| 0x00000002<, 0
    0x00000004 memb *__unk_type_kind >|32| 0x00000003<, 0
    0x00000005 load *s32 >|32| 0x00000004<
    0x00000006 si2fp s32 >|32| 0x00000005< to f
    0x00000007 gvar *__unk_type_kind 0x00000969
    0x00000008 memb *__unk_type_kind >|32| 0x00000007<, 0
    0x00000009 memb *__unk_type_kind >|32| 0x00000008<, 1
    0x0000000A load *s32 >|32| 0x00000009<
    0x0000000B si2fp s32 >|32| 0x0000000A< to f
    0x0000000C call aqC "drawFromCamera" (__unk_type_kind >|32| 0x00000001<, f >|32| 0x00000006<, f >|32| 0x0000000B<, f 32.000000, f 32.000000) void
    0x0000000D br |33|
  BASICBLOCK |33|
    0x00000000 var *u64 0x0000000A
    0x00000001 store *u64 >|33| 0x00000000<, u64 0
    0x00000002 br |34|
  BASICBLOCK |34|
    0x00000000 gvar *__unk_type_kind 0x00000966
    0x00000001 call axE "__length__" (*__unk_type_kind >|34| 0x00000000<) u64
    0x00000002 load *u64 >|33| 0x00000000<
    0x00000003 ult u64 >|34| 0x00000002<, u64 >|34| 0x00000001<
    0x00000004 cbr u64 >|34| 0x00000003<, |35|, |37|
  BASICBLOCK |35|
    0x00000000 gvar *__unk_type_kind 0x00000966
    0x00000001 call ayE "__array__" (*__unk_type_kind >|35| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x0000000B
    0x00000003 load *u64 >|33| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|35| 0x00000001<, u64 >|35| 0x00000003<
    0x00000005 store *__unk_type_kind >|35| 0x00000002<, *__unk_type_kind >|35| 0x00000004<
    0x00000006 var **__unk_type_kind 0x0000000B
    0x00000007 load **__unk_type_kind >|35| 0x00000006<
    0x00000008 call a4C "now" (*__unk_type_kind >|35| 0x00000007<) __unk_type_kind
    0x00000009 var **__unk_type_kind 0x0000000B
    0x0000000A load **__unk_type_kind >|35| 0x00000009<
    0x0000000B bc *__unk_type_kind >|35| 0x0000000A< to *__unk_type_kind
    0x0000000C call amB "getVisualX" (*__unk_type_kind >|35| 0x0000000B<) s32
    0x0000000D si2fp s32 >|35| 0x0000000C< to f
    0x0000000E var **__unk_type_kind 0x0000000B
    0x0000000F load **__unk_type_kind >|35| 0x0000000E<
    0x00000010 bc *__unk_type_kind >|35| 0x0000000F< to *__unk_type_kind
    0x00000011 call anB "getVisualY" (*__unk_type_kind >|35| 0x00000010<) s32
    0x00000012 si2fp s32 >|35| 0x00000011< to f
    0x00000013 var **__unk_type_kind 0x0000000B
    0x00000014 load **__unk_type_kind >|35| 0x00000013<
    0x00000015 bc *__unk_type_kind >|35| 0x00000014< to *__unk_type_kind
    0x00000016 call asB "getVisualWidth" (*__unk_type_kind >|35| 0x00000015<) s32
    0x00000017 si2fp s32 >|35| 0x00000016< to f
    0x00000018 var **__unk_type_kind 0x0000000B
    0x00000019 load **__unk_type_kind >|35| 0x00000018<
    0x0000001A bc *__unk_type_kind >|35| 0x00000019< to *__unk_type_kind
    0x0000001B call atB "getVisualHeight" (*__unk_type_kind >|35| 0x0000001A<) s32
    0x0000001C si2fp s32 >|35| 0x0000001B< to f
    0x0000001D call aqC "drawFromCamera" (__unk_type_kind >|35| 0x00000008<, f >|35| 0x0000000D<, f >|35| 0x00000012<, f >|35| 0x00000017<, f >|35| 0x0000001C<) void
    0x0000001E br |36|
  BASICBLOCK |36|
    0x00000000 load *u64 >|33| 0x00000000<
    0x00000001 add u64 >|36| 0x00000000<, u64 1
    0x00000002 store *u64 >|33| 0x00000000<, u64 >|36| 0x00000001<
    0x00000003 br |34|
  BASICBLOCK |37|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|37| 0x00000000<, 1
    0x00000002 load *bool >|37| 0x00000001<
    0x00000003 cbr bool >|37| 0x00000002<, |38|, |39|
  BASICBLOCK |38|
    0x00000000 gvar *__unk_type_kind 0x00000962
    0x00000001 memb *__unk_type_kind >|38| 0x00000000<, 0
    0x00000002 bc *__unk_type_kind >|38| 0x00000001< to *__unk_type_kind
    0x00000003 var **__unk_type_kind 0x0000000C
    0x00000004 store **__unk_type_kind >|38| 0x00000003<, *__unk_type_kind >|38| 0x00000002<
    0x00000005 gvar *__unk_type_kind 0x00000940
    0x00000006 call aQB "now" (*__unk_type_kind >|38| 0x00000005<) __unk_type_kind
    0x00000007 var **__unk_type_kind 0x0000000C
    0x00000008 load **__unk_type_kind >|38| 0x00000007<
    0x00000009 call amB "getVisualX" (*__unk_type_kind >|38| 0x00000008<) s32
    0x0000000A si2fp s32 >|38| 0x00000009< to f
    0x0000000B var **__unk_type_kind 0x0000000C
    0x0000000C load **__unk_type_kind >|38| 0x0000000B<
    0x0000000D call anB "getVisualY" (*__unk_type_kind >|38| 0x0000000C<) s32
    0x0000000E si2fp s32 >|38| 0x0000000D< to f
    0x0000000F var **__unk_type_kind 0x0000000C
    0x00000010 load **__unk_type_kind >|38| 0x0000000F<
    0x00000011 call asB "getVisualWidth" (*__unk_type_kind >|38| 0x00000010<) s32
    0x00000012 si2fp s32 >|38| 0x00000011< to f
    0x00000013 var **__unk_type_kind 0x0000000C
    0x00000014 load **__unk_type_kind >|38| 0x00000013<
    0x00000015 call atB "getVisualHeight" (*__unk_type_kind >|38| 0x00000014<) s32
    0x00000016 si2fp s32 >|38| 0x00000015< to f
    0x00000017 call aqC "drawFromCamera" (__unk_type_kind >|38| 0x00000006<, f >|38| 0x0000000A<, f >|38| 0x0000000E<, f >|38| 0x00000012<, f >|38| 0x00000016<) void
    0x00000018 br |39|
  BASICBLOCK |39|
    0x00000000 var *u64 0x0000000D
    0x00000001 store *u64 >|39| 0x00000000<, u64 0
    0x00000002 br |40|
  BASICBLOCK |40|
    0x00000000 gvar *__unk_type_kind 0x0000095E
    0x00000001 call adE "__length__" (*__unk_type_kind >|40| 0x00000000<) u64
    0x00000002 load *u64 >|39| 0x00000000<
    0x00000003 ult u64 >|40| 0x00000002<, u64 >|40| 0x00000001<
    0x00000004 cbr u64 >|40| 0x00000003<, |41|, |43|
  BASICBLOCK |41|
    0x00000000 gvar *__unk_type_kind 0x0000095E
    0x00000001 call azE "__array__" (*__unk_type_kind >|41| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x0000000E
    0x00000003 load *u64 >|39| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|41| 0x00000001<, u64 >|41| 0x00000003<
    0x00000005 store *__unk_type_kind >|41| 0x00000002<, *__unk_type_kind >|41| 0x00000004<
    0x00000006 gvar *u64 0x00000963
    0x00000007 load *u64 >|41| 0x00000006<
    0x00000008 var **__unk_type_kind 0x0000000E
    0x00000009 load **__unk_type_kind >|41| 0x00000008<
    0x0000000A memb *__unk_type_kind >|41| 0x00000009<, 2
    0x0000000B load *u64 >|41| 0x0000000A<
    0x0000000C eq u64 >|41| 0x00000007<, u64 >|41| 0x0000000B<
    0x0000000D cbr u64 >|41| 0x0000000C<, |44|, |45|
  BASICBLOCK |42|
    0x00000000 load *u64 >|39| 0x00000000<
    0x00000001 add u64 >|42| 0x00000000<, u64 1
    0x00000002 store *u64 >|39| 0x00000000<, u64 >|42| 0x00000001<
    0x00000003 br |40|
  BASICBLOCK |43|
    0x00000000 var *u64 0x00000010
    0x00000001 store *u64 >|43| 0x00000000<, u64 0
    0x00000002 br |46|
  BASICBLOCK |44|
    0x00000000 br |42|
  BASICBLOCK |45|
    0x00000000 var **__unk_type_kind 0x0000000E
    0x00000001 load **__unk_type_kind >|45| 0x00000000<
    0x00000002 bc *__unk_type_kind >|45| 0x00000001< to *__unk_type_kind
    0x00000003 var **__unk_type_kind 0x0000000F
    0x00000004 store **__unk_type_kind >|45| 0x00000003<, *__unk_type_kind >|45| 0x00000002<
    0x00000005 var **__unk_type_kind 0x0000000E
    0x00000006 load **__unk_type_kind >|45| 0x00000005<
    0x00000007 memb *__unk_type_kind >|45| 0x00000006<, 2
    0x00000008 load *u64 >|45| 0x00000007<
    0x00000009 call a0D "getImageForItem" (u64 >|45| 0x00000008<) __unk_type_kind
    0x0000000A var **__unk_type_kind 0x0000000F
    0x0000000B load **__unk_type_kind >|45| 0x0000000A<
    0x0000000C call amB "getVisualX" (*__unk_type_kind >|45| 0x0000000B<) s32
    0x0000000D si2fp s32 >|45| 0x0000000C< to f
    0x0000000E var **__unk_type_kind 0x0000000F
    0x0000000F load **__unk_type_kind >|45| 0x0000000E<
    0x00000010 call anB "getVisualY" (*__unk_type_kind >|45| 0x0000000F<) s32
    0x00000011 si2fp s32 >|45| 0x00000010< to f
    0x00000012 var **__unk_type_kind 0x0000000F
    0x00000013 load **__unk_type_kind >|45| 0x00000012<
    0x00000014 call asB "getVisualWidth" (*__unk_type_kind >|45| 0x00000013<) s32
    0x00000015 si2fp s32 >|45| 0x00000014< to f
    0x00000016 var **__unk_type_kind 0x0000000F
    0x00000017 load **__unk_type_kind >|45| 0x00000016<
    0x00000018 call atB "getVisualHeight" (*__unk_type_kind >|45| 0x00000017<) s32
    0x00000019 si2fp s32 >|45| 0x00000018< to f
    0x0000001A call aqC "drawFromCamera" (__unk_type_kind >|45| 0x00000009<, f >|45| 0x0000000D<, f >|45| 0x00000011<, f >|45| 0x00000015<, f >|45| 0x00000019<) void
    0x0000001B br |42|
  BASICBLOCK |46|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call a0F "__length__" (*__unk_type_kind >|46| 0x00000000<) u64
    0x00000002 load *u64 >|43| 0x00000000<
    0x00000003 ult u64 >|46| 0x00000002<, u64 >|46| 0x00000001<
    0x00000004 cbr u64 >|46| 0x00000003<, |47|, |49|
  BASICBLOCK |47|
    0x00000000 gvar *__unk_type_kind 0x0000095C
    0x00000001 call a1F "__array__" (*__unk_type_kind >|47| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000011
    0x00000003 load *u64 >|43| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|47| 0x00000001<, u64 >|47| 0x00000003<
    0x00000005 store *__unk_type_kind >|47| 0x00000002<, *__unk_type_kind >|47| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000011
    0x00000007 load **__unk_type_kind >|47| 0x00000006<
    0x00000008 call a7C "now" (*__unk_type_kind >|47| 0x00000007<) __unk_type_kind
    0x00000009 var **__unk_type_kind 0x00000011
    0x0000000A load **__unk_type_kind >|47| 0x00000009<
    0x0000000B memb *__unk_type_kind >|47| 0x0000000A<, 0
    0x0000000C load *s32 >|47| 0x0000000B<
    0x0000000D si2fp s32 >|47| 0x0000000C< to f
    0x0000000E var **__unk_type_kind 0x00000011
    0x0000000F load **__unk_type_kind >|47| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|47| 0x0000000F<, 1
    0x00000011 load *s32 >|47| 0x00000010<
    0x00000012 si2fp s32 >|47| 0x00000011< to f
    0x00000013 fsub f >|47| 0x00000012<, f 32.000000
    0x00000014 var **__unk_type_kind 0x00000011
    0x00000015 load **__unk_type_kind >|47| 0x00000014<
    0x00000016 memb *__unk_type_kind >|47| 0x00000015<, 2
    0x00000017 load *s32 >|47| 0x00000016<
    0x00000018 si2fp s32 >|47| 0x00000017< to f
    0x00000019 fmul f >|47| 0x00000018<, f 64.000000
    0x0000001A call arC "drawFromCameraEx" (__unk_type_kind >|47| 0x00000008<, f >|47| 0x0000000D<, f >|47| 0x00000013<, f >|47| 0x00000019<, f 64.000000) void
    0x0000001B br |48|
  BASICBLOCK |48|
    0x00000000 load *u64 >|43| 0x00000000<
    0x00000001 add u64 >|48| 0x00000000<, u64 1
    0x00000002 store *u64 >|43| 0x00000000<, u64 >|48| 0x00000001<
    0x00000003 br |46|
  BASICBLOCK |49|
    0x00000000 var *u64 0x00000012
    0x00000001 store *u64 >|49| 0x00000000<, u64 0
    0x00000002 br |50|
  BASICBLOCK |50|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call a2F "__length__" (*__unk_type_kind >|50| 0x00000000<) u64
    0x00000002 load *u64 >|49| 0x00000000<
    0x00000003 ult u64 >|50| 0x00000002<, u64 >|50| 0x00000001<
    0x00000004 cbr u64 >|50| 0x00000003<, |51|, |53|
  BASICBLOCK |51|
    0x00000000 gvar *__unk_type_kind 0x0000095D
    0x00000001 call a3F "__array__" (*__unk_type_kind >|51| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000013
    0x00000003 load *u64 >|49| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|51| 0x00000001<, u64 >|51| 0x00000003<
    0x00000005 store *__unk_type_kind >|51| 0x00000002<, *__unk_type_kind >|51| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000013
    0x00000007 load **__unk_type_kind >|51| 0x00000006<
    0x00000008 call aFC "now" (*__unk_type_kind >|51| 0x00000007<) __unk_type_kind
    0x00000009 var **__unk_type_kind 0x00000013
    0x0000000A load **__unk_type_kind >|51| 0x00000009<
    0x0000000B memb *__unk_type_kind >|51| 0x0000000A<, 0
    0x0000000C load *s32 >|51| 0x0000000B<
    0x0000000D si2fp s32 >|51| 0x0000000C< to f
    0x0000000E var **__unk_type_kind 0x00000013
    0x0000000F load **__unk_type_kind >|51| 0x0000000E<
    0x00000010 memb *__unk_type_kind >|51| 0x0000000F<, 1
    0x00000011 load *s32 >|51| 0x00000010<
    0x00000012 si2fp s32 >|51| 0x00000011< to f
    0x00000013 var **__unk_type_kind 0x00000013
    0x00000014 load **__unk_type_kind >|51| 0x00000013<
    0x00000015 memb *__unk_type_kind >|51| 0x00000014<, 2
    0x00000016 load *s32 >|51| 0x00000015<
    0x00000017 si2fp s32 >|51| 0x00000016< to f
    0x00000018 fmul f >|51| 0x00000017<, f 256.000000
    0x00000019 call arC "drawFromCameraEx" (__unk_type_kind >|51| 0x00000008<, f >|51| 0x0000000D<, f >|51| 0x00000012<, f >|51| 0x00000018<, f 64.000000) void
    0x0000001A br |52|
  BASICBLOCK |52|
    0x00000000 load *u64 >|49| 0x00000000<
    0x00000001 add u64 >|52| 0x00000000<, u64 1
    0x00000002 store *u64 >|49| 0x00000000<, u64 >|52| 0x00000001<
    0x00000003 br |50|
  BASICBLOCK |53|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|53| 0x00000000<
    0x00000002 eq u64 >|53| 0x00000001<, u64 1
    0x00000003 cbr u64 >|53| 0x00000002<, |54|, |55|
  BASICBLOCK |54|
    0x00000000 gvar *__unk_type_kind 0x00000946
    0x00000001 load *__unk_type_kind >|54| 0x00000000<
    0x00000002 call awC "drawPlayer" (__unk_type_kind >|54| 0x00000001<, f 0.500000) void
    0x00000003 br |55|
  BASICBLOCK |55|
    0x00000000 gvar *bool 0x00000950
    0x00000001 load *bool >|55| 0x00000000<
    0x00000002 cbr bool >|55| 0x00000001<, |56|, |57|
  BASICBLOCK |56|
    0x00000000 call axC "drawDeath" () void
    0x00000001 br |58|
  BASICBLOCK |57|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|57| 0x00000000<
    0x00000002 eq s32 >|57| 0x00000001<, s32 0
    0x00000003 cbr s32 >|57| 0x00000002<, |60|, |59|
  BASICBLOCK |58|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|58| 0x00000000<
    0x00000002 eq s32 >|58| 0x00000001<, s32 0
    0x00000003 cbr s32 >|58| 0x00000002<, |65|, |64|
  BASICBLOCK |59|
    0x00000000 gvar *__unk_type_kind 0x00000945
    0x00000001 load *__unk_type_kind >|59| 0x00000000<
    0x00000002 gvar *bool 0x0000094D
    0x00000003 load *bool >|59| 0x00000002<
    0x00000004 cbr bool >|59| 0x00000003<, |61|, |62|
  BASICBLOCK |60|
    0x00000000 br |58|
  BASICBLOCK |61|
    0x00000000 gvar *f 0x0000094E
    0x00000001 load *f >|61| 0x00000000<
    0x00000002 br |63|
  BASICBLOCK |62|
    0x00000000 br |63|
  BASICBLOCK |63|
    0x00000000 phi2 |61| -> f >|61| 0x00000001<, |62| -> f 1.000000
    0x00000001 call awC "drawPlayer" (__unk_type_kind >|59| 0x00000001<, f >|63| 0x00000000<) void
    0x00000002 br |60|
  BASICBLOCK |64|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|64| 0x00000000<
    0x00000002 eq s32 >|64| 0x00000001<, s32 1
    0x00000003 br |65|
  BASICBLOCK |65|
    0x00000000 phi2 |58| -> bool true, |64| -> s32 >|64| 0x00000002<
    0x00000001 cbr bool >|65| 0x00000000<, |66|, |67|
  BASICBLOCK |66|
    0x00000000 gvar *__unk_type_kind 0x0000091A
    0x00000001 load *__unk_type_kind >|66| 0x00000000<
    0x00000002 fsub f 576.000000, f 224.000000
    0x00000003 call aqC "drawFromCamera" (__unk_type_kind >|66| 0x00000001<, f >|66| 0x00000002<, f 192.000000, f 512.000000, f 256.000000) void
    0x00000004 br |67|
  BASICBLOCK |67|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|67| 0x00000000<
    0x00000002 eq s32 >|67| 0x00000001<, s32 2002
    0x00000003 cbr s32 >|67| 0x00000002<, |68|, |69|
  BASICBLOCK |68|
    0x00000000 gvar *__unk_type_kind 0x00000919
    0x00000001 load *__unk_type_kind >|68| 0x00000000<
    0x00000002 fsub f 576.000000, f 224.000000
    0x00000003 call aqC "drawFromCamera" (__unk_type_kind >|68| 0x00000001<, f >|68| 0x00000002<, f 192.000000, f 512.000000, f 128.000000) void
    0x00000004 br |69|
  BASICBLOCK |69|
    0x00000000 var *u64 0x00000014
    0x00000001 store *u64 >|69| 0x00000000<, u64 0
    0x00000002 br |70|
  BASICBLOCK |70|
    0x00000000 gvar *__unk_type_kind 0x00000971
    0x00000001 call a4F "__length__" (*__unk_type_kind >|70| 0x00000000<) u64
    0x00000002 load *u64 >|69| 0x00000000<
    0x00000003 ult u64 >|70| 0x00000002<, u64 >|70| 0x00000001<
    0x00000004 cbr u64 >|70| 0x00000003<, |71|, |73|
  BASICBLOCK |71|
    0x00000000 gvar *__unk_type_kind 0x00000971
    0x00000001 call a5F "__array__" (*__unk_type_kind >|71| 0x00000000<) *__unk_type_kind
    0x00000002 var *__unk_type_kind 0x00000015
    0x00000003 load *u64 >|69| 0x00000000<
    0x00000004 arracc *__unk_type_kind >|71| 0x00000001<, u64 >|71| 0x00000003<
    0x00000005 store *__unk_type_kind >|71| 0x00000002<, *__unk_type_kind >|71| 0x00000004<
    0x00000006 var **__unk_type_kind 0x00000015
    0x00000007 load **__unk_type_kind >|71| 0x00000006<
    0x00000008 memb *__unk_type_kind >|71| 0x00000007<, 0
    0x00000009 load *u64 >|71| 0x00000008<
    0x0000000A call a1D "getImageForResource" (u64 >|71| 0x00000009<) __unk_type_kind
    0x0000000B var **__unk_type_kind 0x00000015
    0x0000000C load **__unk_type_kind >|71| 0x0000000B<
    0x0000000D memb *__unk_type_kind >|71| 0x0000000C<, 1
    0x0000000E load *f >|71| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000015
    0x00000010 load **__unk_type_kind >|71| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|71| 0x00000010<, 2
    0x00000012 load *f >|71| 0x00000011<
    0x00000013 call aDB "captDrawTexture" (__unk_type_kind >|71| 0x0000000A<, f >|71| 0x0000000E<, f >|71| 0x00000012<, f 64.000000, f 64.000000) void
    0x00000014 br |72|
  BASICBLOCK |72|
    0x00000000 load *u64 >|69| 0x00000000<
    0x00000001 add u64 >|72| 0x00000000<, u64 1
    0x00000002 store *u64 >|69| 0x00000000<, u64 >|72| 0x00000001<
    0x00000003 br |70|
  BASICBLOCK |73|
    0x00000000 gvar *f 0x0000096B
    0x00000001 load *f >|73| 0x00000000<
    0x00000002 fneq f >|73| 0x00000001<, f 0.000000
    0x00000003 cbr f >|73| 0x00000002<, |74|, |75|
  BASICBLOCK |74|
    0x00000000 gvar *f 0x0000096B
    0x00000001 load *f >|74| 0x00000000<
    0x00000002 call aEB "captDrawOpacity" (f >|74| 0x00000001<) void
    0x00000003 gvar *__unk_type_kind 0x00000915
    0x00000004 load *__unk_type_kind >|74| 0x00000003<
    0x00000005 call aaA "captViewWidth" () f
    0x00000006 call abA "captViewHeight" () f
    0x00000007 call aDB "captDrawTexture" (__unk_type_kind >|74| 0x00000004<, f 0.000000, f 0.000000, f >|74| 0x00000005<, f >|74| 0x00000006<) void
    0x00000008 call aEB "captDrawOpacity" (f 1.000000) void
    0x00000009 br |75|
  BASICBLOCK |75|
    0x00000000 gvar *s32 0x00000957
    0x00000001 load *s32 >|75| 0x00000000<
    0x00000002 eq s32 >|75| 0x00000001<, s32 0
    0x00000003 cbr s32 >|75| 0x00000002<, |77|, |76|
  BASICBLOCK |76|
    0x00000000 gvar *__unk_type_kind 0x00000911
    0x00000001 load *__unk_type_kind >|76| 0x00000000<
    0x00000002 call aDB "captDrawTexture" (__unk_type_kind >|76| 0x00000001<, f 1792.000000, f 32.000000, f 96.000000, f 96.000000) void
    0x00000003 br |77|
  BASICBLOCK |77|
    0x00000000 gvar *bool 0x0000096A
    0x00000001 load *bool >|77| 0x00000000<
    0x00000002 cbr bool >|77| 0x00000001<, |78|, |79|
  BASICBLOCK |78|
    0x00000000 call ayC "drawInventory" () void
    0x00000001 br |79|
  BASICBLOCK |79|
    0x00000000 gvar *bool 0x00000950
    0x00000001 load *bool >|79| 0x00000000<
    0x00000002 isz bool >|79| 0x00000001<
    0x00000003 cbr u64 >|79| 0x00000002<, |80|, |81|
  BASICBLOCK |80|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|80| 0x00000000<
    0x00000002 neq u64 >|80| 0x00000001<, u64 0
    0x00000003 br |81|
  BASICBLOCK |81|
    0x00000000 phi2 |79| -> bool false, |80| -> u64 >|80| 0x00000002<
    0x00000001 cbr bool >|81| 0x00000000<, |82|, |83|
  BASICBLOCK |82|
    0x00000000 gvar *u64 0x00000963
    0x00000001 load *u64 >|82| 0x00000000<
    0x00000002 call a0D "getImageForItem" (u64 >|82| 0x00000001<) __unk_type_kind
    0x00000003 gvar *f 0x00000964
    0x00000004 load *f >|82| 0x00000003<
    0x00000005 gvar *f 0x00000965
    0x00000006 load *f >|82| 0x00000005<
    0x00000007 call aDB "captDrawTexture" (__unk_type_kind >|82| 0x00000002<, f >|82| 0x00000004<, f >|82| 0x00000006<, f 64.000000, f 64.000000) void
    0x00000008 br |83|
  BASICBLOCK |83|
    0x00000000 ret
fn max amD -> s64
    {4 BBs, 14 INSTRs, 2 VARs}
    [0x00000000 s64]
    [0x00000001 s64]
  BASICBLOCK |0|
    0x00000000 var *s64 0x00000000
    0x00000001 load *s64 >|0| 0x00000000<
    0x00000002 var *s64 0x00000001
    0x00000003 load *s64 >|0| 0x00000002<
    0x00000004 slt s64 >|0| 0x00000001<, s64 >|0| 0x00000003<
    0x00000005 cbr s64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *s64 0x00000001
    0x00000001 load *s64 >|1| 0x00000000<
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 var *s64 0x00000000
    0x00000001 load *s64 >|2| 0x00000000<
    0x00000002 br |3|
  BASICBLOCK |3|
    0x00000000 phi2 |1| -> s64 >|1| 0x00000001<, |2| -> s64 >|2| 0x00000001<
    0x00000001 ret s64 >|3| 0x00000000<
fn __defer__ anD -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __length__ aoD -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ apD -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __defer__ aqD -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __length__ arD -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ asD -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn remove atD -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call auD "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn __defer__ auD -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 5
    0x00000003 call avD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 ret
fn __defer__ avD -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ awD -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ axD -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call azD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 ret
fn __defer__ ayD -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 10
    0x00000003 call axD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 ret
fn __defer__ azD -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ a0E -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 6
    0x00000003 call avD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 ret
fn clear a1E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aKE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear a2E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aJE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear a3E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aIE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear a4E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call auD "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear a5E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call a0E "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear a6E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aHE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn rid a7E -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 store *bool >|0| 0x00000002<, bool false
    0x00000004 ret
fn rid a8E -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 store *bool >|0| 0x00000002<, bool false
    0x00000004 ret
fn clear a9E -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aGE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear aAE -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aFE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn clear aBE -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aEE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 1
    0x00000003 zext s32 0 to u64
    0x00000004 store *u64 >|6| 0x00000002<, u64 >|6| 0x00000003<
    0x00000005 br |2|
fn rid aCE -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 store *bool >|0| 0x00000002<, bool false
    0x00000004 ret
fn rid aDE -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 store *bool >|0| 0x00000002<, bool false
    0x00000004 ret
fn __defer__ aEE -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ aFE -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ aGE -> void
    {1 BBs, 13 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 2
    0x0000000B call avD "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn __defer__ aHE -> void
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 ret
fn __defer__ aIE -> void
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 ret
fn __defer__ aJE -> void
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 ret
fn __defer__ aKE -> void
    {1 BBs, 13 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 2
    0x0000000B call aLE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn __defer__ aLE -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aME "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aME -> void
    {1 BBs, 13 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 var **__unk_type_kind 0x00000000
    0x00000009 load **__unk_type_kind >|0| 0x00000008<
    0x0000000A memb *__unk_type_kind >|0| 0x00000009<, 2
    0x0000000B call azD "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn __defer__ aNE -> void
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 ret
fn __defer__ aOE -> void
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 ret
fn __defer__ aPE -> void
    {1 BBs, 9 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|0| 0x00000004<
    0x00000006 memb *__unk_type_kind >|0| 0x00000005<, 1
    0x00000007 call aqD "__defer__" (*__unk_type_kind >|0| 0x00000006<) void
    0x00000008 ret
fn rid aQE -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 store *bool >|0| 0x00000002<, bool false
    0x00000004 ret
fn __length__ aRE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ aSE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn remove aTE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call aGE "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn __length__ aUE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ aVE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn remove aWE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call aFE "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn remove aXE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call aFE "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn remove aYE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call auD "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn remove aZE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call a0E "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn rid aaE -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 store *bool >|0| 0x00000002<, bool false
    0x00000004 ret
fn remove abE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call a0E "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn add acE -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn __length__ adE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ aeE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ afE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ agE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn remove ahE -> void
    {9 BBs, 76 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 u64]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 zext s32 0 to u64
    0x00000005 eq u64 >|0| 0x00000003<, u64 >|0| 0x00000004<
    0x00000006 cbr u64 >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 call aF8 "printf" (cstroflen 47 "<$T> List Error: remove() called on empty list") s32
    0x00000001 ret
  BASICBLOCK |2|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|2| 0x00000000<
    0x00000002 ult u64 >|2| 0x00000001<, u64 0
    0x00000003 cbr u64 >|2| 0x00000002<, |4|, |3|
  BASICBLOCK |3|
    0x00000000 var *u64 0x00000001
    0x00000001 load *u64 >|3| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|3| 0x00000002<
    0x00000004 memb *__unk_type_kind >|3| 0x00000003<, 1
    0x00000005 load *u64 >|3| 0x00000004<
    0x00000006 uge u64 >|3| 0x00000001<, u64 >|3| 0x00000005<
    0x00000007 br |4|
  BASICBLOCK |4|
    0x00000000 phi2 |2| -> bool true, |3| -> u64 >|3| 0x00000006<
    0x00000001 cbr bool >|4| 0x00000000<, |5|, |6|
  BASICBLOCK |5|
    0x00000000 call aF8 "printf" (cstroflen 45 "<$T> List Error: remove() index out of range") s32
    0x00000001 ret
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 3
    0x00000003 load *u64 >|6| 0x00000002<
    0x00000004 neq u64 >|6| 0x00000003<, u64 1
    0x00000005 cbr u64 >|6| 0x00000004<, |7|, |8|
  BASICBLOCK |7|
    0x00000000 call aF8 "printf" (cstroflen 55 "<$T> List Error: can't remove from list via reference
") s32
    0x00000001 ret
  BASICBLOCK |8|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|8| 0x00000000<
    0x00000002 memb *__unk_type_kind >|8| 0x00000001<, 1
    0x00000003 zext s32 1 to u64
    0x00000004 load *u64 >|8| 0x00000002<
    0x00000005 sub u64 >|8| 0x00000004<, u64 >|8| 0x00000003<
    0x00000006 store *u64 >|8| 0x00000002<, u64 >|8| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|8| 0x00000007<
    0x00000009 memb *__unk_type_kind >|8| 0x00000008<, 0
    0x0000000A var *u64 0x00000001
    0x0000000B load *u64 >|8| 0x0000000A<
    0x0000000C load **__unk_type_kind >|8| 0x00000009<
    0x0000000D arracc *__unk_type_kind >|8| 0x0000000C<, u64 >|8| 0x0000000B<
    0x0000000E call aEE "__defer__" (*__unk_type_kind >|8| 0x0000000D<) void
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|8| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|8| 0x00000010<, 0
    0x00000012 var *u64 0x00000001
    0x00000013 load *u64 >|8| 0x00000012<
    0x00000014 load **__unk_type_kind >|8| 0x00000011<
    0x00000015 arracc *__unk_type_kind >|8| 0x00000014<, u64 >|8| 0x00000013<
    0x00000016 var **__unk_type_kind 0x00000000
    0x00000017 load **__unk_type_kind >|8| 0x00000016<
    0x00000018 memb *__unk_type_kind >|8| 0x00000017<, 0
    0x00000019 var *u64 0x00000001
    0x0000001A load *u64 >|8| 0x00000019<
    0x0000001B add u64 >|8| 0x0000001A<, u64 1
    0x0000001C load **__unk_type_kind >|8| 0x00000018<
    0x0000001D arracc *__unk_type_kind >|8| 0x0000001C<, u64 >|8| 0x0000001B<
    0x0000001E var **__unk_type_kind 0x00000000
    0x0000001F load **__unk_type_kind >|8| 0x0000001E<
    0x00000020 memb *__unk_type_kind >|8| 0x0000001F<, 1
    0x00000021 load *u64 >|8| 0x00000020<
    0x00000022 var *u64 0x00000001
    0x00000023 load *u64 >|8| 0x00000022<
    0x00000024 sub u64 >|8| 0x00000021<, u64 >|8| 0x00000023<
    0x00000025 sizeof __unk_type_kind
    0x00000026 mul u64 >|8| 0x00000024<, u64 >|8| 0x00000025<
    0x00000027 bc *__unk_type_kind >|8| 0x00000015< to *s8
    0x00000028 bc *__unk_type_kind >|8| 0x0000001D< to *s8
    0x00000029 call aM8 "memmove" (*s8 >|8| 0x00000027<, *s8 >|8| 0x00000028<, u64 >|8| 0x00000026<) *s8
    0x0000002A ret
fn add aiE -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set ajE -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call amE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn set akE -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call alE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn __defer__ alE -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ amE -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __length__ anE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ aoE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ apE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ aqE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ arE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ asE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ atE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ auE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ avE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ awE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ axE -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ ayE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __array__ azE -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ a0F -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ a1F -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ a2F -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ a3F -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __length__ a4F -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ a5F -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __array__ a6F -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn add a7F -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a8F -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a9F -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aAF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aBF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aCF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set aDF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add aEF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aFF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aGF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aHF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aIF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aJF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set aKF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add aLF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aMF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aNF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aOF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aPF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aQF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aRF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aSF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aTF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aUF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aVF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aWF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aXF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aYF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aZF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aaF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set abF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add acF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add adF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aeF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add afF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add agF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add ahF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aiF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set ajF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add akF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add alF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add amF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add anF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aoF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add apF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aqF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set arF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aOE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add asF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add atF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add auF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set avF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn set awF -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add axF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add ayF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add azF -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a0G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a1G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a2G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a3G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a4G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a5G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a6G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set a7G -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add a8G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add a9G -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aAG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aBG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aCG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aDG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aEG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn set aFG -> void
    {1 BBs, 13 INSTRs, 2 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|0| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 memb *__unk_type_kind >|0| 0x00000003<, 0
    0x00000005 store *__unk_type_kind >|0| 0x00000004<, __unk_type_kind >|0| 0x00000001<
    0x00000006 var **__unk_type_kind 0x00000000
    0x00000007 load **__unk_type_kind >|0| 0x00000006<
    0x00000008 memb *__unk_type_kind >|0| 0x00000007<, 1
    0x00000009 store *bool >|0| 0x00000008<, bool true
    0x0000000A var *__unk_type_kind 0x00000001
    0x0000000B call aPE "__defer__" (*__unk_type_kind >|0| 0x0000000A<) void
    0x0000000C ret
fn add aGG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aHG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aIG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aJG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn __length__ aKG -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __array__ aLG -> *__unk_type_kind
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 ret *__unk_type_kind >|0| 0x00000003<
fn __defer__ aMG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aKE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aNG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aJE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aOG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aIE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aPG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call auD "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aQG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call a0E "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aRG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aHE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aSG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aGE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aTG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aFE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn __defer__ aUG -> void
    {7 BBs, 39 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000000 u64]
    [0x00000001 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 3
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 eq u64 >|0| 0x00000003<, u64 1
    0x00000005 cbr u64 >|0| 0x00000004<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 var *u64 0x00000001
    0x00000001 store *u64 >|1| 0x00000000<, u64 0
    0x00000002 br |3|
  BASICBLOCK |2|
    0x00000000 ret
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 1
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 load *u64 >|1| 0x00000000<
    0x00000005 ult u64 >|3| 0x00000004<, u64 >|3| 0x00000003<
    0x00000006 cbr u64 >|3| 0x00000005<, |4|, |6|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|4| 0x00000002<
    0x00000004 var *__unk_type_kind 0x00000002
    0x00000005 load *u64 >|1| 0x00000000<
    0x00000006 arracc *__unk_type_kind >|4| 0x00000003<, u64 >|4| 0x00000005<
    0x00000007 store *__unk_type_kind >|4| 0x00000004<, *__unk_type_kind >|4| 0x00000006<
    0x00000008 var **__unk_type_kind 0x00000002
    0x00000009 load **__unk_type_kind >|4| 0x00000008<
    0x0000000A call aEE "__defer__" (*__unk_type_kind >|4| 0x00000009<) void
    0x0000000B br |5|
  BASICBLOCK |5|
    0x00000000 load *u64 >|1| 0x00000000<
    0x00000001 add u64 >|5| 0x00000000<, u64 1
    0x00000002 store *u64 >|1| 0x00000000<, u64 >|5| 0x00000001<
    0x00000003 br |3|
  BASICBLOCK |6|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|6| 0x00000000<
    0x00000002 memb *__unk_type_kind >|6| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|6| 0x00000002<
    0x00000004 free *__unk_type_kind >|6| 0x00000003<
    0x00000005 br |2|
fn add aVG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aWG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aXG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aYG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aZG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aaG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add abG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add acG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add adG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aeG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add afG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add agG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add ahG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aiG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add ajG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add akG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add alG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add amG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add anG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add aoG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn add apG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
fn __defer__ aqG -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __length__ arG -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __length__ asG -> u64
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 1
    0x00000003 load *u64 >|0| 0x00000002<
    0x00000004 ret u64 >|0| 0x00000003<
fn __defer__ atG -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ auG -> void
    {1 BBs, 1 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 ret
fn __defer__ avG -> void
    {1 BBs, 5 INSTRs, 1 VARs}
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 call atG "__defer__" (*__unk_type_kind >|0| 0x00000002<) void
    0x00000004 ret
fn add awG -> void
    {8 BBs, 107 INSTRs, 3 VARs}
    [0x00000000 *__unk_type_kind]
    [0x00000001 __unk_type_kind]
    [0x00000000 *__unk_type_kind]
  BASICBLOCK |0|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|0| 0x00000000<
    0x00000002 memb *__unk_type_kind >|0| 0x00000001<, 0
    0x00000003 load **__unk_type_kind >|0| 0x00000002<
    0x00000004 bc null to *__unk_type_kind
    0x00000005 eq *__unk_type_kind >|0| 0x00000003<, *__unk_type_kind >|0| 0x00000004<
    0x00000006 cbr *__unk_type_kind >|0| 0x00000005<, |1|, |2|
  BASICBLOCK |1|
    0x00000000 malloc __unk_type_kind * s32 4
    0x00000001 var **__unk_type_kind 0x00000000
    0x00000002 load **__unk_type_kind >|1| 0x00000001<
    0x00000003 memb *__unk_type_kind >|1| 0x00000002<, 0
    0x00000004 store **__unk_type_kind >|1| 0x00000003<, *__unk_type_kind >|1| 0x00000000<
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|1| 0x00000005<
    0x00000007 memb *__unk_type_kind >|1| 0x00000006<, 1
    0x00000008 zext s32 0 to u64
    0x00000009 store *u64 >|1| 0x00000007<, u64 >|1| 0x00000008<
    0x0000000A var **__unk_type_kind 0x00000000
    0x0000000B load **__unk_type_kind >|1| 0x0000000A<
    0x0000000C memb *__unk_type_kind >|1| 0x0000000B<, 2
    0x0000000D zext s32 4 to u64
    0x0000000E store *u64 >|1| 0x0000000C<, u64 >|1| 0x0000000D<
    0x0000000F var **__unk_type_kind 0x00000000
    0x00000010 load **__unk_type_kind >|1| 0x0000000F<
    0x00000011 memb *__unk_type_kind >|1| 0x00000010<, 3
    0x00000012 store *u64 >|1| 0x00000011<, u64 1
    0x00000013 br |3|
  BASICBLOCK |2|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|2| 0x00000000<
    0x00000002 memb *__unk_type_kind >|2| 0x00000001<, 1
    0x00000003 load *u64 >|2| 0x00000002<
    0x00000004 var **__unk_type_kind 0x00000000
    0x00000005 load **__unk_type_kind >|2| 0x00000004<
    0x00000006 memb *__unk_type_kind >|2| 0x00000005<, 2
    0x00000007 load *u64 >|2| 0x00000006<
    0x00000008 eq u64 >|2| 0x00000003<, u64 >|2| 0x00000007<
    0x00000009 cbr u64 >|2| 0x00000008<, |4|, |5|
  BASICBLOCK |3|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|3| 0x00000000<
    0x00000002 memb *__unk_type_kind >|3| 0x00000001<, 3
    0x00000003 load *u64 >|3| 0x00000002<
    0x00000004 neq u64 >|3| 0x00000003<, u64 1
    0x00000005 cbr u64 >|3| 0x00000004<, |6|, |7|
  BASICBLOCK |4|
    0x00000000 var **__unk_type_kind 0x00000000
    0x00000001 load **__unk_type_kind >|4| 0x00000000<
    0x00000002 memb *__unk_type_kind >|4| 0x00000001<, 2
    0x00000003 zext s32 2 to u64
    0x00000004 load *u64 >|4| 0x00000002<
    0x00000005 mul u64 >|4| 0x00000004<, u64 >|4| 0x00000003<
    0x00000006 store *u64 >|4| 0x00000002<, u64 >|4| 0x00000005<
    0x00000007 var **__unk_type_kind 0x00000000
    0x00000008 load **__unk_type_kind >|4| 0x00000007<
    0x00000009 memb *__unk_type_kind >|4| 0x00000008<, 2
    0x0000000A load *u64 >|4| 0x00000009<
    0x0000000B malloc __unk_type_kind * u64 >|4| 0x0000000A<
    0x0000000C var **__unk_type_kind 0x00000002
    0x0000000D store **__unk_type_kind >|4| 0x0000000C<, *__unk_type_kind >|4| 0x0000000B<
    0x0000000E var **__unk_type_kind 0x00000002
    0x0000000F load **__unk_type_kind >|4| 0x0000000E<
    0x00000010 var **__unk_type_kind 0x00000000
    0x00000011 load **__unk_type_kind >|4| 0x00000010<
    0x00000012 memb *__unk_type_kind >|4| 0x00000011<, 0
    0x00000013 load **__unk_type_kind >|4| 0x00000012<
    0x00000014 sizeof __unk_type_kind
    0x00000015 var **__unk_type_kind 0x00000000
    0x00000016 load **__unk_type_kind >|4| 0x00000015<
    0x00000017 memb *__unk_type_kind >|4| 0x00000016<, 1
    0x00000018 load *u64 >|4| 0x00000017<
    0x00000019 mul u64 >|4| 0x00000014<, u64 >|4| 0x00000018<
    0x0000001A bc *__unk_type_kind >|4| 0x0000000F< to *s8
    0x0000001B bc *__unk_type_kind >|4| 0x00000013< to *s8
    0x0000001C call aL8 "memcpy" (*s8 >|4| 0x0000001A<, *s8 >|4| 0x0000001B<, u64 >|4| 0x00000019<) *s8
    0x0000001D var **__unk_type_kind 0x00000000
    0x0000001E load **__unk_type_kind >|4| 0x0000001D<
    0x0000001F memb *__unk_type_kind >|4| 0x0000001E<, 0
    0x00000020 load **__unk_type_kind >|4| 0x0000001F<
    0x00000021 free *__unk_type_kind >|4| 0x00000020<
    0x00000022 var **__unk_type_kind 0x00000002
    0x00000023 load **__unk_type_kind >|4| 0x00000022<
    0x00000024 var **__unk_type_kind 0x00000000
    0x00000025 load **__unk_type_kind >|4| 0x00000024<
    0x00000026 memb *__unk_type_kind >|4| 0x00000025<, 0
    0x00000027 store **__unk_type_kind >|4| 0x00000026<, *__unk_type_kind >|4| 0x00000023<
    0x00000028 br |5|
  BASICBLOCK |5|
    0x00000000 br |3|
  BASICBLOCK |6|
    0x00000000 call aF8 "printf" (cstroflen 50 "<$T> List Error: can't add to list via reference
") s32
    0x00000001 ret
  BASICBLOCK |7|
    0x00000000 var *__unk_type_kind 0x00000001
    0x00000001 load *__unk_type_kind >|7| 0x00000000<
    0x00000002 var **__unk_type_kind 0x00000000
    0x00000003 load **__unk_type_kind >|7| 0x00000002<
    0x00000004 memb *__unk_type_kind >|7| 0x00000003<, 0
    0x00000005 var **__unk_type_kind 0x00000000
    0x00000006 load **__unk_type_kind >|7| 0x00000005<
    0x00000007 memb *__unk_type_kind >|7| 0x00000006<, 1
    0x00000008 load *u64 >|7| 0x00000007<
    0x00000009 load **__unk_type_kind >|7| 0x00000004<
    0x0000000A arracc *__unk_type_kind >|7| 0x00000009<, u64 >|7| 0x00000008<
    0x0000000B store *__unk_type_kind >|7| 0x0000000A<, __unk_type_kind >|7| 0x00000001<
    0x0000000C var **__unk_type_kind 0x00000000
    0x0000000D load **__unk_type_kind >|7| 0x0000000C<
    0x0000000E memb *__unk_type_kind >|7| 0x0000000D<, 1
    0x0000000F zext s32 1 to u64
    0x00000010 load *u64 >|7| 0x0000000E<
    0x00000011 add u64 >|7| 0x00000010<, u64 >|7| 0x0000000F<
    0x00000012 store *u64 >|7| 0x0000000E<, u64 >|7| 0x00000011<
    0x00000013 ret
