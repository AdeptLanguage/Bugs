
pragma compiler_version '2.3'
import '2.3/basics.adept'
import '2.3/List.adept'
import '2.3/Array.adept'

func main {
    array1 <int> Array = array(static int {0, 9, 10, 19, 20, 29}, 6)         // false
    array2 <int> Array = array(static int {30, 39, 10, 19, 20, 29, 0, 9}, 8) // false
    array3 <int> Array = array(static int {0, 10, 10, 19, 20, 29}, 6)        // true
    array4 <int> Array = array(static int {0, 10, 5, 10}, 4)                 // true
    array5 <int> Array = array(static int {0, 10}, 2)                        // false
    
    arrays <<int> Array> List
    array *<int> Array = &array1
    repeat 5 {
        printf('%p\n', array.length)
        arrays.add(*array)
        array -= sizeof <int> Array as ptr
    }
    
    printf('\n')
    
    each a <int> Array in arrays {
        print("%" % (overlap(a) as int))
        //print("overlap(array%) = %" % (idx + 1) as int % (overlap(it) ? "true" : "false"))
    }
    
    printf('%d\n', arrays.length as int)
}

// -------------------------------- SOLVED --------------------------------
// PROBLEM: __pass__ function is needed for 'overlap(a)' call to not break the program
//func __pass__(array POD <int> Array) <int> Array {
//    return array
//}
// -------------------------------- SOLVED --------------------------------

func overlap(array <int> Array) bool {
    return true
}
